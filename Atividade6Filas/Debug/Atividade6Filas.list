
Atividade6Filas.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a458  08000200  08000200  00001200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000150  0800a658  0800a658  0000b658  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a7a8  0800a7a8  0000c1ac  2**0
                  CONTENTS
  4 .ARM          00000008  0800a7a8  0800a7a8  0000b7a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a7b0  0800a7b0  0000c1ac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a7b0  0800a7b0  0000b7b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800a7b4  0800a7b4  0000b7b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000006c  20000000  0800a7b8  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  2000006c  0800a824  0000c06c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  2000010c  0800a8c4  0000c10c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          000052b4  200001ac  0800a964  0000c1ac  2**2
                  ALLOC
 12 ._user_heap_stack 00000600  20005460  0800a964  0000c460  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  0000c1ac  2**0
                  CONTENTS, READONLY
 14 .debug_info   00024b9f  00000000  00000000  0000c1da  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 0000495d  00000000  00000000  00030d79  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001ca8  00000000  00000000  000356d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 0000164b  00000000  00000000  00037380  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00005b51  00000000  00000000  000389cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   000227f0  00000000  00000000  0003e51c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    00115670  00000000  00000000  00060d0c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000043  00000000  00000000  0017637c  2**0
                  CONTENTS, READONLY
 22 .debug_frame  000081a4  00000000  00000000  001763c0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000057  00000000  00000000  0017e564  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	@ (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	@ (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	@ (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	200001ac 	.word	0x200001ac
 800021c:	00000000 	.word	0x00000000
 8000220:	0800a640 	.word	0x0800a640

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	@ (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	@ (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	@ (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200001b0 	.word	0x200001b0
 800023c:	0800a640 	.word	0x0800a640

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295
 80002f4:	f000 b96a 	b.w	80005cc <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9d08      	ldr	r5, [sp, #32]
 8000316:	460c      	mov	r4, r1
 8000318:	2b00      	cmp	r3, #0
 800031a:	d14e      	bne.n	80003ba <__udivmoddi4+0xaa>
 800031c:	4694      	mov	ip, r2
 800031e:	458c      	cmp	ip, r1
 8000320:	4686      	mov	lr, r0
 8000322:	fab2 f282 	clz	r2, r2
 8000326:	d962      	bls.n	80003ee <__udivmoddi4+0xde>
 8000328:	b14a      	cbz	r2, 800033e <__udivmoddi4+0x2e>
 800032a:	f1c2 0320 	rsb	r3, r2, #32
 800032e:	4091      	lsls	r1, r2
 8000330:	fa20 f303 	lsr.w	r3, r0, r3
 8000334:	fa0c fc02 	lsl.w	ip, ip, r2
 8000338:	4319      	orrs	r1, r3
 800033a:	fa00 fe02 	lsl.w	lr, r0, r2
 800033e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000342:	fa1f f68c 	uxth.w	r6, ip
 8000346:	fbb1 f4f7 	udiv	r4, r1, r7
 800034a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800034e:	fb07 1114 	mls	r1, r7, r4, r1
 8000352:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000356:	fb04 f106 	mul.w	r1, r4, r6
 800035a:	4299      	cmp	r1, r3
 800035c:	d90a      	bls.n	8000374 <__udivmoddi4+0x64>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f104 30ff 	add.w	r0, r4, #4294967295
 8000366:	f080 8112 	bcs.w	800058e <__udivmoddi4+0x27e>
 800036a:	4299      	cmp	r1, r3
 800036c:	f240 810f 	bls.w	800058e <__udivmoddi4+0x27e>
 8000370:	3c02      	subs	r4, #2
 8000372:	4463      	add	r3, ip
 8000374:	1a59      	subs	r1, r3, r1
 8000376:	fa1f f38e 	uxth.w	r3, lr
 800037a:	fbb1 f0f7 	udiv	r0, r1, r7
 800037e:	fb07 1110 	mls	r1, r7, r0, r1
 8000382:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000386:	fb00 f606 	mul.w	r6, r0, r6
 800038a:	429e      	cmp	r6, r3
 800038c:	d90a      	bls.n	80003a4 <__udivmoddi4+0x94>
 800038e:	eb1c 0303 	adds.w	r3, ip, r3
 8000392:	f100 31ff 	add.w	r1, r0, #4294967295
 8000396:	f080 80fc 	bcs.w	8000592 <__udivmoddi4+0x282>
 800039a:	429e      	cmp	r6, r3
 800039c:	f240 80f9 	bls.w	8000592 <__udivmoddi4+0x282>
 80003a0:	4463      	add	r3, ip
 80003a2:	3802      	subs	r0, #2
 80003a4:	1b9b      	subs	r3, r3, r6
 80003a6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80003aa:	2100      	movs	r1, #0
 80003ac:	b11d      	cbz	r5, 80003b6 <__udivmoddi4+0xa6>
 80003ae:	40d3      	lsrs	r3, r2
 80003b0:	2200      	movs	r2, #0
 80003b2:	e9c5 3200 	strd	r3, r2, [r5]
 80003b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d905      	bls.n	80003ca <__udivmoddi4+0xba>
 80003be:	b10d      	cbz	r5, 80003c4 <__udivmoddi4+0xb4>
 80003c0:	e9c5 0100 	strd	r0, r1, [r5]
 80003c4:	2100      	movs	r1, #0
 80003c6:	4608      	mov	r0, r1
 80003c8:	e7f5      	b.n	80003b6 <__udivmoddi4+0xa6>
 80003ca:	fab3 f183 	clz	r1, r3
 80003ce:	2900      	cmp	r1, #0
 80003d0:	d146      	bne.n	8000460 <__udivmoddi4+0x150>
 80003d2:	42a3      	cmp	r3, r4
 80003d4:	d302      	bcc.n	80003dc <__udivmoddi4+0xcc>
 80003d6:	4290      	cmp	r0, r2
 80003d8:	f0c0 80f0 	bcc.w	80005bc <__udivmoddi4+0x2ac>
 80003dc:	1a86      	subs	r6, r0, r2
 80003de:	eb64 0303 	sbc.w	r3, r4, r3
 80003e2:	2001      	movs	r0, #1
 80003e4:	2d00      	cmp	r5, #0
 80003e6:	d0e6      	beq.n	80003b6 <__udivmoddi4+0xa6>
 80003e8:	e9c5 6300 	strd	r6, r3, [r5]
 80003ec:	e7e3      	b.n	80003b6 <__udivmoddi4+0xa6>
 80003ee:	2a00      	cmp	r2, #0
 80003f0:	f040 8090 	bne.w	8000514 <__udivmoddi4+0x204>
 80003f4:	eba1 040c 	sub.w	r4, r1, ip
 80003f8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003fc:	fa1f f78c 	uxth.w	r7, ip
 8000400:	2101      	movs	r1, #1
 8000402:	fbb4 f6f8 	udiv	r6, r4, r8
 8000406:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800040a:	fb08 4416 	mls	r4, r8, r6, r4
 800040e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000412:	fb07 f006 	mul.w	r0, r7, r6
 8000416:	4298      	cmp	r0, r3
 8000418:	d908      	bls.n	800042c <__udivmoddi4+0x11c>
 800041a:	eb1c 0303 	adds.w	r3, ip, r3
 800041e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x11a>
 8000424:	4298      	cmp	r0, r3
 8000426:	f200 80cd 	bhi.w	80005c4 <__udivmoddi4+0x2b4>
 800042a:	4626      	mov	r6, r4
 800042c:	1a1c      	subs	r4, r3, r0
 800042e:	fa1f f38e 	uxth.w	r3, lr
 8000432:	fbb4 f0f8 	udiv	r0, r4, r8
 8000436:	fb08 4410 	mls	r4, r8, r0, r4
 800043a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800043e:	fb00 f707 	mul.w	r7, r0, r7
 8000442:	429f      	cmp	r7, r3
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x148>
 8000446:	eb1c 0303 	adds.w	r3, ip, r3
 800044a:	f100 34ff 	add.w	r4, r0, #4294967295
 800044e:	d202      	bcs.n	8000456 <__udivmoddi4+0x146>
 8000450:	429f      	cmp	r7, r3
 8000452:	f200 80b0 	bhi.w	80005b6 <__udivmoddi4+0x2a6>
 8000456:	4620      	mov	r0, r4
 8000458:	1bdb      	subs	r3, r3, r7
 800045a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800045e:	e7a5      	b.n	80003ac <__udivmoddi4+0x9c>
 8000460:	f1c1 0620 	rsb	r6, r1, #32
 8000464:	408b      	lsls	r3, r1
 8000466:	fa22 f706 	lsr.w	r7, r2, r6
 800046a:	431f      	orrs	r7, r3
 800046c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000470:	fa04 f301 	lsl.w	r3, r4, r1
 8000474:	ea43 030c 	orr.w	r3, r3, ip
 8000478:	40f4      	lsrs	r4, r6
 800047a:	fa00 f801 	lsl.w	r8, r0, r1
 800047e:	0c38      	lsrs	r0, r7, #16
 8000480:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000484:	fbb4 fef0 	udiv	lr, r4, r0
 8000488:	fa1f fc87 	uxth.w	ip, r7
 800048c:	fb00 441e 	mls	r4, r0, lr, r4
 8000490:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000494:	fb0e f90c 	mul.w	r9, lr, ip
 8000498:	45a1      	cmp	r9, r4
 800049a:	fa02 f201 	lsl.w	r2, r2, r1
 800049e:	d90a      	bls.n	80004b6 <__udivmoddi4+0x1a6>
 80004a0:	193c      	adds	r4, r7, r4
 80004a2:	f10e 3aff 	add.w	sl, lr, #4294967295
 80004a6:	f080 8084 	bcs.w	80005b2 <__udivmoddi4+0x2a2>
 80004aa:	45a1      	cmp	r9, r4
 80004ac:	f240 8081 	bls.w	80005b2 <__udivmoddi4+0x2a2>
 80004b0:	f1ae 0e02 	sub.w	lr, lr, #2
 80004b4:	443c      	add	r4, r7
 80004b6:	eba4 0409 	sub.w	r4, r4, r9
 80004ba:	fa1f f983 	uxth.w	r9, r3
 80004be:	fbb4 f3f0 	udiv	r3, r4, r0
 80004c2:	fb00 4413 	mls	r4, r0, r3, r4
 80004c6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004ca:	fb03 fc0c 	mul.w	ip, r3, ip
 80004ce:	45a4      	cmp	ip, r4
 80004d0:	d907      	bls.n	80004e2 <__udivmoddi4+0x1d2>
 80004d2:	193c      	adds	r4, r7, r4
 80004d4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004d8:	d267      	bcs.n	80005aa <__udivmoddi4+0x29a>
 80004da:	45a4      	cmp	ip, r4
 80004dc:	d965      	bls.n	80005aa <__udivmoddi4+0x29a>
 80004de:	3b02      	subs	r3, #2
 80004e0:	443c      	add	r4, r7
 80004e2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004e6:	fba0 9302 	umull	r9, r3, r0, r2
 80004ea:	eba4 040c 	sub.w	r4, r4, ip
 80004ee:	429c      	cmp	r4, r3
 80004f0:	46ce      	mov	lr, r9
 80004f2:	469c      	mov	ip, r3
 80004f4:	d351      	bcc.n	800059a <__udivmoddi4+0x28a>
 80004f6:	d04e      	beq.n	8000596 <__udivmoddi4+0x286>
 80004f8:	b155      	cbz	r5, 8000510 <__udivmoddi4+0x200>
 80004fa:	ebb8 030e 	subs.w	r3, r8, lr
 80004fe:	eb64 040c 	sbc.w	r4, r4, ip
 8000502:	fa04 f606 	lsl.w	r6, r4, r6
 8000506:	40cb      	lsrs	r3, r1
 8000508:	431e      	orrs	r6, r3
 800050a:	40cc      	lsrs	r4, r1
 800050c:	e9c5 6400 	strd	r6, r4, [r5]
 8000510:	2100      	movs	r1, #0
 8000512:	e750      	b.n	80003b6 <__udivmoddi4+0xa6>
 8000514:	f1c2 0320 	rsb	r3, r2, #32
 8000518:	fa20 f103 	lsr.w	r1, r0, r3
 800051c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000520:	fa24 f303 	lsr.w	r3, r4, r3
 8000524:	4094      	lsls	r4, r2
 8000526:	430c      	orrs	r4, r1
 8000528:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800052c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000530:	fa1f f78c 	uxth.w	r7, ip
 8000534:	fbb3 f0f8 	udiv	r0, r3, r8
 8000538:	fb08 3110 	mls	r1, r8, r0, r3
 800053c:	0c23      	lsrs	r3, r4, #16
 800053e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000542:	fb00 f107 	mul.w	r1, r0, r7
 8000546:	4299      	cmp	r1, r3
 8000548:	d908      	bls.n	800055c <__udivmoddi4+0x24c>
 800054a:	eb1c 0303 	adds.w	r3, ip, r3
 800054e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000552:	d22c      	bcs.n	80005ae <__udivmoddi4+0x29e>
 8000554:	4299      	cmp	r1, r3
 8000556:	d92a      	bls.n	80005ae <__udivmoddi4+0x29e>
 8000558:	3802      	subs	r0, #2
 800055a:	4463      	add	r3, ip
 800055c:	1a5b      	subs	r3, r3, r1
 800055e:	b2a4      	uxth	r4, r4
 8000560:	fbb3 f1f8 	udiv	r1, r3, r8
 8000564:	fb08 3311 	mls	r3, r8, r1, r3
 8000568:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800056c:	fb01 f307 	mul.w	r3, r1, r7
 8000570:	42a3      	cmp	r3, r4
 8000572:	d908      	bls.n	8000586 <__udivmoddi4+0x276>
 8000574:	eb1c 0404 	adds.w	r4, ip, r4
 8000578:	f101 36ff 	add.w	r6, r1, #4294967295
 800057c:	d213      	bcs.n	80005a6 <__udivmoddi4+0x296>
 800057e:	42a3      	cmp	r3, r4
 8000580:	d911      	bls.n	80005a6 <__udivmoddi4+0x296>
 8000582:	3902      	subs	r1, #2
 8000584:	4464      	add	r4, ip
 8000586:	1ae4      	subs	r4, r4, r3
 8000588:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800058c:	e739      	b.n	8000402 <__udivmoddi4+0xf2>
 800058e:	4604      	mov	r4, r0
 8000590:	e6f0      	b.n	8000374 <__udivmoddi4+0x64>
 8000592:	4608      	mov	r0, r1
 8000594:	e706      	b.n	80003a4 <__udivmoddi4+0x94>
 8000596:	45c8      	cmp	r8, r9
 8000598:	d2ae      	bcs.n	80004f8 <__udivmoddi4+0x1e8>
 800059a:	ebb9 0e02 	subs.w	lr, r9, r2
 800059e:	eb63 0c07 	sbc.w	ip, r3, r7
 80005a2:	3801      	subs	r0, #1
 80005a4:	e7a8      	b.n	80004f8 <__udivmoddi4+0x1e8>
 80005a6:	4631      	mov	r1, r6
 80005a8:	e7ed      	b.n	8000586 <__udivmoddi4+0x276>
 80005aa:	4603      	mov	r3, r0
 80005ac:	e799      	b.n	80004e2 <__udivmoddi4+0x1d2>
 80005ae:	4630      	mov	r0, r6
 80005b0:	e7d4      	b.n	800055c <__udivmoddi4+0x24c>
 80005b2:	46d6      	mov	lr, sl
 80005b4:	e77f      	b.n	80004b6 <__udivmoddi4+0x1a6>
 80005b6:	4463      	add	r3, ip
 80005b8:	3802      	subs	r0, #2
 80005ba:	e74d      	b.n	8000458 <__udivmoddi4+0x148>
 80005bc:	4606      	mov	r6, r0
 80005be:	4623      	mov	r3, r4
 80005c0:	4608      	mov	r0, r1
 80005c2:	e70f      	b.n	80003e4 <__udivmoddi4+0xd4>
 80005c4:	3e02      	subs	r6, #2
 80005c6:	4463      	add	r3, ip
 80005c8:	e730      	b.n	800042c <__udivmoddi4+0x11c>
 80005ca:	bf00      	nop

080005cc <__aeabi_idiv0>:
 80005cc:	4770      	bx	lr
 80005ce:	bf00      	nop

080005d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005d4:	f000 ffa3 	bl	800151e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005d8:	f000 f852 	bl	8000680 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005dc:	f000 f9de 	bl	800099c <MX_GPIO_Init>
  MX_DMA_Init();
 80005e0:	f000 f9be 	bl	8000960 <MX_DMA_Init>
  MX_ETH_Init();
 80005e4:	f000 f910 	bl	8000808 <MX_ETH_Init>
  MX_USART3_UART_Init();
 80005e8:	f000 f95c 	bl	80008a4 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80005ec:	f000 f98a 	bl	8000904 <MX_USB_OTG_FS_PCD_Init>
  MX_ADC1_Init();
 80005f0:	f000 f8b8 	bl	8000764 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80005f4:	f005 fae0 	bl	8005bb8 <osKernelInitialize>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of semaforo1 */
  semaforo1Handle = osSemaphoreNew(1, 1, &semaforo1_attributes);
 80005f8:	4a15      	ldr	r2, [pc, #84]	@ (8000650 <main+0x80>)
 80005fa:	2101      	movs	r1, #1
 80005fc:	2001      	movs	r0, #1
 80005fe:	f005 fc19 	bl	8005e34 <osSemaphoreNew>
 8000602:	4603      	mov	r3, r0
 8000604:	4a13      	ldr	r2, [pc, #76]	@ (8000654 <main+0x84>)
 8000606:	6013      	str	r3, [r2, #0]

  /* creation of semaforoButtom */
  semaforoButtomHandle = osSemaphoreNew(1, 1, &semaforoButtom_attributes);
 8000608:	4a13      	ldr	r2, [pc, #76]	@ (8000658 <main+0x88>)
 800060a:	2101      	movs	r1, #1
 800060c:	2001      	movs	r0, #1
 800060e:	f005 fc11 	bl	8005e34 <osSemaphoreNew>
 8000612:	4603      	mov	r3, r0
 8000614:	4a11      	ldr	r2, [pc, #68]	@ (800065c <main+0x8c>)
 8000616:	6013      	str	r3, [r2, #0]
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of Queue01 */
  Queue01Handle = osMessageQueueNew (32, sizeof(uint16_t), &Queue01_attributes);
 8000618:	4a11      	ldr	r2, [pc, #68]	@ (8000660 <main+0x90>)
 800061a:	2102      	movs	r1, #2
 800061c:	2020      	movs	r0, #32
 800061e:	f005 fd63 	bl	80060e8 <osMessageQueueNew>
 8000622:	4603      	mov	r3, r0
 8000624:	4a0f      	ldr	r2, [pc, #60]	@ (8000664 <main+0x94>)
 8000626:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of comsumerTask */
  comsumerTaskHandle = osThreadNew(StartComsumerTask, NULL, &comsumerTask_attributes);
 8000628:	4a0f      	ldr	r2, [pc, #60]	@ (8000668 <main+0x98>)
 800062a:	2100      	movs	r1, #0
 800062c:	480f      	ldr	r0, [pc, #60]	@ (800066c <main+0x9c>)
 800062e:	f005 fb2d 	bl	8005c8c <osThreadNew>
 8000632:	4603      	mov	r3, r0
 8000634:	4a0e      	ldr	r2, [pc, #56]	@ (8000670 <main+0xa0>)
 8000636:	6013      	str	r3, [r2, #0]

  /* creation of producerTask */
  producerTaskHandle = osThreadNew(StartProducerTask, NULL, &producerTask_attributes);
 8000638:	4a0e      	ldr	r2, [pc, #56]	@ (8000674 <main+0xa4>)
 800063a:	2100      	movs	r1, #0
 800063c:	480e      	ldr	r0, [pc, #56]	@ (8000678 <main+0xa8>)
 800063e:	f005 fb25 	bl	8005c8c <osThreadNew>
 8000642:	4603      	mov	r3, r0
 8000644:	4a0d      	ldr	r2, [pc, #52]	@ (800067c <main+0xac>)
 8000646:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000648:	f005 faea 	bl	8005c20 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800064c:	bf00      	nop
 800064e:	e7fd      	b.n	800064c <main+0x7c>
 8000650:	0800a734 	.word	0x0800a734
 8000654:	200008cc 	.word	0x200008cc
 8000658:	0800a744 	.word	0x0800a744
 800065c:	200008d0 	.word	0x200008d0
 8000660:	0800a71c 	.word	0x0800a71c
 8000664:	200008c8 	.word	0x200008c8
 8000668:	0800a6d4 	.word	0x0800a6d4
 800066c:	08000b55 	.word	0x08000b55
 8000670:	200008c0 	.word	0x200008c0
 8000674:	0800a6f8 	.word	0x0800a6f8
 8000678:	08000cc1 	.word	0x08000cc1
 800067c:	200008c4 	.word	0x200008c4

08000680 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	b094      	sub	sp, #80	@ 0x50
 8000684:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000686:	f107 031c 	add.w	r3, r7, #28
 800068a:	2234      	movs	r2, #52	@ 0x34
 800068c:	2100      	movs	r1, #0
 800068e:	4618      	mov	r0, r3
 8000690:	f009 f9ee 	bl	8009a70 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000694:	f107 0308 	add.w	r3, r7, #8
 8000698:	2200      	movs	r2, #0
 800069a:	601a      	str	r2, [r3, #0]
 800069c:	605a      	str	r2, [r3, #4]
 800069e:	609a      	str	r2, [r3, #8]
 80006a0:	60da      	str	r2, [r3, #12]
 80006a2:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80006a4:	f002 fdd6 	bl	8003254 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006a8:	4b2c      	ldr	r3, [pc, #176]	@ (800075c <SystemClock_Config+0xdc>)
 80006aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006ac:	4a2b      	ldr	r2, [pc, #172]	@ (800075c <SystemClock_Config+0xdc>)
 80006ae:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80006b2:	6413      	str	r3, [r2, #64]	@ 0x40
 80006b4:	4b29      	ldr	r3, [pc, #164]	@ (800075c <SystemClock_Config+0xdc>)
 80006b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006b8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80006bc:	607b      	str	r3, [r7, #4]
 80006be:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80006c0:	4b27      	ldr	r3, [pc, #156]	@ (8000760 <SystemClock_Config+0xe0>)
 80006c2:	681b      	ldr	r3, [r3, #0]
 80006c4:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80006c8:	4a25      	ldr	r2, [pc, #148]	@ (8000760 <SystemClock_Config+0xe0>)
 80006ca:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80006ce:	6013      	str	r3, [r2, #0]
 80006d0:	4b23      	ldr	r3, [pc, #140]	@ (8000760 <SystemClock_Config+0xe0>)
 80006d2:	681b      	ldr	r3, [r3, #0]
 80006d4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80006d8:	603b      	str	r3, [r7, #0]
 80006da:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80006dc:	2301      	movs	r3, #1
 80006de:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80006e0:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 80006e4:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006e6:	2302      	movs	r3, #2
 80006e8:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006ea:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80006ee:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 80006f0:	2304      	movs	r3, #4
 80006f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 96;
 80006f4:	2360      	movs	r3, #96	@ 0x60
 80006f6:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006f8:	2302      	movs	r3, #2
 80006fa:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80006fc:	2304      	movs	r3, #4
 80006fe:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000700:	2302      	movs	r3, #2
 8000702:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000704:	f107 031c 	add.w	r3, r7, #28
 8000708:	4618      	mov	r0, r3
 800070a:	f002 fe03 	bl	8003314 <HAL_RCC_OscConfig>
 800070e:	4603      	mov	r3, r0
 8000710:	2b00      	cmp	r3, #0
 8000712:	d001      	beq.n	8000718 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000714:	f000 fb40 	bl	8000d98 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000718:	f002 fdac 	bl	8003274 <HAL_PWREx_EnableOverDrive>
 800071c:	4603      	mov	r3, r0
 800071e:	2b00      	cmp	r3, #0
 8000720:	d001      	beq.n	8000726 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000722:	f000 fb39 	bl	8000d98 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000726:	230f      	movs	r3, #15
 8000728:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800072a:	2302      	movs	r3, #2
 800072c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800072e:	2300      	movs	r3, #0
 8000730:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000732:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000736:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000738:	2300      	movs	r3, #0
 800073a:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800073c:	f107 0308 	add.w	r3, r7, #8
 8000740:	2103      	movs	r1, #3
 8000742:	4618      	mov	r0, r3
 8000744:	f003 f894 	bl	8003870 <HAL_RCC_ClockConfig>
 8000748:	4603      	mov	r3, r0
 800074a:	2b00      	cmp	r3, #0
 800074c:	d001      	beq.n	8000752 <SystemClock_Config+0xd2>
  {
    Error_Handler();
 800074e:	f000 fb23 	bl	8000d98 <Error_Handler>
  }
}
 8000752:	bf00      	nop
 8000754:	3750      	adds	r7, #80	@ 0x50
 8000756:	46bd      	mov	sp, r7
 8000758:	bd80      	pop	{r7, pc}
 800075a:	bf00      	nop
 800075c:	40023800 	.word	0x40023800
 8000760:	40007000 	.word	0x40007000

08000764 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	b084      	sub	sp, #16
 8000768:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800076a:	463b      	mov	r3, r7
 800076c:	2200      	movs	r2, #0
 800076e:	601a      	str	r2, [r3, #0]
 8000770:	605a      	str	r2, [r3, #4]
 8000772:	609a      	str	r2, [r3, #8]
 8000774:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000776:	4b21      	ldr	r3, [pc, #132]	@ (80007fc <MX_ADC1_Init+0x98>)
 8000778:	4a21      	ldr	r2, [pc, #132]	@ (8000800 <MX_ADC1_Init+0x9c>)
 800077a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800077c:	4b1f      	ldr	r3, [pc, #124]	@ (80007fc <MX_ADC1_Init+0x98>)
 800077e:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000782:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000784:	4b1d      	ldr	r3, [pc, #116]	@ (80007fc <MX_ADC1_Init+0x98>)
 8000786:	2200      	movs	r2, #0
 8000788:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800078a:	4b1c      	ldr	r3, [pc, #112]	@ (80007fc <MX_ADC1_Init+0x98>)
 800078c:	2200      	movs	r2, #0
 800078e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000790:	4b1a      	ldr	r3, [pc, #104]	@ (80007fc <MX_ADC1_Init+0x98>)
 8000792:	2200      	movs	r2, #0
 8000794:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000796:	4b19      	ldr	r3, [pc, #100]	@ (80007fc <MX_ADC1_Init+0x98>)
 8000798:	2200      	movs	r2, #0
 800079a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800079e:	4b17      	ldr	r3, [pc, #92]	@ (80007fc <MX_ADC1_Init+0x98>)
 80007a0:	2200      	movs	r2, #0
 80007a2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80007a4:	4b15      	ldr	r3, [pc, #84]	@ (80007fc <MX_ADC1_Init+0x98>)
 80007a6:	4a17      	ldr	r2, [pc, #92]	@ (8000804 <MX_ADC1_Init+0xa0>)
 80007a8:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80007aa:	4b14      	ldr	r3, [pc, #80]	@ (80007fc <MX_ADC1_Init+0x98>)
 80007ac:	2200      	movs	r2, #0
 80007ae:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80007b0:	4b12      	ldr	r3, [pc, #72]	@ (80007fc <MX_ADC1_Init+0x98>)
 80007b2:	2201      	movs	r2, #1
 80007b4:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80007b6:	4b11      	ldr	r3, [pc, #68]	@ (80007fc <MX_ADC1_Init+0x98>)
 80007b8:	2200      	movs	r2, #0
 80007ba:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80007be:	4b0f      	ldr	r3, [pc, #60]	@ (80007fc <MX_ADC1_Init+0x98>)
 80007c0:	2201      	movs	r2, #1
 80007c2:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80007c4:	480d      	ldr	r0, [pc, #52]	@ (80007fc <MX_ADC1_Init+0x98>)
 80007c6:	f000 fefb 	bl	80015c0 <HAL_ADC_Init>
 80007ca:	4603      	mov	r3, r0
 80007cc:	2b00      	cmp	r3, #0
 80007ce:	d001      	beq.n	80007d4 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80007d0:	f000 fae2 	bl	8000d98 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80007d4:	2300      	movs	r3, #0
 80007d6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80007d8:	2301      	movs	r3, #1
 80007da:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80007dc:	2300      	movs	r3, #0
 80007de:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007e0:	463b      	mov	r3, r7
 80007e2:	4619      	mov	r1, r3
 80007e4:	4805      	ldr	r0, [pc, #20]	@ (80007fc <MX_ADC1_Init+0x98>)
 80007e6:	f001 f895 	bl	8001914 <HAL_ADC_ConfigChannel>
 80007ea:	4603      	mov	r3, r0
 80007ec:	2b00      	cmp	r3, #0
 80007ee:	d001      	beq.n	80007f4 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80007f0:	f000 fad2 	bl	8000d98 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80007f4:	bf00      	nop
 80007f6:	3710      	adds	r7, #16
 80007f8:	46bd      	mov	sp, r7
 80007fa:	bd80      	pop	{r7, pc}
 80007fc:	20000200 	.word	0x20000200
 8000800:	40012000 	.word	0x40012000
 8000804:	0f000001 	.word	0x0f000001

08000808 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 800080c:	4b1f      	ldr	r3, [pc, #124]	@ (800088c <MX_ETH_Init+0x84>)
 800080e:	4a20      	ldr	r2, [pc, #128]	@ (8000890 <MX_ETH_Init+0x88>)
 8000810:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8000812:	4b20      	ldr	r3, [pc, #128]	@ (8000894 <MX_ETH_Init+0x8c>)
 8000814:	2200      	movs	r2, #0
 8000816:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8000818:	4b1e      	ldr	r3, [pc, #120]	@ (8000894 <MX_ETH_Init+0x8c>)
 800081a:	2280      	movs	r2, #128	@ 0x80
 800081c:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 800081e:	4b1d      	ldr	r3, [pc, #116]	@ (8000894 <MX_ETH_Init+0x8c>)
 8000820:	22e1      	movs	r2, #225	@ 0xe1
 8000822:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000824:	4b1b      	ldr	r3, [pc, #108]	@ (8000894 <MX_ETH_Init+0x8c>)
 8000826:	2200      	movs	r2, #0
 8000828:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 800082a:	4b1a      	ldr	r3, [pc, #104]	@ (8000894 <MX_ETH_Init+0x8c>)
 800082c:	2200      	movs	r2, #0
 800082e:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8000830:	4b18      	ldr	r3, [pc, #96]	@ (8000894 <MX_ETH_Init+0x8c>)
 8000832:	2200      	movs	r2, #0
 8000834:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8000836:	4b15      	ldr	r3, [pc, #84]	@ (800088c <MX_ETH_Init+0x84>)
 8000838:	4a16      	ldr	r2, [pc, #88]	@ (8000894 <MX_ETH_Init+0x8c>)
 800083a:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 800083c:	4b13      	ldr	r3, [pc, #76]	@ (800088c <MX_ETH_Init+0x84>)
 800083e:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8000842:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000844:	4b11      	ldr	r3, [pc, #68]	@ (800088c <MX_ETH_Init+0x84>)
 8000846:	4a14      	ldr	r2, [pc, #80]	@ (8000898 <MX_ETH_Init+0x90>)
 8000848:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 800084a:	4b10      	ldr	r3, [pc, #64]	@ (800088c <MX_ETH_Init+0x84>)
 800084c:	4a13      	ldr	r2, [pc, #76]	@ (800089c <MX_ETH_Init+0x94>)
 800084e:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8000850:	4b0e      	ldr	r3, [pc, #56]	@ (800088c <MX_ETH_Init+0x84>)
 8000852:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 8000856:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000858:	480c      	ldr	r0, [pc, #48]	@ (800088c <MX_ETH_Init+0x84>)
 800085a:	f001 fe7b 	bl	8002554 <HAL_ETH_Init>
 800085e:	4603      	mov	r3, r0
 8000860:	2b00      	cmp	r3, #0
 8000862:	d001      	beq.n	8000868 <MX_ETH_Init+0x60>
  {
    Error_Handler();
 8000864:	f000 fa98 	bl	8000d98 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000868:	2238      	movs	r2, #56	@ 0x38
 800086a:	2100      	movs	r1, #0
 800086c:	480c      	ldr	r0, [pc, #48]	@ (80008a0 <MX_ETH_Init+0x98>)
 800086e:	f009 f8ff 	bl	8009a70 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000872:	4b0b      	ldr	r3, [pc, #44]	@ (80008a0 <MX_ETH_Init+0x98>)
 8000874:	2221      	movs	r2, #33	@ 0x21
 8000876:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000878:	4b09      	ldr	r3, [pc, #36]	@ (80008a0 <MX_ETH_Init+0x98>)
 800087a:	f44f 0240 	mov.w	r2, #12582912	@ 0xc00000
 800087e:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000880:	4b07      	ldr	r3, [pc, #28]	@ (80008a0 <MX_ETH_Init+0x98>)
 8000882:	2200      	movs	r2, #0
 8000884:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000886:	bf00      	nop
 8000888:	bd80      	pop	{r7, pc}
 800088a:	bf00      	nop
 800088c:	200002a8 	.word	0x200002a8
 8000890:	40028000 	.word	0x40028000
 8000894:	200008d8 	.word	0x200008d8
 8000898:	2000010c 	.word	0x2000010c
 800089c:	2000006c 	.word	0x2000006c
 80008a0:	200001c8 	.word	0x200001c8

080008a4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80008a8:	4b14      	ldr	r3, [pc, #80]	@ (80008fc <MX_USART3_UART_Init+0x58>)
 80008aa:	4a15      	ldr	r2, [pc, #84]	@ (8000900 <MX_USART3_UART_Init+0x5c>)
 80008ac:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80008ae:	4b13      	ldr	r3, [pc, #76]	@ (80008fc <MX_USART3_UART_Init+0x58>)
 80008b0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80008b4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80008b6:	4b11      	ldr	r3, [pc, #68]	@ (80008fc <MX_USART3_UART_Init+0x58>)
 80008b8:	2200      	movs	r2, #0
 80008ba:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80008bc:	4b0f      	ldr	r3, [pc, #60]	@ (80008fc <MX_USART3_UART_Init+0x58>)
 80008be:	2200      	movs	r2, #0
 80008c0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80008c2:	4b0e      	ldr	r3, [pc, #56]	@ (80008fc <MX_USART3_UART_Init+0x58>)
 80008c4:	2200      	movs	r2, #0
 80008c6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80008c8:	4b0c      	ldr	r3, [pc, #48]	@ (80008fc <MX_USART3_UART_Init+0x58>)
 80008ca:	220c      	movs	r2, #12
 80008cc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008ce:	4b0b      	ldr	r3, [pc, #44]	@ (80008fc <MX_USART3_UART_Init+0x58>)
 80008d0:	2200      	movs	r2, #0
 80008d2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80008d4:	4b09      	ldr	r3, [pc, #36]	@ (80008fc <MX_USART3_UART_Init+0x58>)
 80008d6:	2200      	movs	r2, #0
 80008d8:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80008da:	4b08      	ldr	r3, [pc, #32]	@ (80008fc <MX_USART3_UART_Init+0x58>)
 80008dc:	2200      	movs	r2, #0
 80008de:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80008e0:	4b06      	ldr	r3, [pc, #24]	@ (80008fc <MX_USART3_UART_Init+0x58>)
 80008e2:	2200      	movs	r2, #0
 80008e4:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80008e6:	4805      	ldr	r0, [pc, #20]	@ (80008fc <MX_USART3_UART_Init+0x58>)
 80008e8:	f004 f910 	bl	8004b0c <HAL_UART_Init>
 80008ec:	4603      	mov	r3, r0
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	d001      	beq.n	80008f6 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 80008f2:	f000 fa51 	bl	8000d98 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80008f6:	bf00      	nop
 80008f8:	bd80      	pop	{r7, pc}
 80008fa:	bf00      	nop
 80008fc:	20000358 	.word	0x20000358
 8000900:	40004800 	.word	0x40004800

08000904 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000908:	4b14      	ldr	r3, [pc, #80]	@ (800095c <MX_USB_OTG_FS_PCD_Init+0x58>)
 800090a:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800090e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000910:	4b12      	ldr	r3, [pc, #72]	@ (800095c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000912:	2206      	movs	r2, #6
 8000914:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000916:	4b11      	ldr	r3, [pc, #68]	@ (800095c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000918:	2202      	movs	r2, #2
 800091a:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800091c:	4b0f      	ldr	r3, [pc, #60]	@ (800095c <MX_USB_OTG_FS_PCD_Init+0x58>)
 800091e:	2200      	movs	r2, #0
 8000920:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000922:	4b0e      	ldr	r3, [pc, #56]	@ (800095c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000924:	2202      	movs	r2, #2
 8000926:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000928:	4b0c      	ldr	r3, [pc, #48]	@ (800095c <MX_USB_OTG_FS_PCD_Init+0x58>)
 800092a:	2201      	movs	r2, #1
 800092c:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800092e:	4b0b      	ldr	r3, [pc, #44]	@ (800095c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000930:	2200      	movs	r2, #0
 8000932:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000934:	4b09      	ldr	r3, [pc, #36]	@ (800095c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000936:	2200      	movs	r2, #0
 8000938:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800093a:	4b08      	ldr	r3, [pc, #32]	@ (800095c <MX_USB_OTG_FS_PCD_Init+0x58>)
 800093c:	2201      	movs	r2, #1
 800093e:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000940:	4b06      	ldr	r3, [pc, #24]	@ (800095c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000942:	2200      	movs	r2, #0
 8000944:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000946:	4805      	ldr	r0, [pc, #20]	@ (800095c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000948:	f002 fb4a 	bl	8002fe0 <HAL_PCD_Init>
 800094c:	4603      	mov	r3, r0
 800094e:	2b00      	cmp	r3, #0
 8000950:	d001      	beq.n	8000956 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000952:	f000 fa21 	bl	8000d98 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000956:	bf00      	nop
 8000958:	bd80      	pop	{r7, pc}
 800095a:	bf00      	nop
 800095c:	200003e0 	.word	0x200003e0

08000960 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	b082      	sub	sp, #8
 8000964:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000966:	4b0c      	ldr	r3, [pc, #48]	@ (8000998 <MX_DMA_Init+0x38>)
 8000968:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800096a:	4a0b      	ldr	r2, [pc, #44]	@ (8000998 <MX_DMA_Init+0x38>)
 800096c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000970:	6313      	str	r3, [r2, #48]	@ 0x30
 8000972:	4b09      	ldr	r3, [pc, #36]	@ (8000998 <MX_DMA_Init+0x38>)
 8000974:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000976:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800097a:	607b      	str	r3, [r7, #4]
 800097c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 800097e:	2200      	movs	r2, #0
 8000980:	2105      	movs	r1, #5
 8000982:	2038      	movs	r0, #56	@ 0x38
 8000984:	f001 fad2 	bl	8001f2c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000988:	2038      	movs	r0, #56	@ 0x38
 800098a:	f001 faeb 	bl	8001f64 <HAL_NVIC_EnableIRQ>

}
 800098e:	bf00      	nop
 8000990:	3708      	adds	r7, #8
 8000992:	46bd      	mov	sp, r7
 8000994:	bd80      	pop	{r7, pc}
 8000996:	bf00      	nop
 8000998:	40023800 	.word	0x40023800

0800099c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	b08c      	sub	sp, #48	@ 0x30
 80009a0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009a2:	f107 031c 	add.w	r3, r7, #28
 80009a6:	2200      	movs	r2, #0
 80009a8:	601a      	str	r2, [r3, #0]
 80009aa:	605a      	str	r2, [r3, #4]
 80009ac:	609a      	str	r2, [r3, #8]
 80009ae:	60da      	str	r2, [r3, #12]
 80009b0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009b2:	4b4b      	ldr	r3, [pc, #300]	@ (8000ae0 <MX_GPIO_Init+0x144>)
 80009b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009b6:	4a4a      	ldr	r2, [pc, #296]	@ (8000ae0 <MX_GPIO_Init+0x144>)
 80009b8:	f043 0304 	orr.w	r3, r3, #4
 80009bc:	6313      	str	r3, [r2, #48]	@ 0x30
 80009be:	4b48      	ldr	r3, [pc, #288]	@ (8000ae0 <MX_GPIO_Init+0x144>)
 80009c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009c2:	f003 0304 	and.w	r3, r3, #4
 80009c6:	61bb      	str	r3, [r7, #24]
 80009c8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80009ca:	4b45      	ldr	r3, [pc, #276]	@ (8000ae0 <MX_GPIO_Init+0x144>)
 80009cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009ce:	4a44      	ldr	r2, [pc, #272]	@ (8000ae0 <MX_GPIO_Init+0x144>)
 80009d0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80009d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80009d6:	4b42      	ldr	r3, [pc, #264]	@ (8000ae0 <MX_GPIO_Init+0x144>)
 80009d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009da:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80009de:	617b      	str	r3, [r7, #20]
 80009e0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009e2:	4b3f      	ldr	r3, [pc, #252]	@ (8000ae0 <MX_GPIO_Init+0x144>)
 80009e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009e6:	4a3e      	ldr	r2, [pc, #248]	@ (8000ae0 <MX_GPIO_Init+0x144>)
 80009e8:	f043 0301 	orr.w	r3, r3, #1
 80009ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80009ee:	4b3c      	ldr	r3, [pc, #240]	@ (8000ae0 <MX_GPIO_Init+0x144>)
 80009f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009f2:	f003 0301 	and.w	r3, r3, #1
 80009f6:	613b      	str	r3, [r7, #16]
 80009f8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009fa:	4b39      	ldr	r3, [pc, #228]	@ (8000ae0 <MX_GPIO_Init+0x144>)
 80009fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009fe:	4a38      	ldr	r2, [pc, #224]	@ (8000ae0 <MX_GPIO_Init+0x144>)
 8000a00:	f043 0302 	orr.w	r3, r3, #2
 8000a04:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a06:	4b36      	ldr	r3, [pc, #216]	@ (8000ae0 <MX_GPIO_Init+0x144>)
 8000a08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a0a:	f003 0302 	and.w	r3, r3, #2
 8000a0e:	60fb      	str	r3, [r7, #12]
 8000a10:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a12:	4b33      	ldr	r3, [pc, #204]	@ (8000ae0 <MX_GPIO_Init+0x144>)
 8000a14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a16:	4a32      	ldr	r2, [pc, #200]	@ (8000ae0 <MX_GPIO_Init+0x144>)
 8000a18:	f043 0308 	orr.w	r3, r3, #8
 8000a1c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a1e:	4b30      	ldr	r3, [pc, #192]	@ (8000ae0 <MX_GPIO_Init+0x144>)
 8000a20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a22:	f003 0308 	and.w	r3, r3, #8
 8000a26:	60bb      	str	r3, [r7, #8]
 8000a28:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000a2a:	4b2d      	ldr	r3, [pc, #180]	@ (8000ae0 <MX_GPIO_Init+0x144>)
 8000a2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a2e:	4a2c      	ldr	r2, [pc, #176]	@ (8000ae0 <MX_GPIO_Init+0x144>)
 8000a30:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000a34:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a36:	4b2a      	ldr	r3, [pc, #168]	@ (8000ae0 <MX_GPIO_Init+0x144>)
 8000a38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a3a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000a3e:	607b      	str	r3, [r7, #4]
 8000a40:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000a42:	2200      	movs	r2, #0
 8000a44:	f244 0181 	movw	r1, #16513	@ 0x4081
 8000a48:	4826      	ldr	r0, [pc, #152]	@ (8000ae4 <MX_GPIO_Init+0x148>)
 8000a4a:	f002 fa7d 	bl	8002f48 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000a4e:	2200      	movs	r2, #0
 8000a50:	2140      	movs	r1, #64	@ 0x40
 8000a52:	4825      	ldr	r0, [pc, #148]	@ (8000ae8 <MX_GPIO_Init+0x14c>)
 8000a54:	f002 fa78 	bl	8002f48 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000a58:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000a5c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000a5e:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000a62:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000a64:	2302      	movs	r3, #2
 8000a66:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000a68:	f107 031c 	add.w	r3, r7, #28
 8000a6c:	4619      	mov	r1, r3
 8000a6e:	481f      	ldr	r0, [pc, #124]	@ (8000aec <MX_GPIO_Init+0x150>)
 8000a70:	f002 f8be 	bl	8002bf0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000a74:	f244 0381 	movw	r3, #16513	@ 0x4081
 8000a78:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a7a:	2301      	movs	r3, #1
 8000a7c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a7e:	2300      	movs	r3, #0
 8000a80:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a82:	2300      	movs	r3, #0
 8000a84:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a86:	f107 031c 	add.w	r3, r7, #28
 8000a8a:	4619      	mov	r1, r3
 8000a8c:	4815      	ldr	r0, [pc, #84]	@ (8000ae4 <MX_GPIO_Init+0x148>)
 8000a8e:	f002 f8af 	bl	8002bf0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000a92:	2340      	movs	r3, #64	@ 0x40
 8000a94:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a96:	2301      	movs	r3, #1
 8000a98:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000aa2:	f107 031c 	add.w	r3, r7, #28
 8000aa6:	4619      	mov	r1, r3
 8000aa8:	480f      	ldr	r0, [pc, #60]	@ (8000ae8 <MX_GPIO_Init+0x14c>)
 8000aaa:	f002 f8a1 	bl	8002bf0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000aae:	2380      	movs	r3, #128	@ 0x80
 8000ab0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000aba:	f107 031c 	add.w	r3, r7, #28
 8000abe:	4619      	mov	r1, r3
 8000ac0:	4809      	ldr	r0, [pc, #36]	@ (8000ae8 <MX_GPIO_Init+0x14c>)
 8000ac2:	f002 f895 	bl	8002bf0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	2105      	movs	r1, #5
 8000aca:	2028      	movs	r0, #40	@ 0x28
 8000acc:	f001 fa2e 	bl	8001f2c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000ad0:	2028      	movs	r0, #40	@ 0x28
 8000ad2:	f001 fa47 	bl	8001f64 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000ad6:	bf00      	nop
 8000ad8:	3730      	adds	r7, #48	@ 0x30
 8000ada:	46bd      	mov	sp, r7
 8000adc:	bd80      	pop	{r7, pc}
 8000ade:	bf00      	nop
 8000ae0:	40023800 	.word	0x40023800
 8000ae4:	40020400 	.word	0x40020400
 8000ae8:	40021800 	.word	0x40021800
 8000aec:	40020800 	.word	0x40020800

08000af0 <__io_putchar>:

/* USER CODE BEGIN 4 */
int __io_putchar(int ch) {
 8000af0:	b580      	push	{r7, lr}
 8000af2:	b082      	sub	sp, #8
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart3, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8000af8:	1d39      	adds	r1, r7, #4
 8000afa:	f04f 33ff 	mov.w	r3, #4294967295
 8000afe:	2201      	movs	r2, #1
 8000b00:	4803      	ldr	r0, [pc, #12]	@ (8000b10 <__io_putchar+0x20>)
 8000b02:	f004 f851 	bl	8004ba8 <HAL_UART_Transmit>
    return ch;
 8000b06:	687b      	ldr	r3, [r7, #4]
}
 8000b08:	4618      	mov	r0, r3
 8000b0a:	3708      	adds	r7, #8
 8000b0c:	46bd      	mov	sp, r7
 8000b0e:	bd80      	pop	{r7, pc}
 8000b10:	20000358 	.word	0x20000358

08000b14 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_pin)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	b082      	sub	sp, #8
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	4603      	mov	r3, r0
 8000b1c:	80fb      	strh	r3, [r7, #6]
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  if(GPIO_pin == USER_Btn_Pin){
 8000b1e:	88fb      	ldrh	r3, [r7, #6]
 8000b20:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000b24:	d10c      	bne.n	8000b40 <HAL_GPIO_EXTI_Callback+0x2c>
	  printf("Apertei\n");
 8000b26:	4808      	ldr	r0, [pc, #32]	@ (8000b48 <HAL_GPIO_EXTI_Callback+0x34>)
 8000b28:	f008 fec2 	bl	80098b0 <puts>
	  HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 8000b2c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000b30:	4806      	ldr	r0, [pc, #24]	@ (8000b4c <HAL_GPIO_EXTI_Callback+0x38>)
 8000b32:	f002 fa22 	bl	8002f7a <HAL_GPIO_TogglePin>
	  osSemaphoreRelease(semaforoButtomHandle);
 8000b36:	4b06      	ldr	r3, [pc, #24]	@ (8000b50 <HAL_GPIO_EXTI_Callback+0x3c>)
 8000b38:	681b      	ldr	r3, [r3, #0]
 8000b3a:	4618      	mov	r0, r3
 8000b3c:	f005 fa7c 	bl	8006038 <osSemaphoreRelease>
  }

  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000b40:	bf00      	nop
 8000b42:	3708      	adds	r7, #8
 8000b44:	46bd      	mov	sp, r7
 8000b46:	bd80      	pop	{r7, pc}
 8000b48:	0800a69c 	.word	0x0800a69c
 8000b4c:	40020400 	.word	0x40020400
 8000b50:	200008d0 	.word	0x200008d0

08000b54 <StartComsumerTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartComsumerTask */
void StartComsumerTask(void *argument)
{
 8000b54:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8000b58:	b0a0      	sub	sp, #128	@ 0x80
 8000b5a:	af00      	add	r7, sp, #0
 8000b5c:	61f8      	str	r0, [r7, #28]
  /* USER CODE BEGIN 5 */
	  uint16_t value;

	  uint8_t count = 0;
 8000b5e:	2300      	movs	r3, #0
 8000b60:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f

	  int64_t sum;

	  int16_t avg_array[32] = {0};
 8000b64:	f107 0020 	add.w	r0, r7, #32
 8000b68:	2340      	movs	r3, #64	@ 0x40
 8000b6a:	461a      	mov	r2, r3
 8000b6c:	2100      	movs	r1, #0
 8000b6e:	f008 ff7f 	bl	8009a70 <memset>

	  uint16_t max_value = 0;
 8000b72:	2300      	movs	r3, #0
 8000b74:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  /* Infinite loop */
  for(;;)
  {
	  osSemaphoreAcquire(semaforo1Handle, osWaitForever);
 8000b78:	4b4e      	ldr	r3, [pc, #312]	@ (8000cb4 <StartComsumerTask+0x160>)
 8000b7a:	681b      	ldr	r3, [r3, #0]
 8000b7c:	f04f 31ff 	mov.w	r1, #4294967295
 8000b80:	4618      	mov	r0, r3
 8000b82:	f005 f9f3 	bl	8005f6c <osSemaphoreAcquire>

	    for(int i = 0; i < 32; i++)
 8000b86:	2300      	movs	r3, #0
 8000b88:	66bb      	str	r3, [r7, #104]	@ 0x68
 8000b8a:	e024      	b.n	8000bd6 <StartComsumerTask+0x82>

	    {

	      osMessageQueueGet(Queue01Handle, &value, NULL, osWaitForever);
 8000b8c:	4b4a      	ldr	r3, [pc, #296]	@ (8000cb8 <StartComsumerTask+0x164>)
 8000b8e:	6818      	ldr	r0, [r3, #0]
 8000b90:	f107 0162 	add.w	r1, r7, #98	@ 0x62
 8000b94:	f04f 33ff 	mov.w	r3, #4294967295
 8000b98:	2200      	movs	r2, #0
 8000b9a:	f005 fb9f 	bl	80062dc <osMessageQueueGet>

	      sum += value - 1241;
 8000b9e:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8000ba2:	f2a3 43d9 	subw	r3, r3, #1241	@ 0x4d9
 8000ba6:	17da      	asrs	r2, r3, #31
 8000ba8:	461c      	mov	r4, r3
 8000baa:	4615      	mov	r5, r2
 8000bac:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8000bb0:	eb12 0a04 	adds.w	sl, r2, r4
 8000bb4:	eb43 0b05 	adc.w	fp, r3, r5
 8000bb8:	e9c7 ab1c 	strd	sl, fp, [r7, #112]	@ 0x70

	      if(value > max_value)
 8000bbc:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8000bc0:	f8b7 206e 	ldrh.w	r2, [r7, #110]	@ 0x6e
 8000bc4:	429a      	cmp	r2, r3
 8000bc6:	d203      	bcs.n	8000bd0 <StartComsumerTask+0x7c>

		max_value = value;
 8000bc8:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8000bcc:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
	    for(int i = 0; i < 32; i++)
 8000bd0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8000bd2:	3301      	adds	r3, #1
 8000bd4:	66bb      	str	r3, [r7, #104]	@ 0x68
 8000bd6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8000bd8:	2b1f      	cmp	r3, #31
 8000bda:	ddd7      	ble.n	8000b8c <StartComsumerTask+0x38>

	    }

	    avg_array[count] = (sum / 32);
 8000bdc:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	da07      	bge.n	8000bf4 <StartComsumerTask+0xa0>
 8000be4:	f112 011f 	adds.w	r1, r2, #31
 8000be8:	6139      	str	r1, [r7, #16]
 8000bea:	f143 0300 	adc.w	r3, r3, #0
 8000bee:	617b      	str	r3, [r7, #20]
 8000bf0:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8000bf4:	f04f 0000 	mov.w	r0, #0
 8000bf8:	f04f 0100 	mov.w	r1, #0
 8000bfc:	0950      	lsrs	r0, r2, #5
 8000bfe:	ea40 60c3 	orr.w	r0, r0, r3, lsl #27
 8000c02:	1159      	asrs	r1, r3, #5
 8000c04:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8000c08:	b202      	sxth	r2, r0
 8000c0a:	005b      	lsls	r3, r3, #1
 8000c0c:	3368      	adds	r3, #104	@ 0x68
 8000c0e:	f107 0118 	add.w	r1, r7, #24
 8000c12:	440b      	add	r3, r1
 8000c14:	f823 2c60 	strh.w	r2, [r3, #-96]

	    sum = 0;
 8000c18:	f04f 0200 	mov.w	r2, #0
 8000c1c:	f04f 0300 	mov.w	r3, #0
 8000c20:	e9c7 231c 	strd	r2, r3, [r7, #112]	@ 0x70

	    if(count > 30)
 8000c24:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8000c28:	2b1e      	cmp	r3, #30
 8000c2a:	d93d      	bls.n	8000ca8 <StartComsumerTask+0x154>

	    {

	      for(int i = 0; i < 32; i++)
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	667b      	str	r3, [r7, #100]	@ 0x64
 8000c30:	e01a      	b.n	8000c68 <StartComsumerTask+0x114>

	      {

		sum += avg_array[i];
 8000c32:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8000c34:	005b      	lsls	r3, r3, #1
 8000c36:	3368      	adds	r3, #104	@ 0x68
 8000c38:	f107 0218 	add.w	r2, r7, #24
 8000c3c:	4413      	add	r3, r2
 8000c3e:	f933 3c60 	ldrsh.w	r3, [r3, #-96]
 8000c42:	b21b      	sxth	r3, r3
 8000c44:	17da      	asrs	r2, r3, #31
 8000c46:	4698      	mov	r8, r3
 8000c48:	4691      	mov	r9, r2
 8000c4a:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8000c4e:	eb12 0108 	adds.w	r1, r2, r8
 8000c52:	60b9      	str	r1, [r7, #8]
 8000c54:	eb43 0309 	adc.w	r3, r3, r9
 8000c58:	60fb      	str	r3, [r7, #12]
 8000c5a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8000c5e:	e9c7 231c 	strd	r2, r3, [r7, #112]	@ 0x70
	      for(int i = 0; i < 32; i++)
 8000c62:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8000c64:	3301      	adds	r3, #1
 8000c66:	667b      	str	r3, [r7, #100]	@ 0x64
 8000c68:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8000c6a:	2b1f      	cmp	r3, #31
 8000c6c:	dde1      	ble.n	8000c32 <StartComsumerTask+0xde>

	      }

	      avg = sum / 32;
 8000c6e:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	da07      	bge.n	8000c86 <StartComsumerTask+0x132>
 8000c76:	f112 011f 	adds.w	r1, r2, #31
 8000c7a:	6039      	str	r1, [r7, #0]
 8000c7c:	f143 0300 	adc.w	r3, r3, #0
 8000c80:	607b      	str	r3, [r7, #4]
 8000c82:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000c86:	f04f 0000 	mov.w	r0, #0
 8000c8a:	f04f 0100 	mov.w	r1, #0
 8000c8e:	0950      	lsrs	r0, r2, #5
 8000c90:	ea40 60c3 	orr.w	r0, r0, r3, lsl #27
 8000c94:	1159      	asrs	r1, r3, #5
 8000c96:	4602      	mov	r2, r0
 8000c98:	460b      	mov	r3, r1
 8000c9a:	b213      	sxth	r3, r2
 8000c9c:	4a07      	ldr	r2, [pc, #28]	@ (8000cbc <StartComsumerTask+0x168>)
 8000c9e:	8013      	strh	r3, [r2, #0]

	      count = 0;
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8000ca6:	e767      	b.n	8000b78 <StartComsumerTask+0x24>

	    }

	    else

	      count++;
 8000ca8:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8000cac:	3301      	adds	r3, #1
 8000cae:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
	  osSemaphoreAcquire(semaforo1Handle, osWaitForever);
 8000cb2:	e761      	b.n	8000b78 <StartComsumerTask+0x24>
 8000cb4:	200008cc 	.word	0x200008cc
 8000cb8:	200008c8 	.word	0x200008c8
 8000cbc:	200008d4 	.word	0x200008d4

08000cc0 <StartProducerTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartProducerTask */
void StartProducerTask(void *argument)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	b086      	sub	sp, #24
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartProducerTask */
	  uint16_t value = 0;
 8000cc8:	2300      	movs	r3, #0
 8000cca:	81fb      	strh	r3, [r7, #14]
	  /* Infinite loop */
	  for(;;)
	  {
	    osSemaphoreAcquire(semaforoButtomHandle, osWaitForever);
 8000ccc:	4b22      	ldr	r3, [pc, #136]	@ (8000d58 <StartProducerTask+0x98>)
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	f04f 31ff 	mov.w	r1, #4294967295
 8000cd4:	4618      	mov	r0, r3
 8000cd6:	f005 f949 	bl	8005f6c <osSemaphoreAcquire>
	    for(int i = 0; i < 32; i++)
 8000cda:	2300      	movs	r3, #0
 8000cdc:	617b      	str	r3, [r7, #20]
 8000cde:	e02c      	b.n	8000d3a <StartProducerTask+0x7a>
	    {
	      for(int i = 0; i < 32; i++)
 8000ce0:	2300      	movs	r3, #0
 8000ce2:	613b      	str	r3, [r7, #16]
 8000ce4:	e01e      	b.n	8000d24 <StartProducerTask+0x64>
	      {
	        HAL_ADC_Start(&hadc1);
 8000ce6:	481d      	ldr	r0, [pc, #116]	@ (8000d5c <StartProducerTask+0x9c>)
 8000ce8:	f000 fcae 	bl	8001648 <HAL_ADC_Start>
	        HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8000cec:	f04f 31ff 	mov.w	r1, #4294967295
 8000cf0:	481a      	ldr	r0, [pc, #104]	@ (8000d5c <StartProducerTask+0x9c>)
 8000cf2:	f000 fd77 	bl	80017e4 <HAL_ADC_PollForConversion>
	        value = HAL_ADC_GetValue(&hadc1);
 8000cf6:	4819      	ldr	r0, [pc, #100]	@ (8000d5c <StartProducerTask+0x9c>)
 8000cf8:	f000 fdff 	bl	80018fa <HAL_ADC_GetValue>
 8000cfc:	4603      	mov	r3, r0
 8000cfe:	b29b      	uxth	r3, r3
 8000d00:	81fb      	strh	r3, [r7, #14]
	        printf("value = %d\n", value);
 8000d02:	89fb      	ldrh	r3, [r7, #14]
 8000d04:	4619      	mov	r1, r3
 8000d06:	4816      	ldr	r0, [pc, #88]	@ (8000d60 <StartProducerTask+0xa0>)
 8000d08:	f008 fd6a 	bl	80097e0 <iprintf>
	        osMessageQueuePut(Queue01Handle, &value, 0, osWaitForever);
 8000d0c:	4b15      	ldr	r3, [pc, #84]	@ (8000d64 <StartProducerTask+0xa4>)
 8000d0e:	6818      	ldr	r0, [r3, #0]
 8000d10:	f107 010e 	add.w	r1, r7, #14
 8000d14:	f04f 33ff 	mov.w	r3, #4294967295
 8000d18:	2200      	movs	r2, #0
 8000d1a:	f005 fa6b 	bl	80061f4 <osMessageQueuePut>
	      for(int i = 0; i < 32; i++)
 8000d1e:	693b      	ldr	r3, [r7, #16]
 8000d20:	3301      	adds	r3, #1
 8000d22:	613b      	str	r3, [r7, #16]
 8000d24:	693b      	ldr	r3, [r7, #16]
 8000d26:	2b1f      	cmp	r3, #31
 8000d28:	dddd      	ble.n	8000ce6 <StartProducerTask+0x26>
	      }
	      osSemaphoreRelease(semaforo1Handle);
 8000d2a:	4b0f      	ldr	r3, [pc, #60]	@ (8000d68 <StartProducerTask+0xa8>)
 8000d2c:	681b      	ldr	r3, [r3, #0]
 8000d2e:	4618      	mov	r0, r3
 8000d30:	f005 f982 	bl	8006038 <osSemaphoreRelease>
	    for(int i = 0; i < 32; i++)
 8000d34:	697b      	ldr	r3, [r7, #20]
 8000d36:	3301      	adds	r3, #1
 8000d38:	617b      	str	r3, [r7, #20]
 8000d3a:	697b      	ldr	r3, [r7, #20]
 8000d3c:	2b1f      	cmp	r3, #31
 8000d3e:	ddcf      	ble.n	8000ce0 <StartProducerTask+0x20>
	    }
	    osDelay(500);
 8000d40:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000d44:	f005 f848 	bl	8005dd8 <osDelay>
	    printf("\n\navg = %d\n", avg);
 8000d48:	4b08      	ldr	r3, [pc, #32]	@ (8000d6c <StartProducerTask+0xac>)
 8000d4a:	881b      	ldrh	r3, [r3, #0]
 8000d4c:	b21b      	sxth	r3, r3
 8000d4e:	4619      	mov	r1, r3
 8000d50:	4807      	ldr	r0, [pc, #28]	@ (8000d70 <StartProducerTask+0xb0>)
 8000d52:	f008 fd45 	bl	80097e0 <iprintf>
	    osSemaphoreAcquire(semaforoButtomHandle, osWaitForever);
 8000d56:	e7b9      	b.n	8000ccc <StartProducerTask+0xc>
 8000d58:	200008d0 	.word	0x200008d0
 8000d5c:	20000200 	.word	0x20000200
 8000d60:	0800a6a4 	.word	0x0800a6a4
 8000d64:	200008c8 	.word	0x200008c8
 8000d68:	200008cc 	.word	0x200008cc
 8000d6c:	200008d4 	.word	0x200008d4
 8000d70:	0800a6b0 	.word	0x0800a6b0

08000d74 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b082      	sub	sp, #8
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	4a04      	ldr	r2, [pc, #16]	@ (8000d94 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000d82:	4293      	cmp	r3, r2
 8000d84:	d101      	bne.n	8000d8a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000d86:	f000 fbd7 	bl	8001538 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000d8a:	bf00      	nop
 8000d8c:	3708      	adds	r7, #8
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	bd80      	pop	{r7, pc}
 8000d92:	bf00      	nop
 8000d94:	40001000 	.word	0x40001000

08000d98 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d98:	b480      	push	{r7}
 8000d9a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d9c:	b672      	cpsid	i
}
 8000d9e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000da0:	bf00      	nop
 8000da2:	e7fd      	b.n	8000da0 <Error_Handler+0x8>

08000da4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b082      	sub	sp, #8
 8000da8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000daa:	4b11      	ldr	r3, [pc, #68]	@ (8000df0 <HAL_MspInit+0x4c>)
 8000dac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000dae:	4a10      	ldr	r2, [pc, #64]	@ (8000df0 <HAL_MspInit+0x4c>)
 8000db0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000db4:	6413      	str	r3, [r2, #64]	@ 0x40
 8000db6:	4b0e      	ldr	r3, [pc, #56]	@ (8000df0 <HAL_MspInit+0x4c>)
 8000db8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000dba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000dbe:	607b      	str	r3, [r7, #4]
 8000dc0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000dc2:	4b0b      	ldr	r3, [pc, #44]	@ (8000df0 <HAL_MspInit+0x4c>)
 8000dc4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000dc6:	4a0a      	ldr	r2, [pc, #40]	@ (8000df0 <HAL_MspInit+0x4c>)
 8000dc8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000dcc:	6453      	str	r3, [r2, #68]	@ 0x44
 8000dce:	4b08      	ldr	r3, [pc, #32]	@ (8000df0 <HAL_MspInit+0x4c>)
 8000dd0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000dd2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000dd6:	603b      	str	r3, [r7, #0]
 8000dd8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000dda:	2200      	movs	r2, #0
 8000ddc:	210f      	movs	r1, #15
 8000dde:	f06f 0001 	mvn.w	r0, #1
 8000de2:	f001 f8a3 	bl	8001f2c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000de6:	bf00      	nop
 8000de8:	3708      	adds	r7, #8
 8000dea:	46bd      	mov	sp, r7
 8000dec:	bd80      	pop	{r7, pc}
 8000dee:	bf00      	nop
 8000df0:	40023800 	.word	0x40023800

08000df4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b08a      	sub	sp, #40	@ 0x28
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dfc:	f107 0314 	add.w	r3, r7, #20
 8000e00:	2200      	movs	r2, #0
 8000e02:	601a      	str	r2, [r3, #0]
 8000e04:	605a      	str	r2, [r3, #4]
 8000e06:	609a      	str	r2, [r3, #8]
 8000e08:	60da      	str	r2, [r3, #12]
 8000e0a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	4a2c      	ldr	r2, [pc, #176]	@ (8000ec4 <HAL_ADC_MspInit+0xd0>)
 8000e12:	4293      	cmp	r3, r2
 8000e14:	d152      	bne.n	8000ebc <HAL_ADC_MspInit+0xc8>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000e16:	4b2c      	ldr	r3, [pc, #176]	@ (8000ec8 <HAL_ADC_MspInit+0xd4>)
 8000e18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e1a:	4a2b      	ldr	r2, [pc, #172]	@ (8000ec8 <HAL_ADC_MspInit+0xd4>)
 8000e1c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000e20:	6453      	str	r3, [r2, #68]	@ 0x44
 8000e22:	4b29      	ldr	r3, [pc, #164]	@ (8000ec8 <HAL_ADC_MspInit+0xd4>)
 8000e24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e26:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000e2a:	613b      	str	r3, [r7, #16]
 8000e2c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e2e:	4b26      	ldr	r3, [pc, #152]	@ (8000ec8 <HAL_ADC_MspInit+0xd4>)
 8000e30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e32:	4a25      	ldr	r2, [pc, #148]	@ (8000ec8 <HAL_ADC_MspInit+0xd4>)
 8000e34:	f043 0301 	orr.w	r3, r3, #1
 8000e38:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e3a:	4b23      	ldr	r3, [pc, #140]	@ (8000ec8 <HAL_ADC_MspInit+0xd4>)
 8000e3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e3e:	f003 0301 	and.w	r3, r3, #1
 8000e42:	60fb      	str	r3, [r7, #12]
 8000e44:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0/WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000e46:	2301      	movs	r3, #1
 8000e48:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000e4a:	2303      	movs	r3, #3
 8000e4c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e4e:	2300      	movs	r3, #0
 8000e50:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e52:	f107 0314 	add.w	r3, r7, #20
 8000e56:	4619      	mov	r1, r3
 8000e58:	481c      	ldr	r0, [pc, #112]	@ (8000ecc <HAL_ADC_MspInit+0xd8>)
 8000e5a:	f001 fec9 	bl	8002bf0 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8000e5e:	4b1c      	ldr	r3, [pc, #112]	@ (8000ed0 <HAL_ADC_MspInit+0xdc>)
 8000e60:	4a1c      	ldr	r2, [pc, #112]	@ (8000ed4 <HAL_ADC_MspInit+0xe0>)
 8000e62:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8000e64:	4b1a      	ldr	r3, [pc, #104]	@ (8000ed0 <HAL_ADC_MspInit+0xdc>)
 8000e66:	2200      	movs	r2, #0
 8000e68:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000e6a:	4b19      	ldr	r3, [pc, #100]	@ (8000ed0 <HAL_ADC_MspInit+0xdc>)
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000e70:	4b17      	ldr	r3, [pc, #92]	@ (8000ed0 <HAL_ADC_MspInit+0xdc>)
 8000e72:	2200      	movs	r2, #0
 8000e74:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000e76:	4b16      	ldr	r3, [pc, #88]	@ (8000ed0 <HAL_ADC_MspInit+0xdc>)
 8000e78:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000e7c:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000e7e:	4b14      	ldr	r3, [pc, #80]	@ (8000ed0 <HAL_ADC_MspInit+0xdc>)
 8000e80:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000e84:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000e86:	4b12      	ldr	r3, [pc, #72]	@ (8000ed0 <HAL_ADC_MspInit+0xdc>)
 8000e88:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000e8c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8000e8e:	4b10      	ldr	r3, [pc, #64]	@ (8000ed0 <HAL_ADC_MspInit+0xdc>)
 8000e90:	2200      	movs	r2, #0
 8000e92:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000e94:	4b0e      	ldr	r3, [pc, #56]	@ (8000ed0 <HAL_ADC_MspInit+0xdc>)
 8000e96:	2200      	movs	r2, #0
 8000e98:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000e9a:	4b0d      	ldr	r3, [pc, #52]	@ (8000ed0 <HAL_ADC_MspInit+0xdc>)
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000ea0:	480b      	ldr	r0, [pc, #44]	@ (8000ed0 <HAL_ADC_MspInit+0xdc>)
 8000ea2:	f001 f86d 	bl	8001f80 <HAL_DMA_Init>
 8000ea6:	4603      	mov	r3, r0
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d001      	beq.n	8000eb0 <HAL_ADC_MspInit+0xbc>
    {
      Error_Handler();
 8000eac:	f7ff ff74 	bl	8000d98 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	4a07      	ldr	r2, [pc, #28]	@ (8000ed0 <HAL_ADC_MspInit+0xdc>)
 8000eb4:	639a      	str	r2, [r3, #56]	@ 0x38
 8000eb6:	4a06      	ldr	r2, [pc, #24]	@ (8000ed0 <HAL_ADC_MspInit+0xdc>)
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8000ebc:	bf00      	nop
 8000ebe:	3728      	adds	r7, #40	@ 0x28
 8000ec0:	46bd      	mov	sp, r7
 8000ec2:	bd80      	pop	{r7, pc}
 8000ec4:	40012000 	.word	0x40012000
 8000ec8:	40023800 	.word	0x40023800
 8000ecc:	40020000 	.word	0x40020000
 8000ed0:	20000248 	.word	0x20000248
 8000ed4:	40026410 	.word	0x40026410

08000ed8 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b08e      	sub	sp, #56	@ 0x38
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ee0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	601a      	str	r2, [r3, #0]
 8000ee8:	605a      	str	r2, [r3, #4]
 8000eea:	609a      	str	r2, [r3, #8]
 8000eec:	60da      	str	r2, [r3, #12]
 8000eee:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	4a4e      	ldr	r2, [pc, #312]	@ (8001030 <HAL_ETH_MspInit+0x158>)
 8000ef6:	4293      	cmp	r3, r2
 8000ef8:	f040 8096 	bne.w	8001028 <HAL_ETH_MspInit+0x150>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8000efc:	4b4d      	ldr	r3, [pc, #308]	@ (8001034 <HAL_ETH_MspInit+0x15c>)
 8000efe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f00:	4a4c      	ldr	r2, [pc, #304]	@ (8001034 <HAL_ETH_MspInit+0x15c>)
 8000f02:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000f06:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f08:	4b4a      	ldr	r3, [pc, #296]	@ (8001034 <HAL_ETH_MspInit+0x15c>)
 8000f0a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f0c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000f10:	623b      	str	r3, [r7, #32]
 8000f12:	6a3b      	ldr	r3, [r7, #32]
 8000f14:	4b47      	ldr	r3, [pc, #284]	@ (8001034 <HAL_ETH_MspInit+0x15c>)
 8000f16:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f18:	4a46      	ldr	r2, [pc, #280]	@ (8001034 <HAL_ETH_MspInit+0x15c>)
 8000f1a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8000f1e:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f20:	4b44      	ldr	r3, [pc, #272]	@ (8001034 <HAL_ETH_MspInit+0x15c>)
 8000f22:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f24:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8000f28:	61fb      	str	r3, [r7, #28]
 8000f2a:	69fb      	ldr	r3, [r7, #28]
 8000f2c:	4b41      	ldr	r3, [pc, #260]	@ (8001034 <HAL_ETH_MspInit+0x15c>)
 8000f2e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f30:	4a40      	ldr	r2, [pc, #256]	@ (8001034 <HAL_ETH_MspInit+0x15c>)
 8000f32:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8000f36:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f38:	4b3e      	ldr	r3, [pc, #248]	@ (8001034 <HAL_ETH_MspInit+0x15c>)
 8000f3a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f3c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8000f40:	61bb      	str	r3, [r7, #24]
 8000f42:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f44:	4b3b      	ldr	r3, [pc, #236]	@ (8001034 <HAL_ETH_MspInit+0x15c>)
 8000f46:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f48:	4a3a      	ldr	r2, [pc, #232]	@ (8001034 <HAL_ETH_MspInit+0x15c>)
 8000f4a:	f043 0304 	orr.w	r3, r3, #4
 8000f4e:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f50:	4b38      	ldr	r3, [pc, #224]	@ (8001034 <HAL_ETH_MspInit+0x15c>)
 8000f52:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f54:	f003 0304 	and.w	r3, r3, #4
 8000f58:	617b      	str	r3, [r7, #20]
 8000f5a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f5c:	4b35      	ldr	r3, [pc, #212]	@ (8001034 <HAL_ETH_MspInit+0x15c>)
 8000f5e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f60:	4a34      	ldr	r2, [pc, #208]	@ (8001034 <HAL_ETH_MspInit+0x15c>)
 8000f62:	f043 0301 	orr.w	r3, r3, #1
 8000f66:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f68:	4b32      	ldr	r3, [pc, #200]	@ (8001034 <HAL_ETH_MspInit+0x15c>)
 8000f6a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f6c:	f003 0301 	and.w	r3, r3, #1
 8000f70:	613b      	str	r3, [r7, #16]
 8000f72:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f74:	4b2f      	ldr	r3, [pc, #188]	@ (8001034 <HAL_ETH_MspInit+0x15c>)
 8000f76:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f78:	4a2e      	ldr	r2, [pc, #184]	@ (8001034 <HAL_ETH_MspInit+0x15c>)
 8000f7a:	f043 0302 	orr.w	r3, r3, #2
 8000f7e:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f80:	4b2c      	ldr	r3, [pc, #176]	@ (8001034 <HAL_ETH_MspInit+0x15c>)
 8000f82:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f84:	f003 0302 	and.w	r3, r3, #2
 8000f88:	60fb      	str	r3, [r7, #12]
 8000f8a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000f8c:	4b29      	ldr	r3, [pc, #164]	@ (8001034 <HAL_ETH_MspInit+0x15c>)
 8000f8e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f90:	4a28      	ldr	r2, [pc, #160]	@ (8001034 <HAL_ETH_MspInit+0x15c>)
 8000f92:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000f96:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f98:	4b26      	ldr	r3, [pc, #152]	@ (8001034 <HAL_ETH_MspInit+0x15c>)
 8000f9a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f9c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000fa0:	60bb      	str	r3, [r7, #8]
 8000fa2:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000fa4:	2332      	movs	r3, #50	@ 0x32
 8000fa6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fa8:	2302      	movs	r3, #2
 8000faa:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fac:	2300      	movs	r3, #0
 8000fae:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fb0:	2303      	movs	r3, #3
 8000fb2:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000fb4:	230b      	movs	r3, #11
 8000fb6:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000fb8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000fbc:	4619      	mov	r1, r3
 8000fbe:	481e      	ldr	r0, [pc, #120]	@ (8001038 <HAL_ETH_MspInit+0x160>)
 8000fc0:	f001 fe16 	bl	8002bf0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000fc4:	2386      	movs	r3, #134	@ 0x86
 8000fc6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fc8:	2302      	movs	r3, #2
 8000fca:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fcc:	2300      	movs	r3, #0
 8000fce:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fd0:	2303      	movs	r3, #3
 8000fd2:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000fd4:	230b      	movs	r3, #11
 8000fd6:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fd8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000fdc:	4619      	mov	r1, r3
 8000fde:	4817      	ldr	r0, [pc, #92]	@ (800103c <HAL_ETH_MspInit+0x164>)
 8000fe0:	f001 fe06 	bl	8002bf0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000fe4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000fe8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fea:	2302      	movs	r3, #2
 8000fec:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fee:	2300      	movs	r3, #0
 8000ff0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ff2:	2303      	movs	r3, #3
 8000ff4:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000ff6:	230b      	movs	r3, #11
 8000ff8:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000ffa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ffe:	4619      	mov	r1, r3
 8001000:	480f      	ldr	r0, [pc, #60]	@ (8001040 <HAL_ETH_MspInit+0x168>)
 8001002:	f001 fdf5 	bl	8002bf0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8001006:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 800100a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800100c:	2302      	movs	r3, #2
 800100e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001010:	2300      	movs	r3, #0
 8001012:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001014:	2303      	movs	r3, #3
 8001016:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001018:	230b      	movs	r3, #11
 800101a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800101c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001020:	4619      	mov	r1, r3
 8001022:	4808      	ldr	r0, [pc, #32]	@ (8001044 <HAL_ETH_MspInit+0x16c>)
 8001024:	f001 fde4 	bl	8002bf0 <HAL_GPIO_Init>

  /* USER CODE END ETH_MspInit 1 */

  }

}
 8001028:	bf00      	nop
 800102a:	3738      	adds	r7, #56	@ 0x38
 800102c:	46bd      	mov	sp, r7
 800102e:	bd80      	pop	{r7, pc}
 8001030:	40028000 	.word	0x40028000
 8001034:	40023800 	.word	0x40023800
 8001038:	40020800 	.word	0x40020800
 800103c:	40020000 	.word	0x40020000
 8001040:	40020400 	.word	0x40020400
 8001044:	40021800 	.word	0x40021800

08001048 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	b0ae      	sub	sp, #184	@ 0xb8
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001050:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001054:	2200      	movs	r2, #0
 8001056:	601a      	str	r2, [r3, #0]
 8001058:	605a      	str	r2, [r3, #4]
 800105a:	609a      	str	r2, [r3, #8]
 800105c:	60da      	str	r2, [r3, #12]
 800105e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001060:	f107 0314 	add.w	r3, r7, #20
 8001064:	2290      	movs	r2, #144	@ 0x90
 8001066:	2100      	movs	r1, #0
 8001068:	4618      	mov	r0, r3
 800106a:	f008 fd01 	bl	8009a70 <memset>
  if(huart->Instance==USART3)
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	4a22      	ldr	r2, [pc, #136]	@ (80010fc <HAL_UART_MspInit+0xb4>)
 8001074:	4293      	cmp	r3, r2
 8001076:	d13c      	bne.n	80010f2 <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001078:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800107c:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800107e:	2300      	movs	r3, #0
 8001080:	663b      	str	r3, [r7, #96]	@ 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001082:	f107 0314 	add.w	r3, r7, #20
 8001086:	4618      	mov	r0, r3
 8001088:	f002 fe4a 	bl	8003d20 <HAL_RCCEx_PeriphCLKConfig>
 800108c:	4603      	mov	r3, r0
 800108e:	2b00      	cmp	r3, #0
 8001090:	d001      	beq.n	8001096 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001092:	f7ff fe81 	bl	8000d98 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001096:	4b1a      	ldr	r3, [pc, #104]	@ (8001100 <HAL_UART_MspInit+0xb8>)
 8001098:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800109a:	4a19      	ldr	r2, [pc, #100]	@ (8001100 <HAL_UART_MspInit+0xb8>)
 800109c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80010a0:	6413      	str	r3, [r2, #64]	@ 0x40
 80010a2:	4b17      	ldr	r3, [pc, #92]	@ (8001100 <HAL_UART_MspInit+0xb8>)
 80010a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010a6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80010aa:	613b      	str	r3, [r7, #16]
 80010ac:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80010ae:	4b14      	ldr	r3, [pc, #80]	@ (8001100 <HAL_UART_MspInit+0xb8>)
 80010b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010b2:	4a13      	ldr	r2, [pc, #76]	@ (8001100 <HAL_UART_MspInit+0xb8>)
 80010b4:	f043 0308 	orr.w	r3, r3, #8
 80010b8:	6313      	str	r3, [r2, #48]	@ 0x30
 80010ba:	4b11      	ldr	r3, [pc, #68]	@ (8001100 <HAL_UART_MspInit+0xb8>)
 80010bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010be:	f003 0308 	and.w	r3, r3, #8
 80010c2:	60fb      	str	r3, [r7, #12]
 80010c4:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80010c6:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80010ca:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010ce:	2302      	movs	r3, #2
 80010d0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010d4:	2300      	movs	r3, #0
 80010d6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010da:	2303      	movs	r3, #3
 80010dc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80010e0:	2307      	movs	r3, #7
 80010e2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80010e6:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80010ea:	4619      	mov	r1, r3
 80010ec:	4805      	ldr	r0, [pc, #20]	@ (8001104 <HAL_UART_MspInit+0xbc>)
 80010ee:	f001 fd7f 	bl	8002bf0 <HAL_GPIO_Init>

  /* USER CODE END USART3_MspInit 1 */

  }

}
 80010f2:	bf00      	nop
 80010f4:	37b8      	adds	r7, #184	@ 0xb8
 80010f6:	46bd      	mov	sp, r7
 80010f8:	bd80      	pop	{r7, pc}
 80010fa:	bf00      	nop
 80010fc:	40004800 	.word	0x40004800
 8001100:	40023800 	.word	0x40023800
 8001104:	40020c00 	.word	0x40020c00

08001108 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	b0ae      	sub	sp, #184	@ 0xb8
 800110c:	af00      	add	r7, sp, #0
 800110e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001110:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001114:	2200      	movs	r2, #0
 8001116:	601a      	str	r2, [r3, #0]
 8001118:	605a      	str	r2, [r3, #4]
 800111a:	609a      	str	r2, [r3, #8]
 800111c:	60da      	str	r2, [r3, #12]
 800111e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001120:	f107 0314 	add.w	r3, r7, #20
 8001124:	2290      	movs	r2, #144	@ 0x90
 8001126:	2100      	movs	r1, #0
 8001128:	4618      	mov	r0, r3
 800112a:	f008 fca1 	bl	8009a70 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001136:	d159      	bne.n	80011ec <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8001138:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 800113c:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 800113e:	2300      	movs	r3, #0
 8001140:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001144:	f107 0314 	add.w	r3, r7, #20
 8001148:	4618      	mov	r0, r3
 800114a:	f002 fde9 	bl	8003d20 <HAL_RCCEx_PeriphCLKConfig>
 800114e:	4603      	mov	r3, r0
 8001150:	2b00      	cmp	r3, #0
 8001152:	d001      	beq.n	8001158 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8001154:	f7ff fe20 	bl	8000d98 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001158:	4b26      	ldr	r3, [pc, #152]	@ (80011f4 <HAL_PCD_MspInit+0xec>)
 800115a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800115c:	4a25      	ldr	r2, [pc, #148]	@ (80011f4 <HAL_PCD_MspInit+0xec>)
 800115e:	f043 0301 	orr.w	r3, r3, #1
 8001162:	6313      	str	r3, [r2, #48]	@ 0x30
 8001164:	4b23      	ldr	r3, [pc, #140]	@ (80011f4 <HAL_PCD_MspInit+0xec>)
 8001166:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001168:	f003 0301 	and.w	r3, r3, #1
 800116c:	613b      	str	r3, [r7, #16]
 800116e:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8001170:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 8001174:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001178:	2302      	movs	r3, #2
 800117a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800117e:	2300      	movs	r3, #0
 8001180:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001184:	2303      	movs	r3, #3
 8001186:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800118a:	230a      	movs	r3, #10
 800118c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001190:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001194:	4619      	mov	r1, r3
 8001196:	4818      	ldr	r0, [pc, #96]	@ (80011f8 <HAL_PCD_MspInit+0xf0>)
 8001198:	f001 fd2a 	bl	8002bf0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 800119c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80011a0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011a4:	2300      	movs	r3, #0
 80011a6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011aa:	2300      	movs	r3, #0
 80011ac:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80011b0:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80011b4:	4619      	mov	r1, r3
 80011b6:	4810      	ldr	r0, [pc, #64]	@ (80011f8 <HAL_PCD_MspInit+0xf0>)
 80011b8:	f001 fd1a 	bl	8002bf0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80011bc:	4b0d      	ldr	r3, [pc, #52]	@ (80011f4 <HAL_PCD_MspInit+0xec>)
 80011be:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80011c0:	4a0c      	ldr	r2, [pc, #48]	@ (80011f4 <HAL_PCD_MspInit+0xec>)
 80011c2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80011c6:	6353      	str	r3, [r2, #52]	@ 0x34
 80011c8:	4b0a      	ldr	r3, [pc, #40]	@ (80011f4 <HAL_PCD_MspInit+0xec>)
 80011ca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80011cc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80011d0:	60fb      	str	r3, [r7, #12]
 80011d2:	68fb      	ldr	r3, [r7, #12]
 80011d4:	4b07      	ldr	r3, [pc, #28]	@ (80011f4 <HAL_PCD_MspInit+0xec>)
 80011d6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011d8:	4a06      	ldr	r2, [pc, #24]	@ (80011f4 <HAL_PCD_MspInit+0xec>)
 80011da:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80011de:	6453      	str	r3, [r2, #68]	@ 0x44
 80011e0:	4b04      	ldr	r3, [pc, #16]	@ (80011f4 <HAL_PCD_MspInit+0xec>)
 80011e2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011e4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80011e8:	60bb      	str	r3, [r7, #8]
 80011ea:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END USB_OTG_FS_MspInit 1 */

  }

}
 80011ec:	bf00      	nop
 80011ee:	37b8      	adds	r7, #184	@ 0xb8
 80011f0:	46bd      	mov	sp, r7
 80011f2:	bd80      	pop	{r7, pc}
 80011f4:	40023800 	.word	0x40023800
 80011f8:	40020000 	.word	0x40020000

080011fc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b08e      	sub	sp, #56	@ 0x38
 8001200:	af00      	add	r7, sp, #0
 8001202:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8001204:	2300      	movs	r3, #0
 8001206:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8001208:	2300      	movs	r3, #0
 800120a:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 800120c:	4b33      	ldr	r3, [pc, #204]	@ (80012dc <HAL_InitTick+0xe0>)
 800120e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001210:	4a32      	ldr	r2, [pc, #200]	@ (80012dc <HAL_InitTick+0xe0>)
 8001212:	f043 0310 	orr.w	r3, r3, #16
 8001216:	6413      	str	r3, [r2, #64]	@ 0x40
 8001218:	4b30      	ldr	r3, [pc, #192]	@ (80012dc <HAL_InitTick+0xe0>)
 800121a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800121c:	f003 0310 	and.w	r3, r3, #16
 8001220:	60fb      	str	r3, [r7, #12]
 8001222:	68fb      	ldr	r3, [r7, #12]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001224:	f107 0210 	add.w	r2, r7, #16
 8001228:	f107 0314 	add.w	r3, r7, #20
 800122c:	4611      	mov	r1, r2
 800122e:	4618      	mov	r0, r3
 8001230:	f002 fd44 	bl	8003cbc <HAL_RCC_GetClockConfig>
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001234:	6a3b      	ldr	r3, [r7, #32]
 8001236:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001238:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800123a:	2b00      	cmp	r3, #0
 800123c:	d103      	bne.n	8001246 <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800123e:	f002 fd15 	bl	8003c6c <HAL_RCC_GetPCLK1Freq>
 8001242:	6378      	str	r0, [r7, #52]	@ 0x34
 8001244:	e004      	b.n	8001250 <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001246:	f002 fd11 	bl	8003c6c <HAL_RCC_GetPCLK1Freq>
 800124a:	4603      	mov	r3, r0
 800124c:	005b      	lsls	r3, r3, #1
 800124e:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001250:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001252:	4a23      	ldr	r2, [pc, #140]	@ (80012e0 <HAL_InitTick+0xe4>)
 8001254:	fba2 2303 	umull	r2, r3, r2, r3
 8001258:	0c9b      	lsrs	r3, r3, #18
 800125a:	3b01      	subs	r3, #1
 800125c:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800125e:	4b21      	ldr	r3, [pc, #132]	@ (80012e4 <HAL_InitTick+0xe8>)
 8001260:	4a21      	ldr	r2, [pc, #132]	@ (80012e8 <HAL_InitTick+0xec>)
 8001262:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001264:	4b1f      	ldr	r3, [pc, #124]	@ (80012e4 <HAL_InitTick+0xe8>)
 8001266:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800126a:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800126c:	4a1d      	ldr	r2, [pc, #116]	@ (80012e4 <HAL_InitTick+0xe8>)
 800126e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001270:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001272:	4b1c      	ldr	r3, [pc, #112]	@ (80012e4 <HAL_InitTick+0xe8>)
 8001274:	2200      	movs	r2, #0
 8001276:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001278:	4b1a      	ldr	r3, [pc, #104]	@ (80012e4 <HAL_InitTick+0xe8>)
 800127a:	2200      	movs	r2, #0
 800127c:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800127e:	4b19      	ldr	r3, [pc, #100]	@ (80012e4 <HAL_InitTick+0xe8>)
 8001280:	2200      	movs	r2, #0
 8001282:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8001284:	4817      	ldr	r0, [pc, #92]	@ (80012e4 <HAL_InitTick+0xe8>)
 8001286:	f003 f973 	bl	8004570 <HAL_TIM_Base_Init>
 800128a:	4603      	mov	r3, r0
 800128c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8001290:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001294:	2b00      	cmp	r3, #0
 8001296:	d11b      	bne.n	80012d0 <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8001298:	4812      	ldr	r0, [pc, #72]	@ (80012e4 <HAL_InitTick+0xe8>)
 800129a:	f003 f9cb 	bl	8004634 <HAL_TIM_Base_Start_IT>
 800129e:	4603      	mov	r3, r0
 80012a0:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 80012a4:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d111      	bne.n	80012d0 <HAL_InitTick+0xd4>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80012ac:	2036      	movs	r0, #54	@ 0x36
 80012ae:	f000 fe59 	bl	8001f64 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	2b0f      	cmp	r3, #15
 80012b6:	d808      	bhi.n	80012ca <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 80012b8:	2200      	movs	r2, #0
 80012ba:	6879      	ldr	r1, [r7, #4]
 80012bc:	2036      	movs	r0, #54	@ 0x36
 80012be:	f000 fe35 	bl	8001f2c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80012c2:	4a0a      	ldr	r2, [pc, #40]	@ (80012ec <HAL_InitTick+0xf0>)
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	6013      	str	r3, [r2, #0]
 80012c8:	e002      	b.n	80012d0 <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 80012ca:	2301      	movs	r3, #1
 80012cc:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80012d0:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 80012d4:	4618      	mov	r0, r3
 80012d6:	3738      	adds	r7, #56	@ 0x38
 80012d8:	46bd      	mov	sp, r7
 80012da:	bd80      	pop	{r7, pc}
 80012dc:	40023800 	.word	0x40023800
 80012e0:	431bde83 	.word	0x431bde83
 80012e4:	200008e0 	.word	0x200008e0
 80012e8:	40001000 	.word	0x40001000
 80012ec:	20000004 	.word	0x20000004

080012f0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80012f0:	b480      	push	{r7}
 80012f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80012f4:	bf00      	nop
 80012f6:	e7fd      	b.n	80012f4 <NMI_Handler+0x4>

080012f8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80012f8:	b480      	push	{r7}
 80012fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80012fc:	bf00      	nop
 80012fe:	e7fd      	b.n	80012fc <HardFault_Handler+0x4>

08001300 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001300:	b480      	push	{r7}
 8001302:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001304:	bf00      	nop
 8001306:	e7fd      	b.n	8001304 <MemManage_Handler+0x4>

08001308 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001308:	b480      	push	{r7}
 800130a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800130c:	bf00      	nop
 800130e:	e7fd      	b.n	800130c <BusFault_Handler+0x4>

08001310 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001310:	b480      	push	{r7}
 8001312:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001314:	bf00      	nop
 8001316:	e7fd      	b.n	8001314 <UsageFault_Handler+0x4>

08001318 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001318:	b480      	push	{r7}
 800131a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800131c:	bf00      	nop
 800131e:	46bd      	mov	sp, r7
 8001320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001324:	4770      	bx	lr

08001326 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001326:	b580      	push	{r7, lr}
 8001328:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USER_Btn_Pin);
 800132a:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 800132e:	f001 fe3f 	bl	8002fb0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001332:	bf00      	nop
 8001334:	bd80      	pop	{r7, pc}
	...

08001338 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800133c:	4802      	ldr	r0, [pc, #8]	@ (8001348 <TIM6_DAC_IRQHandler+0x10>)
 800133e:	f003 f9f1 	bl	8004724 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001342:	bf00      	nop
 8001344:	bd80      	pop	{r7, pc}
 8001346:	bf00      	nop
 8001348:	200008e0 	.word	0x200008e0

0800134c <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001350:	4802      	ldr	r0, [pc, #8]	@ (800135c <DMA2_Stream0_IRQHandler+0x10>)
 8001352:	f000 fec3 	bl	80020dc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001356:	bf00      	nop
 8001358:	bd80      	pop	{r7, pc}
 800135a:	bf00      	nop
 800135c:	20000248 	.word	0x20000248

08001360 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	b086      	sub	sp, #24
 8001364:	af00      	add	r7, sp, #0
 8001366:	60f8      	str	r0, [r7, #12]
 8001368:	60b9      	str	r1, [r7, #8]
 800136a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800136c:	2300      	movs	r3, #0
 800136e:	617b      	str	r3, [r7, #20]
 8001370:	e00a      	b.n	8001388 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001372:	f3af 8000 	nop.w
 8001376:	4601      	mov	r1, r0
 8001378:	68bb      	ldr	r3, [r7, #8]
 800137a:	1c5a      	adds	r2, r3, #1
 800137c:	60ba      	str	r2, [r7, #8]
 800137e:	b2ca      	uxtb	r2, r1
 8001380:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001382:	697b      	ldr	r3, [r7, #20]
 8001384:	3301      	adds	r3, #1
 8001386:	617b      	str	r3, [r7, #20]
 8001388:	697a      	ldr	r2, [r7, #20]
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	429a      	cmp	r2, r3
 800138e:	dbf0      	blt.n	8001372 <_read+0x12>
  }

  return len;
 8001390:	687b      	ldr	r3, [r7, #4]
}
 8001392:	4618      	mov	r0, r3
 8001394:	3718      	adds	r7, #24
 8001396:	46bd      	mov	sp, r7
 8001398:	bd80      	pop	{r7, pc}

0800139a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800139a:	b580      	push	{r7, lr}
 800139c:	b086      	sub	sp, #24
 800139e:	af00      	add	r7, sp, #0
 80013a0:	60f8      	str	r0, [r7, #12]
 80013a2:	60b9      	str	r1, [r7, #8]
 80013a4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013a6:	2300      	movs	r3, #0
 80013a8:	617b      	str	r3, [r7, #20]
 80013aa:	e009      	b.n	80013c0 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80013ac:	68bb      	ldr	r3, [r7, #8]
 80013ae:	1c5a      	adds	r2, r3, #1
 80013b0:	60ba      	str	r2, [r7, #8]
 80013b2:	781b      	ldrb	r3, [r3, #0]
 80013b4:	4618      	mov	r0, r3
 80013b6:	f7ff fb9b 	bl	8000af0 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013ba:	697b      	ldr	r3, [r7, #20]
 80013bc:	3301      	adds	r3, #1
 80013be:	617b      	str	r3, [r7, #20]
 80013c0:	697a      	ldr	r2, [r7, #20]
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	429a      	cmp	r2, r3
 80013c6:	dbf1      	blt.n	80013ac <_write+0x12>
  }
  return len;
 80013c8:	687b      	ldr	r3, [r7, #4]
}
 80013ca:	4618      	mov	r0, r3
 80013cc:	3718      	adds	r7, #24
 80013ce:	46bd      	mov	sp, r7
 80013d0:	bd80      	pop	{r7, pc}

080013d2 <_close>:

int _close(int file)
{
 80013d2:	b480      	push	{r7}
 80013d4:	b083      	sub	sp, #12
 80013d6:	af00      	add	r7, sp, #0
 80013d8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80013da:	f04f 33ff 	mov.w	r3, #4294967295
}
 80013de:	4618      	mov	r0, r3
 80013e0:	370c      	adds	r7, #12
 80013e2:	46bd      	mov	sp, r7
 80013e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e8:	4770      	bx	lr

080013ea <_fstat>:


int _fstat(int file, struct stat *st)
{
 80013ea:	b480      	push	{r7}
 80013ec:	b083      	sub	sp, #12
 80013ee:	af00      	add	r7, sp, #0
 80013f0:	6078      	str	r0, [r7, #4]
 80013f2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80013f4:	683b      	ldr	r3, [r7, #0]
 80013f6:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80013fa:	605a      	str	r2, [r3, #4]
  return 0;
 80013fc:	2300      	movs	r3, #0
}
 80013fe:	4618      	mov	r0, r3
 8001400:	370c      	adds	r7, #12
 8001402:	46bd      	mov	sp, r7
 8001404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001408:	4770      	bx	lr

0800140a <_isatty>:

int _isatty(int file)
{
 800140a:	b480      	push	{r7}
 800140c:	b083      	sub	sp, #12
 800140e:	af00      	add	r7, sp, #0
 8001410:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001412:	2301      	movs	r3, #1
}
 8001414:	4618      	mov	r0, r3
 8001416:	370c      	adds	r7, #12
 8001418:	46bd      	mov	sp, r7
 800141a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141e:	4770      	bx	lr

08001420 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001420:	b480      	push	{r7}
 8001422:	b085      	sub	sp, #20
 8001424:	af00      	add	r7, sp, #0
 8001426:	60f8      	str	r0, [r7, #12]
 8001428:	60b9      	str	r1, [r7, #8]
 800142a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800142c:	2300      	movs	r3, #0
}
 800142e:	4618      	mov	r0, r3
 8001430:	3714      	adds	r7, #20
 8001432:	46bd      	mov	sp, r7
 8001434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001438:	4770      	bx	lr
	...

0800143c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	b086      	sub	sp, #24
 8001440:	af00      	add	r7, sp, #0
 8001442:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001444:	4a14      	ldr	r2, [pc, #80]	@ (8001498 <_sbrk+0x5c>)
 8001446:	4b15      	ldr	r3, [pc, #84]	@ (800149c <_sbrk+0x60>)
 8001448:	1ad3      	subs	r3, r2, r3
 800144a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800144c:	697b      	ldr	r3, [r7, #20]
 800144e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001450:	4b13      	ldr	r3, [pc, #76]	@ (80014a0 <_sbrk+0x64>)
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	2b00      	cmp	r3, #0
 8001456:	d102      	bne.n	800145e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001458:	4b11      	ldr	r3, [pc, #68]	@ (80014a0 <_sbrk+0x64>)
 800145a:	4a12      	ldr	r2, [pc, #72]	@ (80014a4 <_sbrk+0x68>)
 800145c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800145e:	4b10      	ldr	r3, [pc, #64]	@ (80014a0 <_sbrk+0x64>)
 8001460:	681a      	ldr	r2, [r3, #0]
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	4413      	add	r3, r2
 8001466:	693a      	ldr	r2, [r7, #16]
 8001468:	429a      	cmp	r2, r3
 800146a:	d207      	bcs.n	800147c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800146c:	f008 fba4 	bl	8009bb8 <__errno>
 8001470:	4603      	mov	r3, r0
 8001472:	220c      	movs	r2, #12
 8001474:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001476:	f04f 33ff 	mov.w	r3, #4294967295
 800147a:	e009      	b.n	8001490 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800147c:	4b08      	ldr	r3, [pc, #32]	@ (80014a0 <_sbrk+0x64>)
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001482:	4b07      	ldr	r3, [pc, #28]	@ (80014a0 <_sbrk+0x64>)
 8001484:	681a      	ldr	r2, [r3, #0]
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	4413      	add	r3, r2
 800148a:	4a05      	ldr	r2, [pc, #20]	@ (80014a0 <_sbrk+0x64>)
 800148c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800148e:	68fb      	ldr	r3, [r7, #12]
}
 8001490:	4618      	mov	r0, r3
 8001492:	3718      	adds	r7, #24
 8001494:	46bd      	mov	sp, r7
 8001496:	bd80      	pop	{r7, pc}
 8001498:	20080000 	.word	0x20080000
 800149c:	00000400 	.word	0x00000400
 80014a0:	2000092c 	.word	0x2000092c
 80014a4:	20005460 	.word	0x20005460

080014a8 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80014a8:	b480      	push	{r7}
 80014aa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80014ac:	4b06      	ldr	r3, [pc, #24]	@ (80014c8 <SystemInit+0x20>)
 80014ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80014b2:	4a05      	ldr	r2, [pc, #20]	@ (80014c8 <SystemInit+0x20>)
 80014b4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80014b8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80014bc:	bf00      	nop
 80014be:	46bd      	mov	sp, r7
 80014c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c4:	4770      	bx	lr
 80014c6:	bf00      	nop
 80014c8:	e000ed00 	.word	0xe000ed00

080014cc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80014cc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001504 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80014d0:	f7ff ffea 	bl	80014a8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80014d4:	480c      	ldr	r0, [pc, #48]	@ (8001508 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80014d6:	490d      	ldr	r1, [pc, #52]	@ (800150c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80014d8:	4a0d      	ldr	r2, [pc, #52]	@ (8001510 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80014da:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80014dc:	e002      	b.n	80014e4 <LoopCopyDataInit>

080014de <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80014de:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80014e0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80014e2:	3304      	adds	r3, #4

080014e4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80014e4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80014e6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80014e8:	d3f9      	bcc.n	80014de <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80014ea:	4a0a      	ldr	r2, [pc, #40]	@ (8001514 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80014ec:	4c0a      	ldr	r4, [pc, #40]	@ (8001518 <LoopFillZerobss+0x22>)
  movs r3, #0
 80014ee:	2300      	movs	r3, #0
  b LoopFillZerobss
 80014f0:	e001      	b.n	80014f6 <LoopFillZerobss>

080014f2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80014f2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80014f4:	3204      	adds	r2, #4

080014f6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80014f6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80014f8:	d3fb      	bcc.n	80014f2 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80014fa:	f008 fb63 	bl	8009bc4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80014fe:	f7ff f867 	bl	80005d0 <main>
  bx  lr    
 8001502:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001504:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8001508:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800150c:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8001510:	0800a7b8 	.word	0x0800a7b8
  ldr r2, =_sbss
 8001514:	200001ac 	.word	0x200001ac
  ldr r4, =_ebss
 8001518:	20005460 	.word	0x20005460

0800151c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800151c:	e7fe      	b.n	800151c <ADC_IRQHandler>

0800151e <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800151e:	b580      	push	{r7, lr}
 8001520:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001522:	2003      	movs	r0, #3
 8001524:	f000 fcf7 	bl	8001f16 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001528:	200f      	movs	r0, #15
 800152a:	f7ff fe67 	bl	80011fc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800152e:	f7ff fc39 	bl	8000da4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001532:	2300      	movs	r3, #0
}
 8001534:	4618      	mov	r0, r3
 8001536:	bd80      	pop	{r7, pc}

08001538 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001538:	b480      	push	{r7}
 800153a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800153c:	4b06      	ldr	r3, [pc, #24]	@ (8001558 <HAL_IncTick+0x20>)
 800153e:	781b      	ldrb	r3, [r3, #0]
 8001540:	461a      	mov	r2, r3
 8001542:	4b06      	ldr	r3, [pc, #24]	@ (800155c <HAL_IncTick+0x24>)
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	4413      	add	r3, r2
 8001548:	4a04      	ldr	r2, [pc, #16]	@ (800155c <HAL_IncTick+0x24>)
 800154a:	6013      	str	r3, [r2, #0]
}
 800154c:	bf00      	nop
 800154e:	46bd      	mov	sp, r7
 8001550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001554:	4770      	bx	lr
 8001556:	bf00      	nop
 8001558:	20000008 	.word	0x20000008
 800155c:	20000930 	.word	0x20000930

08001560 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001560:	b480      	push	{r7}
 8001562:	af00      	add	r7, sp, #0
  return uwTick;
 8001564:	4b03      	ldr	r3, [pc, #12]	@ (8001574 <HAL_GetTick+0x14>)
 8001566:	681b      	ldr	r3, [r3, #0]
}
 8001568:	4618      	mov	r0, r3
 800156a:	46bd      	mov	sp, r7
 800156c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001570:	4770      	bx	lr
 8001572:	bf00      	nop
 8001574:	20000930 	.word	0x20000930

08001578 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	b084      	sub	sp, #16
 800157c:	af00      	add	r7, sp, #0
 800157e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001580:	f7ff ffee 	bl	8001560 <HAL_GetTick>
 8001584:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800158a:	68fb      	ldr	r3, [r7, #12]
 800158c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001590:	d005      	beq.n	800159e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001592:	4b0a      	ldr	r3, [pc, #40]	@ (80015bc <HAL_Delay+0x44>)
 8001594:	781b      	ldrb	r3, [r3, #0]
 8001596:	461a      	mov	r2, r3
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	4413      	add	r3, r2
 800159c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800159e:	bf00      	nop
 80015a0:	f7ff ffde 	bl	8001560 <HAL_GetTick>
 80015a4:	4602      	mov	r2, r0
 80015a6:	68bb      	ldr	r3, [r7, #8]
 80015a8:	1ad3      	subs	r3, r2, r3
 80015aa:	68fa      	ldr	r2, [r7, #12]
 80015ac:	429a      	cmp	r2, r3
 80015ae:	d8f7      	bhi.n	80015a0 <HAL_Delay+0x28>
  {
  }
}
 80015b0:	bf00      	nop
 80015b2:	bf00      	nop
 80015b4:	3710      	adds	r7, #16
 80015b6:	46bd      	mov	sp, r7
 80015b8:	bd80      	pop	{r7, pc}
 80015ba:	bf00      	nop
 80015bc:	20000008 	.word	0x20000008

080015c0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b084      	sub	sp, #16
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80015c8:	2300      	movs	r3, #0
 80015ca:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d101      	bne.n	80015d6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80015d2:	2301      	movs	r3, #1
 80015d4:	e031      	b.n	800163a <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d109      	bne.n	80015f2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80015de:	6878      	ldr	r0, [r7, #4]
 80015e0:	f7ff fc08 	bl	8000df4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	2200      	movs	r2, #0
 80015e8:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	2200      	movs	r2, #0
 80015ee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015f6:	f003 0310 	and.w	r3, r3, #16
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d116      	bne.n	800162c <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001602:	4b10      	ldr	r3, [pc, #64]	@ (8001644 <HAL_ADC_Init+0x84>)
 8001604:	4013      	ands	r3, r2
 8001606:	f043 0202 	orr.w	r2, r3, #2
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800160e:	6878      	ldr	r0, [r7, #4]
 8001610:	f000 fada 	bl	8001bc8 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	2200      	movs	r2, #0
 8001618:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800161e:	f023 0303 	bic.w	r3, r3, #3
 8001622:	f043 0201 	orr.w	r2, r3, #1
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	641a      	str	r2, [r3, #64]	@ 0x40
 800162a:	e001      	b.n	8001630 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800162c:	2301      	movs	r3, #1
 800162e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	2200      	movs	r2, #0
 8001634:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001638:	7bfb      	ldrb	r3, [r7, #15]
}
 800163a:	4618      	mov	r0, r3
 800163c:	3710      	adds	r7, #16
 800163e:	46bd      	mov	sp, r7
 8001640:	bd80      	pop	{r7, pc}
 8001642:	bf00      	nop
 8001644:	ffffeefd 	.word	0xffffeefd

08001648 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001648:	b480      	push	{r7}
 800164a:	b085      	sub	sp, #20
 800164c:	af00      	add	r7, sp, #0
 800164e:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0;
 8001650:	2300      	movs	r3, #0
 8001652:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800165a:	2b01      	cmp	r3, #1
 800165c:	d101      	bne.n	8001662 <HAL_ADC_Start+0x1a>
 800165e:	2302      	movs	r3, #2
 8001660:	e0ad      	b.n	80017be <HAL_ADC_Start+0x176>
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	2201      	movs	r2, #1
 8001666:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	689b      	ldr	r3, [r3, #8]
 8001670:	f003 0301 	and.w	r3, r3, #1
 8001674:	2b01      	cmp	r3, #1
 8001676:	d018      	beq.n	80016aa <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	689a      	ldr	r2, [r3, #8]
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	f042 0201 	orr.w	r2, r2, #1
 8001686:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8001688:	4b50      	ldr	r3, [pc, #320]	@ (80017cc <HAL_ADC_Start+0x184>)
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	4a50      	ldr	r2, [pc, #320]	@ (80017d0 <HAL_ADC_Start+0x188>)
 800168e:	fba2 2303 	umull	r2, r3, r2, r3
 8001692:	0c9a      	lsrs	r2, r3, #18
 8001694:	4613      	mov	r3, r2
 8001696:	005b      	lsls	r3, r3, #1
 8001698:	4413      	add	r3, r2
 800169a:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 800169c:	e002      	b.n	80016a4 <HAL_ADC_Start+0x5c>
    {
      counter--;
 800169e:	68fb      	ldr	r3, [r7, #12]
 80016a0:	3b01      	subs	r3, #1
 80016a2:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 80016a4:	68fb      	ldr	r3, [r7, #12]
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d1f9      	bne.n	800169e <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	689b      	ldr	r3, [r3, #8]
 80016b0:	f003 0301 	and.w	r3, r3, #1
 80016b4:	2b01      	cmp	r3, #1
 80016b6:	d175      	bne.n	80017a4 <HAL_ADC_Start+0x15c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80016bc:	4b45      	ldr	r3, [pc, #276]	@ (80017d4 <HAL_ADC_Start+0x18c>)
 80016be:	4013      	ands	r3, r2
 80016c0:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	685b      	ldr	r3, [r3, #4]
 80016ce:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d007      	beq.n	80016e6 <HAL_ADC_Start+0x9e>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016da:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80016de:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016ea:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80016ee:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80016f2:	d106      	bne.n	8001702 <HAL_ADC_Start+0xba>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80016f8:	f023 0206 	bic.w	r2, r3, #6
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	645a      	str	r2, [r3, #68]	@ 0x44
 8001700:	e002      	b.n	8001708 <HAL_ADC_Start+0xc0>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	2200      	movs	r2, #0
 8001706:	645a      	str	r2, [r3, #68]	@ 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	2200      	movs	r2, #0
 800170c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8001718:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 800171a:	4b2f      	ldr	r3, [pc, #188]	@ (80017d8 <HAL_ADC_Start+0x190>)
 800171c:	685b      	ldr	r3, [r3, #4]
 800171e:	f003 031f 	and.w	r3, r3, #31
 8001722:	2b00      	cmp	r3, #0
 8001724:	d10f      	bne.n	8001746 <HAL_ADC_Start+0xfe>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	689b      	ldr	r3, [r3, #8]
 800172c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001730:	2b00      	cmp	r3, #0
 8001732:	d143      	bne.n	80017bc <HAL_ADC_Start+0x174>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	689a      	ldr	r2, [r3, #8]
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001742:	609a      	str	r2, [r3, #8]
 8001744:	e03a      	b.n	80017bc <HAL_ADC_Start+0x174>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	4a24      	ldr	r2, [pc, #144]	@ (80017dc <HAL_ADC_Start+0x194>)
 800174c:	4293      	cmp	r3, r2
 800174e:	d10e      	bne.n	800176e <HAL_ADC_Start+0x126>
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	689b      	ldr	r3, [r3, #8]
 8001756:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800175a:	2b00      	cmp	r3, #0
 800175c:	d107      	bne.n	800176e <HAL_ADC_Start+0x126>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	689a      	ldr	r2, [r3, #8]
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 800176c:	609a      	str	r2, [r3, #8]
      }

      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 800176e:	4b1a      	ldr	r3, [pc, #104]	@ (80017d8 <HAL_ADC_Start+0x190>)
 8001770:	685b      	ldr	r3, [r3, #4]
 8001772:	f003 0310 	and.w	r3, r3, #16
 8001776:	2b00      	cmp	r3, #0
 8001778:	d120      	bne.n	80017bc <HAL_ADC_Start+0x174>
      {
        /* if instance of handle correspond to ADC3 and no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	4a18      	ldr	r2, [pc, #96]	@ (80017e0 <HAL_ADC_Start+0x198>)
 8001780:	4293      	cmp	r3, r2
 8001782:	d11b      	bne.n	80017bc <HAL_ADC_Start+0x174>
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	689b      	ldr	r3, [r3, #8]
 800178a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800178e:	2b00      	cmp	r3, #0
 8001790:	d114      	bne.n	80017bc <HAL_ADC_Start+0x174>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	689a      	ldr	r2, [r3, #8]
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80017a0:	609a      	str	r2, [r3, #8]
 80017a2:	e00b      	b.n	80017bc <HAL_ADC_Start+0x174>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017a8:	f043 0210 	orr.w	r2, r3, #16
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017b4:	f043 0201 	orr.w	r2, r3, #1
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	645a      	str	r2, [r3, #68]	@ 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80017bc:	2300      	movs	r3, #0
}
 80017be:	4618      	mov	r0, r3
 80017c0:	3714      	adds	r7, #20
 80017c2:	46bd      	mov	sp, r7
 80017c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c8:	4770      	bx	lr
 80017ca:	bf00      	nop
 80017cc:	20000000 	.word	0x20000000
 80017d0:	431bde83 	.word	0x431bde83
 80017d4:	fffff8fe 	.word	0xfffff8fe
 80017d8:	40012300 	.word	0x40012300
 80017dc:	40012000 	.word	0x40012000
 80017e0:	40012200 	.word	0x40012200

080017e4 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80017e4:	b580      	push	{r7, lr}
 80017e6:	b084      	sub	sp, #16
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	6078      	str	r0, [r7, #4]
 80017ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80017ee:	2300      	movs	r3, #0
 80017f0:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	689b      	ldr	r3, [r3, #8]
 80017f8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80017fc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001800:	d113      	bne.n	800182a <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	689b      	ldr	r3, [r3, #8]
 8001808:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800180c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001810:	d10b      	bne.n	800182a <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001816:	f043 0220 	orr.w	r2, r3, #32
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	2200      	movs	r2, #0
 8001822:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
    return HAL_ERROR;
 8001826:	2301      	movs	r3, #1
 8001828:	e063      	b.n	80018f2 <HAL_ADC_PollForConversion+0x10e>
  }
 
  /* Get tick */ 
  tickstart = HAL_GetTick();
 800182a:	f7ff fe99 	bl	8001560 <HAL_GetTick>
 800182e:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001830:	e021      	b.n	8001876 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8001832:	683b      	ldr	r3, [r7, #0]
 8001834:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001838:	d01d      	beq.n	8001876 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0) || ((HAL_GetTick() - tickstart ) > Timeout))
 800183a:	683b      	ldr	r3, [r7, #0]
 800183c:	2b00      	cmp	r3, #0
 800183e:	d007      	beq.n	8001850 <HAL_ADC_PollForConversion+0x6c>
 8001840:	f7ff fe8e 	bl	8001560 <HAL_GetTick>
 8001844:	4602      	mov	r2, r0
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	1ad3      	subs	r3, r2, r3
 800184a:	683a      	ldr	r2, [r7, #0]
 800184c:	429a      	cmp	r2, r3
 800184e:	d212      	bcs.n	8001876 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	f003 0302 	and.w	r3, r3, #2
 800185a:	2b02      	cmp	r3, #2
 800185c:	d00b      	beq.n	8001876 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001862:	f043 0204 	orr.w	r2, r3, #4
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	641a      	str	r2, [r3, #64]	@ 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	2200      	movs	r2, #0
 800186e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
          
          return HAL_TIMEOUT;
 8001872:	2303      	movs	r3, #3
 8001874:	e03d      	b.n	80018f2 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	f003 0302 	and.w	r3, r3, #2
 8001880:	2b02      	cmp	r3, #2
 8001882:	d1d6      	bne.n	8001832 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	f06f 0212 	mvn.w	r2, #18
 800188c:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001892:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F7, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	689b      	ldr	r3, [r3, #8]
 80018a0:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d123      	bne.n	80018f0 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	699b      	ldr	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d11f      	bne.n	80018f0 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80018b6:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d006      	beq.n	80018cc <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	689b      	ldr	r3, [r3, #8]
 80018c4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d111      	bne.n	80018f0 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018d0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	641a      	str	r2, [r3, #64]	@ 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018dc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d105      	bne.n	80018f0 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018e8:	f043 0201 	orr.w	r2, r3, #1
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 80018f0:	2300      	movs	r3, #0
}
 80018f2:	4618      	mov	r0, r3
 80018f4:	3710      	adds	r7, #16
 80018f6:	46bd      	mov	sp, r7
 80018f8:	bd80      	pop	{r7, pc}

080018fa <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 80018fa:	b480      	push	{r7}
 80018fc:	b083      	sub	sp, #12
 80018fe:	af00      	add	r7, sp, #0
 8001900:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8001908:	4618      	mov	r0, r3
 800190a:	370c      	adds	r7, #12
 800190c:	46bd      	mov	sp, r7
 800190e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001912:	4770      	bx	lr

08001914 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001914:	b480      	push	{r7}
 8001916:	b085      	sub	sp, #20
 8001918:	af00      	add	r7, sp, #0
 800191a:	6078      	str	r0, [r7, #4]
 800191c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 800191e:	2300      	movs	r3, #0
 8001920:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001928:	2b01      	cmp	r3, #1
 800192a:	d101      	bne.n	8001930 <HAL_ADC_ConfigChannel+0x1c>
 800192c:	2302      	movs	r3, #2
 800192e:	e13a      	b.n	8001ba6 <HAL_ADC_ConfigChannel+0x292>
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	2201      	movs	r2, #1
 8001934:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8001938:	683b      	ldr	r3, [r7, #0]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	2b09      	cmp	r3, #9
 800193e:	d93a      	bls.n	80019b6 <HAL_ADC_ConfigChannel+0xa2>
 8001940:	683b      	ldr	r3, [r7, #0]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8001948:	d035      	beq.n	80019b6 <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	68d9      	ldr	r1, [r3, #12]
 8001950:	683b      	ldr	r3, [r7, #0]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	b29b      	uxth	r3, r3
 8001956:	461a      	mov	r2, r3
 8001958:	4613      	mov	r3, r2
 800195a:	005b      	lsls	r3, r3, #1
 800195c:	4413      	add	r3, r2
 800195e:	3b1e      	subs	r3, #30
 8001960:	2207      	movs	r2, #7
 8001962:	fa02 f303 	lsl.w	r3, r2, r3
 8001966:	43da      	mvns	r2, r3
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	400a      	ands	r2, r1
 800196e:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001970:	683b      	ldr	r3, [r7, #0]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	4a8f      	ldr	r2, [pc, #572]	@ (8001bb4 <HAL_ADC_ConfigChannel+0x2a0>)
 8001976:	4293      	cmp	r3, r2
 8001978:	d10a      	bne.n	8001990 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	68d9      	ldr	r1, [r3, #12]
 8001980:	683b      	ldr	r3, [r7, #0]
 8001982:	689b      	ldr	r3, [r3, #8]
 8001984:	061a      	lsls	r2, r3, #24
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	430a      	orrs	r2, r1
 800198c:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800198e:	e039      	b.n	8001a04 <HAL_ADC_ConfigChannel+0xf0>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	68d9      	ldr	r1, [r3, #12]
 8001996:	683b      	ldr	r3, [r7, #0]
 8001998:	689a      	ldr	r2, [r3, #8]
 800199a:	683b      	ldr	r3, [r7, #0]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	b29b      	uxth	r3, r3
 80019a0:	4618      	mov	r0, r3
 80019a2:	4603      	mov	r3, r0
 80019a4:	005b      	lsls	r3, r3, #1
 80019a6:	4403      	add	r3, r0
 80019a8:	3b1e      	subs	r3, #30
 80019aa:	409a      	lsls	r2, r3
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	430a      	orrs	r2, r1
 80019b2:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80019b4:	e026      	b.n	8001a04 <HAL_ADC_ConfigChannel+0xf0>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	6919      	ldr	r1, [r3, #16]
 80019bc:	683b      	ldr	r3, [r7, #0]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	b29b      	uxth	r3, r3
 80019c2:	461a      	mov	r2, r3
 80019c4:	4613      	mov	r3, r2
 80019c6:	005b      	lsls	r3, r3, #1
 80019c8:	4413      	add	r3, r2
 80019ca:	f003 031f 	and.w	r3, r3, #31
 80019ce:	2207      	movs	r2, #7
 80019d0:	fa02 f303 	lsl.w	r3, r2, r3
 80019d4:	43da      	mvns	r2, r3
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	400a      	ands	r2, r1
 80019dc:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	6919      	ldr	r1, [r3, #16]
 80019e4:	683b      	ldr	r3, [r7, #0]
 80019e6:	689a      	ldr	r2, [r3, #8]
 80019e8:	683b      	ldr	r3, [r7, #0]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	b29b      	uxth	r3, r3
 80019ee:	4618      	mov	r0, r3
 80019f0:	4603      	mov	r3, r0
 80019f2:	005b      	lsls	r3, r3, #1
 80019f4:	4403      	add	r3, r0
 80019f6:	f003 031f 	and.w	r3, r3, #31
 80019fa:	409a      	lsls	r2, r3
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	430a      	orrs	r2, r1
 8001a02:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8001a04:	683b      	ldr	r3, [r7, #0]
 8001a06:	685b      	ldr	r3, [r3, #4]
 8001a08:	2b06      	cmp	r3, #6
 8001a0a:	d824      	bhi.n	8001a56 <HAL_ADC_ConfigChannel+0x142>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001a12:	683b      	ldr	r3, [r7, #0]
 8001a14:	685a      	ldr	r2, [r3, #4]
 8001a16:	4613      	mov	r3, r2
 8001a18:	009b      	lsls	r3, r3, #2
 8001a1a:	4413      	add	r3, r2
 8001a1c:	3b05      	subs	r3, #5
 8001a1e:	221f      	movs	r2, #31
 8001a20:	fa02 f303 	lsl.w	r3, r2, r3
 8001a24:	43da      	mvns	r2, r3
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	400a      	ands	r2, r1
 8001a2c:	635a      	str	r2, [r3, #52]	@ 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001a34:	683b      	ldr	r3, [r7, #0]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	b29b      	uxth	r3, r3
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	683b      	ldr	r3, [r7, #0]
 8001a3e:	685a      	ldr	r2, [r3, #4]
 8001a40:	4613      	mov	r3, r2
 8001a42:	009b      	lsls	r3, r3, #2
 8001a44:	4413      	add	r3, r2
 8001a46:	3b05      	subs	r3, #5
 8001a48:	fa00 f203 	lsl.w	r2, r0, r3
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	430a      	orrs	r2, r1
 8001a52:	635a      	str	r2, [r3, #52]	@ 0x34
 8001a54:	e04c      	b.n	8001af0 <HAL_ADC_ConfigChannel+0x1dc>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8001a56:	683b      	ldr	r3, [r7, #0]
 8001a58:	685b      	ldr	r3, [r3, #4]
 8001a5a:	2b0c      	cmp	r3, #12
 8001a5c:	d824      	bhi.n	8001aa8 <HAL_ADC_ConfigChannel+0x194>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001a64:	683b      	ldr	r3, [r7, #0]
 8001a66:	685a      	ldr	r2, [r3, #4]
 8001a68:	4613      	mov	r3, r2
 8001a6a:	009b      	lsls	r3, r3, #2
 8001a6c:	4413      	add	r3, r2
 8001a6e:	3b23      	subs	r3, #35	@ 0x23
 8001a70:	221f      	movs	r2, #31
 8001a72:	fa02 f303 	lsl.w	r3, r2, r3
 8001a76:	43da      	mvns	r2, r3
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	400a      	ands	r2, r1
 8001a7e:	631a      	str	r2, [r3, #48]	@ 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001a86:	683b      	ldr	r3, [r7, #0]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	b29b      	uxth	r3, r3
 8001a8c:	4618      	mov	r0, r3
 8001a8e:	683b      	ldr	r3, [r7, #0]
 8001a90:	685a      	ldr	r2, [r3, #4]
 8001a92:	4613      	mov	r3, r2
 8001a94:	009b      	lsls	r3, r3, #2
 8001a96:	4413      	add	r3, r2
 8001a98:	3b23      	subs	r3, #35	@ 0x23
 8001a9a:	fa00 f203 	lsl.w	r2, r0, r3
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	430a      	orrs	r2, r1
 8001aa4:	631a      	str	r2, [r3, #48]	@ 0x30
 8001aa6:	e023      	b.n	8001af0 <HAL_ADC_ConfigChannel+0x1dc>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001aae:	683b      	ldr	r3, [r7, #0]
 8001ab0:	685a      	ldr	r2, [r3, #4]
 8001ab2:	4613      	mov	r3, r2
 8001ab4:	009b      	lsls	r3, r3, #2
 8001ab6:	4413      	add	r3, r2
 8001ab8:	3b41      	subs	r3, #65	@ 0x41
 8001aba:	221f      	movs	r2, #31
 8001abc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ac0:	43da      	mvns	r2, r3
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	400a      	ands	r2, r1
 8001ac8:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001ad0:	683b      	ldr	r3, [r7, #0]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	b29b      	uxth	r3, r3
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	683b      	ldr	r3, [r7, #0]
 8001ada:	685a      	ldr	r2, [r3, #4]
 8001adc:	4613      	mov	r3, r2
 8001ade:	009b      	lsls	r3, r3, #2
 8001ae0:	4413      	add	r3, r2
 8001ae2:	3b41      	subs	r3, #65	@ 0x41
 8001ae4:	fa00 f203 	lsl.w	r2, r0, r3
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	430a      	orrs	r2, r1
 8001aee:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	4a30      	ldr	r2, [pc, #192]	@ (8001bb8 <HAL_ADC_ConfigChannel+0x2a4>)
 8001af6:	4293      	cmp	r3, r2
 8001af8:	d10a      	bne.n	8001b10 <HAL_ADC_ConfigChannel+0x1fc>
 8001afa:	683b      	ldr	r3, [r7, #0]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8001b02:	d105      	bne.n	8001b10 <HAL_ADC_ConfigChannel+0x1fc>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8001b04:	4b2d      	ldr	r3, [pc, #180]	@ (8001bbc <HAL_ADC_ConfigChannel+0x2a8>)
 8001b06:	685b      	ldr	r3, [r3, #4]
 8001b08:	4a2c      	ldr	r2, [pc, #176]	@ (8001bbc <HAL_ADC_ConfigChannel+0x2a8>)
 8001b0a:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8001b0e:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	4a28      	ldr	r2, [pc, #160]	@ (8001bb8 <HAL_ADC_ConfigChannel+0x2a4>)
 8001b16:	4293      	cmp	r3, r2
 8001b18:	d10f      	bne.n	8001b3a <HAL_ADC_ConfigChannel+0x226>
 8001b1a:	683b      	ldr	r3, [r7, #0]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	2b12      	cmp	r3, #18
 8001b20:	d10b      	bne.n	8001b3a <HAL_ADC_ConfigChannel+0x226>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 8001b22:	4b26      	ldr	r3, [pc, #152]	@ (8001bbc <HAL_ADC_ConfigChannel+0x2a8>)
 8001b24:	685b      	ldr	r3, [r3, #4]
 8001b26:	4a25      	ldr	r2, [pc, #148]	@ (8001bbc <HAL_ADC_ConfigChannel+0x2a8>)
 8001b28:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8001b2c:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8001b2e:	4b23      	ldr	r3, [pc, #140]	@ (8001bbc <HAL_ADC_ConfigChannel+0x2a8>)
 8001b30:	685b      	ldr	r3, [r3, #4]
 8001b32:	4a22      	ldr	r2, [pc, #136]	@ (8001bbc <HAL_ADC_ConfigChannel+0x2a8>)
 8001b34:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001b38:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	4a1e      	ldr	r2, [pc, #120]	@ (8001bb8 <HAL_ADC_ConfigChannel+0x2a4>)
 8001b40:	4293      	cmp	r3, r2
 8001b42:	d12b      	bne.n	8001b9c <HAL_ADC_ConfigChannel+0x288>
 8001b44:	683b      	ldr	r3, [r7, #0]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	4a1a      	ldr	r2, [pc, #104]	@ (8001bb4 <HAL_ADC_ConfigChannel+0x2a0>)
 8001b4a:	4293      	cmp	r3, r2
 8001b4c:	d003      	beq.n	8001b56 <HAL_ADC_ConfigChannel+0x242>
 8001b4e:	683b      	ldr	r3, [r7, #0]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	2b11      	cmp	r3, #17
 8001b54:	d122      	bne.n	8001b9c <HAL_ADC_ConfigChannel+0x288>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 8001b56:	4b19      	ldr	r3, [pc, #100]	@ (8001bbc <HAL_ADC_ConfigChannel+0x2a8>)
 8001b58:	685b      	ldr	r3, [r3, #4]
 8001b5a:	4a18      	ldr	r2, [pc, #96]	@ (8001bbc <HAL_ADC_ConfigChannel+0x2a8>)
 8001b5c:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 8001b60:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8001b62:	4b16      	ldr	r3, [pc, #88]	@ (8001bbc <HAL_ADC_ConfigChannel+0x2a8>)
 8001b64:	685b      	ldr	r3, [r3, #4]
 8001b66:	4a15      	ldr	r2, [pc, #84]	@ (8001bbc <HAL_ADC_ConfigChannel+0x2a8>)
 8001b68:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001b6c:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001b6e:	683b      	ldr	r3, [r7, #0]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	4a10      	ldr	r2, [pc, #64]	@ (8001bb4 <HAL_ADC_ConfigChannel+0x2a0>)
 8001b74:	4293      	cmp	r3, r2
 8001b76:	d111      	bne.n	8001b9c <HAL_ADC_ConfigChannel+0x288>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8001b78:	4b11      	ldr	r3, [pc, #68]	@ (8001bc0 <HAL_ADC_ConfigChannel+0x2ac>)
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	4a11      	ldr	r2, [pc, #68]	@ (8001bc4 <HAL_ADC_ConfigChannel+0x2b0>)
 8001b7e:	fba2 2303 	umull	r2, r3, r2, r3
 8001b82:	0c9a      	lsrs	r2, r3, #18
 8001b84:	4613      	mov	r3, r2
 8001b86:	009b      	lsls	r3, r3, #2
 8001b88:	4413      	add	r3, r2
 8001b8a:	005b      	lsls	r3, r3, #1
 8001b8c:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8001b8e:	e002      	b.n	8001b96 <HAL_ADC_ConfigChannel+0x282>
      {
        counter--;
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	3b01      	subs	r3, #1
 8001b94:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d1f9      	bne.n	8001b90 <HAL_ADC_ConfigChannel+0x27c>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001ba4:	2300      	movs	r3, #0
}
 8001ba6:	4618      	mov	r0, r3
 8001ba8:	3714      	adds	r7, #20
 8001baa:	46bd      	mov	sp, r7
 8001bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb0:	4770      	bx	lr
 8001bb2:	bf00      	nop
 8001bb4:	10000012 	.word	0x10000012
 8001bb8:	40012000 	.word	0x40012000
 8001bbc:	40012300 	.word	0x40012300
 8001bc0:	20000000 	.word	0x20000000
 8001bc4:	431bde83 	.word	0x431bde83

08001bc8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001bc8:	b480      	push	{r7}
 8001bca:	b083      	sub	sp, #12
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8001bd0:	4b78      	ldr	r3, [pc, #480]	@ (8001db4 <ADC_Init+0x1ec>)
 8001bd2:	685b      	ldr	r3, [r3, #4]
 8001bd4:	4a77      	ldr	r2, [pc, #476]	@ (8001db4 <ADC_Init+0x1ec>)
 8001bd6:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 8001bda:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8001bdc:	4b75      	ldr	r3, [pc, #468]	@ (8001db4 <ADC_Init+0x1ec>)
 8001bde:	685a      	ldr	r2, [r3, #4]
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	685b      	ldr	r3, [r3, #4]
 8001be4:	4973      	ldr	r1, [pc, #460]	@ (8001db4 <ADC_Init+0x1ec>)
 8001be6:	4313      	orrs	r3, r2
 8001be8:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	685a      	ldr	r2, [r3, #4]
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001bf8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	6859      	ldr	r1, [r3, #4]
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	691b      	ldr	r3, [r3, #16]
 8001c04:	021a      	lsls	r2, r3, #8
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	430a      	orrs	r2, r1
 8001c0c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	685a      	ldr	r2, [r3, #4]
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8001c1c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	6859      	ldr	r1, [r3, #4]
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	689a      	ldr	r2, [r3, #8]
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	430a      	orrs	r2, r1
 8001c2e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	689a      	ldr	r2, [r3, #8]
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001c3e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	6899      	ldr	r1, [r3, #8]
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	68da      	ldr	r2, [r3, #12]
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	430a      	orrs	r2, r1
 8001c50:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c56:	4a58      	ldr	r2, [pc, #352]	@ (8001db8 <ADC_Init+0x1f0>)
 8001c58:	4293      	cmp	r3, r2
 8001c5a:	d022      	beq.n	8001ca2 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	689a      	ldr	r2, [r3, #8]
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001c6a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	6899      	ldr	r1, [r3, #8]
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	430a      	orrs	r2, r1
 8001c7c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	689a      	ldr	r2, [r3, #8]
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001c8c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	6899      	ldr	r1, [r3, #8]
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	430a      	orrs	r2, r1
 8001c9e:	609a      	str	r2, [r3, #8]
 8001ca0:	e00f      	b.n	8001cc2 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	689a      	ldr	r2, [r3, #8]
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001cb0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	689a      	ldr	r2, [r3, #8]
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001cc0:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	689a      	ldr	r2, [r3, #8]
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	f022 0202 	bic.w	r2, r2, #2
 8001cd0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	6899      	ldr	r1, [r3, #8]
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	699b      	ldr	r3, [r3, #24]
 8001cdc:	005a      	lsls	r2, r3, #1
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	430a      	orrs	r2, r1
 8001ce4:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d01b      	beq.n	8001d28 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	685a      	ldr	r2, [r3, #4]
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001cfe:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	685a      	ldr	r2, [r3, #4]
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8001d0e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	6859      	ldr	r1, [r3, #4]
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d1a:	3b01      	subs	r3, #1
 8001d1c:	035a      	lsls	r2, r3, #13
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	430a      	orrs	r2, r1
 8001d24:	605a      	str	r2, [r3, #4]
 8001d26:	e007      	b.n	8001d38 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	685a      	ldr	r2, [r3, #4]
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001d36:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8001d46:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	69db      	ldr	r3, [r3, #28]
 8001d52:	3b01      	subs	r3, #1
 8001d54:	051a      	lsls	r2, r3, #20
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	430a      	orrs	r2, r1
 8001d5c:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	689a      	ldr	r2, [r3, #8]
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8001d6c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	6899      	ldr	r1, [r3, #8]
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001d7a:	025a      	lsls	r2, r3, #9
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	430a      	orrs	r2, r1
 8001d82:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	689a      	ldr	r2, [r3, #8]
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001d92:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	6899      	ldr	r1, [r3, #8]
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	695b      	ldr	r3, [r3, #20]
 8001d9e:	029a      	lsls	r2, r3, #10
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	430a      	orrs	r2, r1
 8001da6:	609a      	str	r2, [r3, #8]
}
 8001da8:	bf00      	nop
 8001daa:	370c      	adds	r7, #12
 8001dac:	46bd      	mov	sp, r7
 8001dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db2:	4770      	bx	lr
 8001db4:	40012300 	.word	0x40012300
 8001db8:	0f000001 	.word	0x0f000001

08001dbc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001dbc:	b480      	push	{r7}
 8001dbe:	b085      	sub	sp, #20
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	f003 0307 	and.w	r3, r3, #7
 8001dca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001dcc:	4b0b      	ldr	r3, [pc, #44]	@ (8001dfc <__NVIC_SetPriorityGrouping+0x40>)
 8001dce:	68db      	ldr	r3, [r3, #12]
 8001dd0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001dd2:	68ba      	ldr	r2, [r7, #8]
 8001dd4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001dd8:	4013      	ands	r3, r2
 8001dda:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001de0:	68bb      	ldr	r3, [r7, #8]
 8001de2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001de4:	4b06      	ldr	r3, [pc, #24]	@ (8001e00 <__NVIC_SetPriorityGrouping+0x44>)
 8001de6:	4313      	orrs	r3, r2
 8001de8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001dea:	4a04      	ldr	r2, [pc, #16]	@ (8001dfc <__NVIC_SetPriorityGrouping+0x40>)
 8001dec:	68bb      	ldr	r3, [r7, #8]
 8001dee:	60d3      	str	r3, [r2, #12]
}
 8001df0:	bf00      	nop
 8001df2:	3714      	adds	r7, #20
 8001df4:	46bd      	mov	sp, r7
 8001df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfa:	4770      	bx	lr
 8001dfc:	e000ed00 	.word	0xe000ed00
 8001e00:	05fa0000 	.word	0x05fa0000

08001e04 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001e04:	b480      	push	{r7}
 8001e06:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001e08:	4b04      	ldr	r3, [pc, #16]	@ (8001e1c <__NVIC_GetPriorityGrouping+0x18>)
 8001e0a:	68db      	ldr	r3, [r3, #12]
 8001e0c:	0a1b      	lsrs	r3, r3, #8
 8001e0e:	f003 0307 	and.w	r3, r3, #7
}
 8001e12:	4618      	mov	r0, r3
 8001e14:	46bd      	mov	sp, r7
 8001e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e1a:	4770      	bx	lr
 8001e1c:	e000ed00 	.word	0xe000ed00

08001e20 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e20:	b480      	push	{r7}
 8001e22:	b083      	sub	sp, #12
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	4603      	mov	r3, r0
 8001e28:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	db0b      	blt.n	8001e4a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001e32:	79fb      	ldrb	r3, [r7, #7]
 8001e34:	f003 021f 	and.w	r2, r3, #31
 8001e38:	4907      	ldr	r1, [pc, #28]	@ (8001e58 <__NVIC_EnableIRQ+0x38>)
 8001e3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e3e:	095b      	lsrs	r3, r3, #5
 8001e40:	2001      	movs	r0, #1
 8001e42:	fa00 f202 	lsl.w	r2, r0, r2
 8001e46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001e4a:	bf00      	nop
 8001e4c:	370c      	adds	r7, #12
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e54:	4770      	bx	lr
 8001e56:	bf00      	nop
 8001e58:	e000e100 	.word	0xe000e100

08001e5c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001e5c:	b480      	push	{r7}
 8001e5e:	b083      	sub	sp, #12
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	4603      	mov	r3, r0
 8001e64:	6039      	str	r1, [r7, #0]
 8001e66:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	db0a      	blt.n	8001e86 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e70:	683b      	ldr	r3, [r7, #0]
 8001e72:	b2da      	uxtb	r2, r3
 8001e74:	490c      	ldr	r1, [pc, #48]	@ (8001ea8 <__NVIC_SetPriority+0x4c>)
 8001e76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e7a:	0112      	lsls	r2, r2, #4
 8001e7c:	b2d2      	uxtb	r2, r2
 8001e7e:	440b      	add	r3, r1
 8001e80:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001e84:	e00a      	b.n	8001e9c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e86:	683b      	ldr	r3, [r7, #0]
 8001e88:	b2da      	uxtb	r2, r3
 8001e8a:	4908      	ldr	r1, [pc, #32]	@ (8001eac <__NVIC_SetPriority+0x50>)
 8001e8c:	79fb      	ldrb	r3, [r7, #7]
 8001e8e:	f003 030f 	and.w	r3, r3, #15
 8001e92:	3b04      	subs	r3, #4
 8001e94:	0112      	lsls	r2, r2, #4
 8001e96:	b2d2      	uxtb	r2, r2
 8001e98:	440b      	add	r3, r1
 8001e9a:	761a      	strb	r2, [r3, #24]
}
 8001e9c:	bf00      	nop
 8001e9e:	370c      	adds	r7, #12
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea6:	4770      	bx	lr
 8001ea8:	e000e100 	.word	0xe000e100
 8001eac:	e000ed00 	.word	0xe000ed00

08001eb0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001eb0:	b480      	push	{r7}
 8001eb2:	b089      	sub	sp, #36	@ 0x24
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	60f8      	str	r0, [r7, #12]
 8001eb8:	60b9      	str	r1, [r7, #8]
 8001eba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	f003 0307 	and.w	r3, r3, #7
 8001ec2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ec4:	69fb      	ldr	r3, [r7, #28]
 8001ec6:	f1c3 0307 	rsb	r3, r3, #7
 8001eca:	2b04      	cmp	r3, #4
 8001ecc:	bf28      	it	cs
 8001ece:	2304      	movcs	r3, #4
 8001ed0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ed2:	69fb      	ldr	r3, [r7, #28]
 8001ed4:	3304      	adds	r3, #4
 8001ed6:	2b06      	cmp	r3, #6
 8001ed8:	d902      	bls.n	8001ee0 <NVIC_EncodePriority+0x30>
 8001eda:	69fb      	ldr	r3, [r7, #28]
 8001edc:	3b03      	subs	r3, #3
 8001ede:	e000      	b.n	8001ee2 <NVIC_EncodePriority+0x32>
 8001ee0:	2300      	movs	r3, #0
 8001ee2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ee4:	f04f 32ff 	mov.w	r2, #4294967295
 8001ee8:	69bb      	ldr	r3, [r7, #24]
 8001eea:	fa02 f303 	lsl.w	r3, r2, r3
 8001eee:	43da      	mvns	r2, r3
 8001ef0:	68bb      	ldr	r3, [r7, #8]
 8001ef2:	401a      	ands	r2, r3
 8001ef4:	697b      	ldr	r3, [r7, #20]
 8001ef6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ef8:	f04f 31ff 	mov.w	r1, #4294967295
 8001efc:	697b      	ldr	r3, [r7, #20]
 8001efe:	fa01 f303 	lsl.w	r3, r1, r3
 8001f02:	43d9      	mvns	r1, r3
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f08:	4313      	orrs	r3, r2
         );
}
 8001f0a:	4618      	mov	r0, r3
 8001f0c:	3724      	adds	r7, #36	@ 0x24
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f14:	4770      	bx	lr

08001f16 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f16:	b580      	push	{r7, lr}
 8001f18:	b082      	sub	sp, #8
 8001f1a:	af00      	add	r7, sp, #0
 8001f1c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001f1e:	6878      	ldr	r0, [r7, #4]
 8001f20:	f7ff ff4c 	bl	8001dbc <__NVIC_SetPriorityGrouping>
}
 8001f24:	bf00      	nop
 8001f26:	3708      	adds	r7, #8
 8001f28:	46bd      	mov	sp, r7
 8001f2a:	bd80      	pop	{r7, pc}

08001f2c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	b086      	sub	sp, #24
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	4603      	mov	r3, r0
 8001f34:	60b9      	str	r1, [r7, #8]
 8001f36:	607a      	str	r2, [r7, #4]
 8001f38:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001f3e:	f7ff ff61 	bl	8001e04 <__NVIC_GetPriorityGrouping>
 8001f42:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001f44:	687a      	ldr	r2, [r7, #4]
 8001f46:	68b9      	ldr	r1, [r7, #8]
 8001f48:	6978      	ldr	r0, [r7, #20]
 8001f4a:	f7ff ffb1 	bl	8001eb0 <NVIC_EncodePriority>
 8001f4e:	4602      	mov	r2, r0
 8001f50:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f54:	4611      	mov	r1, r2
 8001f56:	4618      	mov	r0, r3
 8001f58:	f7ff ff80 	bl	8001e5c <__NVIC_SetPriority>
}
 8001f5c:	bf00      	nop
 8001f5e:	3718      	adds	r7, #24
 8001f60:	46bd      	mov	sp, r7
 8001f62:	bd80      	pop	{r7, pc}

08001f64 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f64:	b580      	push	{r7, lr}
 8001f66:	b082      	sub	sp, #8
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	4603      	mov	r3, r0
 8001f6c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001f6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f72:	4618      	mov	r0, r3
 8001f74:	f7ff ff54 	bl	8001e20 <__NVIC_EnableIRQ>
}
 8001f78:	bf00      	nop
 8001f7a:	3708      	adds	r7, #8
 8001f7c:	46bd      	mov	sp, r7
 8001f7e:	bd80      	pop	{r7, pc}

08001f80 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001f80:	b580      	push	{r7, lr}
 8001f82:	b086      	sub	sp, #24
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001f88:	2300      	movs	r3, #0
 8001f8a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001f8c:	f7ff fae8 	bl	8001560 <HAL_GetTick>
 8001f90:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d101      	bne.n	8001f9c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001f98:	2301      	movs	r3, #1
 8001f9a:	e099      	b.n	80020d0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	2202      	movs	r2, #2
 8001fa0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	2200      	movs	r2, #0
 8001fa8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	681a      	ldr	r2, [r3, #0]
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	f022 0201 	bic.w	r2, r2, #1
 8001fba:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001fbc:	e00f      	b.n	8001fde <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001fbe:	f7ff facf 	bl	8001560 <HAL_GetTick>
 8001fc2:	4602      	mov	r2, r0
 8001fc4:	693b      	ldr	r3, [r7, #16]
 8001fc6:	1ad3      	subs	r3, r2, r3
 8001fc8:	2b05      	cmp	r3, #5
 8001fca:	d908      	bls.n	8001fde <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	2220      	movs	r2, #32
 8001fd0:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	2203      	movs	r2, #3
 8001fd6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8001fda:	2303      	movs	r3, #3
 8001fdc:	e078      	b.n	80020d0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	f003 0301 	and.w	r3, r3, #1
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d1e8      	bne.n	8001fbe <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001ff4:	697a      	ldr	r2, [r7, #20]
 8001ff6:	4b38      	ldr	r3, [pc, #224]	@ (80020d8 <HAL_DMA_Init+0x158>)
 8001ff8:	4013      	ands	r3, r2
 8001ffa:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	685a      	ldr	r2, [r3, #4]
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	689b      	ldr	r3, [r3, #8]
 8002004:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800200a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	691b      	ldr	r3, [r3, #16]
 8002010:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002016:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	699b      	ldr	r3, [r3, #24]
 800201c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002022:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	6a1b      	ldr	r3, [r3, #32]
 8002028:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800202a:	697a      	ldr	r2, [r7, #20]
 800202c:	4313      	orrs	r3, r2
 800202e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002034:	2b04      	cmp	r3, #4
 8002036:	d107      	bne.n	8002048 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002040:	4313      	orrs	r3, r2
 8002042:	697a      	ldr	r2, [r7, #20]
 8002044:	4313      	orrs	r3, r2
 8002046:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	697a      	ldr	r2, [r7, #20]
 800204e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	695b      	ldr	r3, [r3, #20]
 8002056:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002058:	697b      	ldr	r3, [r7, #20]
 800205a:	f023 0307 	bic.w	r3, r3, #7
 800205e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002064:	697a      	ldr	r2, [r7, #20]
 8002066:	4313      	orrs	r3, r2
 8002068:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800206e:	2b04      	cmp	r3, #4
 8002070:	d117      	bne.n	80020a2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002076:	697a      	ldr	r2, [r7, #20]
 8002078:	4313      	orrs	r3, r2
 800207a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002080:	2b00      	cmp	r3, #0
 8002082:	d00e      	beq.n	80020a2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002084:	6878      	ldr	r0, [r7, #4]
 8002086:	f000 f9e9 	bl	800245c <DMA_CheckFifoParam>
 800208a:	4603      	mov	r3, r0
 800208c:	2b00      	cmp	r3, #0
 800208e:	d008      	beq.n	80020a2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	2240      	movs	r2, #64	@ 0x40
 8002094:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_RESET;
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	2200      	movs	r2, #0
 800209a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 800209e:	2301      	movs	r3, #1
 80020a0:	e016      	b.n	80020d0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	697a      	ldr	r2, [r7, #20]
 80020a8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80020aa:	6878      	ldr	r0, [r7, #4]
 80020ac:	f000 f9a0 	bl	80023f0 <DMA_CalcBaseAndBitshift>
 80020b0:	4603      	mov	r3, r0
 80020b2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80020b8:	223f      	movs	r2, #63	@ 0x3f
 80020ba:	409a      	lsls	r2, r3
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	2200      	movs	r2, #0
 80020c4:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	2201      	movs	r2, #1
 80020ca:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80020ce:	2300      	movs	r3, #0
}
 80020d0:	4618      	mov	r0, r3
 80020d2:	3718      	adds	r7, #24
 80020d4:	46bd      	mov	sp, r7
 80020d6:	bd80      	pop	{r7, pc}
 80020d8:	e010803f 	.word	0xe010803f

080020dc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80020dc:	b580      	push	{r7, lr}
 80020de:	b086      	sub	sp, #24
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 80020e4:	2300      	movs	r3, #0
 80020e6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 80020e8:	4b8e      	ldr	r3, [pc, #568]	@ (8002324 <HAL_DMA_IRQHandler+0x248>)
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	4a8e      	ldr	r2, [pc, #568]	@ (8002328 <HAL_DMA_IRQHandler+0x24c>)
 80020ee:	fba2 2303 	umull	r2, r3, r2, r3
 80020f2:	0a9b      	lsrs	r3, r3, #10
 80020f4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80020fa:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80020fc:	693b      	ldr	r3, [r7, #16]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002106:	2208      	movs	r2, #8
 8002108:	409a      	lsls	r2, r3
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	4013      	ands	r3, r2
 800210e:	2b00      	cmp	r3, #0
 8002110:	d01a      	beq.n	8002148 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	f003 0304 	and.w	r3, r3, #4
 800211c:	2b00      	cmp	r3, #0
 800211e:	d013      	beq.n	8002148 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	681a      	ldr	r2, [r3, #0]
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	f022 0204 	bic.w	r2, r2, #4
 800212e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002134:	2208      	movs	r2, #8
 8002136:	409a      	lsls	r2, r3
 8002138:	693b      	ldr	r3, [r7, #16]
 800213a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002140:	f043 0201 	orr.w	r2, r3, #1
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800214c:	2201      	movs	r2, #1
 800214e:	409a      	lsls	r2, r3
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	4013      	ands	r3, r2
 8002154:	2b00      	cmp	r3, #0
 8002156:	d012      	beq.n	800217e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	695b      	ldr	r3, [r3, #20]
 800215e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002162:	2b00      	cmp	r3, #0
 8002164:	d00b      	beq.n	800217e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800216a:	2201      	movs	r2, #1
 800216c:	409a      	lsls	r2, r3
 800216e:	693b      	ldr	r3, [r7, #16]
 8002170:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002176:	f043 0202 	orr.w	r2, r3, #2
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002182:	2204      	movs	r2, #4
 8002184:	409a      	lsls	r2, r3
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	4013      	ands	r3, r2
 800218a:	2b00      	cmp	r3, #0
 800218c:	d012      	beq.n	80021b4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	f003 0302 	and.w	r3, r3, #2
 8002198:	2b00      	cmp	r3, #0
 800219a:	d00b      	beq.n	80021b4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80021a0:	2204      	movs	r2, #4
 80021a2:	409a      	lsls	r2, r3
 80021a4:	693b      	ldr	r3, [r7, #16]
 80021a6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80021ac:	f043 0204 	orr.w	r2, r3, #4
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80021b8:	2210      	movs	r2, #16
 80021ba:	409a      	lsls	r2, r3
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	4013      	ands	r3, r2
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d043      	beq.n	800224c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	f003 0308 	and.w	r3, r3, #8
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d03c      	beq.n	800224c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80021d6:	2210      	movs	r2, #16
 80021d8:	409a      	lsls	r2, r3
 80021da:	693b      	ldr	r3, [r7, #16]
 80021dc:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d018      	beq.n	800221e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d108      	bne.n	800220c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d024      	beq.n	800224c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002206:	6878      	ldr	r0, [r7, #4]
 8002208:	4798      	blx	r3
 800220a:	e01f      	b.n	800224c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002210:	2b00      	cmp	r3, #0
 8002212:	d01b      	beq.n	800224c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002218:	6878      	ldr	r0, [r7, #4]
 800221a:	4798      	blx	r3
 800221c:	e016      	b.n	800224c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002228:	2b00      	cmp	r3, #0
 800222a:	d107      	bne.n	800223c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	681a      	ldr	r2, [r3, #0]
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f022 0208 	bic.w	r2, r2, #8
 800223a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002240:	2b00      	cmp	r3, #0
 8002242:	d003      	beq.n	800224c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002248:	6878      	ldr	r0, [r7, #4]
 800224a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002250:	2220      	movs	r2, #32
 8002252:	409a      	lsls	r2, r3
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	4013      	ands	r3, r2
 8002258:	2b00      	cmp	r3, #0
 800225a:	f000 808f 	beq.w	800237c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	f003 0310 	and.w	r3, r3, #16
 8002268:	2b00      	cmp	r3, #0
 800226a:	f000 8087 	beq.w	800237c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002272:	2220      	movs	r2, #32
 8002274:	409a      	lsls	r2, r3
 8002276:	693b      	ldr	r3, [r7, #16]
 8002278:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002280:	b2db      	uxtb	r3, r3
 8002282:	2b05      	cmp	r3, #5
 8002284:	d136      	bne.n	80022f4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	681a      	ldr	r2, [r3, #0]
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f022 0216 	bic.w	r2, r2, #22
 8002294:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	695a      	ldr	r2, [r3, #20]
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80022a4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d103      	bne.n	80022b6 <HAL_DMA_IRQHandler+0x1da>
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d007      	beq.n	80022c6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	681a      	ldr	r2, [r3, #0]
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	f022 0208 	bic.w	r2, r2, #8
 80022c4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80022ca:	223f      	movs	r2, #63	@ 0x3f
 80022cc:	409a      	lsls	r2, r3
 80022ce:	693b      	ldr	r3, [r7, #16]
 80022d0:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	2201      	movs	r2, #1
 80022d6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	2200      	movs	r2, #0
 80022de:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d07e      	beq.n	80023e8 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80022ee:	6878      	ldr	r0, [r7, #4]
 80022f0:	4798      	blx	r3
        }
        return;
 80022f2:	e079      	b.n	80023e8 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d01d      	beq.n	800233e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800230c:	2b00      	cmp	r3, #0
 800230e:	d10d      	bne.n	800232c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002314:	2b00      	cmp	r3, #0
 8002316:	d031      	beq.n	800237c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800231c:	6878      	ldr	r0, [r7, #4]
 800231e:	4798      	blx	r3
 8002320:	e02c      	b.n	800237c <HAL_DMA_IRQHandler+0x2a0>
 8002322:	bf00      	nop
 8002324:	20000000 	.word	0x20000000
 8002328:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002330:	2b00      	cmp	r3, #0
 8002332:	d023      	beq.n	800237c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002338:	6878      	ldr	r0, [r7, #4]
 800233a:	4798      	blx	r3
 800233c:	e01e      	b.n	800237c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002348:	2b00      	cmp	r3, #0
 800234a:	d10f      	bne.n	800236c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	681a      	ldr	r2, [r3, #0]
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	f022 0210 	bic.w	r2, r2, #16
 800235a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	2201      	movs	r2, #1
 8002360:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	2200      	movs	r2, #0
 8002368:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002370:	2b00      	cmp	r3, #0
 8002372:	d003      	beq.n	800237c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002378:	6878      	ldr	r0, [r7, #4]
 800237a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002380:	2b00      	cmp	r3, #0
 8002382:	d032      	beq.n	80023ea <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002388:	f003 0301 	and.w	r3, r3, #1
 800238c:	2b00      	cmp	r3, #0
 800238e:	d022      	beq.n	80023d6 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	2205      	movs	r2, #5
 8002394:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	681a      	ldr	r2, [r3, #0]
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	f022 0201 	bic.w	r2, r2, #1
 80023a6:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80023a8:	68bb      	ldr	r3, [r7, #8]
 80023aa:	3301      	adds	r3, #1
 80023ac:	60bb      	str	r3, [r7, #8]
 80023ae:	697a      	ldr	r2, [r7, #20]
 80023b0:	429a      	cmp	r2, r3
 80023b2:	d307      	bcc.n	80023c4 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	f003 0301 	and.w	r3, r3, #1
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d1f2      	bne.n	80023a8 <HAL_DMA_IRQHandler+0x2cc>
 80023c2:	e000      	b.n	80023c6 <HAL_DMA_IRQHandler+0x2ea>
          break;
 80023c4:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	2201      	movs	r2, #1
 80023ca:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	2200      	movs	r2, #0
 80023d2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d005      	beq.n	80023ea <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80023e2:	6878      	ldr	r0, [r7, #4]
 80023e4:	4798      	blx	r3
 80023e6:	e000      	b.n	80023ea <HAL_DMA_IRQHandler+0x30e>
        return;
 80023e8:	bf00      	nop
    }
  }
}
 80023ea:	3718      	adds	r7, #24
 80023ec:	46bd      	mov	sp, r7
 80023ee:	bd80      	pop	{r7, pc}

080023f0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80023f0:	b480      	push	{r7}
 80023f2:	b085      	sub	sp, #20
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	b2db      	uxtb	r3, r3
 80023fe:	3b10      	subs	r3, #16
 8002400:	4a13      	ldr	r2, [pc, #76]	@ (8002450 <DMA_CalcBaseAndBitshift+0x60>)
 8002402:	fba2 2303 	umull	r2, r3, r2, r3
 8002406:	091b      	lsrs	r3, r3, #4
 8002408:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800240a:	4a12      	ldr	r2, [pc, #72]	@ (8002454 <DMA_CalcBaseAndBitshift+0x64>)
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	4413      	add	r3, r2
 8002410:	781b      	ldrb	r3, [r3, #0]
 8002412:	461a      	mov	r2, r3
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	2b03      	cmp	r3, #3
 800241c:	d908      	bls.n	8002430 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	461a      	mov	r2, r3
 8002424:	4b0c      	ldr	r3, [pc, #48]	@ (8002458 <DMA_CalcBaseAndBitshift+0x68>)
 8002426:	4013      	ands	r3, r2
 8002428:	1d1a      	adds	r2, r3, #4
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	659a      	str	r2, [r3, #88]	@ 0x58
 800242e:	e006      	b.n	800243e <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	461a      	mov	r2, r3
 8002436:	4b08      	ldr	r3, [pc, #32]	@ (8002458 <DMA_CalcBaseAndBitshift+0x68>)
 8002438:	4013      	ands	r3, r2
 800243a:	687a      	ldr	r2, [r7, #4]
 800243c:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8002442:	4618      	mov	r0, r3
 8002444:	3714      	adds	r7, #20
 8002446:	46bd      	mov	sp, r7
 8002448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800244c:	4770      	bx	lr
 800244e:	bf00      	nop
 8002450:	aaaaaaab 	.word	0xaaaaaaab
 8002454:	0800a76c 	.word	0x0800a76c
 8002458:	fffffc00 	.word	0xfffffc00

0800245c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800245c:	b480      	push	{r7}
 800245e:	b085      	sub	sp, #20
 8002460:	af00      	add	r7, sp, #0
 8002462:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002464:	2300      	movs	r3, #0
 8002466:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800246c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	699b      	ldr	r3, [r3, #24]
 8002472:	2b00      	cmp	r3, #0
 8002474:	d11f      	bne.n	80024b6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002476:	68bb      	ldr	r3, [r7, #8]
 8002478:	2b03      	cmp	r3, #3
 800247a:	d856      	bhi.n	800252a <DMA_CheckFifoParam+0xce>
 800247c:	a201      	add	r2, pc, #4	@ (adr r2, 8002484 <DMA_CheckFifoParam+0x28>)
 800247e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002482:	bf00      	nop
 8002484:	08002495 	.word	0x08002495
 8002488:	080024a7 	.word	0x080024a7
 800248c:	08002495 	.word	0x08002495
 8002490:	0800252b 	.word	0x0800252b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002498:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800249c:	2b00      	cmp	r3, #0
 800249e:	d046      	beq.n	800252e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80024a0:	2301      	movs	r3, #1
 80024a2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80024a4:	e043      	b.n	800252e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80024aa:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80024ae:	d140      	bne.n	8002532 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80024b0:	2301      	movs	r3, #1
 80024b2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80024b4:	e03d      	b.n	8002532 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	699b      	ldr	r3, [r3, #24]
 80024ba:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80024be:	d121      	bne.n	8002504 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80024c0:	68bb      	ldr	r3, [r7, #8]
 80024c2:	2b03      	cmp	r3, #3
 80024c4:	d837      	bhi.n	8002536 <DMA_CheckFifoParam+0xda>
 80024c6:	a201      	add	r2, pc, #4	@ (adr r2, 80024cc <DMA_CheckFifoParam+0x70>)
 80024c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80024cc:	080024dd 	.word	0x080024dd
 80024d0:	080024e3 	.word	0x080024e3
 80024d4:	080024dd 	.word	0x080024dd
 80024d8:	080024f5 	.word	0x080024f5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80024dc:	2301      	movs	r3, #1
 80024de:	73fb      	strb	r3, [r7, #15]
      break;
 80024e0:	e030      	b.n	8002544 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80024e6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d025      	beq.n	800253a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80024ee:	2301      	movs	r3, #1
 80024f0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80024f2:	e022      	b.n	800253a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80024f8:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80024fc:	d11f      	bne.n	800253e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80024fe:	2301      	movs	r3, #1
 8002500:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002502:	e01c      	b.n	800253e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002504:	68bb      	ldr	r3, [r7, #8]
 8002506:	2b02      	cmp	r3, #2
 8002508:	d903      	bls.n	8002512 <DMA_CheckFifoParam+0xb6>
 800250a:	68bb      	ldr	r3, [r7, #8]
 800250c:	2b03      	cmp	r3, #3
 800250e:	d003      	beq.n	8002518 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002510:	e018      	b.n	8002544 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002512:	2301      	movs	r3, #1
 8002514:	73fb      	strb	r3, [r7, #15]
      break;
 8002516:	e015      	b.n	8002544 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800251c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002520:	2b00      	cmp	r3, #0
 8002522:	d00e      	beq.n	8002542 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002524:	2301      	movs	r3, #1
 8002526:	73fb      	strb	r3, [r7, #15]
      break;
 8002528:	e00b      	b.n	8002542 <DMA_CheckFifoParam+0xe6>
      break;
 800252a:	bf00      	nop
 800252c:	e00a      	b.n	8002544 <DMA_CheckFifoParam+0xe8>
      break;
 800252e:	bf00      	nop
 8002530:	e008      	b.n	8002544 <DMA_CheckFifoParam+0xe8>
      break;
 8002532:	bf00      	nop
 8002534:	e006      	b.n	8002544 <DMA_CheckFifoParam+0xe8>
      break;
 8002536:	bf00      	nop
 8002538:	e004      	b.n	8002544 <DMA_CheckFifoParam+0xe8>
      break;
 800253a:	bf00      	nop
 800253c:	e002      	b.n	8002544 <DMA_CheckFifoParam+0xe8>
      break;   
 800253e:	bf00      	nop
 8002540:	e000      	b.n	8002544 <DMA_CheckFifoParam+0xe8>
      break;
 8002542:	bf00      	nop
    }
  } 
  
  return status; 
 8002544:	7bfb      	ldrb	r3, [r7, #15]
}
 8002546:	4618      	mov	r0, r3
 8002548:	3714      	adds	r7, #20
 800254a:	46bd      	mov	sp, r7
 800254c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002550:	4770      	bx	lr
 8002552:	bf00      	nop

08002554 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8002554:	b580      	push	{r7, lr}
 8002556:	b084      	sub	sp, #16
 8002558:	af00      	add	r7, sp, #0
 800255a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	2b00      	cmp	r3, #0
 8002560:	d101      	bne.n	8002566 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8002562:	2301      	movs	r3, #1
 8002564:	e086      	b.n	8002674 <HAL_ETH_Init+0x120>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800256c:	2b00      	cmp	r3, #0
 800256e:	d106      	bne.n	800257e <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	2220      	movs	r2, #32
 8002574:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8002578:	6878      	ldr	r0, [r7, #4]
 800257a:	f7fe fcad 	bl	8000ed8 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800257e:	4b3f      	ldr	r3, [pc, #252]	@ (800267c <HAL_ETH_Init+0x128>)
 8002580:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002582:	4a3e      	ldr	r2, [pc, #248]	@ (800267c <HAL_ETH_Init+0x128>)
 8002584:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002588:	6453      	str	r3, [r2, #68]	@ 0x44
 800258a:	4b3c      	ldr	r3, [pc, #240]	@ (800267c <HAL_ETH_Init+0x128>)
 800258c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800258e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002592:	60bb      	str	r3, [r7, #8]
 8002594:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8002596:	4b3a      	ldr	r3, [pc, #232]	@ (8002680 <HAL_ETH_Init+0x12c>)
 8002598:	685b      	ldr	r3, [r3, #4]
 800259a:	4a39      	ldr	r2, [pc, #228]	@ (8002680 <HAL_ETH_Init+0x12c>)
 800259c:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80025a0:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 80025a2:	4b37      	ldr	r3, [pc, #220]	@ (8002680 <HAL_ETH_Init+0x12c>)
 80025a4:	685a      	ldr	r2, [r3, #4]
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	689b      	ldr	r3, [r3, #8]
 80025aa:	4935      	ldr	r1, [pc, #212]	@ (8002680 <HAL_ETH_Init+0x12c>)
 80025ac:	4313      	orrs	r3, r2
 80025ae:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 80025b0:	4b33      	ldr	r3, [pc, #204]	@ (8002680 <HAL_ETH_Init+0x12c>)
 80025b2:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	687a      	ldr	r2, [r7, #4]
 80025c0:	6812      	ldr	r2, [r2, #0]
 80025c2:	f043 0301 	orr.w	r3, r3, #1
 80025c6:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80025ca:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80025cc:	f7fe ffc8 	bl	8001560 <HAL_GetTick>
 80025d0:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80025d2:	e011      	b.n	80025f8 <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 80025d4:	f7fe ffc4 	bl	8001560 <HAL_GetTick>
 80025d8:	4602      	mov	r2, r0
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	1ad3      	subs	r3, r2, r3
 80025de:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80025e2:	d909      	bls.n	80025f8 <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	2204      	movs	r2, #4
 80025e8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	22e0      	movs	r2, #224	@ 0xe0
 80025f0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 80025f4:	2301      	movs	r3, #1
 80025f6:	e03d      	b.n	8002674 <HAL_ETH_Init+0x120>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	f003 0301 	and.w	r3, r3, #1
 8002606:	2b00      	cmp	r3, #0
 8002608:	d1e4      	bne.n	80025d4 <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 800260a:	6878      	ldr	r0, [r7, #4]
 800260c:	f000 f97a 	bl	8002904 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8002610:	6878      	ldr	r0, [r7, #4]
 8002612:	f000 fa25 	bl	8002a60 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8002616:	6878      	ldr	r0, [r7, #4]
 8002618:	f000 fa7b 	bl	8002b12 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	685b      	ldr	r3, [r3, #4]
 8002620:	461a      	mov	r2, r3
 8002622:	2100      	movs	r1, #0
 8002624:	6878      	ldr	r0, [r7, #4]
 8002626:	f000 f9e3 	bl	80029f0 <ETH_MACAddressConfig>

  /* Disable MMC Interrupts */
  SET_BIT(heth->Instance->MACIMR, ETH_MACIMR_TSTIM | ETH_MACIMR_PMTIM);
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f442 7202 	orr.w	r2, r2, #520	@ 0x208
 8002638:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RGUFM | ETH_MMCRIMR_RFAEM | \
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f8d3 110c 	ldr.w	r1, [r3, #268]	@ 0x10c
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681a      	ldr	r2, [r3, #0]
 8002646:	4b0f      	ldr	r3, [pc, #60]	@ (8002684 <HAL_ETH_Init+0x130>)
 8002648:	430b      	orrs	r3, r1
 800264a:	f8c2 310c 	str.w	r3, [r2, #268]	@ 0x10c
          ETH_MMCRIMR_RFCEM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TGFM | ETH_MMCTIMR_TGFMSCM | \
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	f8d3 2110 	ldr.w	r2, [r3, #272]	@ 0x110
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f442 1203 	orr.w	r2, r2, #2146304	@ 0x20c000
 800265e:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
          ETH_MMCTIMR_TGFSCM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	2200      	movs	r2, #0
 8002666:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	2210      	movs	r2, #16
 800266e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8002672:	2300      	movs	r3, #0
}
 8002674:	4618      	mov	r0, r3
 8002676:	3710      	adds	r7, #16
 8002678:	46bd      	mov	sp, r7
 800267a:	bd80      	pop	{r7, pc}
 800267c:	40023800 	.word	0x40023800
 8002680:	40013800 	.word	0x40013800
 8002684:	00020060 	.word	0x00020060

08002688 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 8002688:	b580      	push	{r7, lr}
 800268a:	b084      	sub	sp, #16
 800268c:	af00      	add	r7, sp, #0
 800268e:	6078      	str	r0, [r7, #4]
 8002690:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	60fb      	str	r3, [r7, #12]
  /* Clear CSTF, WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 800269a:	68fa      	ldr	r2, [r7, #12]
 800269c:	4b53      	ldr	r3, [pc, #332]	@ (80027ec <ETH_SetMACConfig+0x164>)
 800269e:	4013      	ands	r3, r2
 80026a0:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 80026a2:	683b      	ldr	r3, [r7, #0]
 80026a4:	7b9b      	ldrb	r3, [r3, #14]
 80026a6:	065b      	lsls	r3, r3, #25
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80026a8:	683a      	ldr	r2, [r7, #0]
 80026aa:	7c12      	ldrb	r2, [r2, #16]
 80026ac:	2a00      	cmp	r2, #0
 80026ae:	d102      	bne.n	80026b6 <ETH_SetMACConfig+0x2e>
 80026b0:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80026b4:	e000      	b.n	80026b8 <ETH_SetMACConfig+0x30>
 80026b6:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 80026b8:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80026ba:	683a      	ldr	r2, [r7, #0]
 80026bc:	7c52      	ldrb	r2, [r2, #17]
 80026be:	2a00      	cmp	r2, #0
 80026c0:	d102      	bne.n	80026c8 <ETH_SetMACConfig+0x40>
 80026c2:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 80026c6:	e000      	b.n	80026ca <ETH_SetMACConfig+0x42>
 80026c8:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80026ca:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 80026cc:	683b      	ldr	r3, [r7, #0]
 80026ce:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80026d0:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80026d2:	683b      	ldr	r3, [r7, #0]
 80026d4:	7fdb      	ldrb	r3, [r3, #31]
 80026d6:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 80026d8:	431a      	orrs	r2, r3
                        macconf->Speed |
 80026da:	683b      	ldr	r3, [r7, #0]
 80026dc:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80026de:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80026e0:	683a      	ldr	r2, [r7, #0]
 80026e2:	7f92      	ldrb	r2, [r2, #30]
 80026e4:	2a00      	cmp	r2, #0
 80026e6:	d102      	bne.n	80026ee <ETH_SetMACConfig+0x66>
 80026e8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80026ec:	e000      	b.n	80026f0 <ETH_SetMACConfig+0x68>
 80026ee:	2200      	movs	r2, #0
                        macconf->Speed |
 80026f0:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80026f2:	683b      	ldr	r3, [r7, #0]
 80026f4:	7f1b      	ldrb	r3, [r3, #28]
 80026f6:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80026f8:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 80026fa:	683b      	ldr	r3, [r7, #0]
 80026fc:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80026fe:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8002700:	683b      	ldr	r3, [r7, #0]
 8002702:	791b      	ldrb	r3, [r3, #4]
 8002704:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8002706:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8002708:	683a      	ldr	r2, [r7, #0]
 800270a:	f892 2020 	ldrb.w	r2, [r2, #32]
 800270e:	2a00      	cmp	r2, #0
 8002710:	d102      	bne.n	8002718 <ETH_SetMACConfig+0x90>
 8002712:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002716:	e000      	b.n	800271a <ETH_SetMACConfig+0x92>
 8002718:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 800271a:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 800271c:	683b      	ldr	r3, [r7, #0]
 800271e:	7bdb      	ldrb	r3, [r3, #15]
 8002720:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8002722:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8002724:	683b      	ldr	r3, [r7, #0]
 8002726:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8002728:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 800272a:	683b      	ldr	r3, [r7, #0]
 800272c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8002730:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8002732:	4313      	orrs	r3, r2
 8002734:	68fa      	ldr	r2, [r7, #12]
 8002736:	4313      	orrs	r3, r2
 8002738:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	68fa      	ldr	r2, [r7, #12]
 8002740:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800274a:	2001      	movs	r0, #1
 800274c:	f7fe ff14 	bl	8001578 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	68fa      	ldr	r2, [r7, #12]
 8002756:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	699b      	ldr	r3, [r3, #24]
 800275e:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8002760:	68fa      	ldr	r2, [r7, #12]
 8002762:	f64f 7341 	movw	r3, #65345	@ 0xff41
 8002766:	4013      	ands	r3, r2
 8002768:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 800276a:	683b      	ldr	r3, [r7, #0]
 800276c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800276e:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8002770:	683a      	ldr	r2, [r7, #0]
 8002772:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 8002776:	2a00      	cmp	r2, #0
 8002778:	d101      	bne.n	800277e <ETH_SetMACConfig+0xf6>
 800277a:	2280      	movs	r2, #128	@ 0x80
 800277c:	e000      	b.n	8002780 <ETH_SetMACConfig+0xf8>
 800277e:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002780:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8002782:	683b      	ldr	r3, [r7, #0]
 8002784:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8002786:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8002788:	683a      	ldr	r2, [r7, #0]
 800278a:	f892 2055 	ldrb.w	r2, [r2, #85]	@ 0x55
 800278e:	2a01      	cmp	r2, #1
 8002790:	d101      	bne.n	8002796 <ETH_SetMACConfig+0x10e>
 8002792:	2208      	movs	r2, #8
 8002794:	e000      	b.n	8002798 <ETH_SetMACConfig+0x110>
 8002796:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8002798:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 800279a:	683a      	ldr	r2, [r7, #0]
 800279c:	f892 2056 	ldrb.w	r2, [r2, #86]	@ 0x56
 80027a0:	2a01      	cmp	r2, #1
 80027a2:	d101      	bne.n	80027a8 <ETH_SetMACConfig+0x120>
 80027a4:	2204      	movs	r2, #4
 80027a6:	e000      	b.n	80027aa <ETH_SetMACConfig+0x122>
 80027a8:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 80027aa:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 80027ac:	683a      	ldr	r2, [r7, #0]
 80027ae:	f892 2054 	ldrb.w	r2, [r2, #84]	@ 0x54
 80027b2:	2a01      	cmp	r2, #1
 80027b4:	d101      	bne.n	80027ba <ETH_SetMACConfig+0x132>
 80027b6:	2202      	movs	r2, #2
 80027b8:	e000      	b.n	80027bc <ETH_SetMACConfig+0x134>
 80027ba:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80027bc:	4313      	orrs	r3, r2
 80027be:	68fa      	ldr	r2, [r7, #12]
 80027c0:	4313      	orrs	r3, r2
 80027c2:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	68fa      	ldr	r2, [r7, #12]
 80027ca:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	699b      	ldr	r3, [r3, #24]
 80027d2:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80027d4:	2001      	movs	r0, #1
 80027d6:	f7fe fecf 	bl	8001578 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	68fa      	ldr	r2, [r7, #12]
 80027e0:	619a      	str	r2, [r3, #24]
}
 80027e2:	bf00      	nop
 80027e4:	3710      	adds	r7, #16
 80027e6:	46bd      	mov	sp, r7
 80027e8:	bd80      	pop	{r7, pc}
 80027ea:	bf00      	nop
 80027ec:	fd20810f 	.word	0xfd20810f

080027f0 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 80027f0:	b580      	push	{r7, lr}
 80027f2:	b084      	sub	sp, #16
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	6078      	str	r0, [r7, #4]
 80027f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002802:	699b      	ldr	r3, [r3, #24]
 8002804:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8002806:	68fa      	ldr	r2, [r7, #12]
 8002808:	4b3d      	ldr	r3, [pc, #244]	@ (8002900 <ETH_SetDMAConfig+0x110>)
 800280a:	4013      	ands	r3, r2
 800280c:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 800280e:	683b      	ldr	r3, [r7, #0]
 8002810:	7b1b      	ldrb	r3, [r3, #12]
 8002812:	2b00      	cmp	r3, #0
 8002814:	d102      	bne.n	800281c <ETH_SetDMAConfig+0x2c>
 8002816:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 800281a:	e000      	b.n	800281e <ETH_SetDMAConfig+0x2e>
 800281c:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 800281e:	683b      	ldr	r3, [r7, #0]
 8002820:	7b5b      	ldrb	r3, [r3, #13]
 8002822:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002824:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8002826:	683a      	ldr	r2, [r7, #0]
 8002828:	7f52      	ldrb	r2, [r2, #29]
 800282a:	2a00      	cmp	r2, #0
 800282c:	d102      	bne.n	8002834 <ETH_SetDMAConfig+0x44>
 800282e:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8002832:	e000      	b.n	8002836 <ETH_SetDMAConfig+0x46>
 8002834:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8002836:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8002838:	683b      	ldr	r3, [r7, #0]
 800283a:	7b9b      	ldrb	r3, [r3, #14]
 800283c:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 800283e:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8002840:	683b      	ldr	r3, [r7, #0]
 8002842:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8002844:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8002846:	683b      	ldr	r3, [r7, #0]
 8002848:	7f1b      	ldrb	r3, [r3, #28]
 800284a:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 800284c:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 800284e:	683b      	ldr	r3, [r7, #0]
 8002850:	7f9b      	ldrb	r3, [r3, #30]
 8002852:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8002854:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8002856:	683b      	ldr	r3, [r7, #0]
 8002858:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 800285a:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 800285c:	683b      	ldr	r3, [r7, #0]
 800285e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002862:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002864:	4313      	orrs	r3, r2
 8002866:	68fa      	ldr	r2, [r7, #12]
 8002868:	4313      	orrs	r3, r2
 800286a:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002874:	461a      	mov	r2, r3
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002882:	699b      	ldr	r3, [r3, #24]
 8002884:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002886:	2001      	movs	r0, #1
 8002888:	f7fe fe76 	bl	8001578 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002894:	461a      	mov	r2, r3
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800289a:	683b      	ldr	r3, [r7, #0]
 800289c:	791b      	ldrb	r3, [r3, #4]
 800289e:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 80028a0:	683b      	ldr	r3, [r7, #0]
 80028a2:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80028a4:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80028a6:	683b      	ldr	r3, [r7, #0]
 80028a8:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 80028aa:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 80028ac:	683b      	ldr	r3, [r7, #0]
 80028ae:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80028b0:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80028b2:	683b      	ldr	r3, [r7, #0]
 80028b4:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80028b8:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 80028ba:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80028bc:	683b      	ldr	r3, [r7, #0]
 80028be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80028c0:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80028c2:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 80028c4:	683b      	ldr	r3, [r7, #0]
 80028c6:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80028c8:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80028ca:	687a      	ldr	r2, [r7, #4]
 80028cc:	6812      	ldr	r2, [r2, #0]
 80028ce:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80028d2:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80028d6:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80028e4:	2001      	movs	r0, #1
 80028e6:	f7fe fe47 	bl	8001578 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80028f2:	461a      	mov	r2, r3
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	6013      	str	r3, [r2, #0]
}
 80028f8:	bf00      	nop
 80028fa:	3710      	adds	r7, #16
 80028fc:	46bd      	mov	sp, r7
 80028fe:	bd80      	pop	{r7, pc}
 8002900:	f8de3f23 	.word	0xf8de3f23

08002904 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8002904:	b580      	push	{r7, lr}
 8002906:	b0a6      	sub	sp, #152	@ 0x98
 8002908:	af00      	add	r7, sp, #0
 800290a:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 800290c:	2301      	movs	r3, #1
 800290e:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
  macDefaultConf.Jabber = ENABLE;
 8002912:	2301      	movs	r3, #1
 8002914:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8002918:	2300      	movs	r3, #0
 800291a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 800291c:	2300      	movs	r3, #0
 800291e:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8002922:	2301      	movs	r3, #1
 8002924:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8002928:	2300      	movs	r3, #0
 800292a:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
  macDefaultConf.CRCStripTypePacket = ENABLE;
 800292e:	2301      	movs	r3, #1
 8002930:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  macDefaultConf.ChecksumOffload = ENABLE;
 8002934:	2301      	movs	r3, #1
 8002936:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 800293a:	2300      	movs	r3, #0
 800293c:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8002940:	2300      	movs	r3, #0
 8002942:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8002946:	2300      	movs	r3, #0
 8002948:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 800294a:	2300      	movs	r3, #0
 800294c:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8002950:	2300      	movs	r3, #0
 8002952:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8002954:	2300      	movs	r3, #0
 8002956:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 800295a:	2300      	movs	r3, #0
 800295c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8002960:	2300      	movs	r3, #0
 8002962:	f887 308a 	strb.w	r3, [r7, #138]	@ 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8002966:	2300      	movs	r3, #0
 8002968:	f887 3088 	strb.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 800296c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8002970:	64bb      	str	r3, [r7, #72]	@ 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8002972:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8002976:	64fb      	str	r3, [r7, #76]	@ 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8002978:	2300      	movs	r3, #0
 800297a:	f887 3089 	strb.w	r3, [r7, #137]	@ 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 800297e:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8002982:	4619      	mov	r1, r3
 8002984:	6878      	ldr	r0, [r7, #4]
 8002986:	f7ff fe7f 	bl	8002688 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 800298a:	2301      	movs	r3, #1
 800298c:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 800298e:	2301      	movs	r3, #1
 8002990:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8002992:	2301      	movs	r3, #1
 8002994:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8002998:	2301      	movs	r3, #1
 800299a:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 800299c:	2300      	movs	r3, #0
 800299e:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 80029a0:	2300      	movs	r3, #0
 80029a2:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 80029a6:	2300      	movs	r3, #0
 80029a8:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 80029ac:	2300      	movs	r3, #0
 80029ae:	62bb      	str	r3, [r7, #40]	@ 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 80029b0:	2301      	movs	r3, #1
 80029b2:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 80029b6:	2301      	movs	r3, #1
 80029b8:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 80029ba:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80029be:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80029c0:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80029c4:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80029c6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80029ca:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 80029cc:	2301      	movs	r3, #1
 80029ce:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 80029d2:	2300      	movs	r3, #0
 80029d4:	633b      	str	r3, [r7, #48]	@ 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 80029d6:	2300      	movs	r3, #0
 80029d8:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 80029da:	f107 0308 	add.w	r3, r7, #8
 80029de:	4619      	mov	r1, r3
 80029e0:	6878      	ldr	r0, [r7, #4]
 80029e2:	f7ff ff05 	bl	80027f0 <ETH_SetDMAConfig>
}
 80029e6:	bf00      	nop
 80029e8:	3798      	adds	r7, #152	@ 0x98
 80029ea:	46bd      	mov	sp, r7
 80029ec:	bd80      	pop	{r7, pc}
	...

080029f0 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 80029f0:	b480      	push	{r7}
 80029f2:	b087      	sub	sp, #28
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	60f8      	str	r0, [r7, #12]
 80029f8:	60b9      	str	r1, [r7, #8]
 80029fa:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	3305      	adds	r3, #5
 8002a00:	781b      	ldrb	r3, [r3, #0]
 8002a02:	021b      	lsls	r3, r3, #8
 8002a04:	687a      	ldr	r2, [r7, #4]
 8002a06:	3204      	adds	r2, #4
 8002a08:	7812      	ldrb	r2, [r2, #0]
 8002a0a:	4313      	orrs	r3, r2
 8002a0c:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8002a0e:	68ba      	ldr	r2, [r7, #8]
 8002a10:	4b11      	ldr	r3, [pc, #68]	@ (8002a58 <ETH_MACAddressConfig+0x68>)
 8002a12:	4413      	add	r3, r2
 8002a14:	461a      	mov	r2, r3
 8002a16:	697b      	ldr	r3, [r7, #20]
 8002a18:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	3303      	adds	r3, #3
 8002a1e:	781b      	ldrb	r3, [r3, #0]
 8002a20:	061a      	lsls	r2, r3, #24
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	3302      	adds	r3, #2
 8002a26:	781b      	ldrb	r3, [r3, #0]
 8002a28:	041b      	lsls	r3, r3, #16
 8002a2a:	431a      	orrs	r2, r3
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	3301      	adds	r3, #1
 8002a30:	781b      	ldrb	r3, [r3, #0]
 8002a32:	021b      	lsls	r3, r3, #8
 8002a34:	4313      	orrs	r3, r2
 8002a36:	687a      	ldr	r2, [r7, #4]
 8002a38:	7812      	ldrb	r2, [r2, #0]
 8002a3a:	4313      	orrs	r3, r2
 8002a3c:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8002a3e:	68ba      	ldr	r2, [r7, #8]
 8002a40:	4b06      	ldr	r3, [pc, #24]	@ (8002a5c <ETH_MACAddressConfig+0x6c>)
 8002a42:	4413      	add	r3, r2
 8002a44:	461a      	mov	r2, r3
 8002a46:	697b      	ldr	r3, [r7, #20]
 8002a48:	6013      	str	r3, [r2, #0]
}
 8002a4a:	bf00      	nop
 8002a4c:	371c      	adds	r7, #28
 8002a4e:	46bd      	mov	sp, r7
 8002a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a54:	4770      	bx	lr
 8002a56:	bf00      	nop
 8002a58:	40028040 	.word	0x40028040
 8002a5c:	40028044 	.word	0x40028044

08002a60 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8002a60:	b480      	push	{r7}
 8002a62:	b085      	sub	sp, #20
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002a68:	2300      	movs	r3, #0
 8002a6a:	60fb      	str	r3, [r7, #12]
 8002a6c:	e03e      	b.n	8002aec <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	68d9      	ldr	r1, [r3, #12]
 8002a72:	68fa      	ldr	r2, [r7, #12]
 8002a74:	4613      	mov	r3, r2
 8002a76:	009b      	lsls	r3, r3, #2
 8002a78:	4413      	add	r3, r2
 8002a7a:	00db      	lsls	r3, r3, #3
 8002a7c:	440b      	add	r3, r1
 8002a7e:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 8002a80:	68bb      	ldr	r3, [r7, #8]
 8002a82:	2200      	movs	r2, #0
 8002a84:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 8002a86:	68bb      	ldr	r3, [r7, #8]
 8002a88:	2200      	movs	r2, #0
 8002a8a:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 8002a8c:	68bb      	ldr	r3, [r7, #8]
 8002a8e:	2200      	movs	r2, #0
 8002a90:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 8002a92:	68bb      	ldr	r3, [r7, #8]
 8002a94:	2200      	movs	r2, #0
 8002a96:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8002a98:	68b9      	ldr	r1, [r7, #8]
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	68fa      	ldr	r2, [r7, #12]
 8002a9e:	3206      	adds	r2, #6
 8002aa0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8002aa4:	68bb      	ldr	r3, [r7, #8]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8002aac:	68bb      	ldr	r3, [r7, #8]
 8002aae:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	2b02      	cmp	r3, #2
 8002ab4:	d80c      	bhi.n	8002ad0 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	68d9      	ldr	r1, [r3, #12]
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	1c5a      	adds	r2, r3, #1
 8002abe:	4613      	mov	r3, r2
 8002ac0:	009b      	lsls	r3, r3, #2
 8002ac2:	4413      	add	r3, r2
 8002ac4:	00db      	lsls	r3, r3, #3
 8002ac6:	440b      	add	r3, r1
 8002ac8:	461a      	mov	r2, r3
 8002aca:	68bb      	ldr	r3, [r7, #8]
 8002acc:	60da      	str	r2, [r3, #12]
 8002ace:	e004      	b.n	8002ada <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	68db      	ldr	r3, [r3, #12]
 8002ad4:	461a      	mov	r2, r3
 8002ad6:	68bb      	ldr	r3, [r7, #8]
 8002ad8:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8002ada:	68bb      	ldr	r3, [r7, #8]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	f443 0240 	orr.w	r2, r3, #12582912	@ 0xc00000
 8002ae2:	68bb      	ldr	r3, [r7, #8]
 8002ae4:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	3301      	adds	r3, #1
 8002aea:	60fb      	str	r3, [r7, #12]
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	2b03      	cmp	r3, #3
 8002af0:	d9bd      	bls.n	8002a6e <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	2200      	movs	r2, #0
 8002af6:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	68da      	ldr	r2, [r3, #12]
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002b04:	611a      	str	r2, [r3, #16]
}
 8002b06:	bf00      	nop
 8002b08:	3714      	adds	r7, #20
 8002b0a:	46bd      	mov	sp, r7
 8002b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b10:	4770      	bx	lr

08002b12 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8002b12:	b480      	push	{r7}
 8002b14:	b085      	sub	sp, #20
 8002b16:	af00      	add	r7, sp, #0
 8002b18:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002b1a:	2300      	movs	r3, #0
 8002b1c:	60fb      	str	r3, [r7, #12]
 8002b1e:	e048      	b.n	8002bb2 <ETH_DMARxDescListInit+0xa0>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	6919      	ldr	r1, [r3, #16]
 8002b24:	68fa      	ldr	r2, [r7, #12]
 8002b26:	4613      	mov	r3, r2
 8002b28:	009b      	lsls	r3, r3, #2
 8002b2a:	4413      	add	r3, r2
 8002b2c:	00db      	lsls	r3, r3, #3
 8002b2e:	440b      	add	r3, r1
 8002b30:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 8002b32:	68bb      	ldr	r3, [r7, #8]
 8002b34:	2200      	movs	r2, #0
 8002b36:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 8002b38:	68bb      	ldr	r3, [r7, #8]
 8002b3a:	2200      	movs	r2, #0
 8002b3c:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 8002b3e:	68bb      	ldr	r3, [r7, #8]
 8002b40:	2200      	movs	r2, #0
 8002b42:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 8002b44:	68bb      	ldr	r3, [r7, #8]
 8002b46:	2200      	movs	r2, #0
 8002b48:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 8002b4a:	68bb      	ldr	r3, [r7, #8]
 8002b4c:	2200      	movs	r2, #0
 8002b4e:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 8002b50:	68bb      	ldr	r3, [r7, #8]
 8002b52:	2200      	movs	r2, #0
 8002b54:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8002b56:	68bb      	ldr	r3, [r7, #8]
 8002b58:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8002b5c:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = heth->Init.RxBuffLen | ETH_DMARXDESC_RCH;
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	695b      	ldr	r3, [r3, #20]
 8002b62:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8002b66:	68bb      	ldr	r3, [r7, #8]
 8002b68:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8002b6a:	68bb      	ldr	r3, [r7, #8]
 8002b6c:	685b      	ldr	r3, [r3, #4]
 8002b6e:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002b72:	68bb      	ldr	r3, [r7, #8]
 8002b74:	605a      	str	r2, [r3, #4]
    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8002b76:	68b9      	ldr	r1, [r7, #8]
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	68fa      	ldr	r2, [r7, #12]
 8002b7c:	3212      	adds	r2, #18
 8002b7e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	2b02      	cmp	r3, #2
 8002b86:	d80c      	bhi.n	8002ba2 <ETH_DMARxDescListInit+0x90>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	6919      	ldr	r1, [r3, #16]
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	1c5a      	adds	r2, r3, #1
 8002b90:	4613      	mov	r3, r2
 8002b92:	009b      	lsls	r3, r3, #2
 8002b94:	4413      	add	r3, r2
 8002b96:	00db      	lsls	r3, r3, #3
 8002b98:	440b      	add	r3, r1
 8002b9a:	461a      	mov	r2, r3
 8002b9c:	68bb      	ldr	r3, [r7, #8]
 8002b9e:	60da      	str	r2, [r3, #12]
 8002ba0:	e004      	b.n	8002bac <ETH_DMARxDescListInit+0x9a>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	691b      	ldr	r3, [r3, #16]
 8002ba6:	461a      	mov	r2, r3
 8002ba8:	68bb      	ldr	r3, [r7, #8]
 8002baa:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	3301      	adds	r3, #1
 8002bb0:	60fb      	str	r3, [r7, #12]
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	2b03      	cmp	r3, #3
 8002bb6:	d9b3      	bls.n	8002b20 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	2200      	movs	r2, #0
 8002bbc:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	2200      	movs	r2, #0
 8002bc2:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	2200      	movs	r2, #0
 8002bc8:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	2200      	movs	r2, #0
 8002bce:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	2200      	movs	r2, #0
 8002bd4:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	691a      	ldr	r2, [r3, #16]
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002be2:	60da      	str	r2, [r3, #12]
}
 8002be4:	bf00      	nop
 8002be6:	3714      	adds	r7, #20
 8002be8:	46bd      	mov	sp, r7
 8002bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bee:	4770      	bx	lr

08002bf0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002bf0:	b480      	push	{r7}
 8002bf2:	b089      	sub	sp, #36	@ 0x24
 8002bf4:	af00      	add	r7, sp, #0
 8002bf6:	6078      	str	r0, [r7, #4]
 8002bf8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002bfa:	2300      	movs	r3, #0
 8002bfc:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8002bfe:	2300      	movs	r3, #0
 8002c00:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002c02:	2300      	movs	r3, #0
 8002c04:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8002c06:	2300      	movs	r3, #0
 8002c08:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 8002c0a:	2300      	movs	r3, #0
 8002c0c:	61fb      	str	r3, [r7, #28]
 8002c0e:	e175      	b.n	8002efc <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002c10:	2201      	movs	r2, #1
 8002c12:	69fb      	ldr	r3, [r7, #28]
 8002c14:	fa02 f303 	lsl.w	r3, r2, r3
 8002c18:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002c1a:	683b      	ldr	r3, [r7, #0]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	697a      	ldr	r2, [r7, #20]
 8002c20:	4013      	ands	r3, r2
 8002c22:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 8002c24:	693a      	ldr	r2, [r7, #16]
 8002c26:	697b      	ldr	r3, [r7, #20]
 8002c28:	429a      	cmp	r2, r3
 8002c2a:	f040 8164 	bne.w	8002ef6 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002c2e:	683b      	ldr	r3, [r7, #0]
 8002c30:	685b      	ldr	r3, [r3, #4]
 8002c32:	f003 0303 	and.w	r3, r3, #3
 8002c36:	2b01      	cmp	r3, #1
 8002c38:	d005      	beq.n	8002c46 <HAL_GPIO_Init+0x56>
 8002c3a:	683b      	ldr	r3, [r7, #0]
 8002c3c:	685b      	ldr	r3, [r3, #4]
 8002c3e:	f003 0303 	and.w	r3, r3, #3
 8002c42:	2b02      	cmp	r3, #2
 8002c44:	d130      	bne.n	8002ca8 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	689b      	ldr	r3, [r3, #8]
 8002c4a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002c4c:	69fb      	ldr	r3, [r7, #28]
 8002c4e:	005b      	lsls	r3, r3, #1
 8002c50:	2203      	movs	r2, #3
 8002c52:	fa02 f303 	lsl.w	r3, r2, r3
 8002c56:	43db      	mvns	r3, r3
 8002c58:	69ba      	ldr	r2, [r7, #24]
 8002c5a:	4013      	ands	r3, r2
 8002c5c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8002c5e:	683b      	ldr	r3, [r7, #0]
 8002c60:	68da      	ldr	r2, [r3, #12]
 8002c62:	69fb      	ldr	r3, [r7, #28]
 8002c64:	005b      	lsls	r3, r3, #1
 8002c66:	fa02 f303 	lsl.w	r3, r2, r3
 8002c6a:	69ba      	ldr	r2, [r7, #24]
 8002c6c:	4313      	orrs	r3, r2
 8002c6e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	69ba      	ldr	r2, [r7, #24]
 8002c74:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	685b      	ldr	r3, [r3, #4]
 8002c7a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002c7c:	2201      	movs	r2, #1
 8002c7e:	69fb      	ldr	r3, [r7, #28]
 8002c80:	fa02 f303 	lsl.w	r3, r2, r3
 8002c84:	43db      	mvns	r3, r3
 8002c86:	69ba      	ldr	r2, [r7, #24]
 8002c88:	4013      	ands	r3, r2
 8002c8a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002c8c:	683b      	ldr	r3, [r7, #0]
 8002c8e:	685b      	ldr	r3, [r3, #4]
 8002c90:	091b      	lsrs	r3, r3, #4
 8002c92:	f003 0201 	and.w	r2, r3, #1
 8002c96:	69fb      	ldr	r3, [r7, #28]
 8002c98:	fa02 f303 	lsl.w	r3, r2, r3
 8002c9c:	69ba      	ldr	r2, [r7, #24]
 8002c9e:	4313      	orrs	r3, r2
 8002ca0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	69ba      	ldr	r2, [r7, #24]
 8002ca6:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002ca8:	683b      	ldr	r3, [r7, #0]
 8002caa:	685b      	ldr	r3, [r3, #4]
 8002cac:	f003 0303 	and.w	r3, r3, #3
 8002cb0:	2b03      	cmp	r3, #3
 8002cb2:	d017      	beq.n	8002ce4 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	68db      	ldr	r3, [r3, #12]
 8002cb8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002cba:	69fb      	ldr	r3, [r7, #28]
 8002cbc:	005b      	lsls	r3, r3, #1
 8002cbe:	2203      	movs	r2, #3
 8002cc0:	fa02 f303 	lsl.w	r3, r2, r3
 8002cc4:	43db      	mvns	r3, r3
 8002cc6:	69ba      	ldr	r2, [r7, #24]
 8002cc8:	4013      	ands	r3, r2
 8002cca:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8002ccc:	683b      	ldr	r3, [r7, #0]
 8002cce:	689a      	ldr	r2, [r3, #8]
 8002cd0:	69fb      	ldr	r3, [r7, #28]
 8002cd2:	005b      	lsls	r3, r3, #1
 8002cd4:	fa02 f303 	lsl.w	r3, r2, r3
 8002cd8:	69ba      	ldr	r2, [r7, #24]
 8002cda:	4313      	orrs	r3, r2
 8002cdc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	69ba      	ldr	r2, [r7, #24]
 8002ce2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002ce4:	683b      	ldr	r3, [r7, #0]
 8002ce6:	685b      	ldr	r3, [r3, #4]
 8002ce8:	f003 0303 	and.w	r3, r3, #3
 8002cec:	2b02      	cmp	r3, #2
 8002cee:	d123      	bne.n	8002d38 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002cf0:	69fb      	ldr	r3, [r7, #28]
 8002cf2:	08da      	lsrs	r2, r3, #3
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	3208      	adds	r2, #8
 8002cf8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002cfc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002cfe:	69fb      	ldr	r3, [r7, #28]
 8002d00:	f003 0307 	and.w	r3, r3, #7
 8002d04:	009b      	lsls	r3, r3, #2
 8002d06:	220f      	movs	r2, #15
 8002d08:	fa02 f303 	lsl.w	r3, r2, r3
 8002d0c:	43db      	mvns	r3, r3
 8002d0e:	69ba      	ldr	r2, [r7, #24]
 8002d10:	4013      	ands	r3, r2
 8002d12:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002d14:	683b      	ldr	r3, [r7, #0]
 8002d16:	691a      	ldr	r2, [r3, #16]
 8002d18:	69fb      	ldr	r3, [r7, #28]
 8002d1a:	f003 0307 	and.w	r3, r3, #7
 8002d1e:	009b      	lsls	r3, r3, #2
 8002d20:	fa02 f303 	lsl.w	r3, r2, r3
 8002d24:	69ba      	ldr	r2, [r7, #24]
 8002d26:	4313      	orrs	r3, r2
 8002d28:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8002d2a:	69fb      	ldr	r3, [r7, #28]
 8002d2c:	08da      	lsrs	r2, r3, #3
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	3208      	adds	r2, #8
 8002d32:	69b9      	ldr	r1, [r7, #24]
 8002d34:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002d3e:	69fb      	ldr	r3, [r7, #28]
 8002d40:	005b      	lsls	r3, r3, #1
 8002d42:	2203      	movs	r2, #3
 8002d44:	fa02 f303 	lsl.w	r3, r2, r3
 8002d48:	43db      	mvns	r3, r3
 8002d4a:	69ba      	ldr	r2, [r7, #24]
 8002d4c:	4013      	ands	r3, r2
 8002d4e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002d50:	683b      	ldr	r3, [r7, #0]
 8002d52:	685b      	ldr	r3, [r3, #4]
 8002d54:	f003 0203 	and.w	r2, r3, #3
 8002d58:	69fb      	ldr	r3, [r7, #28]
 8002d5a:	005b      	lsls	r3, r3, #1
 8002d5c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d60:	69ba      	ldr	r2, [r7, #24]
 8002d62:	4313      	orrs	r3, r2
 8002d64:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	69ba      	ldr	r2, [r7, #24]
 8002d6a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002d6c:	683b      	ldr	r3, [r7, #0]
 8002d6e:	685b      	ldr	r3, [r3, #4]
 8002d70:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	f000 80be 	beq.w	8002ef6 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d7a:	4b66      	ldr	r3, [pc, #408]	@ (8002f14 <HAL_GPIO_Init+0x324>)
 8002d7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d7e:	4a65      	ldr	r2, [pc, #404]	@ (8002f14 <HAL_GPIO_Init+0x324>)
 8002d80:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002d84:	6453      	str	r3, [r2, #68]	@ 0x44
 8002d86:	4b63      	ldr	r3, [pc, #396]	@ (8002f14 <HAL_GPIO_Init+0x324>)
 8002d88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d8a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002d8e:	60fb      	str	r3, [r7, #12]
 8002d90:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8002d92:	4a61      	ldr	r2, [pc, #388]	@ (8002f18 <HAL_GPIO_Init+0x328>)
 8002d94:	69fb      	ldr	r3, [r7, #28]
 8002d96:	089b      	lsrs	r3, r3, #2
 8002d98:	3302      	adds	r3, #2
 8002d9a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d9e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002da0:	69fb      	ldr	r3, [r7, #28]
 8002da2:	f003 0303 	and.w	r3, r3, #3
 8002da6:	009b      	lsls	r3, r3, #2
 8002da8:	220f      	movs	r2, #15
 8002daa:	fa02 f303 	lsl.w	r3, r2, r3
 8002dae:	43db      	mvns	r3, r3
 8002db0:	69ba      	ldr	r2, [r7, #24]
 8002db2:	4013      	ands	r3, r2
 8002db4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	4a58      	ldr	r2, [pc, #352]	@ (8002f1c <HAL_GPIO_Init+0x32c>)
 8002dba:	4293      	cmp	r3, r2
 8002dbc:	d037      	beq.n	8002e2e <HAL_GPIO_Init+0x23e>
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	4a57      	ldr	r2, [pc, #348]	@ (8002f20 <HAL_GPIO_Init+0x330>)
 8002dc2:	4293      	cmp	r3, r2
 8002dc4:	d031      	beq.n	8002e2a <HAL_GPIO_Init+0x23a>
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	4a56      	ldr	r2, [pc, #344]	@ (8002f24 <HAL_GPIO_Init+0x334>)
 8002dca:	4293      	cmp	r3, r2
 8002dcc:	d02b      	beq.n	8002e26 <HAL_GPIO_Init+0x236>
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	4a55      	ldr	r2, [pc, #340]	@ (8002f28 <HAL_GPIO_Init+0x338>)
 8002dd2:	4293      	cmp	r3, r2
 8002dd4:	d025      	beq.n	8002e22 <HAL_GPIO_Init+0x232>
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	4a54      	ldr	r2, [pc, #336]	@ (8002f2c <HAL_GPIO_Init+0x33c>)
 8002dda:	4293      	cmp	r3, r2
 8002ddc:	d01f      	beq.n	8002e1e <HAL_GPIO_Init+0x22e>
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	4a53      	ldr	r2, [pc, #332]	@ (8002f30 <HAL_GPIO_Init+0x340>)
 8002de2:	4293      	cmp	r3, r2
 8002de4:	d019      	beq.n	8002e1a <HAL_GPIO_Init+0x22a>
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	4a52      	ldr	r2, [pc, #328]	@ (8002f34 <HAL_GPIO_Init+0x344>)
 8002dea:	4293      	cmp	r3, r2
 8002dec:	d013      	beq.n	8002e16 <HAL_GPIO_Init+0x226>
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	4a51      	ldr	r2, [pc, #324]	@ (8002f38 <HAL_GPIO_Init+0x348>)
 8002df2:	4293      	cmp	r3, r2
 8002df4:	d00d      	beq.n	8002e12 <HAL_GPIO_Init+0x222>
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	4a50      	ldr	r2, [pc, #320]	@ (8002f3c <HAL_GPIO_Init+0x34c>)
 8002dfa:	4293      	cmp	r3, r2
 8002dfc:	d007      	beq.n	8002e0e <HAL_GPIO_Init+0x21e>
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	4a4f      	ldr	r2, [pc, #316]	@ (8002f40 <HAL_GPIO_Init+0x350>)
 8002e02:	4293      	cmp	r3, r2
 8002e04:	d101      	bne.n	8002e0a <HAL_GPIO_Init+0x21a>
 8002e06:	2309      	movs	r3, #9
 8002e08:	e012      	b.n	8002e30 <HAL_GPIO_Init+0x240>
 8002e0a:	230a      	movs	r3, #10
 8002e0c:	e010      	b.n	8002e30 <HAL_GPIO_Init+0x240>
 8002e0e:	2308      	movs	r3, #8
 8002e10:	e00e      	b.n	8002e30 <HAL_GPIO_Init+0x240>
 8002e12:	2307      	movs	r3, #7
 8002e14:	e00c      	b.n	8002e30 <HAL_GPIO_Init+0x240>
 8002e16:	2306      	movs	r3, #6
 8002e18:	e00a      	b.n	8002e30 <HAL_GPIO_Init+0x240>
 8002e1a:	2305      	movs	r3, #5
 8002e1c:	e008      	b.n	8002e30 <HAL_GPIO_Init+0x240>
 8002e1e:	2304      	movs	r3, #4
 8002e20:	e006      	b.n	8002e30 <HAL_GPIO_Init+0x240>
 8002e22:	2303      	movs	r3, #3
 8002e24:	e004      	b.n	8002e30 <HAL_GPIO_Init+0x240>
 8002e26:	2302      	movs	r3, #2
 8002e28:	e002      	b.n	8002e30 <HAL_GPIO_Init+0x240>
 8002e2a:	2301      	movs	r3, #1
 8002e2c:	e000      	b.n	8002e30 <HAL_GPIO_Init+0x240>
 8002e2e:	2300      	movs	r3, #0
 8002e30:	69fa      	ldr	r2, [r7, #28]
 8002e32:	f002 0203 	and.w	r2, r2, #3
 8002e36:	0092      	lsls	r2, r2, #2
 8002e38:	4093      	lsls	r3, r2
 8002e3a:	69ba      	ldr	r2, [r7, #24]
 8002e3c:	4313      	orrs	r3, r2
 8002e3e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002e40:	4935      	ldr	r1, [pc, #212]	@ (8002f18 <HAL_GPIO_Init+0x328>)
 8002e42:	69fb      	ldr	r3, [r7, #28]
 8002e44:	089b      	lsrs	r3, r3, #2
 8002e46:	3302      	adds	r3, #2
 8002e48:	69ba      	ldr	r2, [r7, #24]
 8002e4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002e4e:	4b3d      	ldr	r3, [pc, #244]	@ (8002f44 <HAL_GPIO_Init+0x354>)
 8002e50:	689b      	ldr	r3, [r3, #8]
 8002e52:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e54:	693b      	ldr	r3, [r7, #16]
 8002e56:	43db      	mvns	r3, r3
 8002e58:	69ba      	ldr	r2, [r7, #24]
 8002e5a:	4013      	ands	r3, r2
 8002e5c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002e5e:	683b      	ldr	r3, [r7, #0]
 8002e60:	685b      	ldr	r3, [r3, #4]
 8002e62:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d003      	beq.n	8002e72 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002e6a:	69ba      	ldr	r2, [r7, #24]
 8002e6c:	693b      	ldr	r3, [r7, #16]
 8002e6e:	4313      	orrs	r3, r2
 8002e70:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002e72:	4a34      	ldr	r2, [pc, #208]	@ (8002f44 <HAL_GPIO_Init+0x354>)
 8002e74:	69bb      	ldr	r3, [r7, #24]
 8002e76:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002e78:	4b32      	ldr	r3, [pc, #200]	@ (8002f44 <HAL_GPIO_Init+0x354>)
 8002e7a:	68db      	ldr	r3, [r3, #12]
 8002e7c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e7e:	693b      	ldr	r3, [r7, #16]
 8002e80:	43db      	mvns	r3, r3
 8002e82:	69ba      	ldr	r2, [r7, #24]
 8002e84:	4013      	ands	r3, r2
 8002e86:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002e88:	683b      	ldr	r3, [r7, #0]
 8002e8a:	685b      	ldr	r3, [r3, #4]
 8002e8c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d003      	beq.n	8002e9c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002e94:	69ba      	ldr	r2, [r7, #24]
 8002e96:	693b      	ldr	r3, [r7, #16]
 8002e98:	4313      	orrs	r3, r2
 8002e9a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002e9c:	4a29      	ldr	r2, [pc, #164]	@ (8002f44 <HAL_GPIO_Init+0x354>)
 8002e9e:	69bb      	ldr	r3, [r7, #24]
 8002ea0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002ea2:	4b28      	ldr	r3, [pc, #160]	@ (8002f44 <HAL_GPIO_Init+0x354>)
 8002ea4:	685b      	ldr	r3, [r3, #4]
 8002ea6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ea8:	693b      	ldr	r3, [r7, #16]
 8002eaa:	43db      	mvns	r3, r3
 8002eac:	69ba      	ldr	r2, [r7, #24]
 8002eae:	4013      	ands	r3, r2
 8002eb0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002eb2:	683b      	ldr	r3, [r7, #0]
 8002eb4:	685b      	ldr	r3, [r3, #4]
 8002eb6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d003      	beq.n	8002ec6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002ebe:	69ba      	ldr	r2, [r7, #24]
 8002ec0:	693b      	ldr	r3, [r7, #16]
 8002ec2:	4313      	orrs	r3, r2
 8002ec4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002ec6:	4a1f      	ldr	r2, [pc, #124]	@ (8002f44 <HAL_GPIO_Init+0x354>)
 8002ec8:	69bb      	ldr	r3, [r7, #24]
 8002eca:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002ecc:	4b1d      	ldr	r3, [pc, #116]	@ (8002f44 <HAL_GPIO_Init+0x354>)
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ed2:	693b      	ldr	r3, [r7, #16]
 8002ed4:	43db      	mvns	r3, r3
 8002ed6:	69ba      	ldr	r2, [r7, #24]
 8002ed8:	4013      	ands	r3, r2
 8002eda:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002edc:	683b      	ldr	r3, [r7, #0]
 8002ede:	685b      	ldr	r3, [r3, #4]
 8002ee0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d003      	beq.n	8002ef0 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002ee8:	69ba      	ldr	r2, [r7, #24]
 8002eea:	693b      	ldr	r3, [r7, #16]
 8002eec:	4313      	orrs	r3, r2
 8002eee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002ef0:	4a14      	ldr	r2, [pc, #80]	@ (8002f44 <HAL_GPIO_Init+0x354>)
 8002ef2:	69bb      	ldr	r3, [r7, #24]
 8002ef4:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 8002ef6:	69fb      	ldr	r3, [r7, #28]
 8002ef8:	3301      	adds	r3, #1
 8002efa:	61fb      	str	r3, [r7, #28]
 8002efc:	69fb      	ldr	r3, [r7, #28]
 8002efe:	2b0f      	cmp	r3, #15
 8002f00:	f67f ae86 	bls.w	8002c10 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002f04:	bf00      	nop
 8002f06:	bf00      	nop
 8002f08:	3724      	adds	r7, #36	@ 0x24
 8002f0a:	46bd      	mov	sp, r7
 8002f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f10:	4770      	bx	lr
 8002f12:	bf00      	nop
 8002f14:	40023800 	.word	0x40023800
 8002f18:	40013800 	.word	0x40013800
 8002f1c:	40020000 	.word	0x40020000
 8002f20:	40020400 	.word	0x40020400
 8002f24:	40020800 	.word	0x40020800
 8002f28:	40020c00 	.word	0x40020c00
 8002f2c:	40021000 	.word	0x40021000
 8002f30:	40021400 	.word	0x40021400
 8002f34:	40021800 	.word	0x40021800
 8002f38:	40021c00 	.word	0x40021c00
 8002f3c:	40022000 	.word	0x40022000
 8002f40:	40022400 	.word	0x40022400
 8002f44:	40013c00 	.word	0x40013c00

08002f48 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002f48:	b480      	push	{r7}
 8002f4a:	b083      	sub	sp, #12
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	6078      	str	r0, [r7, #4]
 8002f50:	460b      	mov	r3, r1
 8002f52:	807b      	strh	r3, [r7, #2]
 8002f54:	4613      	mov	r3, r2
 8002f56:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002f58:	787b      	ldrb	r3, [r7, #1]
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d003      	beq.n	8002f66 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002f5e:	887a      	ldrh	r2, [r7, #2]
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002f64:	e003      	b.n	8002f6e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002f66:	887b      	ldrh	r3, [r7, #2]
 8002f68:	041a      	lsls	r2, r3, #16
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	619a      	str	r2, [r3, #24]
}
 8002f6e:	bf00      	nop
 8002f70:	370c      	adds	r7, #12
 8002f72:	46bd      	mov	sp, r7
 8002f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f78:	4770      	bx	lr

08002f7a <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin Specifies the pins to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002f7a:	b480      	push	{r7}
 8002f7c:	b085      	sub	sp, #20
 8002f7e:	af00      	add	r7, sp, #0
 8002f80:	6078      	str	r0, [r7, #4]
 8002f82:	460b      	mov	r3, r1
 8002f84:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	695b      	ldr	r3, [r3, #20]
 8002f8a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002f8c:	887a      	ldrh	r2, [r7, #2]
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	4013      	ands	r3, r2
 8002f92:	041a      	lsls	r2, r3, #16
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	43d9      	mvns	r1, r3
 8002f98:	887b      	ldrh	r3, [r7, #2]
 8002f9a:	400b      	ands	r3, r1
 8002f9c:	431a      	orrs	r2, r3
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	619a      	str	r2, [r3, #24]
}
 8002fa2:	bf00      	nop
 8002fa4:	3714      	adds	r7, #20
 8002fa6:	46bd      	mov	sp, r7
 8002fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fac:	4770      	bx	lr
	...

08002fb0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002fb0:	b580      	push	{r7, lr}
 8002fb2:	b082      	sub	sp, #8
 8002fb4:	af00      	add	r7, sp, #0
 8002fb6:	4603      	mov	r3, r0
 8002fb8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002fba:	4b08      	ldr	r3, [pc, #32]	@ (8002fdc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002fbc:	695a      	ldr	r2, [r3, #20]
 8002fbe:	88fb      	ldrh	r3, [r7, #6]
 8002fc0:	4013      	ands	r3, r2
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d006      	beq.n	8002fd4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002fc6:	4a05      	ldr	r2, [pc, #20]	@ (8002fdc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002fc8:	88fb      	ldrh	r3, [r7, #6]
 8002fca:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002fcc:	88fb      	ldrh	r3, [r7, #6]
 8002fce:	4618      	mov	r0, r3
 8002fd0:	f7fd fda0 	bl	8000b14 <HAL_GPIO_EXTI_Callback>
  }
}
 8002fd4:	bf00      	nop
 8002fd6:	3708      	adds	r7, #8
 8002fd8:	46bd      	mov	sp, r7
 8002fda:	bd80      	pop	{r7, pc}
 8002fdc:	40013c00 	.word	0x40013c00

08002fe0 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002fe0:	b580      	push	{r7, lr}
 8002fe2:	b086      	sub	sp, #24
 8002fe4:	af02      	add	r7, sp, #8
 8002fe6:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d101      	bne.n	8002ff2 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002fee:	2301      	movs	r3, #1
 8002ff0:	e108      	b.n	8003204 <HAL_PCD_Init+0x224>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8002ffe:	b2db      	uxtb	r3, r3
 8003000:	2b00      	cmp	r3, #0
 8003002:	d106      	bne.n	8003012 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	2200      	movs	r2, #0
 8003008:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800300c:	6878      	ldr	r0, [r7, #4]
 800300e:	f7fe f87b 	bl	8001108 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	2203      	movs	r2, #3
 8003016:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 800301a:	68bb      	ldr	r3, [r7, #8]
 800301c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003020:	d102      	bne.n	8003028 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	2200      	movs	r2, #0
 8003026:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	4618      	mov	r0, r3
 800302e:	f002 fb1f 	bl	8005670 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	6818      	ldr	r0, [r3, #0]
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	7c1a      	ldrb	r2, [r3, #16]
 800303a:	f88d 2000 	strb.w	r2, [sp]
 800303e:	3304      	adds	r3, #4
 8003040:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003042:	f002 fabb 	bl	80055bc <USB_CoreInit>
 8003046:	4603      	mov	r3, r0
 8003048:	2b00      	cmp	r3, #0
 800304a:	d005      	beq.n	8003058 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	2202      	movs	r2, #2
 8003050:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8003054:	2301      	movs	r3, #1
 8003056:	e0d5      	b.n	8003204 <HAL_PCD_Init+0x224>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	2100      	movs	r1, #0
 800305e:	4618      	mov	r0, r3
 8003060:	f002 fb17 	bl	8005692 <USB_SetCurrentMode>
 8003064:	4603      	mov	r3, r0
 8003066:	2b00      	cmp	r3, #0
 8003068:	d005      	beq.n	8003076 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	2202      	movs	r2, #2
 800306e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8003072:	2301      	movs	r3, #1
 8003074:	e0c6      	b.n	8003204 <HAL_PCD_Init+0x224>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003076:	2300      	movs	r3, #0
 8003078:	73fb      	strb	r3, [r7, #15]
 800307a:	e04a      	b.n	8003112 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800307c:	7bfa      	ldrb	r2, [r7, #15]
 800307e:	6879      	ldr	r1, [r7, #4]
 8003080:	4613      	mov	r3, r2
 8003082:	00db      	lsls	r3, r3, #3
 8003084:	4413      	add	r3, r2
 8003086:	009b      	lsls	r3, r3, #2
 8003088:	440b      	add	r3, r1
 800308a:	3315      	adds	r3, #21
 800308c:	2201      	movs	r2, #1
 800308e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003090:	7bfa      	ldrb	r2, [r7, #15]
 8003092:	6879      	ldr	r1, [r7, #4]
 8003094:	4613      	mov	r3, r2
 8003096:	00db      	lsls	r3, r3, #3
 8003098:	4413      	add	r3, r2
 800309a:	009b      	lsls	r3, r3, #2
 800309c:	440b      	add	r3, r1
 800309e:	3314      	adds	r3, #20
 80030a0:	7bfa      	ldrb	r2, [r7, #15]
 80030a2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80030a4:	7bfa      	ldrb	r2, [r7, #15]
 80030a6:	7bfb      	ldrb	r3, [r7, #15]
 80030a8:	b298      	uxth	r0, r3
 80030aa:	6879      	ldr	r1, [r7, #4]
 80030ac:	4613      	mov	r3, r2
 80030ae:	00db      	lsls	r3, r3, #3
 80030b0:	4413      	add	r3, r2
 80030b2:	009b      	lsls	r3, r3, #2
 80030b4:	440b      	add	r3, r1
 80030b6:	332e      	adds	r3, #46	@ 0x2e
 80030b8:	4602      	mov	r2, r0
 80030ba:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80030bc:	7bfa      	ldrb	r2, [r7, #15]
 80030be:	6879      	ldr	r1, [r7, #4]
 80030c0:	4613      	mov	r3, r2
 80030c2:	00db      	lsls	r3, r3, #3
 80030c4:	4413      	add	r3, r2
 80030c6:	009b      	lsls	r3, r3, #2
 80030c8:	440b      	add	r3, r1
 80030ca:	3318      	adds	r3, #24
 80030cc:	2200      	movs	r2, #0
 80030ce:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80030d0:	7bfa      	ldrb	r2, [r7, #15]
 80030d2:	6879      	ldr	r1, [r7, #4]
 80030d4:	4613      	mov	r3, r2
 80030d6:	00db      	lsls	r3, r3, #3
 80030d8:	4413      	add	r3, r2
 80030da:	009b      	lsls	r3, r3, #2
 80030dc:	440b      	add	r3, r1
 80030de:	331c      	adds	r3, #28
 80030e0:	2200      	movs	r2, #0
 80030e2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80030e4:	7bfa      	ldrb	r2, [r7, #15]
 80030e6:	6879      	ldr	r1, [r7, #4]
 80030e8:	4613      	mov	r3, r2
 80030ea:	00db      	lsls	r3, r3, #3
 80030ec:	4413      	add	r3, r2
 80030ee:	009b      	lsls	r3, r3, #2
 80030f0:	440b      	add	r3, r1
 80030f2:	3320      	adds	r3, #32
 80030f4:	2200      	movs	r2, #0
 80030f6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80030f8:	7bfa      	ldrb	r2, [r7, #15]
 80030fa:	6879      	ldr	r1, [r7, #4]
 80030fc:	4613      	mov	r3, r2
 80030fe:	00db      	lsls	r3, r3, #3
 8003100:	4413      	add	r3, r2
 8003102:	009b      	lsls	r3, r3, #2
 8003104:	440b      	add	r3, r1
 8003106:	3324      	adds	r3, #36	@ 0x24
 8003108:	2200      	movs	r2, #0
 800310a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800310c:	7bfb      	ldrb	r3, [r7, #15]
 800310e:	3301      	adds	r3, #1
 8003110:	73fb      	strb	r3, [r7, #15]
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	791b      	ldrb	r3, [r3, #4]
 8003116:	7bfa      	ldrb	r2, [r7, #15]
 8003118:	429a      	cmp	r2, r3
 800311a:	d3af      	bcc.n	800307c <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800311c:	2300      	movs	r3, #0
 800311e:	73fb      	strb	r3, [r7, #15]
 8003120:	e044      	b.n	80031ac <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003122:	7bfa      	ldrb	r2, [r7, #15]
 8003124:	6879      	ldr	r1, [r7, #4]
 8003126:	4613      	mov	r3, r2
 8003128:	00db      	lsls	r3, r3, #3
 800312a:	4413      	add	r3, r2
 800312c:	009b      	lsls	r3, r3, #2
 800312e:	440b      	add	r3, r1
 8003130:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8003134:	2200      	movs	r2, #0
 8003136:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003138:	7bfa      	ldrb	r2, [r7, #15]
 800313a:	6879      	ldr	r1, [r7, #4]
 800313c:	4613      	mov	r3, r2
 800313e:	00db      	lsls	r3, r3, #3
 8003140:	4413      	add	r3, r2
 8003142:	009b      	lsls	r3, r3, #2
 8003144:	440b      	add	r3, r1
 8003146:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 800314a:	7bfa      	ldrb	r2, [r7, #15]
 800314c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800314e:	7bfa      	ldrb	r2, [r7, #15]
 8003150:	6879      	ldr	r1, [r7, #4]
 8003152:	4613      	mov	r3, r2
 8003154:	00db      	lsls	r3, r3, #3
 8003156:	4413      	add	r3, r2
 8003158:	009b      	lsls	r3, r3, #2
 800315a:	440b      	add	r3, r1
 800315c:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8003160:	2200      	movs	r2, #0
 8003162:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003164:	7bfa      	ldrb	r2, [r7, #15]
 8003166:	6879      	ldr	r1, [r7, #4]
 8003168:	4613      	mov	r3, r2
 800316a:	00db      	lsls	r3, r3, #3
 800316c:	4413      	add	r3, r2
 800316e:	009b      	lsls	r3, r3, #2
 8003170:	440b      	add	r3, r1
 8003172:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8003176:	2200      	movs	r2, #0
 8003178:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800317a:	7bfa      	ldrb	r2, [r7, #15]
 800317c:	6879      	ldr	r1, [r7, #4]
 800317e:	4613      	mov	r3, r2
 8003180:	00db      	lsls	r3, r3, #3
 8003182:	4413      	add	r3, r2
 8003184:	009b      	lsls	r3, r3, #2
 8003186:	440b      	add	r3, r1
 8003188:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800318c:	2200      	movs	r2, #0
 800318e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003190:	7bfa      	ldrb	r2, [r7, #15]
 8003192:	6879      	ldr	r1, [r7, #4]
 8003194:	4613      	mov	r3, r2
 8003196:	00db      	lsls	r3, r3, #3
 8003198:	4413      	add	r3, r2
 800319a:	009b      	lsls	r3, r3, #2
 800319c:	440b      	add	r3, r1
 800319e:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80031a2:	2200      	movs	r2, #0
 80031a4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80031a6:	7bfb      	ldrb	r3, [r7, #15]
 80031a8:	3301      	adds	r3, #1
 80031aa:	73fb      	strb	r3, [r7, #15]
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	791b      	ldrb	r3, [r3, #4]
 80031b0:	7bfa      	ldrb	r2, [r7, #15]
 80031b2:	429a      	cmp	r2, r3
 80031b4:	d3b5      	bcc.n	8003122 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	6818      	ldr	r0, [r3, #0]
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	7c1a      	ldrb	r2, [r3, #16]
 80031be:	f88d 2000 	strb.w	r2, [sp]
 80031c2:	3304      	adds	r3, #4
 80031c4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80031c6:	f002 fab1 	bl	800572c <USB_DevInit>
 80031ca:	4603      	mov	r3, r0
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d005      	beq.n	80031dc <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	2202      	movs	r2, #2
 80031d4:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80031d8:	2301      	movs	r3, #1
 80031da:	e013      	b.n	8003204 <HAL_PCD_Init+0x224>
  }

  hpcd->USB_Address = 0U;
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	2200      	movs	r2, #0
 80031e0:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	2201      	movs	r2, #1
 80031e6:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	7b1b      	ldrb	r3, [r3, #12]
 80031ee:	2b01      	cmp	r3, #1
 80031f0:	d102      	bne.n	80031f8 <HAL_PCD_Init+0x218>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80031f2:	6878      	ldr	r0, [r7, #4]
 80031f4:	f000 f80a 	bl	800320c <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	4618      	mov	r0, r3
 80031fe:	f002 fc6c 	bl	8005ada <USB_DevDisconnect>

  return HAL_OK;
 8003202:	2300      	movs	r3, #0
}
 8003204:	4618      	mov	r0, r3
 8003206:	3710      	adds	r7, #16
 8003208:	46bd      	mov	sp, r7
 800320a:	bd80      	pop	{r7, pc}

0800320c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800320c:	b480      	push	{r7}
 800320e:	b085      	sub	sp, #20
 8003210:	af00      	add	r7, sp, #0
 8003212:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	2201      	movs	r2, #1
 800321e:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	2200      	movs	r2, #0
 8003226:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	699b      	ldr	r3, [r3, #24]
 800322e:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800323a:	4b05      	ldr	r3, [pc, #20]	@ (8003250 <HAL_PCDEx_ActivateLPM+0x44>)
 800323c:	4313      	orrs	r3, r2
 800323e:	68fa      	ldr	r2, [r7, #12]
 8003240:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 8003242:	2300      	movs	r3, #0
}
 8003244:	4618      	mov	r0, r3
 8003246:	3714      	adds	r7, #20
 8003248:	46bd      	mov	sp, r7
 800324a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800324e:	4770      	bx	lr
 8003250:	10000003 	.word	0x10000003

08003254 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003254:	b480      	push	{r7}
 8003256:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003258:	4b05      	ldr	r3, [pc, #20]	@ (8003270 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	4a04      	ldr	r2, [pc, #16]	@ (8003270 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800325e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003262:	6013      	str	r3, [r2, #0]
}
 8003264:	bf00      	nop
 8003266:	46bd      	mov	sp, r7
 8003268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800326c:	4770      	bx	lr
 800326e:	bf00      	nop
 8003270:	40007000 	.word	0x40007000

08003274 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8003274:	b580      	push	{r7, lr}
 8003276:	b082      	sub	sp, #8
 8003278:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 800327a:	2300      	movs	r3, #0
 800327c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800327e:	4b23      	ldr	r3, [pc, #140]	@ (800330c <HAL_PWREx_EnableOverDrive+0x98>)
 8003280:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003282:	4a22      	ldr	r2, [pc, #136]	@ (800330c <HAL_PWREx_EnableOverDrive+0x98>)
 8003284:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003288:	6413      	str	r3, [r2, #64]	@ 0x40
 800328a:	4b20      	ldr	r3, [pc, #128]	@ (800330c <HAL_PWREx_EnableOverDrive+0x98>)
 800328c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800328e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003292:	603b      	str	r3, [r7, #0]
 8003294:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8003296:	4b1e      	ldr	r3, [pc, #120]	@ (8003310 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	4a1d      	ldr	r2, [pc, #116]	@ (8003310 <HAL_PWREx_EnableOverDrive+0x9c>)
 800329c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80032a0:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80032a2:	f7fe f95d 	bl	8001560 <HAL_GetTick>
 80032a6:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80032a8:	e009      	b.n	80032be <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80032aa:	f7fe f959 	bl	8001560 <HAL_GetTick>
 80032ae:	4602      	mov	r2, r0
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	1ad3      	subs	r3, r2, r3
 80032b4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80032b8:	d901      	bls.n	80032be <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 80032ba:	2303      	movs	r3, #3
 80032bc:	e022      	b.n	8003304 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80032be:	4b14      	ldr	r3, [pc, #80]	@ (8003310 <HAL_PWREx_EnableOverDrive+0x9c>)
 80032c0:	685b      	ldr	r3, [r3, #4]
 80032c2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80032c6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80032ca:	d1ee      	bne.n	80032aa <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80032cc:	4b10      	ldr	r3, [pc, #64]	@ (8003310 <HAL_PWREx_EnableOverDrive+0x9c>)
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	4a0f      	ldr	r2, [pc, #60]	@ (8003310 <HAL_PWREx_EnableOverDrive+0x9c>)
 80032d2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80032d6:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80032d8:	f7fe f942 	bl	8001560 <HAL_GetTick>
 80032dc:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80032de:	e009      	b.n	80032f4 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80032e0:	f7fe f93e 	bl	8001560 <HAL_GetTick>
 80032e4:	4602      	mov	r2, r0
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	1ad3      	subs	r3, r2, r3
 80032ea:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80032ee:	d901      	bls.n	80032f4 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80032f0:	2303      	movs	r3, #3
 80032f2:	e007      	b.n	8003304 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80032f4:	4b06      	ldr	r3, [pc, #24]	@ (8003310 <HAL_PWREx_EnableOverDrive+0x9c>)
 80032f6:	685b      	ldr	r3, [r3, #4]
 80032f8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80032fc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003300:	d1ee      	bne.n	80032e0 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8003302:	2300      	movs	r3, #0
}
 8003304:	4618      	mov	r0, r3
 8003306:	3708      	adds	r7, #8
 8003308:	46bd      	mov	sp, r7
 800330a:	bd80      	pop	{r7, pc}
 800330c:	40023800 	.word	0x40023800
 8003310:	40007000 	.word	0x40007000

08003314 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003314:	b580      	push	{r7, lr}
 8003316:	b086      	sub	sp, #24
 8003318:	af00      	add	r7, sp, #0
 800331a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 800331c:	2300      	movs	r3, #0
 800331e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	2b00      	cmp	r3, #0
 8003324:	d101      	bne.n	800332a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8003326:	2301      	movs	r3, #1
 8003328:	e29b      	b.n	8003862 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f003 0301 	and.w	r3, r3, #1
 8003332:	2b00      	cmp	r3, #0
 8003334:	f000 8087 	beq.w	8003446 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003338:	4b96      	ldr	r3, [pc, #600]	@ (8003594 <HAL_RCC_OscConfig+0x280>)
 800333a:	689b      	ldr	r3, [r3, #8]
 800333c:	f003 030c 	and.w	r3, r3, #12
 8003340:	2b04      	cmp	r3, #4
 8003342:	d00c      	beq.n	800335e <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003344:	4b93      	ldr	r3, [pc, #588]	@ (8003594 <HAL_RCC_OscConfig+0x280>)
 8003346:	689b      	ldr	r3, [r3, #8]
 8003348:	f003 030c 	and.w	r3, r3, #12
 800334c:	2b08      	cmp	r3, #8
 800334e:	d112      	bne.n	8003376 <HAL_RCC_OscConfig+0x62>
 8003350:	4b90      	ldr	r3, [pc, #576]	@ (8003594 <HAL_RCC_OscConfig+0x280>)
 8003352:	685b      	ldr	r3, [r3, #4]
 8003354:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003358:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800335c:	d10b      	bne.n	8003376 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800335e:	4b8d      	ldr	r3, [pc, #564]	@ (8003594 <HAL_RCC_OscConfig+0x280>)
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003366:	2b00      	cmp	r3, #0
 8003368:	d06c      	beq.n	8003444 <HAL_RCC_OscConfig+0x130>
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	685b      	ldr	r3, [r3, #4]
 800336e:	2b00      	cmp	r3, #0
 8003370:	d168      	bne.n	8003444 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8003372:	2301      	movs	r3, #1
 8003374:	e275      	b.n	8003862 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	685b      	ldr	r3, [r3, #4]
 800337a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800337e:	d106      	bne.n	800338e <HAL_RCC_OscConfig+0x7a>
 8003380:	4b84      	ldr	r3, [pc, #528]	@ (8003594 <HAL_RCC_OscConfig+0x280>)
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	4a83      	ldr	r2, [pc, #524]	@ (8003594 <HAL_RCC_OscConfig+0x280>)
 8003386:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800338a:	6013      	str	r3, [r2, #0]
 800338c:	e02e      	b.n	80033ec <HAL_RCC_OscConfig+0xd8>
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	685b      	ldr	r3, [r3, #4]
 8003392:	2b00      	cmp	r3, #0
 8003394:	d10c      	bne.n	80033b0 <HAL_RCC_OscConfig+0x9c>
 8003396:	4b7f      	ldr	r3, [pc, #508]	@ (8003594 <HAL_RCC_OscConfig+0x280>)
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	4a7e      	ldr	r2, [pc, #504]	@ (8003594 <HAL_RCC_OscConfig+0x280>)
 800339c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80033a0:	6013      	str	r3, [r2, #0]
 80033a2:	4b7c      	ldr	r3, [pc, #496]	@ (8003594 <HAL_RCC_OscConfig+0x280>)
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	4a7b      	ldr	r2, [pc, #492]	@ (8003594 <HAL_RCC_OscConfig+0x280>)
 80033a8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80033ac:	6013      	str	r3, [r2, #0]
 80033ae:	e01d      	b.n	80033ec <HAL_RCC_OscConfig+0xd8>
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	685b      	ldr	r3, [r3, #4]
 80033b4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80033b8:	d10c      	bne.n	80033d4 <HAL_RCC_OscConfig+0xc0>
 80033ba:	4b76      	ldr	r3, [pc, #472]	@ (8003594 <HAL_RCC_OscConfig+0x280>)
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	4a75      	ldr	r2, [pc, #468]	@ (8003594 <HAL_RCC_OscConfig+0x280>)
 80033c0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80033c4:	6013      	str	r3, [r2, #0]
 80033c6:	4b73      	ldr	r3, [pc, #460]	@ (8003594 <HAL_RCC_OscConfig+0x280>)
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	4a72      	ldr	r2, [pc, #456]	@ (8003594 <HAL_RCC_OscConfig+0x280>)
 80033cc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80033d0:	6013      	str	r3, [r2, #0]
 80033d2:	e00b      	b.n	80033ec <HAL_RCC_OscConfig+0xd8>
 80033d4:	4b6f      	ldr	r3, [pc, #444]	@ (8003594 <HAL_RCC_OscConfig+0x280>)
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	4a6e      	ldr	r2, [pc, #440]	@ (8003594 <HAL_RCC_OscConfig+0x280>)
 80033da:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80033de:	6013      	str	r3, [r2, #0]
 80033e0:	4b6c      	ldr	r3, [pc, #432]	@ (8003594 <HAL_RCC_OscConfig+0x280>)
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	4a6b      	ldr	r2, [pc, #428]	@ (8003594 <HAL_RCC_OscConfig+0x280>)
 80033e6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80033ea:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	685b      	ldr	r3, [r3, #4]
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d013      	beq.n	800341c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033f4:	f7fe f8b4 	bl	8001560 <HAL_GetTick>
 80033f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033fa:	e008      	b.n	800340e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80033fc:	f7fe f8b0 	bl	8001560 <HAL_GetTick>
 8003400:	4602      	mov	r2, r0
 8003402:	693b      	ldr	r3, [r7, #16]
 8003404:	1ad3      	subs	r3, r2, r3
 8003406:	2b64      	cmp	r3, #100	@ 0x64
 8003408:	d901      	bls.n	800340e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800340a:	2303      	movs	r3, #3
 800340c:	e229      	b.n	8003862 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800340e:	4b61      	ldr	r3, [pc, #388]	@ (8003594 <HAL_RCC_OscConfig+0x280>)
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003416:	2b00      	cmp	r3, #0
 8003418:	d0f0      	beq.n	80033fc <HAL_RCC_OscConfig+0xe8>
 800341a:	e014      	b.n	8003446 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800341c:	f7fe f8a0 	bl	8001560 <HAL_GetTick>
 8003420:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003422:	e008      	b.n	8003436 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003424:	f7fe f89c 	bl	8001560 <HAL_GetTick>
 8003428:	4602      	mov	r2, r0
 800342a:	693b      	ldr	r3, [r7, #16]
 800342c:	1ad3      	subs	r3, r2, r3
 800342e:	2b64      	cmp	r3, #100	@ 0x64
 8003430:	d901      	bls.n	8003436 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8003432:	2303      	movs	r3, #3
 8003434:	e215      	b.n	8003862 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003436:	4b57      	ldr	r3, [pc, #348]	@ (8003594 <HAL_RCC_OscConfig+0x280>)
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800343e:	2b00      	cmp	r3, #0
 8003440:	d1f0      	bne.n	8003424 <HAL_RCC_OscConfig+0x110>
 8003442:	e000      	b.n	8003446 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003444:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	f003 0302 	and.w	r3, r3, #2
 800344e:	2b00      	cmp	r3, #0
 8003450:	d069      	beq.n	8003526 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003452:	4b50      	ldr	r3, [pc, #320]	@ (8003594 <HAL_RCC_OscConfig+0x280>)
 8003454:	689b      	ldr	r3, [r3, #8]
 8003456:	f003 030c 	and.w	r3, r3, #12
 800345a:	2b00      	cmp	r3, #0
 800345c:	d00b      	beq.n	8003476 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800345e:	4b4d      	ldr	r3, [pc, #308]	@ (8003594 <HAL_RCC_OscConfig+0x280>)
 8003460:	689b      	ldr	r3, [r3, #8]
 8003462:	f003 030c 	and.w	r3, r3, #12
 8003466:	2b08      	cmp	r3, #8
 8003468:	d11c      	bne.n	80034a4 <HAL_RCC_OscConfig+0x190>
 800346a:	4b4a      	ldr	r3, [pc, #296]	@ (8003594 <HAL_RCC_OscConfig+0x280>)
 800346c:	685b      	ldr	r3, [r3, #4]
 800346e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003472:	2b00      	cmp	r3, #0
 8003474:	d116      	bne.n	80034a4 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003476:	4b47      	ldr	r3, [pc, #284]	@ (8003594 <HAL_RCC_OscConfig+0x280>)
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	f003 0302 	and.w	r3, r3, #2
 800347e:	2b00      	cmp	r3, #0
 8003480:	d005      	beq.n	800348e <HAL_RCC_OscConfig+0x17a>
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	68db      	ldr	r3, [r3, #12]
 8003486:	2b01      	cmp	r3, #1
 8003488:	d001      	beq.n	800348e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800348a:	2301      	movs	r3, #1
 800348c:	e1e9      	b.n	8003862 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800348e:	4b41      	ldr	r3, [pc, #260]	@ (8003594 <HAL_RCC_OscConfig+0x280>)
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	691b      	ldr	r3, [r3, #16]
 800349a:	00db      	lsls	r3, r3, #3
 800349c:	493d      	ldr	r1, [pc, #244]	@ (8003594 <HAL_RCC_OscConfig+0x280>)
 800349e:	4313      	orrs	r3, r2
 80034a0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80034a2:	e040      	b.n	8003526 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	68db      	ldr	r3, [r3, #12]
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d023      	beq.n	80034f4 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80034ac:	4b39      	ldr	r3, [pc, #228]	@ (8003594 <HAL_RCC_OscConfig+0x280>)
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	4a38      	ldr	r2, [pc, #224]	@ (8003594 <HAL_RCC_OscConfig+0x280>)
 80034b2:	f043 0301 	orr.w	r3, r3, #1
 80034b6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034b8:	f7fe f852 	bl	8001560 <HAL_GetTick>
 80034bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80034be:	e008      	b.n	80034d2 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80034c0:	f7fe f84e 	bl	8001560 <HAL_GetTick>
 80034c4:	4602      	mov	r2, r0
 80034c6:	693b      	ldr	r3, [r7, #16]
 80034c8:	1ad3      	subs	r3, r2, r3
 80034ca:	2b02      	cmp	r3, #2
 80034cc:	d901      	bls.n	80034d2 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80034ce:	2303      	movs	r3, #3
 80034d0:	e1c7      	b.n	8003862 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80034d2:	4b30      	ldr	r3, [pc, #192]	@ (8003594 <HAL_RCC_OscConfig+0x280>)
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	f003 0302 	and.w	r3, r3, #2
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d0f0      	beq.n	80034c0 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80034de:	4b2d      	ldr	r3, [pc, #180]	@ (8003594 <HAL_RCC_OscConfig+0x280>)
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	691b      	ldr	r3, [r3, #16]
 80034ea:	00db      	lsls	r3, r3, #3
 80034ec:	4929      	ldr	r1, [pc, #164]	@ (8003594 <HAL_RCC_OscConfig+0x280>)
 80034ee:	4313      	orrs	r3, r2
 80034f0:	600b      	str	r3, [r1, #0]
 80034f2:	e018      	b.n	8003526 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80034f4:	4b27      	ldr	r3, [pc, #156]	@ (8003594 <HAL_RCC_OscConfig+0x280>)
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	4a26      	ldr	r2, [pc, #152]	@ (8003594 <HAL_RCC_OscConfig+0x280>)
 80034fa:	f023 0301 	bic.w	r3, r3, #1
 80034fe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003500:	f7fe f82e 	bl	8001560 <HAL_GetTick>
 8003504:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003506:	e008      	b.n	800351a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003508:	f7fe f82a 	bl	8001560 <HAL_GetTick>
 800350c:	4602      	mov	r2, r0
 800350e:	693b      	ldr	r3, [r7, #16]
 8003510:	1ad3      	subs	r3, r2, r3
 8003512:	2b02      	cmp	r3, #2
 8003514:	d901      	bls.n	800351a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003516:	2303      	movs	r3, #3
 8003518:	e1a3      	b.n	8003862 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800351a:	4b1e      	ldr	r3, [pc, #120]	@ (8003594 <HAL_RCC_OscConfig+0x280>)
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	f003 0302 	and.w	r3, r3, #2
 8003522:	2b00      	cmp	r3, #0
 8003524:	d1f0      	bne.n	8003508 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	f003 0308 	and.w	r3, r3, #8
 800352e:	2b00      	cmp	r3, #0
 8003530:	d038      	beq.n	80035a4 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	695b      	ldr	r3, [r3, #20]
 8003536:	2b00      	cmp	r3, #0
 8003538:	d019      	beq.n	800356e <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800353a:	4b16      	ldr	r3, [pc, #88]	@ (8003594 <HAL_RCC_OscConfig+0x280>)
 800353c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800353e:	4a15      	ldr	r2, [pc, #84]	@ (8003594 <HAL_RCC_OscConfig+0x280>)
 8003540:	f043 0301 	orr.w	r3, r3, #1
 8003544:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003546:	f7fe f80b 	bl	8001560 <HAL_GetTick>
 800354a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800354c:	e008      	b.n	8003560 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800354e:	f7fe f807 	bl	8001560 <HAL_GetTick>
 8003552:	4602      	mov	r2, r0
 8003554:	693b      	ldr	r3, [r7, #16]
 8003556:	1ad3      	subs	r3, r2, r3
 8003558:	2b02      	cmp	r3, #2
 800355a:	d901      	bls.n	8003560 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800355c:	2303      	movs	r3, #3
 800355e:	e180      	b.n	8003862 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003560:	4b0c      	ldr	r3, [pc, #48]	@ (8003594 <HAL_RCC_OscConfig+0x280>)
 8003562:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003564:	f003 0302 	and.w	r3, r3, #2
 8003568:	2b00      	cmp	r3, #0
 800356a:	d0f0      	beq.n	800354e <HAL_RCC_OscConfig+0x23a>
 800356c:	e01a      	b.n	80035a4 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800356e:	4b09      	ldr	r3, [pc, #36]	@ (8003594 <HAL_RCC_OscConfig+0x280>)
 8003570:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003572:	4a08      	ldr	r2, [pc, #32]	@ (8003594 <HAL_RCC_OscConfig+0x280>)
 8003574:	f023 0301 	bic.w	r3, r3, #1
 8003578:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800357a:	f7fd fff1 	bl	8001560 <HAL_GetTick>
 800357e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003580:	e00a      	b.n	8003598 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003582:	f7fd ffed 	bl	8001560 <HAL_GetTick>
 8003586:	4602      	mov	r2, r0
 8003588:	693b      	ldr	r3, [r7, #16]
 800358a:	1ad3      	subs	r3, r2, r3
 800358c:	2b02      	cmp	r3, #2
 800358e:	d903      	bls.n	8003598 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003590:	2303      	movs	r3, #3
 8003592:	e166      	b.n	8003862 <HAL_RCC_OscConfig+0x54e>
 8003594:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003598:	4b92      	ldr	r3, [pc, #584]	@ (80037e4 <HAL_RCC_OscConfig+0x4d0>)
 800359a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800359c:	f003 0302 	and.w	r3, r3, #2
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d1ee      	bne.n	8003582 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	f003 0304 	and.w	r3, r3, #4
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	f000 80a4 	beq.w	80036fa <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80035b2:	4b8c      	ldr	r3, [pc, #560]	@ (80037e4 <HAL_RCC_OscConfig+0x4d0>)
 80035b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035b6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d10d      	bne.n	80035da <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80035be:	4b89      	ldr	r3, [pc, #548]	@ (80037e4 <HAL_RCC_OscConfig+0x4d0>)
 80035c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035c2:	4a88      	ldr	r2, [pc, #544]	@ (80037e4 <HAL_RCC_OscConfig+0x4d0>)
 80035c4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80035c8:	6413      	str	r3, [r2, #64]	@ 0x40
 80035ca:	4b86      	ldr	r3, [pc, #536]	@ (80037e4 <HAL_RCC_OscConfig+0x4d0>)
 80035cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035ce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80035d2:	60bb      	str	r3, [r7, #8]
 80035d4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80035d6:	2301      	movs	r3, #1
 80035d8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80035da:	4b83      	ldr	r3, [pc, #524]	@ (80037e8 <HAL_RCC_OscConfig+0x4d4>)
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d118      	bne.n	8003618 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80035e6:	4b80      	ldr	r3, [pc, #512]	@ (80037e8 <HAL_RCC_OscConfig+0x4d4>)
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	4a7f      	ldr	r2, [pc, #508]	@ (80037e8 <HAL_RCC_OscConfig+0x4d4>)
 80035ec:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80035f0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80035f2:	f7fd ffb5 	bl	8001560 <HAL_GetTick>
 80035f6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80035f8:	e008      	b.n	800360c <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80035fa:	f7fd ffb1 	bl	8001560 <HAL_GetTick>
 80035fe:	4602      	mov	r2, r0
 8003600:	693b      	ldr	r3, [r7, #16]
 8003602:	1ad3      	subs	r3, r2, r3
 8003604:	2b64      	cmp	r3, #100	@ 0x64
 8003606:	d901      	bls.n	800360c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8003608:	2303      	movs	r3, #3
 800360a:	e12a      	b.n	8003862 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800360c:	4b76      	ldr	r3, [pc, #472]	@ (80037e8 <HAL_RCC_OscConfig+0x4d4>)
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003614:	2b00      	cmp	r3, #0
 8003616:	d0f0      	beq.n	80035fa <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	689b      	ldr	r3, [r3, #8]
 800361c:	2b01      	cmp	r3, #1
 800361e:	d106      	bne.n	800362e <HAL_RCC_OscConfig+0x31a>
 8003620:	4b70      	ldr	r3, [pc, #448]	@ (80037e4 <HAL_RCC_OscConfig+0x4d0>)
 8003622:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003624:	4a6f      	ldr	r2, [pc, #444]	@ (80037e4 <HAL_RCC_OscConfig+0x4d0>)
 8003626:	f043 0301 	orr.w	r3, r3, #1
 800362a:	6713      	str	r3, [r2, #112]	@ 0x70
 800362c:	e02d      	b.n	800368a <HAL_RCC_OscConfig+0x376>
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	689b      	ldr	r3, [r3, #8]
 8003632:	2b00      	cmp	r3, #0
 8003634:	d10c      	bne.n	8003650 <HAL_RCC_OscConfig+0x33c>
 8003636:	4b6b      	ldr	r3, [pc, #428]	@ (80037e4 <HAL_RCC_OscConfig+0x4d0>)
 8003638:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800363a:	4a6a      	ldr	r2, [pc, #424]	@ (80037e4 <HAL_RCC_OscConfig+0x4d0>)
 800363c:	f023 0301 	bic.w	r3, r3, #1
 8003640:	6713      	str	r3, [r2, #112]	@ 0x70
 8003642:	4b68      	ldr	r3, [pc, #416]	@ (80037e4 <HAL_RCC_OscConfig+0x4d0>)
 8003644:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003646:	4a67      	ldr	r2, [pc, #412]	@ (80037e4 <HAL_RCC_OscConfig+0x4d0>)
 8003648:	f023 0304 	bic.w	r3, r3, #4
 800364c:	6713      	str	r3, [r2, #112]	@ 0x70
 800364e:	e01c      	b.n	800368a <HAL_RCC_OscConfig+0x376>
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	689b      	ldr	r3, [r3, #8]
 8003654:	2b05      	cmp	r3, #5
 8003656:	d10c      	bne.n	8003672 <HAL_RCC_OscConfig+0x35e>
 8003658:	4b62      	ldr	r3, [pc, #392]	@ (80037e4 <HAL_RCC_OscConfig+0x4d0>)
 800365a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800365c:	4a61      	ldr	r2, [pc, #388]	@ (80037e4 <HAL_RCC_OscConfig+0x4d0>)
 800365e:	f043 0304 	orr.w	r3, r3, #4
 8003662:	6713      	str	r3, [r2, #112]	@ 0x70
 8003664:	4b5f      	ldr	r3, [pc, #380]	@ (80037e4 <HAL_RCC_OscConfig+0x4d0>)
 8003666:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003668:	4a5e      	ldr	r2, [pc, #376]	@ (80037e4 <HAL_RCC_OscConfig+0x4d0>)
 800366a:	f043 0301 	orr.w	r3, r3, #1
 800366e:	6713      	str	r3, [r2, #112]	@ 0x70
 8003670:	e00b      	b.n	800368a <HAL_RCC_OscConfig+0x376>
 8003672:	4b5c      	ldr	r3, [pc, #368]	@ (80037e4 <HAL_RCC_OscConfig+0x4d0>)
 8003674:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003676:	4a5b      	ldr	r2, [pc, #364]	@ (80037e4 <HAL_RCC_OscConfig+0x4d0>)
 8003678:	f023 0301 	bic.w	r3, r3, #1
 800367c:	6713      	str	r3, [r2, #112]	@ 0x70
 800367e:	4b59      	ldr	r3, [pc, #356]	@ (80037e4 <HAL_RCC_OscConfig+0x4d0>)
 8003680:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003682:	4a58      	ldr	r2, [pc, #352]	@ (80037e4 <HAL_RCC_OscConfig+0x4d0>)
 8003684:	f023 0304 	bic.w	r3, r3, #4
 8003688:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	689b      	ldr	r3, [r3, #8]
 800368e:	2b00      	cmp	r3, #0
 8003690:	d015      	beq.n	80036be <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003692:	f7fd ff65 	bl	8001560 <HAL_GetTick>
 8003696:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003698:	e00a      	b.n	80036b0 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800369a:	f7fd ff61 	bl	8001560 <HAL_GetTick>
 800369e:	4602      	mov	r2, r0
 80036a0:	693b      	ldr	r3, [r7, #16]
 80036a2:	1ad3      	subs	r3, r2, r3
 80036a4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80036a8:	4293      	cmp	r3, r2
 80036aa:	d901      	bls.n	80036b0 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80036ac:	2303      	movs	r3, #3
 80036ae:	e0d8      	b.n	8003862 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80036b0:	4b4c      	ldr	r3, [pc, #304]	@ (80037e4 <HAL_RCC_OscConfig+0x4d0>)
 80036b2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80036b4:	f003 0302 	and.w	r3, r3, #2
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d0ee      	beq.n	800369a <HAL_RCC_OscConfig+0x386>
 80036bc:	e014      	b.n	80036e8 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036be:	f7fd ff4f 	bl	8001560 <HAL_GetTick>
 80036c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80036c4:	e00a      	b.n	80036dc <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80036c6:	f7fd ff4b 	bl	8001560 <HAL_GetTick>
 80036ca:	4602      	mov	r2, r0
 80036cc:	693b      	ldr	r3, [r7, #16]
 80036ce:	1ad3      	subs	r3, r2, r3
 80036d0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80036d4:	4293      	cmp	r3, r2
 80036d6:	d901      	bls.n	80036dc <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80036d8:	2303      	movs	r3, #3
 80036da:	e0c2      	b.n	8003862 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80036dc:	4b41      	ldr	r3, [pc, #260]	@ (80037e4 <HAL_RCC_OscConfig+0x4d0>)
 80036de:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80036e0:	f003 0302 	and.w	r3, r3, #2
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d1ee      	bne.n	80036c6 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80036e8:	7dfb      	ldrb	r3, [r7, #23]
 80036ea:	2b01      	cmp	r3, #1
 80036ec:	d105      	bne.n	80036fa <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80036ee:	4b3d      	ldr	r3, [pc, #244]	@ (80037e4 <HAL_RCC_OscConfig+0x4d0>)
 80036f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036f2:	4a3c      	ldr	r2, [pc, #240]	@ (80037e4 <HAL_RCC_OscConfig+0x4d0>)
 80036f4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80036f8:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	699b      	ldr	r3, [r3, #24]
 80036fe:	2b00      	cmp	r3, #0
 8003700:	f000 80ae 	beq.w	8003860 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003704:	4b37      	ldr	r3, [pc, #220]	@ (80037e4 <HAL_RCC_OscConfig+0x4d0>)
 8003706:	689b      	ldr	r3, [r3, #8]
 8003708:	f003 030c 	and.w	r3, r3, #12
 800370c:	2b08      	cmp	r3, #8
 800370e:	d06d      	beq.n	80037ec <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	699b      	ldr	r3, [r3, #24]
 8003714:	2b02      	cmp	r3, #2
 8003716:	d14b      	bne.n	80037b0 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003718:	4b32      	ldr	r3, [pc, #200]	@ (80037e4 <HAL_RCC_OscConfig+0x4d0>)
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	4a31      	ldr	r2, [pc, #196]	@ (80037e4 <HAL_RCC_OscConfig+0x4d0>)
 800371e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003722:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003724:	f7fd ff1c 	bl	8001560 <HAL_GetTick>
 8003728:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800372a:	e008      	b.n	800373e <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800372c:	f7fd ff18 	bl	8001560 <HAL_GetTick>
 8003730:	4602      	mov	r2, r0
 8003732:	693b      	ldr	r3, [r7, #16]
 8003734:	1ad3      	subs	r3, r2, r3
 8003736:	2b02      	cmp	r3, #2
 8003738:	d901      	bls.n	800373e <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800373a:	2303      	movs	r3, #3
 800373c:	e091      	b.n	8003862 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800373e:	4b29      	ldr	r3, [pc, #164]	@ (80037e4 <HAL_RCC_OscConfig+0x4d0>)
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003746:	2b00      	cmp	r3, #0
 8003748:	d1f0      	bne.n	800372c <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	69da      	ldr	r2, [r3, #28]
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	6a1b      	ldr	r3, [r3, #32]
 8003752:	431a      	orrs	r2, r3
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003758:	019b      	lsls	r3, r3, #6
 800375a:	431a      	orrs	r2, r3
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003760:	085b      	lsrs	r3, r3, #1
 8003762:	3b01      	subs	r3, #1
 8003764:	041b      	lsls	r3, r3, #16
 8003766:	431a      	orrs	r2, r3
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800376c:	061b      	lsls	r3, r3, #24
 800376e:	431a      	orrs	r2, r3
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003774:	071b      	lsls	r3, r3, #28
 8003776:	491b      	ldr	r1, [pc, #108]	@ (80037e4 <HAL_RCC_OscConfig+0x4d0>)
 8003778:	4313      	orrs	r3, r2
 800377a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800377c:	4b19      	ldr	r3, [pc, #100]	@ (80037e4 <HAL_RCC_OscConfig+0x4d0>)
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	4a18      	ldr	r2, [pc, #96]	@ (80037e4 <HAL_RCC_OscConfig+0x4d0>)
 8003782:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003786:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003788:	f7fd feea 	bl	8001560 <HAL_GetTick>
 800378c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800378e:	e008      	b.n	80037a2 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003790:	f7fd fee6 	bl	8001560 <HAL_GetTick>
 8003794:	4602      	mov	r2, r0
 8003796:	693b      	ldr	r3, [r7, #16]
 8003798:	1ad3      	subs	r3, r2, r3
 800379a:	2b02      	cmp	r3, #2
 800379c:	d901      	bls.n	80037a2 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 800379e:	2303      	movs	r3, #3
 80037a0:	e05f      	b.n	8003862 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80037a2:	4b10      	ldr	r3, [pc, #64]	@ (80037e4 <HAL_RCC_OscConfig+0x4d0>)
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d0f0      	beq.n	8003790 <HAL_RCC_OscConfig+0x47c>
 80037ae:	e057      	b.n	8003860 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80037b0:	4b0c      	ldr	r3, [pc, #48]	@ (80037e4 <HAL_RCC_OscConfig+0x4d0>)
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	4a0b      	ldr	r2, [pc, #44]	@ (80037e4 <HAL_RCC_OscConfig+0x4d0>)
 80037b6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80037ba:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037bc:	f7fd fed0 	bl	8001560 <HAL_GetTick>
 80037c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80037c2:	e008      	b.n	80037d6 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80037c4:	f7fd fecc 	bl	8001560 <HAL_GetTick>
 80037c8:	4602      	mov	r2, r0
 80037ca:	693b      	ldr	r3, [r7, #16]
 80037cc:	1ad3      	subs	r3, r2, r3
 80037ce:	2b02      	cmp	r3, #2
 80037d0:	d901      	bls.n	80037d6 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 80037d2:	2303      	movs	r3, #3
 80037d4:	e045      	b.n	8003862 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80037d6:	4b03      	ldr	r3, [pc, #12]	@ (80037e4 <HAL_RCC_OscConfig+0x4d0>)
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d1f0      	bne.n	80037c4 <HAL_RCC_OscConfig+0x4b0>
 80037e2:	e03d      	b.n	8003860 <HAL_RCC_OscConfig+0x54c>
 80037e4:	40023800 	.word	0x40023800
 80037e8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80037ec:	4b1f      	ldr	r3, [pc, #124]	@ (800386c <HAL_RCC_OscConfig+0x558>)
 80037ee:	685b      	ldr	r3, [r3, #4]
 80037f0:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	699b      	ldr	r3, [r3, #24]
 80037f6:	2b01      	cmp	r3, #1
 80037f8:	d030      	beq.n	800385c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003804:	429a      	cmp	r2, r3
 8003806:	d129      	bne.n	800385c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003812:	429a      	cmp	r2, r3
 8003814:	d122      	bne.n	800385c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003816:	68fa      	ldr	r2, [r7, #12]
 8003818:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800381c:	4013      	ands	r3, r2
 800381e:	687a      	ldr	r2, [r7, #4]
 8003820:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003822:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003824:	4293      	cmp	r3, r2
 8003826:	d119      	bne.n	800385c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003832:	085b      	lsrs	r3, r3, #1
 8003834:	3b01      	subs	r3, #1
 8003836:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003838:	429a      	cmp	r2, r3
 800383a:	d10f      	bne.n	800385c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003846:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003848:	429a      	cmp	r2, r3
 800384a:	d107      	bne.n	800385c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003856:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003858:	429a      	cmp	r2, r3
 800385a:	d001      	beq.n	8003860 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 800385c:	2301      	movs	r3, #1
 800385e:	e000      	b.n	8003862 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8003860:	2300      	movs	r3, #0
}
 8003862:	4618      	mov	r0, r3
 8003864:	3718      	adds	r7, #24
 8003866:	46bd      	mov	sp, r7
 8003868:	bd80      	pop	{r7, pc}
 800386a:	bf00      	nop
 800386c:	40023800 	.word	0x40023800

08003870 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003870:	b580      	push	{r7, lr}
 8003872:	b084      	sub	sp, #16
 8003874:	af00      	add	r7, sp, #0
 8003876:	6078      	str	r0, [r7, #4]
 8003878:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800387a:	2300      	movs	r3, #0
 800387c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	2b00      	cmp	r3, #0
 8003882:	d101      	bne.n	8003888 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003884:	2301      	movs	r3, #1
 8003886:	e0d0      	b.n	8003a2a <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003888:	4b6a      	ldr	r3, [pc, #424]	@ (8003a34 <HAL_RCC_ClockConfig+0x1c4>)
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	f003 030f 	and.w	r3, r3, #15
 8003890:	683a      	ldr	r2, [r7, #0]
 8003892:	429a      	cmp	r2, r3
 8003894:	d910      	bls.n	80038b8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003896:	4b67      	ldr	r3, [pc, #412]	@ (8003a34 <HAL_RCC_ClockConfig+0x1c4>)
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	f023 020f 	bic.w	r2, r3, #15
 800389e:	4965      	ldr	r1, [pc, #404]	@ (8003a34 <HAL_RCC_ClockConfig+0x1c4>)
 80038a0:	683b      	ldr	r3, [r7, #0]
 80038a2:	4313      	orrs	r3, r2
 80038a4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80038a6:	4b63      	ldr	r3, [pc, #396]	@ (8003a34 <HAL_RCC_ClockConfig+0x1c4>)
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	f003 030f 	and.w	r3, r3, #15
 80038ae:	683a      	ldr	r2, [r7, #0]
 80038b0:	429a      	cmp	r2, r3
 80038b2:	d001      	beq.n	80038b8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80038b4:	2301      	movs	r3, #1
 80038b6:	e0b8      	b.n	8003a2a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	f003 0302 	and.w	r3, r3, #2
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d020      	beq.n	8003906 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	f003 0304 	and.w	r3, r3, #4
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d005      	beq.n	80038dc <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80038d0:	4b59      	ldr	r3, [pc, #356]	@ (8003a38 <HAL_RCC_ClockConfig+0x1c8>)
 80038d2:	689b      	ldr	r3, [r3, #8]
 80038d4:	4a58      	ldr	r2, [pc, #352]	@ (8003a38 <HAL_RCC_ClockConfig+0x1c8>)
 80038d6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80038da:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	f003 0308 	and.w	r3, r3, #8
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d005      	beq.n	80038f4 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80038e8:	4b53      	ldr	r3, [pc, #332]	@ (8003a38 <HAL_RCC_ClockConfig+0x1c8>)
 80038ea:	689b      	ldr	r3, [r3, #8]
 80038ec:	4a52      	ldr	r2, [pc, #328]	@ (8003a38 <HAL_RCC_ClockConfig+0x1c8>)
 80038ee:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80038f2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80038f4:	4b50      	ldr	r3, [pc, #320]	@ (8003a38 <HAL_RCC_ClockConfig+0x1c8>)
 80038f6:	689b      	ldr	r3, [r3, #8]
 80038f8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	689b      	ldr	r3, [r3, #8]
 8003900:	494d      	ldr	r1, [pc, #308]	@ (8003a38 <HAL_RCC_ClockConfig+0x1c8>)
 8003902:	4313      	orrs	r3, r2
 8003904:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	f003 0301 	and.w	r3, r3, #1
 800390e:	2b00      	cmp	r3, #0
 8003910:	d040      	beq.n	8003994 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	685b      	ldr	r3, [r3, #4]
 8003916:	2b01      	cmp	r3, #1
 8003918:	d107      	bne.n	800392a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800391a:	4b47      	ldr	r3, [pc, #284]	@ (8003a38 <HAL_RCC_ClockConfig+0x1c8>)
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003922:	2b00      	cmp	r3, #0
 8003924:	d115      	bne.n	8003952 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003926:	2301      	movs	r3, #1
 8003928:	e07f      	b.n	8003a2a <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	685b      	ldr	r3, [r3, #4]
 800392e:	2b02      	cmp	r3, #2
 8003930:	d107      	bne.n	8003942 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003932:	4b41      	ldr	r3, [pc, #260]	@ (8003a38 <HAL_RCC_ClockConfig+0x1c8>)
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800393a:	2b00      	cmp	r3, #0
 800393c:	d109      	bne.n	8003952 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800393e:	2301      	movs	r3, #1
 8003940:	e073      	b.n	8003a2a <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003942:	4b3d      	ldr	r3, [pc, #244]	@ (8003a38 <HAL_RCC_ClockConfig+0x1c8>)
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	f003 0302 	and.w	r3, r3, #2
 800394a:	2b00      	cmp	r3, #0
 800394c:	d101      	bne.n	8003952 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800394e:	2301      	movs	r3, #1
 8003950:	e06b      	b.n	8003a2a <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003952:	4b39      	ldr	r3, [pc, #228]	@ (8003a38 <HAL_RCC_ClockConfig+0x1c8>)
 8003954:	689b      	ldr	r3, [r3, #8]
 8003956:	f023 0203 	bic.w	r2, r3, #3
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	685b      	ldr	r3, [r3, #4]
 800395e:	4936      	ldr	r1, [pc, #216]	@ (8003a38 <HAL_RCC_ClockConfig+0x1c8>)
 8003960:	4313      	orrs	r3, r2
 8003962:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003964:	f7fd fdfc 	bl	8001560 <HAL_GetTick>
 8003968:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800396a:	e00a      	b.n	8003982 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800396c:	f7fd fdf8 	bl	8001560 <HAL_GetTick>
 8003970:	4602      	mov	r2, r0
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	1ad3      	subs	r3, r2, r3
 8003976:	f241 3288 	movw	r2, #5000	@ 0x1388
 800397a:	4293      	cmp	r3, r2
 800397c:	d901      	bls.n	8003982 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800397e:	2303      	movs	r3, #3
 8003980:	e053      	b.n	8003a2a <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003982:	4b2d      	ldr	r3, [pc, #180]	@ (8003a38 <HAL_RCC_ClockConfig+0x1c8>)
 8003984:	689b      	ldr	r3, [r3, #8]
 8003986:	f003 020c 	and.w	r2, r3, #12
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	685b      	ldr	r3, [r3, #4]
 800398e:	009b      	lsls	r3, r3, #2
 8003990:	429a      	cmp	r2, r3
 8003992:	d1eb      	bne.n	800396c <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003994:	4b27      	ldr	r3, [pc, #156]	@ (8003a34 <HAL_RCC_ClockConfig+0x1c4>)
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	f003 030f 	and.w	r3, r3, #15
 800399c:	683a      	ldr	r2, [r7, #0]
 800399e:	429a      	cmp	r2, r3
 80039a0:	d210      	bcs.n	80039c4 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80039a2:	4b24      	ldr	r3, [pc, #144]	@ (8003a34 <HAL_RCC_ClockConfig+0x1c4>)
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	f023 020f 	bic.w	r2, r3, #15
 80039aa:	4922      	ldr	r1, [pc, #136]	@ (8003a34 <HAL_RCC_ClockConfig+0x1c4>)
 80039ac:	683b      	ldr	r3, [r7, #0]
 80039ae:	4313      	orrs	r3, r2
 80039b0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80039b2:	4b20      	ldr	r3, [pc, #128]	@ (8003a34 <HAL_RCC_ClockConfig+0x1c4>)
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	f003 030f 	and.w	r3, r3, #15
 80039ba:	683a      	ldr	r2, [r7, #0]
 80039bc:	429a      	cmp	r2, r3
 80039be:	d001      	beq.n	80039c4 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80039c0:	2301      	movs	r3, #1
 80039c2:	e032      	b.n	8003a2a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	f003 0304 	and.w	r3, r3, #4
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d008      	beq.n	80039e2 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80039d0:	4b19      	ldr	r3, [pc, #100]	@ (8003a38 <HAL_RCC_ClockConfig+0x1c8>)
 80039d2:	689b      	ldr	r3, [r3, #8]
 80039d4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	68db      	ldr	r3, [r3, #12]
 80039dc:	4916      	ldr	r1, [pc, #88]	@ (8003a38 <HAL_RCC_ClockConfig+0x1c8>)
 80039de:	4313      	orrs	r3, r2
 80039e0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	f003 0308 	and.w	r3, r3, #8
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d009      	beq.n	8003a02 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80039ee:	4b12      	ldr	r3, [pc, #72]	@ (8003a38 <HAL_RCC_ClockConfig+0x1c8>)
 80039f0:	689b      	ldr	r3, [r3, #8]
 80039f2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	691b      	ldr	r3, [r3, #16]
 80039fa:	00db      	lsls	r3, r3, #3
 80039fc:	490e      	ldr	r1, [pc, #56]	@ (8003a38 <HAL_RCC_ClockConfig+0x1c8>)
 80039fe:	4313      	orrs	r3, r2
 8003a00:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003a02:	f000 f821 	bl	8003a48 <HAL_RCC_GetSysClockFreq>
 8003a06:	4602      	mov	r2, r0
 8003a08:	4b0b      	ldr	r3, [pc, #44]	@ (8003a38 <HAL_RCC_ClockConfig+0x1c8>)
 8003a0a:	689b      	ldr	r3, [r3, #8]
 8003a0c:	091b      	lsrs	r3, r3, #4
 8003a0e:	f003 030f 	and.w	r3, r3, #15
 8003a12:	490a      	ldr	r1, [pc, #40]	@ (8003a3c <HAL_RCC_ClockConfig+0x1cc>)
 8003a14:	5ccb      	ldrb	r3, [r1, r3]
 8003a16:	fa22 f303 	lsr.w	r3, r2, r3
 8003a1a:	4a09      	ldr	r2, [pc, #36]	@ (8003a40 <HAL_RCC_ClockConfig+0x1d0>)
 8003a1c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003a1e:	4b09      	ldr	r3, [pc, #36]	@ (8003a44 <HAL_RCC_ClockConfig+0x1d4>)
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	4618      	mov	r0, r3
 8003a24:	f7fd fbea 	bl	80011fc <HAL_InitTick>

  return HAL_OK;
 8003a28:	2300      	movs	r3, #0
}
 8003a2a:	4618      	mov	r0, r3
 8003a2c:	3710      	adds	r7, #16
 8003a2e:	46bd      	mov	sp, r7
 8003a30:	bd80      	pop	{r7, pc}
 8003a32:	bf00      	nop
 8003a34:	40023c00 	.word	0x40023c00
 8003a38:	40023800 	.word	0x40023800
 8003a3c:	0800a754 	.word	0x0800a754
 8003a40:	20000000 	.word	0x20000000
 8003a44:	20000004 	.word	0x20000004

08003a48 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003a48:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003a4c:	b094      	sub	sp, #80	@ 0x50
 8003a4e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8003a50:	2300      	movs	r3, #0
 8003a52:	647b      	str	r3, [r7, #68]	@ 0x44
 8003a54:	2300      	movs	r3, #0
 8003a56:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003a58:	2300      	movs	r3, #0
 8003a5a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0;
 8003a5c:	2300      	movs	r3, #0
 8003a5e:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003a60:	4b79      	ldr	r3, [pc, #484]	@ (8003c48 <HAL_RCC_GetSysClockFreq+0x200>)
 8003a62:	689b      	ldr	r3, [r3, #8]
 8003a64:	f003 030c 	and.w	r3, r3, #12
 8003a68:	2b08      	cmp	r3, #8
 8003a6a:	d00d      	beq.n	8003a88 <HAL_RCC_GetSysClockFreq+0x40>
 8003a6c:	2b08      	cmp	r3, #8
 8003a6e:	f200 80e1 	bhi.w	8003c34 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d002      	beq.n	8003a7c <HAL_RCC_GetSysClockFreq+0x34>
 8003a76:	2b04      	cmp	r3, #4
 8003a78:	d003      	beq.n	8003a82 <HAL_RCC_GetSysClockFreq+0x3a>
 8003a7a:	e0db      	b.n	8003c34 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003a7c:	4b73      	ldr	r3, [pc, #460]	@ (8003c4c <HAL_RCC_GetSysClockFreq+0x204>)
 8003a7e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003a80:	e0db      	b.n	8003c3a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003a82:	4b73      	ldr	r3, [pc, #460]	@ (8003c50 <HAL_RCC_GetSysClockFreq+0x208>)
 8003a84:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003a86:	e0d8      	b.n	8003c3a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003a88:	4b6f      	ldr	r3, [pc, #444]	@ (8003c48 <HAL_RCC_GetSysClockFreq+0x200>)
 8003a8a:	685b      	ldr	r3, [r3, #4]
 8003a8c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003a90:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8003a92:	4b6d      	ldr	r3, [pc, #436]	@ (8003c48 <HAL_RCC_GetSysClockFreq+0x200>)
 8003a94:	685b      	ldr	r3, [r3, #4]
 8003a96:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d063      	beq.n	8003b66 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003a9e:	4b6a      	ldr	r3, [pc, #424]	@ (8003c48 <HAL_RCC_GetSysClockFreq+0x200>)
 8003aa0:	685b      	ldr	r3, [r3, #4]
 8003aa2:	099b      	lsrs	r3, r3, #6
 8003aa4:	2200      	movs	r2, #0
 8003aa6:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003aa8:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8003aaa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003aac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003ab0:	633b      	str	r3, [r7, #48]	@ 0x30
 8003ab2:	2300      	movs	r3, #0
 8003ab4:	637b      	str	r3, [r7, #52]	@ 0x34
 8003ab6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8003aba:	4622      	mov	r2, r4
 8003abc:	462b      	mov	r3, r5
 8003abe:	f04f 0000 	mov.w	r0, #0
 8003ac2:	f04f 0100 	mov.w	r1, #0
 8003ac6:	0159      	lsls	r1, r3, #5
 8003ac8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003acc:	0150      	lsls	r0, r2, #5
 8003ace:	4602      	mov	r2, r0
 8003ad0:	460b      	mov	r3, r1
 8003ad2:	4621      	mov	r1, r4
 8003ad4:	1a51      	subs	r1, r2, r1
 8003ad6:	6139      	str	r1, [r7, #16]
 8003ad8:	4629      	mov	r1, r5
 8003ada:	eb63 0301 	sbc.w	r3, r3, r1
 8003ade:	617b      	str	r3, [r7, #20]
 8003ae0:	f04f 0200 	mov.w	r2, #0
 8003ae4:	f04f 0300 	mov.w	r3, #0
 8003ae8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003aec:	4659      	mov	r1, fp
 8003aee:	018b      	lsls	r3, r1, #6
 8003af0:	4651      	mov	r1, sl
 8003af2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003af6:	4651      	mov	r1, sl
 8003af8:	018a      	lsls	r2, r1, #6
 8003afa:	4651      	mov	r1, sl
 8003afc:	ebb2 0801 	subs.w	r8, r2, r1
 8003b00:	4659      	mov	r1, fp
 8003b02:	eb63 0901 	sbc.w	r9, r3, r1
 8003b06:	f04f 0200 	mov.w	r2, #0
 8003b0a:	f04f 0300 	mov.w	r3, #0
 8003b0e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003b12:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003b16:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003b1a:	4690      	mov	r8, r2
 8003b1c:	4699      	mov	r9, r3
 8003b1e:	4623      	mov	r3, r4
 8003b20:	eb18 0303 	adds.w	r3, r8, r3
 8003b24:	60bb      	str	r3, [r7, #8]
 8003b26:	462b      	mov	r3, r5
 8003b28:	eb49 0303 	adc.w	r3, r9, r3
 8003b2c:	60fb      	str	r3, [r7, #12]
 8003b2e:	f04f 0200 	mov.w	r2, #0
 8003b32:	f04f 0300 	mov.w	r3, #0
 8003b36:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003b3a:	4629      	mov	r1, r5
 8003b3c:	024b      	lsls	r3, r1, #9
 8003b3e:	4621      	mov	r1, r4
 8003b40:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003b44:	4621      	mov	r1, r4
 8003b46:	024a      	lsls	r2, r1, #9
 8003b48:	4610      	mov	r0, r2
 8003b4a:	4619      	mov	r1, r3
 8003b4c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003b4e:	2200      	movs	r2, #0
 8003b50:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003b52:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003b54:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003b58:	f7fc fbc2 	bl	80002e0 <__aeabi_uldivmod>
 8003b5c:	4602      	mov	r2, r0
 8003b5e:	460b      	mov	r3, r1
 8003b60:	4613      	mov	r3, r2
 8003b62:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003b64:	e058      	b.n	8003c18 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003b66:	4b38      	ldr	r3, [pc, #224]	@ (8003c48 <HAL_RCC_GetSysClockFreq+0x200>)
 8003b68:	685b      	ldr	r3, [r3, #4]
 8003b6a:	099b      	lsrs	r3, r3, #6
 8003b6c:	2200      	movs	r2, #0
 8003b6e:	4618      	mov	r0, r3
 8003b70:	4611      	mov	r1, r2
 8003b72:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003b76:	623b      	str	r3, [r7, #32]
 8003b78:	2300      	movs	r3, #0
 8003b7a:	627b      	str	r3, [r7, #36]	@ 0x24
 8003b7c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003b80:	4642      	mov	r2, r8
 8003b82:	464b      	mov	r3, r9
 8003b84:	f04f 0000 	mov.w	r0, #0
 8003b88:	f04f 0100 	mov.w	r1, #0
 8003b8c:	0159      	lsls	r1, r3, #5
 8003b8e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003b92:	0150      	lsls	r0, r2, #5
 8003b94:	4602      	mov	r2, r0
 8003b96:	460b      	mov	r3, r1
 8003b98:	4641      	mov	r1, r8
 8003b9a:	ebb2 0a01 	subs.w	sl, r2, r1
 8003b9e:	4649      	mov	r1, r9
 8003ba0:	eb63 0b01 	sbc.w	fp, r3, r1
 8003ba4:	f04f 0200 	mov.w	r2, #0
 8003ba8:	f04f 0300 	mov.w	r3, #0
 8003bac:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003bb0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003bb4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003bb8:	ebb2 040a 	subs.w	r4, r2, sl
 8003bbc:	eb63 050b 	sbc.w	r5, r3, fp
 8003bc0:	f04f 0200 	mov.w	r2, #0
 8003bc4:	f04f 0300 	mov.w	r3, #0
 8003bc8:	00eb      	lsls	r3, r5, #3
 8003bca:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003bce:	00e2      	lsls	r2, r4, #3
 8003bd0:	4614      	mov	r4, r2
 8003bd2:	461d      	mov	r5, r3
 8003bd4:	4643      	mov	r3, r8
 8003bd6:	18e3      	adds	r3, r4, r3
 8003bd8:	603b      	str	r3, [r7, #0]
 8003bda:	464b      	mov	r3, r9
 8003bdc:	eb45 0303 	adc.w	r3, r5, r3
 8003be0:	607b      	str	r3, [r7, #4]
 8003be2:	f04f 0200 	mov.w	r2, #0
 8003be6:	f04f 0300 	mov.w	r3, #0
 8003bea:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003bee:	4629      	mov	r1, r5
 8003bf0:	028b      	lsls	r3, r1, #10
 8003bf2:	4621      	mov	r1, r4
 8003bf4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003bf8:	4621      	mov	r1, r4
 8003bfa:	028a      	lsls	r2, r1, #10
 8003bfc:	4610      	mov	r0, r2
 8003bfe:	4619      	mov	r1, r3
 8003c00:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003c02:	2200      	movs	r2, #0
 8003c04:	61bb      	str	r3, [r7, #24]
 8003c06:	61fa      	str	r2, [r7, #28]
 8003c08:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003c0c:	f7fc fb68 	bl	80002e0 <__aeabi_uldivmod>
 8003c10:	4602      	mov	r2, r0
 8003c12:	460b      	mov	r3, r1
 8003c14:	4613      	mov	r3, r2
 8003c16:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8003c18:	4b0b      	ldr	r3, [pc, #44]	@ (8003c48 <HAL_RCC_GetSysClockFreq+0x200>)
 8003c1a:	685b      	ldr	r3, [r3, #4]
 8003c1c:	0c1b      	lsrs	r3, r3, #16
 8003c1e:	f003 0303 	and.w	r3, r3, #3
 8003c22:	3301      	adds	r3, #1
 8003c24:	005b      	lsls	r3, r3, #1
 8003c26:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8003c28:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003c2a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003c2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c30:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003c32:	e002      	b.n	8003c3a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003c34:	4b05      	ldr	r3, [pc, #20]	@ (8003c4c <HAL_RCC_GetSysClockFreq+0x204>)
 8003c36:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003c38:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003c3a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8003c3c:	4618      	mov	r0, r3
 8003c3e:	3750      	adds	r7, #80	@ 0x50
 8003c40:	46bd      	mov	sp, r7
 8003c42:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003c46:	bf00      	nop
 8003c48:	40023800 	.word	0x40023800
 8003c4c:	00f42400 	.word	0x00f42400
 8003c50:	007a1200 	.word	0x007a1200

08003c54 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003c54:	b480      	push	{r7}
 8003c56:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003c58:	4b03      	ldr	r3, [pc, #12]	@ (8003c68 <HAL_RCC_GetHCLKFreq+0x14>)
 8003c5a:	681b      	ldr	r3, [r3, #0]
}
 8003c5c:	4618      	mov	r0, r3
 8003c5e:	46bd      	mov	sp, r7
 8003c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c64:	4770      	bx	lr
 8003c66:	bf00      	nop
 8003c68:	20000000 	.word	0x20000000

08003c6c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003c6c:	b580      	push	{r7, lr}
 8003c6e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003c70:	f7ff fff0 	bl	8003c54 <HAL_RCC_GetHCLKFreq>
 8003c74:	4602      	mov	r2, r0
 8003c76:	4b05      	ldr	r3, [pc, #20]	@ (8003c8c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003c78:	689b      	ldr	r3, [r3, #8]
 8003c7a:	0a9b      	lsrs	r3, r3, #10
 8003c7c:	f003 0307 	and.w	r3, r3, #7
 8003c80:	4903      	ldr	r1, [pc, #12]	@ (8003c90 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003c82:	5ccb      	ldrb	r3, [r1, r3]
 8003c84:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003c88:	4618      	mov	r0, r3
 8003c8a:	bd80      	pop	{r7, pc}
 8003c8c:	40023800 	.word	0x40023800
 8003c90:	0800a764 	.word	0x0800a764

08003c94 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003c94:	b580      	push	{r7, lr}
 8003c96:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003c98:	f7ff ffdc 	bl	8003c54 <HAL_RCC_GetHCLKFreq>
 8003c9c:	4602      	mov	r2, r0
 8003c9e:	4b05      	ldr	r3, [pc, #20]	@ (8003cb4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003ca0:	689b      	ldr	r3, [r3, #8]
 8003ca2:	0b5b      	lsrs	r3, r3, #13
 8003ca4:	f003 0307 	and.w	r3, r3, #7
 8003ca8:	4903      	ldr	r1, [pc, #12]	@ (8003cb8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003caa:	5ccb      	ldrb	r3, [r1, r3]
 8003cac:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003cb0:	4618      	mov	r0, r3
 8003cb2:	bd80      	pop	{r7, pc}
 8003cb4:	40023800 	.word	0x40023800
 8003cb8:	0800a764 	.word	0x0800a764

08003cbc <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003cbc:	b480      	push	{r7}
 8003cbe:	b083      	sub	sp, #12
 8003cc0:	af00      	add	r7, sp, #0
 8003cc2:	6078      	str	r0, [r7, #4]
 8003cc4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	220f      	movs	r2, #15
 8003cca:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003ccc:	4b12      	ldr	r3, [pc, #72]	@ (8003d18 <HAL_RCC_GetClockConfig+0x5c>)
 8003cce:	689b      	ldr	r3, [r3, #8]
 8003cd0:	f003 0203 	and.w	r2, r3, #3
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003cd8:	4b0f      	ldr	r3, [pc, #60]	@ (8003d18 <HAL_RCC_GetClockConfig+0x5c>)
 8003cda:	689b      	ldr	r3, [r3, #8]
 8003cdc:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003ce4:	4b0c      	ldr	r3, [pc, #48]	@ (8003d18 <HAL_RCC_GetClockConfig+0x5c>)
 8003ce6:	689b      	ldr	r3, [r3, #8]
 8003ce8:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8003cf0:	4b09      	ldr	r3, [pc, #36]	@ (8003d18 <HAL_RCC_GetClockConfig+0x5c>)
 8003cf2:	689b      	ldr	r3, [r3, #8]
 8003cf4:	08db      	lsrs	r3, r3, #3
 8003cf6:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003cfe:	4b07      	ldr	r3, [pc, #28]	@ (8003d1c <HAL_RCC_GetClockConfig+0x60>)
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	f003 020f 	and.w	r2, r3, #15
 8003d06:	683b      	ldr	r3, [r7, #0]
 8003d08:	601a      	str	r2, [r3, #0]
}
 8003d0a:	bf00      	nop
 8003d0c:	370c      	adds	r7, #12
 8003d0e:	46bd      	mov	sp, r7
 8003d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d14:	4770      	bx	lr
 8003d16:	bf00      	nop
 8003d18:	40023800 	.word	0x40023800
 8003d1c:	40023c00 	.word	0x40023c00

08003d20 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003d20:	b580      	push	{r7, lr}
 8003d22:	b088      	sub	sp, #32
 8003d24:	af00      	add	r7, sp, #0
 8003d26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8003d28:	2300      	movs	r3, #0
 8003d2a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8003d2c:	2300      	movs	r3, #0
 8003d2e:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8003d30:	2300      	movs	r3, #0
 8003d32:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8003d34:	2300      	movs	r3, #0
 8003d36:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8003d38:	2300      	movs	r3, #0
 8003d3a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	f003 0301 	and.w	r3, r3, #1
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d012      	beq.n	8003d6e <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003d48:	4b69      	ldr	r3, [pc, #420]	@ (8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d4a:	689b      	ldr	r3, [r3, #8]
 8003d4c:	4a68      	ldr	r2, [pc, #416]	@ (8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d4e:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8003d52:	6093      	str	r3, [r2, #8]
 8003d54:	4b66      	ldr	r3, [pc, #408]	@ (8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d56:	689a      	ldr	r2, [r3, #8]
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003d5c:	4964      	ldr	r1, [pc, #400]	@ (8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d5e:	4313      	orrs	r3, r2
 8003d60:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d101      	bne.n	8003d6e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8003d6a:	2301      	movs	r3, #1
 8003d6c:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d017      	beq.n	8003daa <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003d7a:	4b5d      	ldr	r3, [pc, #372]	@ (8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d7c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003d80:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d88:	4959      	ldr	r1, [pc, #356]	@ (8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d8a:	4313      	orrs	r3, r2
 8003d8c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d94:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003d98:	d101      	bne.n	8003d9e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8003d9a:	2301      	movs	r3, #1
 8003d9c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d101      	bne.n	8003daa <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8003da6:	2301      	movs	r3, #1
 8003da8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d017      	beq.n	8003de6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003db6:	4b4e      	ldr	r3, [pc, #312]	@ (8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003db8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003dbc:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003dc4:	494a      	ldr	r1, [pc, #296]	@ (8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003dc6:	4313      	orrs	r3, r2
 8003dc8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003dd0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003dd4:	d101      	bne.n	8003dda <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8003dd6:	2301      	movs	r3, #1
 8003dd8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d101      	bne.n	8003de6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8003de2:	2301      	movs	r3, #1
 8003de4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d001      	beq.n	8003df6 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8003df2:	2301      	movs	r3, #1
 8003df4:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	f003 0320 	and.w	r3, r3, #32
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	f000 808b 	beq.w	8003f1a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003e04:	4b3a      	ldr	r3, [pc, #232]	@ (8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e08:	4a39      	ldr	r2, [pc, #228]	@ (8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e0a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003e0e:	6413      	str	r3, [r2, #64]	@ 0x40
 8003e10:	4b37      	ldr	r3, [pc, #220]	@ (8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e14:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003e18:	60bb      	str	r3, [r7, #8]
 8003e1a:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003e1c:	4b35      	ldr	r3, [pc, #212]	@ (8003ef4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	4a34      	ldr	r2, [pc, #208]	@ (8003ef4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003e22:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003e26:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003e28:	f7fd fb9a 	bl	8001560 <HAL_GetTick>
 8003e2c:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003e2e:	e008      	b.n	8003e42 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e30:	f7fd fb96 	bl	8001560 <HAL_GetTick>
 8003e34:	4602      	mov	r2, r0
 8003e36:	697b      	ldr	r3, [r7, #20]
 8003e38:	1ad3      	subs	r3, r2, r3
 8003e3a:	2b64      	cmp	r3, #100	@ 0x64
 8003e3c:	d901      	bls.n	8003e42 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8003e3e:	2303      	movs	r3, #3
 8003e40:	e38f      	b.n	8004562 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003e42:	4b2c      	ldr	r3, [pc, #176]	@ (8003ef4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d0f0      	beq.n	8003e30 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003e4e:	4b28      	ldr	r3, [pc, #160]	@ (8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e50:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e52:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003e56:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003e58:	693b      	ldr	r3, [r7, #16]
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d035      	beq.n	8003eca <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e62:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003e66:	693a      	ldr	r2, [r7, #16]
 8003e68:	429a      	cmp	r2, r3
 8003e6a:	d02e      	beq.n	8003eca <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003e6c:	4b20      	ldr	r3, [pc, #128]	@ (8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e6e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e70:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003e74:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003e76:	4b1e      	ldr	r3, [pc, #120]	@ (8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e78:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e7a:	4a1d      	ldr	r2, [pc, #116]	@ (8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e7c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003e80:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003e82:	4b1b      	ldr	r3, [pc, #108]	@ (8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e84:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e86:	4a1a      	ldr	r2, [pc, #104]	@ (8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e88:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003e8c:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8003e8e:	4a18      	ldr	r2, [pc, #96]	@ (8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e90:	693b      	ldr	r3, [r7, #16]
 8003e92:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003e94:	4b16      	ldr	r3, [pc, #88]	@ (8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e96:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e98:	f003 0301 	and.w	r3, r3, #1
 8003e9c:	2b01      	cmp	r3, #1
 8003e9e:	d114      	bne.n	8003eca <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ea0:	f7fd fb5e 	bl	8001560 <HAL_GetTick>
 8003ea4:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ea6:	e00a      	b.n	8003ebe <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003ea8:	f7fd fb5a 	bl	8001560 <HAL_GetTick>
 8003eac:	4602      	mov	r2, r0
 8003eae:	697b      	ldr	r3, [r7, #20]
 8003eb0:	1ad3      	subs	r3, r2, r3
 8003eb2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003eb6:	4293      	cmp	r3, r2
 8003eb8:	d901      	bls.n	8003ebe <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8003eba:	2303      	movs	r3, #3
 8003ebc:	e351      	b.n	8004562 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ebe:	4b0c      	ldr	r3, [pc, #48]	@ (8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ec0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ec2:	f003 0302 	and.w	r3, r3, #2
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d0ee      	beq.n	8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ece:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003ed2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003ed6:	d111      	bne.n	8003efc <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8003ed8:	4b05      	ldr	r3, [pc, #20]	@ (8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003eda:	689b      	ldr	r3, [r3, #8]
 8003edc:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8003ee4:	4b04      	ldr	r3, [pc, #16]	@ (8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003ee6:	400b      	ands	r3, r1
 8003ee8:	4901      	ldr	r1, [pc, #4]	@ (8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003eea:	4313      	orrs	r3, r2
 8003eec:	608b      	str	r3, [r1, #8]
 8003eee:	e00b      	b.n	8003f08 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8003ef0:	40023800 	.word	0x40023800
 8003ef4:	40007000 	.word	0x40007000
 8003ef8:	0ffffcff 	.word	0x0ffffcff
 8003efc:	4bac      	ldr	r3, [pc, #688]	@ (80041b0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003efe:	689b      	ldr	r3, [r3, #8]
 8003f00:	4aab      	ldr	r2, [pc, #684]	@ (80041b0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003f02:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8003f06:	6093      	str	r3, [r2, #8]
 8003f08:	4ba9      	ldr	r3, [pc, #676]	@ (80041b0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003f0a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f10:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003f14:	49a6      	ldr	r1, [pc, #664]	@ (80041b0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003f16:	4313      	orrs	r3, r2
 8003f18:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	f003 0310 	and.w	r3, r3, #16
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d010      	beq.n	8003f48 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003f26:	4ba2      	ldr	r3, [pc, #648]	@ (80041b0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003f28:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003f2c:	4aa0      	ldr	r2, [pc, #640]	@ (80041b0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003f2e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003f32:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8003f36:	4b9e      	ldr	r3, [pc, #632]	@ (80041b0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003f38:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f40:	499b      	ldr	r1, [pc, #620]	@ (80041b0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003f42:	4313      	orrs	r3, r2
 8003f44:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d00a      	beq.n	8003f6a <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003f54:	4b96      	ldr	r3, [pc, #600]	@ (80041b0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003f56:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003f5a:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003f62:	4993      	ldr	r1, [pc, #588]	@ (80041b0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003f64:	4313      	orrs	r3, r2
 8003f66:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d00a      	beq.n	8003f8c <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003f76:	4b8e      	ldr	r3, [pc, #568]	@ (80041b0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003f78:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003f7c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003f84:	498a      	ldr	r1, [pc, #552]	@ (80041b0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003f86:	4313      	orrs	r3, r2
 8003f88:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d00a      	beq.n	8003fae <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003f98:	4b85      	ldr	r3, [pc, #532]	@ (80041b0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003f9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003f9e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003fa6:	4982      	ldr	r1, [pc, #520]	@ (80041b0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003fa8:	4313      	orrs	r3, r2
 8003faa:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d00a      	beq.n	8003fd0 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003fba:	4b7d      	ldr	r3, [pc, #500]	@ (80041b0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003fbc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003fc0:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003fc8:	4979      	ldr	r1, [pc, #484]	@ (80041b0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003fca:	4313      	orrs	r3, r2
 8003fcc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d00a      	beq.n	8003ff2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003fdc:	4b74      	ldr	r3, [pc, #464]	@ (80041b0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003fde:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003fe2:	f023 0203 	bic.w	r2, r3, #3
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003fea:	4971      	ldr	r1, [pc, #452]	@ (80041b0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003fec:	4313      	orrs	r3, r2
 8003fee:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d00a      	beq.n	8004014 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003ffe:	4b6c      	ldr	r3, [pc, #432]	@ (80041b0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004000:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004004:	f023 020c 	bic.w	r2, r3, #12
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800400c:	4968      	ldr	r1, [pc, #416]	@ (80041b0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800400e:	4313      	orrs	r3, r2
 8004010:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800401c:	2b00      	cmp	r3, #0
 800401e:	d00a      	beq.n	8004036 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004020:	4b63      	ldr	r3, [pc, #396]	@ (80041b0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004022:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004026:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800402e:	4960      	ldr	r1, [pc, #384]	@ (80041b0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004030:	4313      	orrs	r3, r2
 8004032:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800403e:	2b00      	cmp	r3, #0
 8004040:	d00a      	beq.n	8004058 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004042:	4b5b      	ldr	r3, [pc, #364]	@ (80041b0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004044:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004048:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004050:	4957      	ldr	r1, [pc, #348]	@ (80041b0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004052:	4313      	orrs	r3, r2
 8004054:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004060:	2b00      	cmp	r3, #0
 8004062:	d00a      	beq.n	800407a <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004064:	4b52      	ldr	r3, [pc, #328]	@ (80041b0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004066:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800406a:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004072:	494f      	ldr	r1, [pc, #316]	@ (80041b0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004074:	4313      	orrs	r3, r2
 8004076:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004082:	2b00      	cmp	r3, #0
 8004084:	d00a      	beq.n	800409c <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8004086:	4b4a      	ldr	r3, [pc, #296]	@ (80041b0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004088:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800408c:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004094:	4946      	ldr	r1, [pc, #280]	@ (80041b0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004096:	4313      	orrs	r3, r2
 8004098:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d00a      	beq.n	80040be <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80040a8:	4b41      	ldr	r3, [pc, #260]	@ (80041b0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80040aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80040ae:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80040b6:	493e      	ldr	r1, [pc, #248]	@ (80041b0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80040b8:	4313      	orrs	r3, r2
 80040ba:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d00a      	beq.n	80040e0 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80040ca:	4b39      	ldr	r3, [pc, #228]	@ (80041b0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80040cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80040d0:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80040d8:	4935      	ldr	r1, [pc, #212]	@ (80041b0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80040da:	4313      	orrs	r3, r2
 80040dc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d00a      	beq.n	8004102 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80040ec:	4b30      	ldr	r3, [pc, #192]	@ (80041b0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80040ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80040f2:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80040fa:	492d      	ldr	r1, [pc, #180]	@ (80041b0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80040fc:	4313      	orrs	r3, r2
 80040fe:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800410a:	2b00      	cmp	r3, #0
 800410c:	d011      	beq.n	8004132 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800410e:	4b28      	ldr	r3, [pc, #160]	@ (80041b0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004110:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004114:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800411c:	4924      	ldr	r1, [pc, #144]	@ (80041b0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800411e:	4313      	orrs	r3, r2
 8004120:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004128:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800412c:	d101      	bne.n	8004132 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800412e:	2301      	movs	r3, #1
 8004130:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	f003 0308 	and.w	r3, r3, #8
 800413a:	2b00      	cmp	r3, #0
 800413c:	d001      	beq.n	8004142 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800413e:	2301      	movs	r3, #1
 8004140:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800414a:	2b00      	cmp	r3, #0
 800414c:	d00a      	beq.n	8004164 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800414e:	4b18      	ldr	r3, [pc, #96]	@ (80041b0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004150:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004154:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800415c:	4914      	ldr	r1, [pc, #80]	@ (80041b0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800415e:	4313      	orrs	r3, r2
 8004160:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800416c:	2b00      	cmp	r3, #0
 800416e:	d00b      	beq.n	8004188 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004170:	4b0f      	ldr	r3, [pc, #60]	@ (80041b0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004172:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004176:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004180:	490b      	ldr	r1, [pc, #44]	@ (80041b0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004182:	4313      	orrs	r3, r2
 8004184:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004190:	2b00      	cmp	r3, #0
 8004192:	d00f      	beq.n	80041b4 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8004194:	4b06      	ldr	r3, [pc, #24]	@ (80041b0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004196:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800419a:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80041a4:	4902      	ldr	r1, [pc, #8]	@ (80041b0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80041a6:	4313      	orrs	r3, r2
 80041a8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80041ac:	e002      	b.n	80041b4 <HAL_RCCEx_PeriphCLKConfig+0x494>
 80041ae:	bf00      	nop
 80041b0:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d00b      	beq.n	80041d8 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80041c0:	4b8a      	ldr	r3, [pc, #552]	@ (80043ec <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80041c2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80041c6:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80041d0:	4986      	ldr	r1, [pc, #536]	@ (80043ec <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80041d2:	4313      	orrs	r3, r2
 80041d4:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d00b      	beq.n	80041fc <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80041e4:	4b81      	ldr	r3, [pc, #516]	@ (80043ec <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80041e6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80041ea:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80041f4:	497d      	ldr	r1, [pc, #500]	@ (80043ec <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80041f6:	4313      	orrs	r3, r2
 80041f8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80041fc:	69fb      	ldr	r3, [r7, #28]
 80041fe:	2b01      	cmp	r3, #1
 8004200:	d006      	beq.n	8004210 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800420a:	2b00      	cmp	r3, #0
 800420c:	f000 80d6 	beq.w	80043bc <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004210:	4b76      	ldr	r3, [pc, #472]	@ (80043ec <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	4a75      	ldr	r2, [pc, #468]	@ (80043ec <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004216:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800421a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800421c:	f7fd f9a0 	bl	8001560 <HAL_GetTick>
 8004220:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004222:	e008      	b.n	8004236 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004224:	f7fd f99c 	bl	8001560 <HAL_GetTick>
 8004228:	4602      	mov	r2, r0
 800422a:	697b      	ldr	r3, [r7, #20]
 800422c:	1ad3      	subs	r3, r2, r3
 800422e:	2b64      	cmp	r3, #100	@ 0x64
 8004230:	d901      	bls.n	8004236 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004232:	2303      	movs	r3, #3
 8004234:	e195      	b.n	8004562 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004236:	4b6d      	ldr	r3, [pc, #436]	@ (80043ec <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800423e:	2b00      	cmp	r3, #0
 8004240:	d1f0      	bne.n	8004224 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	f003 0301 	and.w	r3, r3, #1
 800424a:	2b00      	cmp	r3, #0
 800424c:	d021      	beq.n	8004292 <HAL_RCCEx_PeriphCLKConfig+0x572>
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004252:	2b00      	cmp	r3, #0
 8004254:	d11d      	bne.n	8004292 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004256:	4b65      	ldr	r3, [pc, #404]	@ (80043ec <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004258:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800425c:	0c1b      	lsrs	r3, r3, #16
 800425e:	f003 0303 	and.w	r3, r3, #3
 8004262:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004264:	4b61      	ldr	r3, [pc, #388]	@ (80043ec <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004266:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800426a:	0e1b      	lsrs	r3, r3, #24
 800426c:	f003 030f 	and.w	r3, r3, #15
 8004270:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	685b      	ldr	r3, [r3, #4]
 8004276:	019a      	lsls	r2, r3, #6
 8004278:	693b      	ldr	r3, [r7, #16]
 800427a:	041b      	lsls	r3, r3, #16
 800427c:	431a      	orrs	r2, r3
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	061b      	lsls	r3, r3, #24
 8004282:	431a      	orrs	r2, r3
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	689b      	ldr	r3, [r3, #8]
 8004288:	071b      	lsls	r3, r3, #28
 800428a:	4958      	ldr	r1, [pc, #352]	@ (80043ec <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800428c:	4313      	orrs	r3, r2
 800428e:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800429a:	2b00      	cmp	r3, #0
 800429c:	d004      	beq.n	80042a8 <HAL_RCCEx_PeriphCLKConfig+0x588>
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80042a2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80042a6:	d00a      	beq.n	80042be <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d02e      	beq.n	8004312 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042b8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80042bc:	d129      	bne.n	8004312 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80042be:	4b4b      	ldr	r3, [pc, #300]	@ (80043ec <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80042c0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80042c4:	0c1b      	lsrs	r3, r3, #16
 80042c6:	f003 0303 	and.w	r3, r3, #3
 80042ca:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80042cc:	4b47      	ldr	r3, [pc, #284]	@ (80043ec <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80042ce:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80042d2:	0f1b      	lsrs	r3, r3, #28
 80042d4:	f003 0307 	and.w	r3, r3, #7
 80042d8:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	685b      	ldr	r3, [r3, #4]
 80042de:	019a      	lsls	r2, r3, #6
 80042e0:	693b      	ldr	r3, [r7, #16]
 80042e2:	041b      	lsls	r3, r3, #16
 80042e4:	431a      	orrs	r2, r3
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	68db      	ldr	r3, [r3, #12]
 80042ea:	061b      	lsls	r3, r3, #24
 80042ec:	431a      	orrs	r2, r3
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	071b      	lsls	r3, r3, #28
 80042f2:	493e      	ldr	r1, [pc, #248]	@ (80043ec <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80042f4:	4313      	orrs	r3, r2
 80042f6:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80042fa:	4b3c      	ldr	r3, [pc, #240]	@ (80043ec <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80042fc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004300:	f023 021f 	bic.w	r2, r3, #31
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004308:	3b01      	subs	r3, #1
 800430a:	4938      	ldr	r1, [pc, #224]	@ (80043ec <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800430c:	4313      	orrs	r3, r2
 800430e:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800431a:	2b00      	cmp	r3, #0
 800431c:	d01d      	beq.n	800435a <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800431e:	4b33      	ldr	r3, [pc, #204]	@ (80043ec <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004320:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004324:	0e1b      	lsrs	r3, r3, #24
 8004326:	f003 030f 	and.w	r3, r3, #15
 800432a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800432c:	4b2f      	ldr	r3, [pc, #188]	@ (80043ec <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800432e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004332:	0f1b      	lsrs	r3, r3, #28
 8004334:	f003 0307 	and.w	r3, r3, #7
 8004338:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	685b      	ldr	r3, [r3, #4]
 800433e:	019a      	lsls	r2, r3, #6
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	691b      	ldr	r3, [r3, #16]
 8004344:	041b      	lsls	r3, r3, #16
 8004346:	431a      	orrs	r2, r3
 8004348:	693b      	ldr	r3, [r7, #16]
 800434a:	061b      	lsls	r3, r3, #24
 800434c:	431a      	orrs	r2, r3
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	071b      	lsls	r3, r3, #28
 8004352:	4926      	ldr	r1, [pc, #152]	@ (80043ec <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004354:	4313      	orrs	r3, r2
 8004356:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004362:	2b00      	cmp	r3, #0
 8004364:	d011      	beq.n	800438a <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	685b      	ldr	r3, [r3, #4]
 800436a:	019a      	lsls	r2, r3, #6
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	691b      	ldr	r3, [r3, #16]
 8004370:	041b      	lsls	r3, r3, #16
 8004372:	431a      	orrs	r2, r3
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	68db      	ldr	r3, [r3, #12]
 8004378:	061b      	lsls	r3, r3, #24
 800437a:	431a      	orrs	r2, r3
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	689b      	ldr	r3, [r3, #8]
 8004380:	071b      	lsls	r3, r3, #28
 8004382:	491a      	ldr	r1, [pc, #104]	@ (80043ec <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004384:	4313      	orrs	r3, r2
 8004386:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800438a:	4b18      	ldr	r3, [pc, #96]	@ (80043ec <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	4a17      	ldr	r2, [pc, #92]	@ (80043ec <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004390:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004394:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004396:	f7fd f8e3 	bl	8001560 <HAL_GetTick>
 800439a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800439c:	e008      	b.n	80043b0 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800439e:	f7fd f8df 	bl	8001560 <HAL_GetTick>
 80043a2:	4602      	mov	r2, r0
 80043a4:	697b      	ldr	r3, [r7, #20]
 80043a6:	1ad3      	subs	r3, r2, r3
 80043a8:	2b64      	cmp	r3, #100	@ 0x64
 80043aa:	d901      	bls.n	80043b0 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80043ac:	2303      	movs	r3, #3
 80043ae:	e0d8      	b.n	8004562 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80043b0:	4b0e      	ldr	r3, [pc, #56]	@ (80043ec <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d0f0      	beq.n	800439e <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80043bc:	69bb      	ldr	r3, [r7, #24]
 80043be:	2b01      	cmp	r3, #1
 80043c0:	f040 80ce 	bne.w	8004560 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80043c4:	4b09      	ldr	r3, [pc, #36]	@ (80043ec <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	4a08      	ldr	r2, [pc, #32]	@ (80043ec <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80043ca:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80043ce:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80043d0:	f7fd f8c6 	bl	8001560 <HAL_GetTick>
 80043d4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80043d6:	e00b      	b.n	80043f0 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80043d8:	f7fd f8c2 	bl	8001560 <HAL_GetTick>
 80043dc:	4602      	mov	r2, r0
 80043de:	697b      	ldr	r3, [r7, #20]
 80043e0:	1ad3      	subs	r3, r2, r3
 80043e2:	2b64      	cmp	r3, #100	@ 0x64
 80043e4:	d904      	bls.n	80043f0 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80043e6:	2303      	movs	r3, #3
 80043e8:	e0bb      	b.n	8004562 <HAL_RCCEx_PeriphCLKConfig+0x842>
 80043ea:	bf00      	nop
 80043ec:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80043f0:	4b5e      	ldr	r3, [pc, #376]	@ (800456c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80043f8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80043fc:	d0ec      	beq.n	80043d8 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004406:	2b00      	cmp	r3, #0
 8004408:	d003      	beq.n	8004412 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800440e:	2b00      	cmp	r3, #0
 8004410:	d009      	beq.n	8004426 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800441a:	2b00      	cmp	r3, #0
 800441c:	d02e      	beq.n	800447c <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004422:	2b00      	cmp	r3, #0
 8004424:	d12a      	bne.n	800447c <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004426:	4b51      	ldr	r3, [pc, #324]	@ (800456c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004428:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800442c:	0c1b      	lsrs	r3, r3, #16
 800442e:	f003 0303 	and.w	r3, r3, #3
 8004432:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004434:	4b4d      	ldr	r3, [pc, #308]	@ (800456c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004436:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800443a:	0f1b      	lsrs	r3, r3, #28
 800443c:	f003 0307 	and.w	r3, r3, #7
 8004440:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	695b      	ldr	r3, [r3, #20]
 8004446:	019a      	lsls	r2, r3, #6
 8004448:	693b      	ldr	r3, [r7, #16]
 800444a:	041b      	lsls	r3, r3, #16
 800444c:	431a      	orrs	r2, r3
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	699b      	ldr	r3, [r3, #24]
 8004452:	061b      	lsls	r3, r3, #24
 8004454:	431a      	orrs	r2, r3
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	071b      	lsls	r3, r3, #28
 800445a:	4944      	ldr	r1, [pc, #272]	@ (800456c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800445c:	4313      	orrs	r3, r2
 800445e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004462:	4b42      	ldr	r3, [pc, #264]	@ (800456c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004464:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004468:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004470:	3b01      	subs	r3, #1
 8004472:	021b      	lsls	r3, r3, #8
 8004474:	493d      	ldr	r1, [pc, #244]	@ (800456c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004476:	4313      	orrs	r3, r2
 8004478:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004484:	2b00      	cmp	r3, #0
 8004486:	d022      	beq.n	80044ce <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800448c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004490:	d11d      	bne.n	80044ce <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004492:	4b36      	ldr	r3, [pc, #216]	@ (800456c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004494:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004498:	0e1b      	lsrs	r3, r3, #24
 800449a:	f003 030f 	and.w	r3, r3, #15
 800449e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80044a0:	4b32      	ldr	r3, [pc, #200]	@ (800456c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80044a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80044a6:	0f1b      	lsrs	r3, r3, #28
 80044a8:	f003 0307 	and.w	r3, r3, #7
 80044ac:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	695b      	ldr	r3, [r3, #20]
 80044b2:	019a      	lsls	r2, r3, #6
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	6a1b      	ldr	r3, [r3, #32]
 80044b8:	041b      	lsls	r3, r3, #16
 80044ba:	431a      	orrs	r2, r3
 80044bc:	693b      	ldr	r3, [r7, #16]
 80044be:	061b      	lsls	r3, r3, #24
 80044c0:	431a      	orrs	r2, r3
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	071b      	lsls	r3, r3, #28
 80044c6:	4929      	ldr	r1, [pc, #164]	@ (800456c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80044c8:	4313      	orrs	r3, r2
 80044ca:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	f003 0308 	and.w	r3, r3, #8
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d028      	beq.n	800452c <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80044da:	4b24      	ldr	r3, [pc, #144]	@ (800456c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80044dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80044e0:	0e1b      	lsrs	r3, r3, #24
 80044e2:	f003 030f 	and.w	r3, r3, #15
 80044e6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80044e8:	4b20      	ldr	r3, [pc, #128]	@ (800456c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80044ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80044ee:	0c1b      	lsrs	r3, r3, #16
 80044f0:	f003 0303 	and.w	r3, r3, #3
 80044f4:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	695b      	ldr	r3, [r3, #20]
 80044fa:	019a      	lsls	r2, r3, #6
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	041b      	lsls	r3, r3, #16
 8004500:	431a      	orrs	r2, r3
 8004502:	693b      	ldr	r3, [r7, #16]
 8004504:	061b      	lsls	r3, r3, #24
 8004506:	431a      	orrs	r2, r3
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	69db      	ldr	r3, [r3, #28]
 800450c:	071b      	lsls	r3, r3, #28
 800450e:	4917      	ldr	r1, [pc, #92]	@ (800456c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004510:	4313      	orrs	r3, r2
 8004512:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8004516:	4b15      	ldr	r3, [pc, #84]	@ (800456c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004518:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800451c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004524:	4911      	ldr	r1, [pc, #68]	@ (800456c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004526:	4313      	orrs	r3, r2
 8004528:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800452c:	4b0f      	ldr	r3, [pc, #60]	@ (800456c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	4a0e      	ldr	r2, [pc, #56]	@ (800456c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004532:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004536:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004538:	f7fd f812 	bl	8001560 <HAL_GetTick>
 800453c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800453e:	e008      	b.n	8004552 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004540:	f7fd f80e 	bl	8001560 <HAL_GetTick>
 8004544:	4602      	mov	r2, r0
 8004546:	697b      	ldr	r3, [r7, #20]
 8004548:	1ad3      	subs	r3, r2, r3
 800454a:	2b64      	cmp	r3, #100	@ 0x64
 800454c:	d901      	bls.n	8004552 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800454e:	2303      	movs	r3, #3
 8004550:	e007      	b.n	8004562 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004552:	4b06      	ldr	r3, [pc, #24]	@ (800456c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800455a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800455e:	d1ef      	bne.n	8004540 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8004560:	2300      	movs	r3, #0
}
 8004562:	4618      	mov	r0, r3
 8004564:	3720      	adds	r7, #32
 8004566:	46bd      	mov	sp, r7
 8004568:	bd80      	pop	{r7, pc}
 800456a:	bf00      	nop
 800456c:	40023800 	.word	0x40023800

08004570 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004570:	b580      	push	{r7, lr}
 8004572:	b082      	sub	sp, #8
 8004574:	af00      	add	r7, sp, #0
 8004576:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	2b00      	cmp	r3, #0
 800457c:	d101      	bne.n	8004582 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800457e:	2301      	movs	r3, #1
 8004580:	e049      	b.n	8004616 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004588:	b2db      	uxtb	r3, r3
 800458a:	2b00      	cmp	r3, #0
 800458c:	d106      	bne.n	800459c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	2200      	movs	r2, #0
 8004592:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004596:	6878      	ldr	r0, [r7, #4]
 8004598:	f000 f841 	bl	800461e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	2202      	movs	r2, #2
 80045a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681a      	ldr	r2, [r3, #0]
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	3304      	adds	r3, #4
 80045ac:	4619      	mov	r1, r3
 80045ae:	4610      	mov	r0, r2
 80045b0:	f000 f9e8 	bl	8004984 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	2201      	movs	r2, #1
 80045b8:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	2201      	movs	r2, #1
 80045c0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	2201      	movs	r2, #1
 80045c8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	2201      	movs	r2, #1
 80045d0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	2201      	movs	r2, #1
 80045d8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	2201      	movs	r2, #1
 80045e0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	2201      	movs	r2, #1
 80045e8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	2201      	movs	r2, #1
 80045f0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	2201      	movs	r2, #1
 80045f8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	2201      	movs	r2, #1
 8004600:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	2201      	movs	r2, #1
 8004608:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	2201      	movs	r2, #1
 8004610:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004614:	2300      	movs	r3, #0
}
 8004616:	4618      	mov	r0, r3
 8004618:	3708      	adds	r7, #8
 800461a:	46bd      	mov	sp, r7
 800461c:	bd80      	pop	{r7, pc}

0800461e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800461e:	b480      	push	{r7}
 8004620:	b083      	sub	sp, #12
 8004622:	af00      	add	r7, sp, #0
 8004624:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8004626:	bf00      	nop
 8004628:	370c      	adds	r7, #12
 800462a:	46bd      	mov	sp, r7
 800462c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004630:	4770      	bx	lr
	...

08004634 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004634:	b480      	push	{r7}
 8004636:	b085      	sub	sp, #20
 8004638:	af00      	add	r7, sp, #0
 800463a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004642:	b2db      	uxtb	r3, r3
 8004644:	2b01      	cmp	r3, #1
 8004646:	d001      	beq.n	800464c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004648:	2301      	movs	r3, #1
 800464a:	e054      	b.n	80046f6 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	2202      	movs	r2, #2
 8004650:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	68da      	ldr	r2, [r3, #12]
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	f042 0201 	orr.w	r2, r2, #1
 8004662:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	4a26      	ldr	r2, [pc, #152]	@ (8004704 <HAL_TIM_Base_Start_IT+0xd0>)
 800466a:	4293      	cmp	r3, r2
 800466c:	d022      	beq.n	80046b4 <HAL_TIM_Base_Start_IT+0x80>
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004676:	d01d      	beq.n	80046b4 <HAL_TIM_Base_Start_IT+0x80>
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	4a22      	ldr	r2, [pc, #136]	@ (8004708 <HAL_TIM_Base_Start_IT+0xd4>)
 800467e:	4293      	cmp	r3, r2
 8004680:	d018      	beq.n	80046b4 <HAL_TIM_Base_Start_IT+0x80>
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	4a21      	ldr	r2, [pc, #132]	@ (800470c <HAL_TIM_Base_Start_IT+0xd8>)
 8004688:	4293      	cmp	r3, r2
 800468a:	d013      	beq.n	80046b4 <HAL_TIM_Base_Start_IT+0x80>
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	4a1f      	ldr	r2, [pc, #124]	@ (8004710 <HAL_TIM_Base_Start_IT+0xdc>)
 8004692:	4293      	cmp	r3, r2
 8004694:	d00e      	beq.n	80046b4 <HAL_TIM_Base_Start_IT+0x80>
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	4a1e      	ldr	r2, [pc, #120]	@ (8004714 <HAL_TIM_Base_Start_IT+0xe0>)
 800469c:	4293      	cmp	r3, r2
 800469e:	d009      	beq.n	80046b4 <HAL_TIM_Base_Start_IT+0x80>
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	4a1c      	ldr	r2, [pc, #112]	@ (8004718 <HAL_TIM_Base_Start_IT+0xe4>)
 80046a6:	4293      	cmp	r3, r2
 80046a8:	d004      	beq.n	80046b4 <HAL_TIM_Base_Start_IT+0x80>
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	4a1b      	ldr	r2, [pc, #108]	@ (800471c <HAL_TIM_Base_Start_IT+0xe8>)
 80046b0:	4293      	cmp	r3, r2
 80046b2:	d115      	bne.n	80046e0 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	689a      	ldr	r2, [r3, #8]
 80046ba:	4b19      	ldr	r3, [pc, #100]	@ (8004720 <HAL_TIM_Base_Start_IT+0xec>)
 80046bc:	4013      	ands	r3, r2
 80046be:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	2b06      	cmp	r3, #6
 80046c4:	d015      	beq.n	80046f2 <HAL_TIM_Base_Start_IT+0xbe>
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80046cc:	d011      	beq.n	80046f2 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	681a      	ldr	r2, [r3, #0]
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	f042 0201 	orr.w	r2, r2, #1
 80046dc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80046de:	e008      	b.n	80046f2 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	681a      	ldr	r2, [r3, #0]
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	f042 0201 	orr.w	r2, r2, #1
 80046ee:	601a      	str	r2, [r3, #0]
 80046f0:	e000      	b.n	80046f4 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80046f2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80046f4:	2300      	movs	r3, #0
}
 80046f6:	4618      	mov	r0, r3
 80046f8:	3714      	adds	r7, #20
 80046fa:	46bd      	mov	sp, r7
 80046fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004700:	4770      	bx	lr
 8004702:	bf00      	nop
 8004704:	40010000 	.word	0x40010000
 8004708:	40000400 	.word	0x40000400
 800470c:	40000800 	.word	0x40000800
 8004710:	40000c00 	.word	0x40000c00
 8004714:	40010400 	.word	0x40010400
 8004718:	40014000 	.word	0x40014000
 800471c:	40001800 	.word	0x40001800
 8004720:	00010007 	.word	0x00010007

08004724 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004724:	b580      	push	{r7, lr}
 8004726:	b084      	sub	sp, #16
 8004728:	af00      	add	r7, sp, #0
 800472a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	68db      	ldr	r3, [r3, #12]
 8004732:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	691b      	ldr	r3, [r3, #16]
 800473a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800473c:	68bb      	ldr	r3, [r7, #8]
 800473e:	f003 0302 	and.w	r3, r3, #2
 8004742:	2b00      	cmp	r3, #0
 8004744:	d020      	beq.n	8004788 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	f003 0302 	and.w	r3, r3, #2
 800474c:	2b00      	cmp	r3, #0
 800474e:	d01b      	beq.n	8004788 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	f06f 0202 	mvn.w	r2, #2
 8004758:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	2201      	movs	r2, #1
 800475e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	699b      	ldr	r3, [r3, #24]
 8004766:	f003 0303 	and.w	r3, r3, #3
 800476a:	2b00      	cmp	r3, #0
 800476c:	d003      	beq.n	8004776 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800476e:	6878      	ldr	r0, [r7, #4]
 8004770:	f000 f8e9 	bl	8004946 <HAL_TIM_IC_CaptureCallback>
 8004774:	e005      	b.n	8004782 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004776:	6878      	ldr	r0, [r7, #4]
 8004778:	f000 f8db 	bl	8004932 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800477c:	6878      	ldr	r0, [r7, #4]
 800477e:	f000 f8ec 	bl	800495a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	2200      	movs	r2, #0
 8004786:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004788:	68bb      	ldr	r3, [r7, #8]
 800478a:	f003 0304 	and.w	r3, r3, #4
 800478e:	2b00      	cmp	r3, #0
 8004790:	d020      	beq.n	80047d4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	f003 0304 	and.w	r3, r3, #4
 8004798:	2b00      	cmp	r3, #0
 800479a:	d01b      	beq.n	80047d4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	f06f 0204 	mvn.w	r2, #4
 80047a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	2202      	movs	r2, #2
 80047aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	699b      	ldr	r3, [r3, #24]
 80047b2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d003      	beq.n	80047c2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80047ba:	6878      	ldr	r0, [r7, #4]
 80047bc:	f000 f8c3 	bl	8004946 <HAL_TIM_IC_CaptureCallback>
 80047c0:	e005      	b.n	80047ce <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80047c2:	6878      	ldr	r0, [r7, #4]
 80047c4:	f000 f8b5 	bl	8004932 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80047c8:	6878      	ldr	r0, [r7, #4]
 80047ca:	f000 f8c6 	bl	800495a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	2200      	movs	r2, #0
 80047d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80047d4:	68bb      	ldr	r3, [r7, #8]
 80047d6:	f003 0308 	and.w	r3, r3, #8
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d020      	beq.n	8004820 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	f003 0308 	and.w	r3, r3, #8
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d01b      	beq.n	8004820 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	f06f 0208 	mvn.w	r2, #8
 80047f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	2204      	movs	r2, #4
 80047f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	69db      	ldr	r3, [r3, #28]
 80047fe:	f003 0303 	and.w	r3, r3, #3
 8004802:	2b00      	cmp	r3, #0
 8004804:	d003      	beq.n	800480e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004806:	6878      	ldr	r0, [r7, #4]
 8004808:	f000 f89d 	bl	8004946 <HAL_TIM_IC_CaptureCallback>
 800480c:	e005      	b.n	800481a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800480e:	6878      	ldr	r0, [r7, #4]
 8004810:	f000 f88f 	bl	8004932 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004814:	6878      	ldr	r0, [r7, #4]
 8004816:	f000 f8a0 	bl	800495a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	2200      	movs	r2, #0
 800481e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004820:	68bb      	ldr	r3, [r7, #8]
 8004822:	f003 0310 	and.w	r3, r3, #16
 8004826:	2b00      	cmp	r3, #0
 8004828:	d020      	beq.n	800486c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	f003 0310 	and.w	r3, r3, #16
 8004830:	2b00      	cmp	r3, #0
 8004832:	d01b      	beq.n	800486c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	f06f 0210 	mvn.w	r2, #16
 800483c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	2208      	movs	r2, #8
 8004842:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	69db      	ldr	r3, [r3, #28]
 800484a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800484e:	2b00      	cmp	r3, #0
 8004850:	d003      	beq.n	800485a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004852:	6878      	ldr	r0, [r7, #4]
 8004854:	f000 f877 	bl	8004946 <HAL_TIM_IC_CaptureCallback>
 8004858:	e005      	b.n	8004866 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800485a:	6878      	ldr	r0, [r7, #4]
 800485c:	f000 f869 	bl	8004932 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004860:	6878      	ldr	r0, [r7, #4]
 8004862:	f000 f87a 	bl	800495a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	2200      	movs	r2, #0
 800486a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800486c:	68bb      	ldr	r3, [r7, #8]
 800486e:	f003 0301 	and.w	r3, r3, #1
 8004872:	2b00      	cmp	r3, #0
 8004874:	d00c      	beq.n	8004890 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	f003 0301 	and.w	r3, r3, #1
 800487c:	2b00      	cmp	r3, #0
 800487e:	d007      	beq.n	8004890 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	f06f 0201 	mvn.w	r2, #1
 8004888:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800488a:	6878      	ldr	r0, [r7, #4]
 800488c:	f7fc fa72 	bl	8000d74 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004890:	68bb      	ldr	r3, [r7, #8]
 8004892:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004896:	2b00      	cmp	r3, #0
 8004898:	d104      	bne.n	80048a4 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800489a:	68bb      	ldr	r3, [r7, #8]
 800489c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d00c      	beq.n	80048be <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d007      	beq.n	80048be <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 80048b6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80048b8:	6878      	ldr	r0, [r7, #4]
 80048ba:	f000 f913 	bl	8004ae4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80048be:	68bb      	ldr	r3, [r7, #8]
 80048c0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d00c      	beq.n	80048e2 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d007      	beq.n	80048e2 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80048da:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80048dc:	6878      	ldr	r0, [r7, #4]
 80048de:	f000 f90b 	bl	8004af8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80048e2:	68bb      	ldr	r3, [r7, #8]
 80048e4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d00c      	beq.n	8004906 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d007      	beq.n	8004906 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80048fe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004900:	6878      	ldr	r0, [r7, #4]
 8004902:	f000 f834 	bl	800496e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004906:	68bb      	ldr	r3, [r7, #8]
 8004908:	f003 0320 	and.w	r3, r3, #32
 800490c:	2b00      	cmp	r3, #0
 800490e:	d00c      	beq.n	800492a <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	f003 0320 	and.w	r3, r3, #32
 8004916:	2b00      	cmp	r3, #0
 8004918:	d007      	beq.n	800492a <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	f06f 0220 	mvn.w	r2, #32
 8004922:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004924:	6878      	ldr	r0, [r7, #4]
 8004926:	f000 f8d3 	bl	8004ad0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800492a:	bf00      	nop
 800492c:	3710      	adds	r7, #16
 800492e:	46bd      	mov	sp, r7
 8004930:	bd80      	pop	{r7, pc}

08004932 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004932:	b480      	push	{r7}
 8004934:	b083      	sub	sp, #12
 8004936:	af00      	add	r7, sp, #0
 8004938:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800493a:	bf00      	nop
 800493c:	370c      	adds	r7, #12
 800493e:	46bd      	mov	sp, r7
 8004940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004944:	4770      	bx	lr

08004946 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004946:	b480      	push	{r7}
 8004948:	b083      	sub	sp, #12
 800494a:	af00      	add	r7, sp, #0
 800494c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800494e:	bf00      	nop
 8004950:	370c      	adds	r7, #12
 8004952:	46bd      	mov	sp, r7
 8004954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004958:	4770      	bx	lr

0800495a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800495a:	b480      	push	{r7}
 800495c:	b083      	sub	sp, #12
 800495e:	af00      	add	r7, sp, #0
 8004960:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004962:	bf00      	nop
 8004964:	370c      	adds	r7, #12
 8004966:	46bd      	mov	sp, r7
 8004968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800496c:	4770      	bx	lr

0800496e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800496e:	b480      	push	{r7}
 8004970:	b083      	sub	sp, #12
 8004972:	af00      	add	r7, sp, #0
 8004974:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004976:	bf00      	nop
 8004978:	370c      	adds	r7, #12
 800497a:	46bd      	mov	sp, r7
 800497c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004980:	4770      	bx	lr
	...

08004984 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004984:	b480      	push	{r7}
 8004986:	b085      	sub	sp, #20
 8004988:	af00      	add	r7, sp, #0
 800498a:	6078      	str	r0, [r7, #4]
 800498c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	4a43      	ldr	r2, [pc, #268]	@ (8004aa4 <TIM_Base_SetConfig+0x120>)
 8004998:	4293      	cmp	r3, r2
 800499a:	d013      	beq.n	80049c4 <TIM_Base_SetConfig+0x40>
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80049a2:	d00f      	beq.n	80049c4 <TIM_Base_SetConfig+0x40>
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	4a40      	ldr	r2, [pc, #256]	@ (8004aa8 <TIM_Base_SetConfig+0x124>)
 80049a8:	4293      	cmp	r3, r2
 80049aa:	d00b      	beq.n	80049c4 <TIM_Base_SetConfig+0x40>
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	4a3f      	ldr	r2, [pc, #252]	@ (8004aac <TIM_Base_SetConfig+0x128>)
 80049b0:	4293      	cmp	r3, r2
 80049b2:	d007      	beq.n	80049c4 <TIM_Base_SetConfig+0x40>
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	4a3e      	ldr	r2, [pc, #248]	@ (8004ab0 <TIM_Base_SetConfig+0x12c>)
 80049b8:	4293      	cmp	r3, r2
 80049ba:	d003      	beq.n	80049c4 <TIM_Base_SetConfig+0x40>
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	4a3d      	ldr	r2, [pc, #244]	@ (8004ab4 <TIM_Base_SetConfig+0x130>)
 80049c0:	4293      	cmp	r3, r2
 80049c2:	d108      	bne.n	80049d6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80049ca:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80049cc:	683b      	ldr	r3, [r7, #0]
 80049ce:	685b      	ldr	r3, [r3, #4]
 80049d0:	68fa      	ldr	r2, [r7, #12]
 80049d2:	4313      	orrs	r3, r2
 80049d4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	4a32      	ldr	r2, [pc, #200]	@ (8004aa4 <TIM_Base_SetConfig+0x120>)
 80049da:	4293      	cmp	r3, r2
 80049dc:	d02b      	beq.n	8004a36 <TIM_Base_SetConfig+0xb2>
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80049e4:	d027      	beq.n	8004a36 <TIM_Base_SetConfig+0xb2>
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	4a2f      	ldr	r2, [pc, #188]	@ (8004aa8 <TIM_Base_SetConfig+0x124>)
 80049ea:	4293      	cmp	r3, r2
 80049ec:	d023      	beq.n	8004a36 <TIM_Base_SetConfig+0xb2>
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	4a2e      	ldr	r2, [pc, #184]	@ (8004aac <TIM_Base_SetConfig+0x128>)
 80049f2:	4293      	cmp	r3, r2
 80049f4:	d01f      	beq.n	8004a36 <TIM_Base_SetConfig+0xb2>
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	4a2d      	ldr	r2, [pc, #180]	@ (8004ab0 <TIM_Base_SetConfig+0x12c>)
 80049fa:	4293      	cmp	r3, r2
 80049fc:	d01b      	beq.n	8004a36 <TIM_Base_SetConfig+0xb2>
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	4a2c      	ldr	r2, [pc, #176]	@ (8004ab4 <TIM_Base_SetConfig+0x130>)
 8004a02:	4293      	cmp	r3, r2
 8004a04:	d017      	beq.n	8004a36 <TIM_Base_SetConfig+0xb2>
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	4a2b      	ldr	r2, [pc, #172]	@ (8004ab8 <TIM_Base_SetConfig+0x134>)
 8004a0a:	4293      	cmp	r3, r2
 8004a0c:	d013      	beq.n	8004a36 <TIM_Base_SetConfig+0xb2>
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	4a2a      	ldr	r2, [pc, #168]	@ (8004abc <TIM_Base_SetConfig+0x138>)
 8004a12:	4293      	cmp	r3, r2
 8004a14:	d00f      	beq.n	8004a36 <TIM_Base_SetConfig+0xb2>
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	4a29      	ldr	r2, [pc, #164]	@ (8004ac0 <TIM_Base_SetConfig+0x13c>)
 8004a1a:	4293      	cmp	r3, r2
 8004a1c:	d00b      	beq.n	8004a36 <TIM_Base_SetConfig+0xb2>
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	4a28      	ldr	r2, [pc, #160]	@ (8004ac4 <TIM_Base_SetConfig+0x140>)
 8004a22:	4293      	cmp	r3, r2
 8004a24:	d007      	beq.n	8004a36 <TIM_Base_SetConfig+0xb2>
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	4a27      	ldr	r2, [pc, #156]	@ (8004ac8 <TIM_Base_SetConfig+0x144>)
 8004a2a:	4293      	cmp	r3, r2
 8004a2c:	d003      	beq.n	8004a36 <TIM_Base_SetConfig+0xb2>
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	4a26      	ldr	r2, [pc, #152]	@ (8004acc <TIM_Base_SetConfig+0x148>)
 8004a32:	4293      	cmp	r3, r2
 8004a34:	d108      	bne.n	8004a48 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004a3c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004a3e:	683b      	ldr	r3, [r7, #0]
 8004a40:	68db      	ldr	r3, [r3, #12]
 8004a42:	68fa      	ldr	r2, [r7, #12]
 8004a44:	4313      	orrs	r3, r2
 8004a46:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004a4e:	683b      	ldr	r3, [r7, #0]
 8004a50:	695b      	ldr	r3, [r3, #20]
 8004a52:	4313      	orrs	r3, r2
 8004a54:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004a56:	683b      	ldr	r3, [r7, #0]
 8004a58:	689a      	ldr	r2, [r3, #8]
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004a5e:	683b      	ldr	r3, [r7, #0]
 8004a60:	681a      	ldr	r2, [r3, #0]
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	4a0e      	ldr	r2, [pc, #56]	@ (8004aa4 <TIM_Base_SetConfig+0x120>)
 8004a6a:	4293      	cmp	r3, r2
 8004a6c:	d003      	beq.n	8004a76 <TIM_Base_SetConfig+0xf2>
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	4a10      	ldr	r2, [pc, #64]	@ (8004ab4 <TIM_Base_SetConfig+0x130>)
 8004a72:	4293      	cmp	r3, r2
 8004a74:	d103      	bne.n	8004a7e <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004a76:	683b      	ldr	r3, [r7, #0]
 8004a78:	691a      	ldr	r2, [r3, #16]
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	f043 0204 	orr.w	r2, r3, #4
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	2201      	movs	r2, #1
 8004a8e:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	68fa      	ldr	r2, [r7, #12]
 8004a94:	601a      	str	r2, [r3, #0]
}
 8004a96:	bf00      	nop
 8004a98:	3714      	adds	r7, #20
 8004a9a:	46bd      	mov	sp, r7
 8004a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa0:	4770      	bx	lr
 8004aa2:	bf00      	nop
 8004aa4:	40010000 	.word	0x40010000
 8004aa8:	40000400 	.word	0x40000400
 8004aac:	40000800 	.word	0x40000800
 8004ab0:	40000c00 	.word	0x40000c00
 8004ab4:	40010400 	.word	0x40010400
 8004ab8:	40014000 	.word	0x40014000
 8004abc:	40014400 	.word	0x40014400
 8004ac0:	40014800 	.word	0x40014800
 8004ac4:	40001800 	.word	0x40001800
 8004ac8:	40001c00 	.word	0x40001c00
 8004acc:	40002000 	.word	0x40002000

08004ad0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004ad0:	b480      	push	{r7}
 8004ad2:	b083      	sub	sp, #12
 8004ad4:	af00      	add	r7, sp, #0
 8004ad6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004ad8:	bf00      	nop
 8004ada:	370c      	adds	r7, #12
 8004adc:	46bd      	mov	sp, r7
 8004ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae2:	4770      	bx	lr

08004ae4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004ae4:	b480      	push	{r7}
 8004ae6:	b083      	sub	sp, #12
 8004ae8:	af00      	add	r7, sp, #0
 8004aea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004aec:	bf00      	nop
 8004aee:	370c      	adds	r7, #12
 8004af0:	46bd      	mov	sp, r7
 8004af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af6:	4770      	bx	lr

08004af8 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004af8:	b480      	push	{r7}
 8004afa:	b083      	sub	sp, #12
 8004afc:	af00      	add	r7, sp, #0
 8004afe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004b00:	bf00      	nop
 8004b02:	370c      	adds	r7, #12
 8004b04:	46bd      	mov	sp, r7
 8004b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b0a:	4770      	bx	lr

08004b0c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004b0c:	b580      	push	{r7, lr}
 8004b0e:	b082      	sub	sp, #8
 8004b10:	af00      	add	r7, sp, #0
 8004b12:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d101      	bne.n	8004b1e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004b1a:	2301      	movs	r3, #1
 8004b1c:	e040      	b.n	8004ba0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d106      	bne.n	8004b34 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	2200      	movs	r2, #0
 8004b2a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004b2e:	6878      	ldr	r0, [r7, #4]
 8004b30:	f7fc fa8a 	bl	8001048 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	2224      	movs	r2, #36	@ 0x24
 8004b38:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	681a      	ldr	r2, [r3, #0]
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	f022 0201 	bic.w	r2, r2, #1
 8004b48:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d002      	beq.n	8004b58 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8004b52:	6878      	ldr	r0, [r7, #4]
 8004b54:	f000 fb16 	bl	8005184 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004b58:	6878      	ldr	r0, [r7, #4]
 8004b5a:	f000 f8af 	bl	8004cbc <UART_SetConfig>
 8004b5e:	4603      	mov	r3, r0
 8004b60:	2b01      	cmp	r3, #1
 8004b62:	d101      	bne.n	8004b68 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8004b64:	2301      	movs	r3, #1
 8004b66:	e01b      	b.n	8004ba0 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	685a      	ldr	r2, [r3, #4]
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004b76:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	689a      	ldr	r2, [r3, #8]
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004b86:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	681a      	ldr	r2, [r3, #0]
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	f042 0201 	orr.w	r2, r2, #1
 8004b96:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004b98:	6878      	ldr	r0, [r7, #4]
 8004b9a:	f000 fb95 	bl	80052c8 <UART_CheckIdleState>
 8004b9e:	4603      	mov	r3, r0
}
 8004ba0:	4618      	mov	r0, r3
 8004ba2:	3708      	adds	r7, #8
 8004ba4:	46bd      	mov	sp, r7
 8004ba6:	bd80      	pop	{r7, pc}

08004ba8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004ba8:	b580      	push	{r7, lr}
 8004baa:	b08a      	sub	sp, #40	@ 0x28
 8004bac:	af02      	add	r7, sp, #8
 8004bae:	60f8      	str	r0, [r7, #12]
 8004bb0:	60b9      	str	r1, [r7, #8]
 8004bb2:	603b      	str	r3, [r7, #0]
 8004bb4:	4613      	mov	r3, r2
 8004bb6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004bbc:	2b20      	cmp	r3, #32
 8004bbe:	d177      	bne.n	8004cb0 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8004bc0:	68bb      	ldr	r3, [r7, #8]
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d002      	beq.n	8004bcc <HAL_UART_Transmit+0x24>
 8004bc6:	88fb      	ldrh	r3, [r7, #6]
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d101      	bne.n	8004bd0 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8004bcc:	2301      	movs	r3, #1
 8004bce:	e070      	b.n	8004cb2 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	2200      	movs	r2, #0
 8004bd4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	2221      	movs	r2, #33	@ 0x21
 8004bdc:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004bde:	f7fc fcbf 	bl	8001560 <HAL_GetTick>
 8004be2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	88fa      	ldrh	r2, [r7, #6]
 8004be8:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	88fa      	ldrh	r2, [r7, #6]
 8004bf0:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	689b      	ldr	r3, [r3, #8]
 8004bf8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004bfc:	d108      	bne.n	8004c10 <HAL_UART_Transmit+0x68>
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	691b      	ldr	r3, [r3, #16]
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d104      	bne.n	8004c10 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8004c06:	2300      	movs	r3, #0
 8004c08:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004c0a:	68bb      	ldr	r3, [r7, #8]
 8004c0c:	61bb      	str	r3, [r7, #24]
 8004c0e:	e003      	b.n	8004c18 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8004c10:	68bb      	ldr	r3, [r7, #8]
 8004c12:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004c14:	2300      	movs	r3, #0
 8004c16:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004c18:	e02f      	b.n	8004c7a <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004c1a:	683b      	ldr	r3, [r7, #0]
 8004c1c:	9300      	str	r3, [sp, #0]
 8004c1e:	697b      	ldr	r3, [r7, #20]
 8004c20:	2200      	movs	r2, #0
 8004c22:	2180      	movs	r1, #128	@ 0x80
 8004c24:	68f8      	ldr	r0, [r7, #12]
 8004c26:	f000 fbf7 	bl	8005418 <UART_WaitOnFlagUntilTimeout>
 8004c2a:	4603      	mov	r3, r0
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d004      	beq.n	8004c3a <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	2220      	movs	r2, #32
 8004c34:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8004c36:	2303      	movs	r3, #3
 8004c38:	e03b      	b.n	8004cb2 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8004c3a:	69fb      	ldr	r3, [r7, #28]
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d10b      	bne.n	8004c58 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004c40:	69bb      	ldr	r3, [r7, #24]
 8004c42:	881b      	ldrh	r3, [r3, #0]
 8004c44:	461a      	mov	r2, r3
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004c4e:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8004c50:	69bb      	ldr	r3, [r7, #24]
 8004c52:	3302      	adds	r3, #2
 8004c54:	61bb      	str	r3, [r7, #24]
 8004c56:	e007      	b.n	8004c68 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004c58:	69fb      	ldr	r3, [r7, #28]
 8004c5a:	781a      	ldrb	r2, [r3, #0]
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8004c62:	69fb      	ldr	r3, [r7, #28]
 8004c64:	3301      	adds	r3, #1
 8004c66:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8004c6e:	b29b      	uxth	r3, r3
 8004c70:	3b01      	subs	r3, #1
 8004c72:	b29a      	uxth	r2, r3
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8004c80:	b29b      	uxth	r3, r3
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d1c9      	bne.n	8004c1a <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004c86:	683b      	ldr	r3, [r7, #0]
 8004c88:	9300      	str	r3, [sp, #0]
 8004c8a:	697b      	ldr	r3, [r7, #20]
 8004c8c:	2200      	movs	r2, #0
 8004c8e:	2140      	movs	r1, #64	@ 0x40
 8004c90:	68f8      	ldr	r0, [r7, #12]
 8004c92:	f000 fbc1 	bl	8005418 <UART_WaitOnFlagUntilTimeout>
 8004c96:	4603      	mov	r3, r0
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d004      	beq.n	8004ca6 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	2220      	movs	r2, #32
 8004ca0:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8004ca2:	2303      	movs	r3, #3
 8004ca4:	e005      	b.n	8004cb2 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	2220      	movs	r2, #32
 8004caa:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8004cac:	2300      	movs	r3, #0
 8004cae:	e000      	b.n	8004cb2 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8004cb0:	2302      	movs	r3, #2
  }
}
 8004cb2:	4618      	mov	r0, r3
 8004cb4:	3720      	adds	r7, #32
 8004cb6:	46bd      	mov	sp, r7
 8004cb8:	bd80      	pop	{r7, pc}
	...

08004cbc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004cbc:	b580      	push	{r7, lr}
 8004cbe:	b088      	sub	sp, #32
 8004cc0:	af00      	add	r7, sp, #0
 8004cc2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004cc4:	2300      	movs	r3, #0
 8004cc6:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	689a      	ldr	r2, [r3, #8]
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	691b      	ldr	r3, [r3, #16]
 8004cd0:	431a      	orrs	r2, r3
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	695b      	ldr	r3, [r3, #20]
 8004cd6:	431a      	orrs	r2, r3
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	69db      	ldr	r3, [r3, #28]
 8004cdc:	4313      	orrs	r3, r2
 8004cde:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	681a      	ldr	r2, [r3, #0]
 8004ce6:	4ba6      	ldr	r3, [pc, #664]	@ (8004f80 <UART_SetConfig+0x2c4>)
 8004ce8:	4013      	ands	r3, r2
 8004cea:	687a      	ldr	r2, [r7, #4]
 8004cec:	6812      	ldr	r2, [r2, #0]
 8004cee:	6979      	ldr	r1, [r7, #20]
 8004cf0:	430b      	orrs	r3, r1
 8004cf2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	685b      	ldr	r3, [r3, #4]
 8004cfa:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	68da      	ldr	r2, [r3, #12]
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	430a      	orrs	r2, r1
 8004d08:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	699b      	ldr	r3, [r3, #24]
 8004d0e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	6a1b      	ldr	r3, [r3, #32]
 8004d14:	697a      	ldr	r2, [r7, #20]
 8004d16:	4313      	orrs	r3, r2
 8004d18:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	689b      	ldr	r3, [r3, #8]
 8004d20:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	697a      	ldr	r2, [r7, #20]
 8004d2a:	430a      	orrs	r2, r1
 8004d2c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	4a94      	ldr	r2, [pc, #592]	@ (8004f84 <UART_SetConfig+0x2c8>)
 8004d34:	4293      	cmp	r3, r2
 8004d36:	d120      	bne.n	8004d7a <UART_SetConfig+0xbe>
 8004d38:	4b93      	ldr	r3, [pc, #588]	@ (8004f88 <UART_SetConfig+0x2cc>)
 8004d3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004d3e:	f003 0303 	and.w	r3, r3, #3
 8004d42:	2b03      	cmp	r3, #3
 8004d44:	d816      	bhi.n	8004d74 <UART_SetConfig+0xb8>
 8004d46:	a201      	add	r2, pc, #4	@ (adr r2, 8004d4c <UART_SetConfig+0x90>)
 8004d48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d4c:	08004d5d 	.word	0x08004d5d
 8004d50:	08004d69 	.word	0x08004d69
 8004d54:	08004d63 	.word	0x08004d63
 8004d58:	08004d6f 	.word	0x08004d6f
 8004d5c:	2301      	movs	r3, #1
 8004d5e:	77fb      	strb	r3, [r7, #31]
 8004d60:	e150      	b.n	8005004 <UART_SetConfig+0x348>
 8004d62:	2302      	movs	r3, #2
 8004d64:	77fb      	strb	r3, [r7, #31]
 8004d66:	e14d      	b.n	8005004 <UART_SetConfig+0x348>
 8004d68:	2304      	movs	r3, #4
 8004d6a:	77fb      	strb	r3, [r7, #31]
 8004d6c:	e14a      	b.n	8005004 <UART_SetConfig+0x348>
 8004d6e:	2308      	movs	r3, #8
 8004d70:	77fb      	strb	r3, [r7, #31]
 8004d72:	e147      	b.n	8005004 <UART_SetConfig+0x348>
 8004d74:	2310      	movs	r3, #16
 8004d76:	77fb      	strb	r3, [r7, #31]
 8004d78:	e144      	b.n	8005004 <UART_SetConfig+0x348>
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	4a83      	ldr	r2, [pc, #524]	@ (8004f8c <UART_SetConfig+0x2d0>)
 8004d80:	4293      	cmp	r3, r2
 8004d82:	d132      	bne.n	8004dea <UART_SetConfig+0x12e>
 8004d84:	4b80      	ldr	r3, [pc, #512]	@ (8004f88 <UART_SetConfig+0x2cc>)
 8004d86:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004d8a:	f003 030c 	and.w	r3, r3, #12
 8004d8e:	2b0c      	cmp	r3, #12
 8004d90:	d828      	bhi.n	8004de4 <UART_SetConfig+0x128>
 8004d92:	a201      	add	r2, pc, #4	@ (adr r2, 8004d98 <UART_SetConfig+0xdc>)
 8004d94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d98:	08004dcd 	.word	0x08004dcd
 8004d9c:	08004de5 	.word	0x08004de5
 8004da0:	08004de5 	.word	0x08004de5
 8004da4:	08004de5 	.word	0x08004de5
 8004da8:	08004dd9 	.word	0x08004dd9
 8004dac:	08004de5 	.word	0x08004de5
 8004db0:	08004de5 	.word	0x08004de5
 8004db4:	08004de5 	.word	0x08004de5
 8004db8:	08004dd3 	.word	0x08004dd3
 8004dbc:	08004de5 	.word	0x08004de5
 8004dc0:	08004de5 	.word	0x08004de5
 8004dc4:	08004de5 	.word	0x08004de5
 8004dc8:	08004ddf 	.word	0x08004ddf
 8004dcc:	2300      	movs	r3, #0
 8004dce:	77fb      	strb	r3, [r7, #31]
 8004dd0:	e118      	b.n	8005004 <UART_SetConfig+0x348>
 8004dd2:	2302      	movs	r3, #2
 8004dd4:	77fb      	strb	r3, [r7, #31]
 8004dd6:	e115      	b.n	8005004 <UART_SetConfig+0x348>
 8004dd8:	2304      	movs	r3, #4
 8004dda:	77fb      	strb	r3, [r7, #31]
 8004ddc:	e112      	b.n	8005004 <UART_SetConfig+0x348>
 8004dde:	2308      	movs	r3, #8
 8004de0:	77fb      	strb	r3, [r7, #31]
 8004de2:	e10f      	b.n	8005004 <UART_SetConfig+0x348>
 8004de4:	2310      	movs	r3, #16
 8004de6:	77fb      	strb	r3, [r7, #31]
 8004de8:	e10c      	b.n	8005004 <UART_SetConfig+0x348>
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	4a68      	ldr	r2, [pc, #416]	@ (8004f90 <UART_SetConfig+0x2d4>)
 8004df0:	4293      	cmp	r3, r2
 8004df2:	d120      	bne.n	8004e36 <UART_SetConfig+0x17a>
 8004df4:	4b64      	ldr	r3, [pc, #400]	@ (8004f88 <UART_SetConfig+0x2cc>)
 8004df6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004dfa:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8004dfe:	2b30      	cmp	r3, #48	@ 0x30
 8004e00:	d013      	beq.n	8004e2a <UART_SetConfig+0x16e>
 8004e02:	2b30      	cmp	r3, #48	@ 0x30
 8004e04:	d814      	bhi.n	8004e30 <UART_SetConfig+0x174>
 8004e06:	2b20      	cmp	r3, #32
 8004e08:	d009      	beq.n	8004e1e <UART_SetConfig+0x162>
 8004e0a:	2b20      	cmp	r3, #32
 8004e0c:	d810      	bhi.n	8004e30 <UART_SetConfig+0x174>
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d002      	beq.n	8004e18 <UART_SetConfig+0x15c>
 8004e12:	2b10      	cmp	r3, #16
 8004e14:	d006      	beq.n	8004e24 <UART_SetConfig+0x168>
 8004e16:	e00b      	b.n	8004e30 <UART_SetConfig+0x174>
 8004e18:	2300      	movs	r3, #0
 8004e1a:	77fb      	strb	r3, [r7, #31]
 8004e1c:	e0f2      	b.n	8005004 <UART_SetConfig+0x348>
 8004e1e:	2302      	movs	r3, #2
 8004e20:	77fb      	strb	r3, [r7, #31]
 8004e22:	e0ef      	b.n	8005004 <UART_SetConfig+0x348>
 8004e24:	2304      	movs	r3, #4
 8004e26:	77fb      	strb	r3, [r7, #31]
 8004e28:	e0ec      	b.n	8005004 <UART_SetConfig+0x348>
 8004e2a:	2308      	movs	r3, #8
 8004e2c:	77fb      	strb	r3, [r7, #31]
 8004e2e:	e0e9      	b.n	8005004 <UART_SetConfig+0x348>
 8004e30:	2310      	movs	r3, #16
 8004e32:	77fb      	strb	r3, [r7, #31]
 8004e34:	e0e6      	b.n	8005004 <UART_SetConfig+0x348>
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	4a56      	ldr	r2, [pc, #344]	@ (8004f94 <UART_SetConfig+0x2d8>)
 8004e3c:	4293      	cmp	r3, r2
 8004e3e:	d120      	bne.n	8004e82 <UART_SetConfig+0x1c6>
 8004e40:	4b51      	ldr	r3, [pc, #324]	@ (8004f88 <UART_SetConfig+0x2cc>)
 8004e42:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004e46:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8004e4a:	2bc0      	cmp	r3, #192	@ 0xc0
 8004e4c:	d013      	beq.n	8004e76 <UART_SetConfig+0x1ba>
 8004e4e:	2bc0      	cmp	r3, #192	@ 0xc0
 8004e50:	d814      	bhi.n	8004e7c <UART_SetConfig+0x1c0>
 8004e52:	2b80      	cmp	r3, #128	@ 0x80
 8004e54:	d009      	beq.n	8004e6a <UART_SetConfig+0x1ae>
 8004e56:	2b80      	cmp	r3, #128	@ 0x80
 8004e58:	d810      	bhi.n	8004e7c <UART_SetConfig+0x1c0>
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d002      	beq.n	8004e64 <UART_SetConfig+0x1a8>
 8004e5e:	2b40      	cmp	r3, #64	@ 0x40
 8004e60:	d006      	beq.n	8004e70 <UART_SetConfig+0x1b4>
 8004e62:	e00b      	b.n	8004e7c <UART_SetConfig+0x1c0>
 8004e64:	2300      	movs	r3, #0
 8004e66:	77fb      	strb	r3, [r7, #31]
 8004e68:	e0cc      	b.n	8005004 <UART_SetConfig+0x348>
 8004e6a:	2302      	movs	r3, #2
 8004e6c:	77fb      	strb	r3, [r7, #31]
 8004e6e:	e0c9      	b.n	8005004 <UART_SetConfig+0x348>
 8004e70:	2304      	movs	r3, #4
 8004e72:	77fb      	strb	r3, [r7, #31]
 8004e74:	e0c6      	b.n	8005004 <UART_SetConfig+0x348>
 8004e76:	2308      	movs	r3, #8
 8004e78:	77fb      	strb	r3, [r7, #31]
 8004e7a:	e0c3      	b.n	8005004 <UART_SetConfig+0x348>
 8004e7c:	2310      	movs	r3, #16
 8004e7e:	77fb      	strb	r3, [r7, #31]
 8004e80:	e0c0      	b.n	8005004 <UART_SetConfig+0x348>
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	4a44      	ldr	r2, [pc, #272]	@ (8004f98 <UART_SetConfig+0x2dc>)
 8004e88:	4293      	cmp	r3, r2
 8004e8a:	d125      	bne.n	8004ed8 <UART_SetConfig+0x21c>
 8004e8c:	4b3e      	ldr	r3, [pc, #248]	@ (8004f88 <UART_SetConfig+0x2cc>)
 8004e8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004e92:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004e96:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004e9a:	d017      	beq.n	8004ecc <UART_SetConfig+0x210>
 8004e9c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004ea0:	d817      	bhi.n	8004ed2 <UART_SetConfig+0x216>
 8004ea2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004ea6:	d00b      	beq.n	8004ec0 <UART_SetConfig+0x204>
 8004ea8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004eac:	d811      	bhi.n	8004ed2 <UART_SetConfig+0x216>
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d003      	beq.n	8004eba <UART_SetConfig+0x1fe>
 8004eb2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004eb6:	d006      	beq.n	8004ec6 <UART_SetConfig+0x20a>
 8004eb8:	e00b      	b.n	8004ed2 <UART_SetConfig+0x216>
 8004eba:	2300      	movs	r3, #0
 8004ebc:	77fb      	strb	r3, [r7, #31]
 8004ebe:	e0a1      	b.n	8005004 <UART_SetConfig+0x348>
 8004ec0:	2302      	movs	r3, #2
 8004ec2:	77fb      	strb	r3, [r7, #31]
 8004ec4:	e09e      	b.n	8005004 <UART_SetConfig+0x348>
 8004ec6:	2304      	movs	r3, #4
 8004ec8:	77fb      	strb	r3, [r7, #31]
 8004eca:	e09b      	b.n	8005004 <UART_SetConfig+0x348>
 8004ecc:	2308      	movs	r3, #8
 8004ece:	77fb      	strb	r3, [r7, #31]
 8004ed0:	e098      	b.n	8005004 <UART_SetConfig+0x348>
 8004ed2:	2310      	movs	r3, #16
 8004ed4:	77fb      	strb	r3, [r7, #31]
 8004ed6:	e095      	b.n	8005004 <UART_SetConfig+0x348>
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	4a2f      	ldr	r2, [pc, #188]	@ (8004f9c <UART_SetConfig+0x2e0>)
 8004ede:	4293      	cmp	r3, r2
 8004ee0:	d125      	bne.n	8004f2e <UART_SetConfig+0x272>
 8004ee2:	4b29      	ldr	r3, [pc, #164]	@ (8004f88 <UART_SetConfig+0x2cc>)
 8004ee4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004ee8:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8004eec:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004ef0:	d017      	beq.n	8004f22 <UART_SetConfig+0x266>
 8004ef2:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004ef6:	d817      	bhi.n	8004f28 <UART_SetConfig+0x26c>
 8004ef8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004efc:	d00b      	beq.n	8004f16 <UART_SetConfig+0x25a>
 8004efe:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004f02:	d811      	bhi.n	8004f28 <UART_SetConfig+0x26c>
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d003      	beq.n	8004f10 <UART_SetConfig+0x254>
 8004f08:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004f0c:	d006      	beq.n	8004f1c <UART_SetConfig+0x260>
 8004f0e:	e00b      	b.n	8004f28 <UART_SetConfig+0x26c>
 8004f10:	2301      	movs	r3, #1
 8004f12:	77fb      	strb	r3, [r7, #31]
 8004f14:	e076      	b.n	8005004 <UART_SetConfig+0x348>
 8004f16:	2302      	movs	r3, #2
 8004f18:	77fb      	strb	r3, [r7, #31]
 8004f1a:	e073      	b.n	8005004 <UART_SetConfig+0x348>
 8004f1c:	2304      	movs	r3, #4
 8004f1e:	77fb      	strb	r3, [r7, #31]
 8004f20:	e070      	b.n	8005004 <UART_SetConfig+0x348>
 8004f22:	2308      	movs	r3, #8
 8004f24:	77fb      	strb	r3, [r7, #31]
 8004f26:	e06d      	b.n	8005004 <UART_SetConfig+0x348>
 8004f28:	2310      	movs	r3, #16
 8004f2a:	77fb      	strb	r3, [r7, #31]
 8004f2c:	e06a      	b.n	8005004 <UART_SetConfig+0x348>
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	4a1b      	ldr	r2, [pc, #108]	@ (8004fa0 <UART_SetConfig+0x2e4>)
 8004f34:	4293      	cmp	r3, r2
 8004f36:	d138      	bne.n	8004faa <UART_SetConfig+0x2ee>
 8004f38:	4b13      	ldr	r3, [pc, #76]	@ (8004f88 <UART_SetConfig+0x2cc>)
 8004f3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004f3e:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8004f42:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004f46:	d017      	beq.n	8004f78 <UART_SetConfig+0x2bc>
 8004f48:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004f4c:	d82a      	bhi.n	8004fa4 <UART_SetConfig+0x2e8>
 8004f4e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004f52:	d00b      	beq.n	8004f6c <UART_SetConfig+0x2b0>
 8004f54:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004f58:	d824      	bhi.n	8004fa4 <UART_SetConfig+0x2e8>
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d003      	beq.n	8004f66 <UART_SetConfig+0x2aa>
 8004f5e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004f62:	d006      	beq.n	8004f72 <UART_SetConfig+0x2b6>
 8004f64:	e01e      	b.n	8004fa4 <UART_SetConfig+0x2e8>
 8004f66:	2300      	movs	r3, #0
 8004f68:	77fb      	strb	r3, [r7, #31]
 8004f6a:	e04b      	b.n	8005004 <UART_SetConfig+0x348>
 8004f6c:	2302      	movs	r3, #2
 8004f6e:	77fb      	strb	r3, [r7, #31]
 8004f70:	e048      	b.n	8005004 <UART_SetConfig+0x348>
 8004f72:	2304      	movs	r3, #4
 8004f74:	77fb      	strb	r3, [r7, #31]
 8004f76:	e045      	b.n	8005004 <UART_SetConfig+0x348>
 8004f78:	2308      	movs	r3, #8
 8004f7a:	77fb      	strb	r3, [r7, #31]
 8004f7c:	e042      	b.n	8005004 <UART_SetConfig+0x348>
 8004f7e:	bf00      	nop
 8004f80:	efff69f3 	.word	0xefff69f3
 8004f84:	40011000 	.word	0x40011000
 8004f88:	40023800 	.word	0x40023800
 8004f8c:	40004400 	.word	0x40004400
 8004f90:	40004800 	.word	0x40004800
 8004f94:	40004c00 	.word	0x40004c00
 8004f98:	40005000 	.word	0x40005000
 8004f9c:	40011400 	.word	0x40011400
 8004fa0:	40007800 	.word	0x40007800
 8004fa4:	2310      	movs	r3, #16
 8004fa6:	77fb      	strb	r3, [r7, #31]
 8004fa8:	e02c      	b.n	8005004 <UART_SetConfig+0x348>
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	4a72      	ldr	r2, [pc, #456]	@ (8005178 <UART_SetConfig+0x4bc>)
 8004fb0:	4293      	cmp	r3, r2
 8004fb2:	d125      	bne.n	8005000 <UART_SetConfig+0x344>
 8004fb4:	4b71      	ldr	r3, [pc, #452]	@ (800517c <UART_SetConfig+0x4c0>)
 8004fb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004fba:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8004fbe:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8004fc2:	d017      	beq.n	8004ff4 <UART_SetConfig+0x338>
 8004fc4:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8004fc8:	d817      	bhi.n	8004ffa <UART_SetConfig+0x33e>
 8004fca:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004fce:	d00b      	beq.n	8004fe8 <UART_SetConfig+0x32c>
 8004fd0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004fd4:	d811      	bhi.n	8004ffa <UART_SetConfig+0x33e>
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d003      	beq.n	8004fe2 <UART_SetConfig+0x326>
 8004fda:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004fde:	d006      	beq.n	8004fee <UART_SetConfig+0x332>
 8004fe0:	e00b      	b.n	8004ffa <UART_SetConfig+0x33e>
 8004fe2:	2300      	movs	r3, #0
 8004fe4:	77fb      	strb	r3, [r7, #31]
 8004fe6:	e00d      	b.n	8005004 <UART_SetConfig+0x348>
 8004fe8:	2302      	movs	r3, #2
 8004fea:	77fb      	strb	r3, [r7, #31]
 8004fec:	e00a      	b.n	8005004 <UART_SetConfig+0x348>
 8004fee:	2304      	movs	r3, #4
 8004ff0:	77fb      	strb	r3, [r7, #31]
 8004ff2:	e007      	b.n	8005004 <UART_SetConfig+0x348>
 8004ff4:	2308      	movs	r3, #8
 8004ff6:	77fb      	strb	r3, [r7, #31]
 8004ff8:	e004      	b.n	8005004 <UART_SetConfig+0x348>
 8004ffa:	2310      	movs	r3, #16
 8004ffc:	77fb      	strb	r3, [r7, #31]
 8004ffe:	e001      	b.n	8005004 <UART_SetConfig+0x348>
 8005000:	2310      	movs	r3, #16
 8005002:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	69db      	ldr	r3, [r3, #28]
 8005008:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800500c:	d15b      	bne.n	80050c6 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 800500e:	7ffb      	ldrb	r3, [r7, #31]
 8005010:	2b08      	cmp	r3, #8
 8005012:	d828      	bhi.n	8005066 <UART_SetConfig+0x3aa>
 8005014:	a201      	add	r2, pc, #4	@ (adr r2, 800501c <UART_SetConfig+0x360>)
 8005016:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800501a:	bf00      	nop
 800501c:	08005041 	.word	0x08005041
 8005020:	08005049 	.word	0x08005049
 8005024:	08005051 	.word	0x08005051
 8005028:	08005067 	.word	0x08005067
 800502c:	08005057 	.word	0x08005057
 8005030:	08005067 	.word	0x08005067
 8005034:	08005067 	.word	0x08005067
 8005038:	08005067 	.word	0x08005067
 800503c:	0800505f 	.word	0x0800505f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005040:	f7fe fe14 	bl	8003c6c <HAL_RCC_GetPCLK1Freq>
 8005044:	61b8      	str	r0, [r7, #24]
        break;
 8005046:	e013      	b.n	8005070 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005048:	f7fe fe24 	bl	8003c94 <HAL_RCC_GetPCLK2Freq>
 800504c:	61b8      	str	r0, [r7, #24]
        break;
 800504e:	e00f      	b.n	8005070 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005050:	4b4b      	ldr	r3, [pc, #300]	@ (8005180 <UART_SetConfig+0x4c4>)
 8005052:	61bb      	str	r3, [r7, #24]
        break;
 8005054:	e00c      	b.n	8005070 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005056:	f7fe fcf7 	bl	8003a48 <HAL_RCC_GetSysClockFreq>
 800505a:	61b8      	str	r0, [r7, #24]
        break;
 800505c:	e008      	b.n	8005070 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800505e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005062:	61bb      	str	r3, [r7, #24]
        break;
 8005064:	e004      	b.n	8005070 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8005066:	2300      	movs	r3, #0
 8005068:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800506a:	2301      	movs	r3, #1
 800506c:	77bb      	strb	r3, [r7, #30]
        break;
 800506e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005070:	69bb      	ldr	r3, [r7, #24]
 8005072:	2b00      	cmp	r3, #0
 8005074:	d074      	beq.n	8005160 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005076:	69bb      	ldr	r3, [r7, #24]
 8005078:	005a      	lsls	r2, r3, #1
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	685b      	ldr	r3, [r3, #4]
 800507e:	085b      	lsrs	r3, r3, #1
 8005080:	441a      	add	r2, r3
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	685b      	ldr	r3, [r3, #4]
 8005086:	fbb2 f3f3 	udiv	r3, r2, r3
 800508a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800508c:	693b      	ldr	r3, [r7, #16]
 800508e:	2b0f      	cmp	r3, #15
 8005090:	d916      	bls.n	80050c0 <UART_SetConfig+0x404>
 8005092:	693b      	ldr	r3, [r7, #16]
 8005094:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005098:	d212      	bcs.n	80050c0 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800509a:	693b      	ldr	r3, [r7, #16]
 800509c:	b29b      	uxth	r3, r3
 800509e:	f023 030f 	bic.w	r3, r3, #15
 80050a2:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80050a4:	693b      	ldr	r3, [r7, #16]
 80050a6:	085b      	lsrs	r3, r3, #1
 80050a8:	b29b      	uxth	r3, r3
 80050aa:	f003 0307 	and.w	r3, r3, #7
 80050ae:	b29a      	uxth	r2, r3
 80050b0:	89fb      	ldrh	r3, [r7, #14]
 80050b2:	4313      	orrs	r3, r2
 80050b4:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	89fa      	ldrh	r2, [r7, #14]
 80050bc:	60da      	str	r2, [r3, #12]
 80050be:	e04f      	b.n	8005160 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80050c0:	2301      	movs	r3, #1
 80050c2:	77bb      	strb	r3, [r7, #30]
 80050c4:	e04c      	b.n	8005160 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 80050c6:	7ffb      	ldrb	r3, [r7, #31]
 80050c8:	2b08      	cmp	r3, #8
 80050ca:	d828      	bhi.n	800511e <UART_SetConfig+0x462>
 80050cc:	a201      	add	r2, pc, #4	@ (adr r2, 80050d4 <UART_SetConfig+0x418>)
 80050ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050d2:	bf00      	nop
 80050d4:	080050f9 	.word	0x080050f9
 80050d8:	08005101 	.word	0x08005101
 80050dc:	08005109 	.word	0x08005109
 80050e0:	0800511f 	.word	0x0800511f
 80050e4:	0800510f 	.word	0x0800510f
 80050e8:	0800511f 	.word	0x0800511f
 80050ec:	0800511f 	.word	0x0800511f
 80050f0:	0800511f 	.word	0x0800511f
 80050f4:	08005117 	.word	0x08005117
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80050f8:	f7fe fdb8 	bl	8003c6c <HAL_RCC_GetPCLK1Freq>
 80050fc:	61b8      	str	r0, [r7, #24]
        break;
 80050fe:	e013      	b.n	8005128 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005100:	f7fe fdc8 	bl	8003c94 <HAL_RCC_GetPCLK2Freq>
 8005104:	61b8      	str	r0, [r7, #24]
        break;
 8005106:	e00f      	b.n	8005128 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005108:	4b1d      	ldr	r3, [pc, #116]	@ (8005180 <UART_SetConfig+0x4c4>)
 800510a:	61bb      	str	r3, [r7, #24]
        break;
 800510c:	e00c      	b.n	8005128 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800510e:	f7fe fc9b 	bl	8003a48 <HAL_RCC_GetSysClockFreq>
 8005112:	61b8      	str	r0, [r7, #24]
        break;
 8005114:	e008      	b.n	8005128 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005116:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800511a:	61bb      	str	r3, [r7, #24]
        break;
 800511c:	e004      	b.n	8005128 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 800511e:	2300      	movs	r3, #0
 8005120:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005122:	2301      	movs	r3, #1
 8005124:	77bb      	strb	r3, [r7, #30]
        break;
 8005126:	bf00      	nop
    }

    if (pclk != 0U)
 8005128:	69bb      	ldr	r3, [r7, #24]
 800512a:	2b00      	cmp	r3, #0
 800512c:	d018      	beq.n	8005160 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	685b      	ldr	r3, [r3, #4]
 8005132:	085a      	lsrs	r2, r3, #1
 8005134:	69bb      	ldr	r3, [r7, #24]
 8005136:	441a      	add	r2, r3
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	685b      	ldr	r3, [r3, #4]
 800513c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005140:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005142:	693b      	ldr	r3, [r7, #16]
 8005144:	2b0f      	cmp	r3, #15
 8005146:	d909      	bls.n	800515c <UART_SetConfig+0x4a0>
 8005148:	693b      	ldr	r3, [r7, #16]
 800514a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800514e:	d205      	bcs.n	800515c <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005150:	693b      	ldr	r3, [r7, #16]
 8005152:	b29a      	uxth	r2, r3
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	60da      	str	r2, [r3, #12]
 800515a:	e001      	b.n	8005160 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800515c:	2301      	movs	r3, #1
 800515e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	2200      	movs	r2, #0
 8005164:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	2200      	movs	r2, #0
 800516a:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 800516c:	7fbb      	ldrb	r3, [r7, #30]
}
 800516e:	4618      	mov	r0, r3
 8005170:	3720      	adds	r7, #32
 8005172:	46bd      	mov	sp, r7
 8005174:	bd80      	pop	{r7, pc}
 8005176:	bf00      	nop
 8005178:	40007c00 	.word	0x40007c00
 800517c:	40023800 	.word	0x40023800
 8005180:	00f42400 	.word	0x00f42400

08005184 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005184:	b480      	push	{r7}
 8005186:	b083      	sub	sp, #12
 8005188:	af00      	add	r7, sp, #0
 800518a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005190:	f003 0308 	and.w	r3, r3, #8
 8005194:	2b00      	cmp	r3, #0
 8005196:	d00a      	beq.n	80051ae <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	685b      	ldr	r3, [r3, #4]
 800519e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	430a      	orrs	r2, r1
 80051ac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051b2:	f003 0301 	and.w	r3, r3, #1
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d00a      	beq.n	80051d0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	685b      	ldr	r3, [r3, #4]
 80051c0:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	430a      	orrs	r2, r1
 80051ce:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051d4:	f003 0302 	and.w	r3, r3, #2
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d00a      	beq.n	80051f2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	685b      	ldr	r3, [r3, #4]
 80051e2:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	430a      	orrs	r2, r1
 80051f0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051f6:	f003 0304 	and.w	r3, r3, #4
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d00a      	beq.n	8005214 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	685b      	ldr	r3, [r3, #4]
 8005204:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	430a      	orrs	r2, r1
 8005212:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005218:	f003 0310 	and.w	r3, r3, #16
 800521c:	2b00      	cmp	r3, #0
 800521e:	d00a      	beq.n	8005236 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	689b      	ldr	r3, [r3, #8]
 8005226:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	430a      	orrs	r2, r1
 8005234:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800523a:	f003 0320 	and.w	r3, r3, #32
 800523e:	2b00      	cmp	r3, #0
 8005240:	d00a      	beq.n	8005258 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	689b      	ldr	r3, [r3, #8]
 8005248:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	430a      	orrs	r2, r1
 8005256:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800525c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005260:	2b00      	cmp	r3, #0
 8005262:	d01a      	beq.n	800529a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	685b      	ldr	r3, [r3, #4]
 800526a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	430a      	orrs	r2, r1
 8005278:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800527e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005282:	d10a      	bne.n	800529a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	685b      	ldr	r3, [r3, #4]
 800528a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	430a      	orrs	r2, r1
 8005298:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800529e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d00a      	beq.n	80052bc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	685b      	ldr	r3, [r3, #4]
 80052ac:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	430a      	orrs	r2, r1
 80052ba:	605a      	str	r2, [r3, #4]
  }
}
 80052bc:	bf00      	nop
 80052be:	370c      	adds	r7, #12
 80052c0:	46bd      	mov	sp, r7
 80052c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c6:	4770      	bx	lr

080052c8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80052c8:	b580      	push	{r7, lr}
 80052ca:	b098      	sub	sp, #96	@ 0x60
 80052cc:	af02      	add	r7, sp, #8
 80052ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	2200      	movs	r2, #0
 80052d4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80052d8:	f7fc f942 	bl	8001560 <HAL_GetTick>
 80052dc:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	f003 0308 	and.w	r3, r3, #8
 80052e8:	2b08      	cmp	r3, #8
 80052ea:	d12e      	bne.n	800534a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80052ec:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80052f0:	9300      	str	r3, [sp, #0]
 80052f2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80052f4:	2200      	movs	r2, #0
 80052f6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80052fa:	6878      	ldr	r0, [r7, #4]
 80052fc:	f000 f88c 	bl	8005418 <UART_WaitOnFlagUntilTimeout>
 8005300:	4603      	mov	r3, r0
 8005302:	2b00      	cmp	r3, #0
 8005304:	d021      	beq.n	800534a <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800530c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800530e:	e853 3f00 	ldrex	r3, [r3]
 8005312:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005314:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005316:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800531a:	653b      	str	r3, [r7, #80]	@ 0x50
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	461a      	mov	r2, r3
 8005322:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005324:	647b      	str	r3, [r7, #68]	@ 0x44
 8005326:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005328:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800532a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800532c:	e841 2300 	strex	r3, r2, [r1]
 8005330:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005332:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005334:	2b00      	cmp	r3, #0
 8005336:	d1e6      	bne.n	8005306 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	2220      	movs	r2, #32
 800533c:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	2200      	movs	r2, #0
 8005342:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005346:	2303      	movs	r3, #3
 8005348:	e062      	b.n	8005410 <UART_CheckIdleState+0x148>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	f003 0304 	and.w	r3, r3, #4
 8005354:	2b04      	cmp	r3, #4
 8005356:	d149      	bne.n	80053ec <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005358:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800535c:	9300      	str	r3, [sp, #0]
 800535e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005360:	2200      	movs	r2, #0
 8005362:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8005366:	6878      	ldr	r0, [r7, #4]
 8005368:	f000 f856 	bl	8005418 <UART_WaitOnFlagUntilTimeout>
 800536c:	4603      	mov	r3, r0
 800536e:	2b00      	cmp	r3, #0
 8005370:	d03c      	beq.n	80053ec <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005378:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800537a:	e853 3f00 	ldrex	r3, [r3]
 800537e:	623b      	str	r3, [r7, #32]
   return(result);
 8005380:	6a3b      	ldr	r3, [r7, #32]
 8005382:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005386:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	461a      	mov	r2, r3
 800538e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005390:	633b      	str	r3, [r7, #48]	@ 0x30
 8005392:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005394:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005396:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005398:	e841 2300 	strex	r3, r2, [r1]
 800539c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800539e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d1e6      	bne.n	8005372 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	3308      	adds	r3, #8
 80053aa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053ac:	693b      	ldr	r3, [r7, #16]
 80053ae:	e853 3f00 	ldrex	r3, [r3]
 80053b2:	60fb      	str	r3, [r7, #12]
   return(result);
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	f023 0301 	bic.w	r3, r3, #1
 80053ba:	64bb      	str	r3, [r7, #72]	@ 0x48
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	3308      	adds	r3, #8
 80053c2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80053c4:	61fa      	str	r2, [r7, #28]
 80053c6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053c8:	69b9      	ldr	r1, [r7, #24]
 80053ca:	69fa      	ldr	r2, [r7, #28]
 80053cc:	e841 2300 	strex	r3, r2, [r1]
 80053d0:	617b      	str	r3, [r7, #20]
   return(result);
 80053d2:	697b      	ldr	r3, [r7, #20]
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d1e5      	bne.n	80053a4 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	2220      	movs	r2, #32
 80053dc:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	2200      	movs	r2, #0
 80053e4:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80053e8:	2303      	movs	r3, #3
 80053ea:	e011      	b.n	8005410 <UART_CheckIdleState+0x148>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	2220      	movs	r2, #32
 80053f0:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	2220      	movs	r2, #32
 80053f6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	2200      	movs	r2, #0
 80053fe:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	2200      	movs	r2, #0
 8005404:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	2200      	movs	r2, #0
 800540a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800540e:	2300      	movs	r3, #0
}
 8005410:	4618      	mov	r0, r3
 8005412:	3758      	adds	r7, #88	@ 0x58
 8005414:	46bd      	mov	sp, r7
 8005416:	bd80      	pop	{r7, pc}

08005418 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005418:	b580      	push	{r7, lr}
 800541a:	b084      	sub	sp, #16
 800541c:	af00      	add	r7, sp, #0
 800541e:	60f8      	str	r0, [r7, #12]
 8005420:	60b9      	str	r1, [r7, #8]
 8005422:	603b      	str	r3, [r7, #0]
 8005424:	4613      	mov	r3, r2
 8005426:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005428:	e04f      	b.n	80054ca <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800542a:	69bb      	ldr	r3, [r7, #24]
 800542c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005430:	d04b      	beq.n	80054ca <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005432:	f7fc f895 	bl	8001560 <HAL_GetTick>
 8005436:	4602      	mov	r2, r0
 8005438:	683b      	ldr	r3, [r7, #0]
 800543a:	1ad3      	subs	r3, r2, r3
 800543c:	69ba      	ldr	r2, [r7, #24]
 800543e:	429a      	cmp	r2, r3
 8005440:	d302      	bcc.n	8005448 <UART_WaitOnFlagUntilTimeout+0x30>
 8005442:	69bb      	ldr	r3, [r7, #24]
 8005444:	2b00      	cmp	r3, #0
 8005446:	d101      	bne.n	800544c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005448:	2303      	movs	r3, #3
 800544a:	e04e      	b.n	80054ea <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	f003 0304 	and.w	r3, r3, #4
 8005456:	2b00      	cmp	r3, #0
 8005458:	d037      	beq.n	80054ca <UART_WaitOnFlagUntilTimeout+0xb2>
 800545a:	68bb      	ldr	r3, [r7, #8]
 800545c:	2b80      	cmp	r3, #128	@ 0x80
 800545e:	d034      	beq.n	80054ca <UART_WaitOnFlagUntilTimeout+0xb2>
 8005460:	68bb      	ldr	r3, [r7, #8]
 8005462:	2b40      	cmp	r3, #64	@ 0x40
 8005464:	d031      	beq.n	80054ca <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	69db      	ldr	r3, [r3, #28]
 800546c:	f003 0308 	and.w	r3, r3, #8
 8005470:	2b08      	cmp	r3, #8
 8005472:	d110      	bne.n	8005496 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	2208      	movs	r2, #8
 800547a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800547c:	68f8      	ldr	r0, [r7, #12]
 800547e:	f000 f838 	bl	80054f2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	2208      	movs	r2, #8
 8005486:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	2200      	movs	r2, #0
 800548e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8005492:	2301      	movs	r3, #1
 8005494:	e029      	b.n	80054ea <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	69db      	ldr	r3, [r3, #28]
 800549c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80054a0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80054a4:	d111      	bne.n	80054ca <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80054ae:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80054b0:	68f8      	ldr	r0, [r7, #12]
 80054b2:	f000 f81e 	bl	80054f2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	2220      	movs	r2, #32
 80054ba:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	2200      	movs	r2, #0
 80054c2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 80054c6:	2303      	movs	r3, #3
 80054c8:	e00f      	b.n	80054ea <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	69da      	ldr	r2, [r3, #28]
 80054d0:	68bb      	ldr	r3, [r7, #8]
 80054d2:	4013      	ands	r3, r2
 80054d4:	68ba      	ldr	r2, [r7, #8]
 80054d6:	429a      	cmp	r2, r3
 80054d8:	bf0c      	ite	eq
 80054da:	2301      	moveq	r3, #1
 80054dc:	2300      	movne	r3, #0
 80054de:	b2db      	uxtb	r3, r3
 80054e0:	461a      	mov	r2, r3
 80054e2:	79fb      	ldrb	r3, [r7, #7]
 80054e4:	429a      	cmp	r2, r3
 80054e6:	d0a0      	beq.n	800542a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80054e8:	2300      	movs	r3, #0
}
 80054ea:	4618      	mov	r0, r3
 80054ec:	3710      	adds	r7, #16
 80054ee:	46bd      	mov	sp, r7
 80054f0:	bd80      	pop	{r7, pc}

080054f2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80054f2:	b480      	push	{r7}
 80054f4:	b095      	sub	sp, #84	@ 0x54
 80054f6:	af00      	add	r7, sp, #0
 80054f8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005500:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005502:	e853 3f00 	ldrex	r3, [r3]
 8005506:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005508:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800550a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800550e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	461a      	mov	r2, r3
 8005516:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005518:	643b      	str	r3, [r7, #64]	@ 0x40
 800551a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800551c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800551e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005520:	e841 2300 	strex	r3, r2, [r1]
 8005524:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005526:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005528:	2b00      	cmp	r3, #0
 800552a:	d1e6      	bne.n	80054fa <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	3308      	adds	r3, #8
 8005532:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005534:	6a3b      	ldr	r3, [r7, #32]
 8005536:	e853 3f00 	ldrex	r3, [r3]
 800553a:	61fb      	str	r3, [r7, #28]
   return(result);
 800553c:	69fb      	ldr	r3, [r7, #28]
 800553e:	f023 0301 	bic.w	r3, r3, #1
 8005542:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	3308      	adds	r3, #8
 800554a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800554c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800554e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005550:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005552:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005554:	e841 2300 	strex	r3, r2, [r1]
 8005558:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800555a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800555c:	2b00      	cmp	r3, #0
 800555e:	d1e5      	bne.n	800552c <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005564:	2b01      	cmp	r3, #1
 8005566:	d118      	bne.n	800559a <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	e853 3f00 	ldrex	r3, [r3]
 8005574:	60bb      	str	r3, [r7, #8]
   return(result);
 8005576:	68bb      	ldr	r3, [r7, #8]
 8005578:	f023 0310 	bic.w	r3, r3, #16
 800557c:	647b      	str	r3, [r7, #68]	@ 0x44
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	461a      	mov	r2, r3
 8005584:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005586:	61bb      	str	r3, [r7, #24]
 8005588:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800558a:	6979      	ldr	r1, [r7, #20]
 800558c:	69ba      	ldr	r2, [r7, #24]
 800558e:	e841 2300 	strex	r3, r2, [r1]
 8005592:	613b      	str	r3, [r7, #16]
   return(result);
 8005594:	693b      	ldr	r3, [r7, #16]
 8005596:	2b00      	cmp	r3, #0
 8005598:	d1e6      	bne.n	8005568 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	2220      	movs	r2, #32
 800559e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	2200      	movs	r2, #0
 80055a6:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	2200      	movs	r2, #0
 80055ac:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80055ae:	bf00      	nop
 80055b0:	3754      	adds	r7, #84	@ 0x54
 80055b2:	46bd      	mov	sp, r7
 80055b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b8:	4770      	bx	lr
	...

080055bc <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80055bc:	b084      	sub	sp, #16
 80055be:	b580      	push	{r7, lr}
 80055c0:	b084      	sub	sp, #16
 80055c2:	af00      	add	r7, sp, #0
 80055c4:	6078      	str	r0, [r7, #4]
 80055c6:	f107 001c 	add.w	r0, r7, #28
 80055ca:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80055ce:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 80055d2:	2b01      	cmp	r3, #1
 80055d4:	d121      	bne.n	800561a <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80055da:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	68da      	ldr	r2, [r3, #12]
 80055e6:	4b21      	ldr	r3, [pc, #132]	@ (800566c <USB_CoreInit+0xb0>)
 80055e8:	4013      	ands	r3, r2
 80055ea:	687a      	ldr	r2, [r7, #4]
 80055ec:	60d3      	str	r3, [r2, #12]
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	68db      	ldr	r3, [r3, #12]
 80055f2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80055fa:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80055fe:	2b01      	cmp	r3, #1
 8005600:	d105      	bne.n	800560e <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	68db      	ldr	r3, [r3, #12]
 8005606:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800560e:	6878      	ldr	r0, [r7, #4]
 8005610:	f000 fa92 	bl	8005b38 <USB_CoreReset>
 8005614:	4603      	mov	r3, r0
 8005616:	73fb      	strb	r3, [r7, #15]
 8005618:	e010      	b.n	800563c <USB_CoreInit+0x80>
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	68db      	ldr	r3, [r3, #12]
 800561e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005626:	6878      	ldr	r0, [r7, #4]
 8005628:	f000 fa86 	bl	8005b38 <USB_CoreReset>
 800562c:	4603      	mov	r3, r0
 800562e:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005634:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if (cfg.dma_enable == 1U)
 800563c:	7fbb      	ldrb	r3, [r7, #30]
 800563e:	2b01      	cmp	r3, #1
 8005640:	d10b      	bne.n	800565a <USB_CoreInit+0x9e>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	689b      	ldr	r3, [r3, #8]
 8005646:	f043 0206 	orr.w	r2, r3, #6
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	689b      	ldr	r3, [r3, #8]
 8005652:	f043 0220 	orr.w	r2, r3, #32
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800565a:	7bfb      	ldrb	r3, [r7, #15]
}
 800565c:	4618      	mov	r0, r3
 800565e:	3710      	adds	r7, #16
 8005660:	46bd      	mov	sp, r7
 8005662:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005666:	b004      	add	sp, #16
 8005668:	4770      	bx	lr
 800566a:	bf00      	nop
 800566c:	ffbdffbf 	.word	0xffbdffbf

08005670 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005670:	b480      	push	{r7}
 8005672:	b083      	sub	sp, #12
 8005674:	af00      	add	r7, sp, #0
 8005676:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	689b      	ldr	r3, [r3, #8]
 800567c:	f023 0201 	bic.w	r2, r3, #1
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005684:	2300      	movs	r3, #0
}
 8005686:	4618      	mov	r0, r3
 8005688:	370c      	adds	r7, #12
 800568a:	46bd      	mov	sp, r7
 800568c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005690:	4770      	bx	lr

08005692 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005692:	b580      	push	{r7, lr}
 8005694:	b084      	sub	sp, #16
 8005696:	af00      	add	r7, sp, #0
 8005698:	6078      	str	r0, [r7, #4]
 800569a:	460b      	mov	r3, r1
 800569c:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800569e:	2300      	movs	r3, #0
 80056a0:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	68db      	ldr	r3, [r3, #12]
 80056a6:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80056ae:	78fb      	ldrb	r3, [r7, #3]
 80056b0:	2b01      	cmp	r3, #1
 80056b2:	d115      	bne.n	80056e0 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	68db      	ldr	r3, [r3, #12]
 80056b8:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80056c0:	200a      	movs	r0, #10
 80056c2:	f7fb ff59 	bl	8001578 <HAL_Delay>
      ms += 10U;
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	330a      	adds	r3, #10
 80056ca:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80056cc:	6878      	ldr	r0, [r7, #4]
 80056ce:	f000 fa25 	bl	8005b1c <USB_GetMode>
 80056d2:	4603      	mov	r3, r0
 80056d4:	2b01      	cmp	r3, #1
 80056d6:	d01e      	beq.n	8005716 <USB_SetCurrentMode+0x84>
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	2bc7      	cmp	r3, #199	@ 0xc7
 80056dc:	d9f0      	bls.n	80056c0 <USB_SetCurrentMode+0x2e>
 80056de:	e01a      	b.n	8005716 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80056e0:	78fb      	ldrb	r3, [r7, #3]
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d115      	bne.n	8005712 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	68db      	ldr	r3, [r3, #12]
 80056ea:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80056f2:	200a      	movs	r0, #10
 80056f4:	f7fb ff40 	bl	8001578 <HAL_Delay>
      ms += 10U;
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	330a      	adds	r3, #10
 80056fc:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80056fe:	6878      	ldr	r0, [r7, #4]
 8005700:	f000 fa0c 	bl	8005b1c <USB_GetMode>
 8005704:	4603      	mov	r3, r0
 8005706:	2b00      	cmp	r3, #0
 8005708:	d005      	beq.n	8005716 <USB_SetCurrentMode+0x84>
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	2bc7      	cmp	r3, #199	@ 0xc7
 800570e:	d9f0      	bls.n	80056f2 <USB_SetCurrentMode+0x60>
 8005710:	e001      	b.n	8005716 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005712:	2301      	movs	r3, #1
 8005714:	e005      	b.n	8005722 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	2bc8      	cmp	r3, #200	@ 0xc8
 800571a:	d101      	bne.n	8005720 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800571c:	2301      	movs	r3, #1
 800571e:	e000      	b.n	8005722 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005720:	2300      	movs	r3, #0
}
 8005722:	4618      	mov	r0, r3
 8005724:	3710      	adds	r7, #16
 8005726:	46bd      	mov	sp, r7
 8005728:	bd80      	pop	{r7, pc}
	...

0800572c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800572c:	b084      	sub	sp, #16
 800572e:	b580      	push	{r7, lr}
 8005730:	b086      	sub	sp, #24
 8005732:	af00      	add	r7, sp, #0
 8005734:	6078      	str	r0, [r7, #4]
 8005736:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800573a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800573e:	2300      	movs	r3, #0
 8005740:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8005746:	2300      	movs	r3, #0
 8005748:	613b      	str	r3, [r7, #16]
 800574a:	e009      	b.n	8005760 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800574c:	687a      	ldr	r2, [r7, #4]
 800574e:	693b      	ldr	r3, [r7, #16]
 8005750:	3340      	adds	r3, #64	@ 0x40
 8005752:	009b      	lsls	r3, r3, #2
 8005754:	4413      	add	r3, r2
 8005756:	2200      	movs	r2, #0
 8005758:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800575a:	693b      	ldr	r3, [r7, #16]
 800575c:	3301      	adds	r3, #1
 800575e:	613b      	str	r3, [r7, #16]
 8005760:	693b      	ldr	r3, [r7, #16]
 8005762:	2b0e      	cmp	r3, #14
 8005764:	d9f2      	bls.n	800574c <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8005766:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800576a:	2b00      	cmp	r3, #0
 800576c:	d11c      	bne.n	80057a8 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005774:	685b      	ldr	r3, [r3, #4]
 8005776:	68fa      	ldr	r2, [r7, #12]
 8005778:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800577c:	f043 0302 	orr.w	r3, r3, #2
 8005780:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005786:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	601a      	str	r2, [r3, #0]
 80057a6:	e005      	b.n	80057b4 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80057ac:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80057ba:	461a      	mov	r2, r3
 80057bc:	2300      	movs	r3, #0
 80057be:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80057c0:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 80057c4:	2b01      	cmp	r3, #1
 80057c6:	d10d      	bne.n	80057e4 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80057c8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d104      	bne.n	80057da <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80057d0:	2100      	movs	r1, #0
 80057d2:	6878      	ldr	r0, [r7, #4]
 80057d4:	f000 f968 	bl	8005aa8 <USB_SetDevSpeed>
 80057d8:	e008      	b.n	80057ec <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80057da:	2101      	movs	r1, #1
 80057dc:	6878      	ldr	r0, [r7, #4]
 80057de:	f000 f963 	bl	8005aa8 <USB_SetDevSpeed>
 80057e2:	e003      	b.n	80057ec <USB_DevInit+0xc0>
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80057e4:	2103      	movs	r1, #3
 80057e6:	6878      	ldr	r0, [r7, #4]
 80057e8:	f000 f95e 	bl	8005aa8 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80057ec:	2110      	movs	r1, #16
 80057ee:	6878      	ldr	r0, [r7, #4]
 80057f0:	f000 f8fa 	bl	80059e8 <USB_FlushTxFifo>
 80057f4:	4603      	mov	r3, r0
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d001      	beq.n	80057fe <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 80057fa:	2301      	movs	r3, #1
 80057fc:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80057fe:	6878      	ldr	r0, [r7, #4]
 8005800:	f000 f924 	bl	8005a4c <USB_FlushRxFifo>
 8005804:	4603      	mov	r3, r0
 8005806:	2b00      	cmp	r3, #0
 8005808:	d001      	beq.n	800580e <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 800580a:	2301      	movs	r3, #1
 800580c:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005814:	461a      	mov	r2, r3
 8005816:	2300      	movs	r3, #0
 8005818:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005820:	461a      	mov	r2, r3
 8005822:	2300      	movs	r3, #0
 8005824:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800582c:	461a      	mov	r2, r3
 800582e:	2300      	movs	r3, #0
 8005830:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005832:	2300      	movs	r3, #0
 8005834:	613b      	str	r3, [r7, #16]
 8005836:	e043      	b.n	80058c0 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005838:	693b      	ldr	r3, [r7, #16]
 800583a:	015a      	lsls	r2, r3, #5
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	4413      	add	r3, r2
 8005840:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800584a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800584e:	d118      	bne.n	8005882 <USB_DevInit+0x156>
    {
      if (i == 0U)
 8005850:	693b      	ldr	r3, [r7, #16]
 8005852:	2b00      	cmp	r3, #0
 8005854:	d10a      	bne.n	800586c <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005856:	693b      	ldr	r3, [r7, #16]
 8005858:	015a      	lsls	r2, r3, #5
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	4413      	add	r3, r2
 800585e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005862:	461a      	mov	r2, r3
 8005864:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8005868:	6013      	str	r3, [r2, #0]
 800586a:	e013      	b.n	8005894 <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800586c:	693b      	ldr	r3, [r7, #16]
 800586e:	015a      	lsls	r2, r3, #5
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	4413      	add	r3, r2
 8005874:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005878:	461a      	mov	r2, r3
 800587a:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800587e:	6013      	str	r3, [r2, #0]
 8005880:	e008      	b.n	8005894 <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005882:	693b      	ldr	r3, [r7, #16]
 8005884:	015a      	lsls	r2, r3, #5
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	4413      	add	r3, r2
 800588a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800588e:	461a      	mov	r2, r3
 8005890:	2300      	movs	r3, #0
 8005892:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8005894:	693b      	ldr	r3, [r7, #16]
 8005896:	015a      	lsls	r2, r3, #5
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	4413      	add	r3, r2
 800589c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80058a0:	461a      	mov	r2, r3
 80058a2:	2300      	movs	r3, #0
 80058a4:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80058a6:	693b      	ldr	r3, [r7, #16]
 80058a8:	015a      	lsls	r2, r3, #5
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	4413      	add	r3, r2
 80058ae:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80058b2:	461a      	mov	r2, r3
 80058b4:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80058b8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80058ba:	693b      	ldr	r3, [r7, #16]
 80058bc:	3301      	adds	r3, #1
 80058be:	613b      	str	r3, [r7, #16]
 80058c0:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80058c4:	461a      	mov	r2, r3
 80058c6:	693b      	ldr	r3, [r7, #16]
 80058c8:	4293      	cmp	r3, r2
 80058ca:	d3b5      	bcc.n	8005838 <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80058cc:	2300      	movs	r3, #0
 80058ce:	613b      	str	r3, [r7, #16]
 80058d0:	e043      	b.n	800595a <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80058d2:	693b      	ldr	r3, [r7, #16]
 80058d4:	015a      	lsls	r2, r3, #5
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	4413      	add	r3, r2
 80058da:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80058e4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80058e8:	d118      	bne.n	800591c <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 80058ea:	693b      	ldr	r3, [r7, #16]
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d10a      	bne.n	8005906 <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80058f0:	693b      	ldr	r3, [r7, #16]
 80058f2:	015a      	lsls	r2, r3, #5
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	4413      	add	r3, r2
 80058f8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80058fc:	461a      	mov	r2, r3
 80058fe:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8005902:	6013      	str	r3, [r2, #0]
 8005904:	e013      	b.n	800592e <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005906:	693b      	ldr	r3, [r7, #16]
 8005908:	015a      	lsls	r2, r3, #5
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	4413      	add	r3, r2
 800590e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005912:	461a      	mov	r2, r3
 8005914:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8005918:	6013      	str	r3, [r2, #0]
 800591a:	e008      	b.n	800592e <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800591c:	693b      	ldr	r3, [r7, #16]
 800591e:	015a      	lsls	r2, r3, #5
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	4413      	add	r3, r2
 8005924:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005928:	461a      	mov	r2, r3
 800592a:	2300      	movs	r3, #0
 800592c:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800592e:	693b      	ldr	r3, [r7, #16]
 8005930:	015a      	lsls	r2, r3, #5
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	4413      	add	r3, r2
 8005936:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800593a:	461a      	mov	r2, r3
 800593c:	2300      	movs	r3, #0
 800593e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8005940:	693b      	ldr	r3, [r7, #16]
 8005942:	015a      	lsls	r2, r3, #5
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	4413      	add	r3, r2
 8005948:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800594c:	461a      	mov	r2, r3
 800594e:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8005952:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005954:	693b      	ldr	r3, [r7, #16]
 8005956:	3301      	adds	r3, #1
 8005958:	613b      	str	r3, [r7, #16]
 800595a:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800595e:	461a      	mov	r2, r3
 8005960:	693b      	ldr	r3, [r7, #16]
 8005962:	4293      	cmp	r3, r2
 8005964:	d3b5      	bcc.n	80058d2 <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800596c:	691b      	ldr	r3, [r3, #16]
 800596e:	68fa      	ldr	r2, [r7, #12]
 8005970:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005974:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005978:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	2200      	movs	r2, #0
 800597e:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8005986:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005988:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800598c:	2b00      	cmp	r3, #0
 800598e:	d105      	bne.n	800599c <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	699b      	ldr	r3, [r3, #24]
 8005994:	f043 0210 	orr.w	r2, r3, #16
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	699a      	ldr	r2, [r3, #24]
 80059a0:	4b0f      	ldr	r3, [pc, #60]	@ (80059e0 <USB_DevInit+0x2b4>)
 80059a2:	4313      	orrs	r3, r2
 80059a4:	687a      	ldr	r2, [r7, #4]
 80059a6:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80059a8:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d005      	beq.n	80059bc <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	699b      	ldr	r3, [r3, #24]
 80059b4:	f043 0208 	orr.w	r2, r3, #8
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80059bc:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80059c0:	2b01      	cmp	r3, #1
 80059c2:	d105      	bne.n	80059d0 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	699a      	ldr	r2, [r3, #24]
 80059c8:	4b06      	ldr	r3, [pc, #24]	@ (80059e4 <USB_DevInit+0x2b8>)
 80059ca:	4313      	orrs	r3, r2
 80059cc:	687a      	ldr	r2, [r7, #4]
 80059ce:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80059d0:	7dfb      	ldrb	r3, [r7, #23]
}
 80059d2:	4618      	mov	r0, r3
 80059d4:	3718      	adds	r7, #24
 80059d6:	46bd      	mov	sp, r7
 80059d8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80059dc:	b004      	add	sp, #16
 80059de:	4770      	bx	lr
 80059e0:	803c3800 	.word	0x803c3800
 80059e4:	40000004 	.word	0x40000004

080059e8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80059e8:	b480      	push	{r7}
 80059ea:	b085      	sub	sp, #20
 80059ec:	af00      	add	r7, sp, #0
 80059ee:	6078      	str	r0, [r7, #4]
 80059f0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80059f2:	2300      	movs	r3, #0
 80059f4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	3301      	adds	r3, #1
 80059fa:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005a02:	d901      	bls.n	8005a08 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005a04:	2303      	movs	r3, #3
 8005a06:	e01b      	b.n	8005a40 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	691b      	ldr	r3, [r3, #16]
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	daf2      	bge.n	80059f6 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005a10:	2300      	movs	r3, #0
 8005a12:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005a14:	683b      	ldr	r3, [r7, #0]
 8005a16:	019b      	lsls	r3, r3, #6
 8005a18:	f043 0220 	orr.w	r2, r3, #32
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	3301      	adds	r3, #1
 8005a24:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005a2c:	d901      	bls.n	8005a32 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8005a2e:	2303      	movs	r3, #3
 8005a30:	e006      	b.n	8005a40 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	691b      	ldr	r3, [r3, #16]
 8005a36:	f003 0320 	and.w	r3, r3, #32
 8005a3a:	2b20      	cmp	r3, #32
 8005a3c:	d0f0      	beq.n	8005a20 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8005a3e:	2300      	movs	r3, #0
}
 8005a40:	4618      	mov	r0, r3
 8005a42:	3714      	adds	r7, #20
 8005a44:	46bd      	mov	sp, r7
 8005a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a4a:	4770      	bx	lr

08005a4c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005a4c:	b480      	push	{r7}
 8005a4e:	b085      	sub	sp, #20
 8005a50:	af00      	add	r7, sp, #0
 8005a52:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005a54:	2300      	movs	r3, #0
 8005a56:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	3301      	adds	r3, #1
 8005a5c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005a64:	d901      	bls.n	8005a6a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8005a66:	2303      	movs	r3, #3
 8005a68:	e018      	b.n	8005a9c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	691b      	ldr	r3, [r3, #16]
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	daf2      	bge.n	8005a58 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8005a72:	2300      	movs	r3, #0
 8005a74:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	2210      	movs	r2, #16
 8005a7a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	3301      	adds	r3, #1
 8005a80:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005a88:	d901      	bls.n	8005a8e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8005a8a:	2303      	movs	r3, #3
 8005a8c:	e006      	b.n	8005a9c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	691b      	ldr	r3, [r3, #16]
 8005a92:	f003 0310 	and.w	r3, r3, #16
 8005a96:	2b10      	cmp	r3, #16
 8005a98:	d0f0      	beq.n	8005a7c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8005a9a:	2300      	movs	r3, #0
}
 8005a9c:	4618      	mov	r0, r3
 8005a9e:	3714      	adds	r7, #20
 8005aa0:	46bd      	mov	sp, r7
 8005aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa6:	4770      	bx	lr

08005aa8 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005aa8:	b480      	push	{r7}
 8005aaa:	b085      	sub	sp, #20
 8005aac:	af00      	add	r7, sp, #0
 8005aae:	6078      	str	r0, [r7, #4]
 8005ab0:	460b      	mov	r3, r1
 8005ab2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005abe:	681a      	ldr	r2, [r3, #0]
 8005ac0:	78fb      	ldrb	r3, [r7, #3]
 8005ac2:	68f9      	ldr	r1, [r7, #12]
 8005ac4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005ac8:	4313      	orrs	r3, r2
 8005aca:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005acc:	2300      	movs	r3, #0
}
 8005ace:	4618      	mov	r0, r3
 8005ad0:	3714      	adds	r7, #20
 8005ad2:	46bd      	mov	sp, r7
 8005ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ad8:	4770      	bx	lr

08005ada <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8005ada:	b480      	push	{r7}
 8005adc:	b085      	sub	sp, #20
 8005ade:	af00      	add	r7, sp, #0
 8005ae0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	68fa      	ldr	r2, [r7, #12]
 8005af0:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8005af4:	f023 0303 	bic.w	r3, r3, #3
 8005af8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005b00:	685b      	ldr	r3, [r3, #4]
 8005b02:	68fa      	ldr	r2, [r7, #12]
 8005b04:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005b08:	f043 0302 	orr.w	r3, r3, #2
 8005b0c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005b0e:	2300      	movs	r3, #0
}
 8005b10:	4618      	mov	r0, r3
 8005b12:	3714      	adds	r7, #20
 8005b14:	46bd      	mov	sp, r7
 8005b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b1a:	4770      	bx	lr

08005b1c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8005b1c:	b480      	push	{r7}
 8005b1e:	b083      	sub	sp, #12
 8005b20:	af00      	add	r7, sp, #0
 8005b22:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	695b      	ldr	r3, [r3, #20]
 8005b28:	f003 0301 	and.w	r3, r3, #1
}
 8005b2c:	4618      	mov	r0, r3
 8005b2e:	370c      	adds	r7, #12
 8005b30:	46bd      	mov	sp, r7
 8005b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b36:	4770      	bx	lr

08005b38 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005b38:	b480      	push	{r7}
 8005b3a:	b085      	sub	sp, #20
 8005b3c:	af00      	add	r7, sp, #0
 8005b3e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005b40:	2300      	movs	r3, #0
 8005b42:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	3301      	adds	r3, #1
 8005b48:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005b50:	d901      	bls.n	8005b56 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005b52:	2303      	movs	r3, #3
 8005b54:	e022      	b.n	8005b9c <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	691b      	ldr	r3, [r3, #16]
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	daf2      	bge.n	8005b44 <USB_CoreReset+0xc>

  count = 10U;
 8005b5e:	230a      	movs	r3, #10
 8005b60:	60fb      	str	r3, [r7, #12]

  /* few cycles before setting core reset */
  while (count > 0U)
 8005b62:	e002      	b.n	8005b6a <USB_CoreReset+0x32>
  {
    count--;
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	3b01      	subs	r3, #1
 8005b68:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d1f9      	bne.n	8005b64 <USB_CoreReset+0x2c>
  }

  /* Core Soft Reset */
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	691b      	ldr	r3, [r3, #16]
 8005b74:	f043 0201 	orr.w	r2, r3, #1
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	3301      	adds	r3, #1
 8005b80:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005b88:	d901      	bls.n	8005b8e <USB_CoreReset+0x56>
    {
      return HAL_TIMEOUT;
 8005b8a:	2303      	movs	r3, #3
 8005b8c:	e006      	b.n	8005b9c <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	691b      	ldr	r3, [r3, #16]
 8005b92:	f003 0301 	and.w	r3, r3, #1
 8005b96:	2b01      	cmp	r3, #1
 8005b98:	d0f0      	beq.n	8005b7c <USB_CoreReset+0x44>

  return HAL_OK;
 8005b9a:	2300      	movs	r3, #0
}
 8005b9c:	4618      	mov	r0, r3
 8005b9e:	3714      	adds	r7, #20
 8005ba0:	46bd      	mov	sp, r7
 8005ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ba6:	4770      	bx	lr

08005ba8 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8005ba8:	b480      	push	{r7}
 8005baa:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 8005bac:	bf00      	nop
 8005bae:	46bd      	mov	sp, r7
 8005bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bb4:	4770      	bx	lr
	...

08005bb8 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8005bb8:	b480      	push	{r7}
 8005bba:	b085      	sub	sp, #20
 8005bbc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005bbe:	f3ef 8305 	mrs	r3, IPSR
 8005bc2:	60bb      	str	r3, [r7, #8]
  return(result);
 8005bc4:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d10f      	bne.n	8005bea <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005bca:	f3ef 8310 	mrs	r3, PRIMASK
 8005bce:	607b      	str	r3, [r7, #4]
  return(result);
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d105      	bne.n	8005be2 <osKernelInitialize+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005bd6:	f3ef 8311 	mrs	r3, BASEPRI
 8005bda:	603b      	str	r3, [r7, #0]
  return(result);
 8005bdc:	683b      	ldr	r3, [r7, #0]
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d007      	beq.n	8005bf2 <osKernelInitialize+0x3a>
 8005be2:	4b0e      	ldr	r3, [pc, #56]	@ (8005c1c <osKernelInitialize+0x64>)
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	2b02      	cmp	r3, #2
 8005be8:	d103      	bne.n	8005bf2 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8005bea:	f06f 0305 	mvn.w	r3, #5
 8005bee:	60fb      	str	r3, [r7, #12]
 8005bf0:	e00c      	b.n	8005c0c <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8005bf2:	4b0a      	ldr	r3, [pc, #40]	@ (8005c1c <osKernelInitialize+0x64>)
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d105      	bne.n	8005c06 <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8005bfa:	4b08      	ldr	r3, [pc, #32]	@ (8005c1c <osKernelInitialize+0x64>)
 8005bfc:	2201      	movs	r2, #1
 8005bfe:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8005c00:	2300      	movs	r3, #0
 8005c02:	60fb      	str	r3, [r7, #12]
 8005c04:	e002      	b.n	8005c0c <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8005c06:	f04f 33ff 	mov.w	r3, #4294967295
 8005c0a:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8005c0c:	68fb      	ldr	r3, [r7, #12]
}
 8005c0e:	4618      	mov	r0, r3
 8005c10:	3714      	adds	r7, #20
 8005c12:	46bd      	mov	sp, r7
 8005c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c18:	4770      	bx	lr
 8005c1a:	bf00      	nop
 8005c1c:	20000934 	.word	0x20000934

08005c20 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8005c20:	b580      	push	{r7, lr}
 8005c22:	b084      	sub	sp, #16
 8005c24:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005c26:	f3ef 8305 	mrs	r3, IPSR
 8005c2a:	60bb      	str	r3, [r7, #8]
  return(result);
 8005c2c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d10f      	bne.n	8005c52 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005c32:	f3ef 8310 	mrs	r3, PRIMASK
 8005c36:	607b      	str	r3, [r7, #4]
  return(result);
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d105      	bne.n	8005c4a <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005c3e:	f3ef 8311 	mrs	r3, BASEPRI
 8005c42:	603b      	str	r3, [r7, #0]
  return(result);
 8005c44:	683b      	ldr	r3, [r7, #0]
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d007      	beq.n	8005c5a <osKernelStart+0x3a>
 8005c4a:	4b0f      	ldr	r3, [pc, #60]	@ (8005c88 <osKernelStart+0x68>)
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	2b02      	cmp	r3, #2
 8005c50:	d103      	bne.n	8005c5a <osKernelStart+0x3a>
    stat = osErrorISR;
 8005c52:	f06f 0305 	mvn.w	r3, #5
 8005c56:	60fb      	str	r3, [r7, #12]
 8005c58:	e010      	b.n	8005c7c <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 8005c5a:	4b0b      	ldr	r3, [pc, #44]	@ (8005c88 <osKernelStart+0x68>)
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	2b01      	cmp	r3, #1
 8005c60:	d109      	bne.n	8005c76 <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8005c62:	f7ff ffa1 	bl	8005ba8 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8005c66:	4b08      	ldr	r3, [pc, #32]	@ (8005c88 <osKernelStart+0x68>)
 8005c68:	2202      	movs	r2, #2
 8005c6a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8005c6c:	f001 ff02 	bl	8007a74 <vTaskStartScheduler>
      stat = osOK;
 8005c70:	2300      	movs	r3, #0
 8005c72:	60fb      	str	r3, [r7, #12]
 8005c74:	e002      	b.n	8005c7c <osKernelStart+0x5c>
    } else {
      stat = osError;
 8005c76:	f04f 33ff 	mov.w	r3, #4294967295
 8005c7a:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8005c7c:	68fb      	ldr	r3, [r7, #12]
}
 8005c7e:	4618      	mov	r0, r3
 8005c80:	3710      	adds	r7, #16
 8005c82:	46bd      	mov	sp, r7
 8005c84:	bd80      	pop	{r7, pc}
 8005c86:	bf00      	nop
 8005c88:	20000934 	.word	0x20000934

08005c8c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8005c8c:	b580      	push	{r7, lr}
 8005c8e:	b090      	sub	sp, #64	@ 0x40
 8005c90:	af04      	add	r7, sp, #16
 8005c92:	60f8      	str	r0, [r7, #12]
 8005c94:	60b9      	str	r1, [r7, #8]
 8005c96:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8005c98:	2300      	movs	r3, #0
 8005c9a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005c9c:	f3ef 8305 	mrs	r3, IPSR
 8005ca0:	61fb      	str	r3, [r7, #28]
  return(result);
 8005ca2:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	f040 808f 	bne.w	8005dc8 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005caa:	f3ef 8310 	mrs	r3, PRIMASK
 8005cae:	61bb      	str	r3, [r7, #24]
  return(result);
 8005cb0:	69bb      	ldr	r3, [r7, #24]
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d105      	bne.n	8005cc2 <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005cb6:	f3ef 8311 	mrs	r3, BASEPRI
 8005cba:	617b      	str	r3, [r7, #20]
  return(result);
 8005cbc:	697b      	ldr	r3, [r7, #20]
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d003      	beq.n	8005cca <osThreadNew+0x3e>
 8005cc2:	4b44      	ldr	r3, [pc, #272]	@ (8005dd4 <osThreadNew+0x148>)
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	2b02      	cmp	r3, #2
 8005cc8:	d07e      	beq.n	8005dc8 <osThreadNew+0x13c>
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d07b      	beq.n	8005dc8 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 8005cd0:	2380      	movs	r3, #128	@ 0x80
 8005cd2:	62bb      	str	r3, [r7, #40]	@ 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 8005cd4:	2318      	movs	r3, #24
 8005cd6:	627b      	str	r3, [r7, #36]	@ 0x24

    name = NULL;
 8005cd8:	2300      	movs	r3, #0
 8005cda:	62fb      	str	r3, [r7, #44]	@ 0x2c
    mem  = -1;
 8005cdc:	f04f 33ff 	mov.w	r3, #4294967295
 8005ce0:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d045      	beq.n	8005d74 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d002      	beq.n	8005cf6 <osThreadNew+0x6a>
        name = attr->name;
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if (attr->priority != osPriorityNone) {
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	699b      	ldr	r3, [r3, #24]
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d002      	beq.n	8005d04 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	699b      	ldr	r3, [r3, #24]
 8005d02:	627b      	str	r3, [r7, #36]	@ 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8005d04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d008      	beq.n	8005d1c <osThreadNew+0x90>
 8005d0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d0c:	2b38      	cmp	r3, #56	@ 0x38
 8005d0e:	d805      	bhi.n	8005d1c <osThreadNew+0x90>
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	685b      	ldr	r3, [r3, #4]
 8005d14:	f003 0301 	and.w	r3, r3, #1
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d001      	beq.n	8005d20 <osThreadNew+0x94>
        return (NULL);
 8005d1c:	2300      	movs	r3, #0
 8005d1e:	e054      	b.n	8005dca <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	695b      	ldr	r3, [r3, #20]
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d003      	beq.n	8005d30 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	695b      	ldr	r3, [r3, #20]
 8005d2c:	089b      	lsrs	r3, r3, #2
 8005d2e:	62bb      	str	r3, [r7, #40]	@ 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	689b      	ldr	r3, [r3, #8]
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d00e      	beq.n	8005d56 <osThreadNew+0xca>
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	68db      	ldr	r3, [r3, #12]
 8005d3c:	2ba7      	cmp	r3, #167	@ 0xa7
 8005d3e:	d90a      	bls.n	8005d56 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d006      	beq.n	8005d56 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	695b      	ldr	r3, [r3, #20]
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d002      	beq.n	8005d56 <osThreadNew+0xca>
        mem = 1;
 8005d50:	2301      	movs	r3, #1
 8005d52:	623b      	str	r3, [r7, #32]
 8005d54:	e010      	b.n	8005d78 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	689b      	ldr	r3, [r3, #8]
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d10c      	bne.n	8005d78 <osThreadNew+0xec>
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	68db      	ldr	r3, [r3, #12]
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d108      	bne.n	8005d78 <osThreadNew+0xec>
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	691b      	ldr	r3, [r3, #16]
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d104      	bne.n	8005d78 <osThreadNew+0xec>
          mem = 0;
 8005d6e:	2300      	movs	r3, #0
 8005d70:	623b      	str	r3, [r7, #32]
 8005d72:	e001      	b.n	8005d78 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 8005d74:	2300      	movs	r3, #0
 8005d76:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8005d78:	6a3b      	ldr	r3, [r7, #32]
 8005d7a:	2b01      	cmp	r3, #1
 8005d7c:	d110      	bne.n	8005da0 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8005d82:	687a      	ldr	r2, [r7, #4]
 8005d84:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005d86:	9202      	str	r2, [sp, #8]
 8005d88:	9301      	str	r3, [sp, #4]
 8005d8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d8c:	9300      	str	r3, [sp, #0]
 8005d8e:	68bb      	ldr	r3, [r7, #8]
 8005d90:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005d92:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005d94:	68f8      	ldr	r0, [r7, #12]
 8005d96:	f001 fc6f 	bl	8007678 <xTaskCreateStatic>
 8005d9a:	4603      	mov	r3, r0
 8005d9c:	613b      	str	r3, [r7, #16]
 8005d9e:	e013      	b.n	8005dc8 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 8005da0:	6a3b      	ldr	r3, [r7, #32]
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d110      	bne.n	8005dc8 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8005da6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005da8:	b29a      	uxth	r2, r3
 8005daa:	f107 0310 	add.w	r3, r7, #16
 8005dae:	9301      	str	r3, [sp, #4]
 8005db0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005db2:	9300      	str	r3, [sp, #0]
 8005db4:	68bb      	ldr	r3, [r7, #8]
 8005db6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005db8:	68f8      	ldr	r0, [r7, #12]
 8005dba:	f001 fcc3 	bl	8007744 <xTaskCreate>
 8005dbe:	4603      	mov	r3, r0
 8005dc0:	2b01      	cmp	r3, #1
 8005dc2:	d001      	beq.n	8005dc8 <osThreadNew+0x13c>
          hTask = NULL;
 8005dc4:	2300      	movs	r3, #0
 8005dc6:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8005dc8:	693b      	ldr	r3, [r7, #16]
}
 8005dca:	4618      	mov	r0, r3
 8005dcc:	3730      	adds	r7, #48	@ 0x30
 8005dce:	46bd      	mov	sp, r7
 8005dd0:	bd80      	pop	{r7, pc}
 8005dd2:	bf00      	nop
 8005dd4:	20000934 	.word	0x20000934

08005dd8 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8005dd8:	b580      	push	{r7, lr}
 8005dda:	b086      	sub	sp, #24
 8005ddc:	af00      	add	r7, sp, #0
 8005dde:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005de0:	f3ef 8305 	mrs	r3, IPSR
 8005de4:	613b      	str	r3, [r7, #16]
  return(result);
 8005de6:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d10f      	bne.n	8005e0c <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005dec:	f3ef 8310 	mrs	r3, PRIMASK
 8005df0:	60fb      	str	r3, [r7, #12]
  return(result);
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d105      	bne.n	8005e04 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005df8:	f3ef 8311 	mrs	r3, BASEPRI
 8005dfc:	60bb      	str	r3, [r7, #8]
  return(result);
 8005dfe:	68bb      	ldr	r3, [r7, #8]
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d007      	beq.n	8005e14 <osDelay+0x3c>
 8005e04:	4b0a      	ldr	r3, [pc, #40]	@ (8005e30 <osDelay+0x58>)
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	2b02      	cmp	r3, #2
 8005e0a:	d103      	bne.n	8005e14 <osDelay+0x3c>
    stat = osErrorISR;
 8005e0c:	f06f 0305 	mvn.w	r3, #5
 8005e10:	617b      	str	r3, [r7, #20]
 8005e12:	e007      	b.n	8005e24 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8005e14:	2300      	movs	r3, #0
 8005e16:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d002      	beq.n	8005e24 <osDelay+0x4c>
      vTaskDelay(ticks);
 8005e1e:	6878      	ldr	r0, [r7, #4]
 8005e20:	f001 fdf0 	bl	8007a04 <vTaskDelay>
    }
  }

  return (stat);
 8005e24:	697b      	ldr	r3, [r7, #20]
}
 8005e26:	4618      	mov	r0, r3
 8005e28:	3718      	adds	r7, #24
 8005e2a:	46bd      	mov	sp, r7
 8005e2c:	bd80      	pop	{r7, pc}
 8005e2e:	bf00      	nop
 8005e30:	20000934 	.word	0x20000934

08005e34 <osSemaphoreNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8005e34:	b580      	push	{r7, lr}
 8005e36:	b08c      	sub	sp, #48	@ 0x30
 8005e38:	af02      	add	r7, sp, #8
 8005e3a:	60f8      	str	r0, [r7, #12]
 8005e3c:	60b9      	str	r1, [r7, #8]
 8005e3e:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8005e40:	2300      	movs	r3, #0
 8005e42:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005e44:	f3ef 8305 	mrs	r3, IPSR
 8005e48:	61bb      	str	r3, [r7, #24]
  return(result);
 8005e4a:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	f040 8086 	bne.w	8005f5e <osSemaphoreNew+0x12a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005e52:	f3ef 8310 	mrs	r3, PRIMASK
 8005e56:	617b      	str	r3, [r7, #20]
  return(result);
 8005e58:	697b      	ldr	r3, [r7, #20]
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d105      	bne.n	8005e6a <osSemaphoreNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005e5e:	f3ef 8311 	mrs	r3, BASEPRI
 8005e62:	613b      	str	r3, [r7, #16]
  return(result);
 8005e64:	693b      	ldr	r3, [r7, #16]
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d003      	beq.n	8005e72 <osSemaphoreNew+0x3e>
 8005e6a:	4b3f      	ldr	r3, [pc, #252]	@ (8005f68 <osSemaphoreNew+0x134>)
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	2b02      	cmp	r3, #2
 8005e70:	d075      	beq.n	8005f5e <osSemaphoreNew+0x12a>
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d072      	beq.n	8005f5e <osSemaphoreNew+0x12a>
 8005e78:	68ba      	ldr	r2, [r7, #8]
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	429a      	cmp	r2, r3
 8005e7e:	d86e      	bhi.n	8005f5e <osSemaphoreNew+0x12a>
    mem = -1;
 8005e80:	f04f 33ff 	mov.w	r3, #4294967295
 8005e84:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d015      	beq.n	8005eb8 <osSemaphoreNew+0x84>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	689b      	ldr	r3, [r3, #8]
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d006      	beq.n	8005ea2 <osSemaphoreNew+0x6e>
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	68db      	ldr	r3, [r3, #12]
 8005e98:	2b4f      	cmp	r3, #79	@ 0x4f
 8005e9a:	d902      	bls.n	8005ea2 <osSemaphoreNew+0x6e>
        mem = 1;
 8005e9c:	2301      	movs	r3, #1
 8005e9e:	623b      	str	r3, [r7, #32]
 8005ea0:	e00c      	b.n	8005ebc <osSemaphoreNew+0x88>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	689b      	ldr	r3, [r3, #8]
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d108      	bne.n	8005ebc <osSemaphoreNew+0x88>
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	68db      	ldr	r3, [r3, #12]
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d104      	bne.n	8005ebc <osSemaphoreNew+0x88>
          mem = 0;
 8005eb2:	2300      	movs	r3, #0
 8005eb4:	623b      	str	r3, [r7, #32]
 8005eb6:	e001      	b.n	8005ebc <osSemaphoreNew+0x88>
        }
      }
    }
    else {
      mem = 0;
 8005eb8:	2300      	movs	r3, #0
 8005eba:	623b      	str	r3, [r7, #32]
    }

    if (mem != -1) {
 8005ebc:	6a3b      	ldr	r3, [r7, #32]
 8005ebe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ec2:	d04c      	beq.n	8005f5e <osSemaphoreNew+0x12a>
      if (max_count == 1U) {
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	2b01      	cmp	r3, #1
 8005ec8:	d128      	bne.n	8005f1c <osSemaphoreNew+0xe8>
        if (mem == 1) {
 8005eca:	6a3b      	ldr	r3, [r7, #32]
 8005ecc:	2b01      	cmp	r3, #1
 8005ece:	d10a      	bne.n	8005ee6 <osSemaphoreNew+0xb2>
          hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	689b      	ldr	r3, [r3, #8]
 8005ed4:	2203      	movs	r2, #3
 8005ed6:	9200      	str	r2, [sp, #0]
 8005ed8:	2200      	movs	r2, #0
 8005eda:	2100      	movs	r1, #0
 8005edc:	2001      	movs	r0, #1
 8005ede:	f000 fbc3 	bl	8006668 <xQueueGenericCreateStatic>
 8005ee2:	6278      	str	r0, [r7, #36]	@ 0x24
 8005ee4:	e005      	b.n	8005ef2 <osSemaphoreNew+0xbe>
        }
        else {
          hSemaphore = xSemaphoreCreateBinary();
 8005ee6:	2203      	movs	r2, #3
 8005ee8:	2100      	movs	r1, #0
 8005eea:	2001      	movs	r0, #1
 8005eec:	f000 fc43 	bl	8006776 <xQueueGenericCreate>
 8005ef0:	6278      	str	r0, [r7, #36]	@ 0x24
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8005ef2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d022      	beq.n	8005f3e <osSemaphoreNew+0x10a>
 8005ef8:	68bb      	ldr	r3, [r7, #8]
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d01f      	beq.n	8005f3e <osSemaphoreNew+0x10a>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8005efe:	2300      	movs	r3, #0
 8005f00:	2200      	movs	r2, #0
 8005f02:	2100      	movs	r1, #0
 8005f04:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8005f06:	f000 fd13 	bl	8006930 <xQueueGenericSend>
 8005f0a:	4603      	mov	r3, r0
 8005f0c:	2b01      	cmp	r3, #1
 8005f0e:	d016      	beq.n	8005f3e <osSemaphoreNew+0x10a>
            vSemaphoreDelete (hSemaphore);
 8005f10:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8005f12:	f001 f9db 	bl	80072cc <vQueueDelete>
            hSemaphore = NULL;
 8005f16:	2300      	movs	r3, #0
 8005f18:	627b      	str	r3, [r7, #36]	@ 0x24
 8005f1a:	e010      	b.n	8005f3e <osSemaphoreNew+0x10a>
          }
        }
      }
      else {
        if (mem == 1) {
 8005f1c:	6a3b      	ldr	r3, [r7, #32]
 8005f1e:	2b01      	cmp	r3, #1
 8005f20:	d108      	bne.n	8005f34 <osSemaphoreNew+0x100>
          hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	689b      	ldr	r3, [r3, #8]
 8005f26:	461a      	mov	r2, r3
 8005f28:	68b9      	ldr	r1, [r7, #8]
 8005f2a:	68f8      	ldr	r0, [r7, #12]
 8005f2c:	f000 fc89 	bl	8006842 <xQueueCreateCountingSemaphoreStatic>
 8005f30:	6278      	str	r0, [r7, #36]	@ 0x24
 8005f32:	e004      	b.n	8005f3e <osSemaphoreNew+0x10a>
        }
        else {
          hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8005f34:	68b9      	ldr	r1, [r7, #8]
 8005f36:	68f8      	ldr	r0, [r7, #12]
 8005f38:	f000 fcc0 	bl	80068bc <xQueueCreateCountingSemaphore>
 8005f3c:	6278      	str	r0, [r7, #36]	@ 0x24
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8005f3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d00c      	beq.n	8005f5e <osSemaphoreNew+0x12a>
        if (attr != NULL) {
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d003      	beq.n	8005f52 <osSemaphoreNew+0x11e>
          name = attr->name;
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	61fb      	str	r3, [r7, #28]
 8005f50:	e001      	b.n	8005f56 <osSemaphoreNew+0x122>
        } else {
          name = NULL;
 8005f52:	2300      	movs	r3, #0
 8005f54:	61fb      	str	r3, [r7, #28]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8005f56:	69f9      	ldr	r1, [r7, #28]
 8005f58:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8005f5a:	f001 fb05 	bl	8007568 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8005f5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8005f60:	4618      	mov	r0, r3
 8005f62:	3728      	adds	r7, #40	@ 0x28
 8005f64:	46bd      	mov	sp, r7
 8005f66:	bd80      	pop	{r7, pc}
 8005f68:	20000934 	.word	0x20000934

08005f6c <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8005f6c:	b580      	push	{r7, lr}
 8005f6e:	b088      	sub	sp, #32
 8005f70:	af00      	add	r7, sp, #0
 8005f72:	6078      	str	r0, [r7, #4]
 8005f74:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8005f7a:	2300      	movs	r3, #0
 8005f7c:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 8005f7e:	69bb      	ldr	r3, [r7, #24]
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d103      	bne.n	8005f8c <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 8005f84:	f06f 0303 	mvn.w	r3, #3
 8005f88:	61fb      	str	r3, [r7, #28]
 8005f8a:	e04b      	b.n	8006024 <osSemaphoreAcquire+0xb8>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005f8c:	f3ef 8305 	mrs	r3, IPSR
 8005f90:	617b      	str	r3, [r7, #20]
  return(result);
 8005f92:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	d10f      	bne.n	8005fb8 <osSemaphoreAcquire+0x4c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005f98:	f3ef 8310 	mrs	r3, PRIMASK
 8005f9c:	613b      	str	r3, [r7, #16]
  return(result);
 8005f9e:	693b      	ldr	r3, [r7, #16]
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d105      	bne.n	8005fb0 <osSemaphoreAcquire+0x44>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005fa4:	f3ef 8311 	mrs	r3, BASEPRI
 8005fa8:	60fb      	str	r3, [r7, #12]
  return(result);
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d026      	beq.n	8005ffe <osSemaphoreAcquire+0x92>
 8005fb0:	4b1f      	ldr	r3, [pc, #124]	@ (8006030 <osSemaphoreAcquire+0xc4>)
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	2b02      	cmp	r3, #2
 8005fb6:	d122      	bne.n	8005ffe <osSemaphoreAcquire+0x92>
    if (timeout != 0U) {
 8005fb8:	683b      	ldr	r3, [r7, #0]
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d003      	beq.n	8005fc6 <osSemaphoreAcquire+0x5a>
      stat = osErrorParameter;
 8005fbe:	f06f 0303 	mvn.w	r3, #3
 8005fc2:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 8005fc4:	e02d      	b.n	8006022 <osSemaphoreAcquire+0xb6>
    }
    else {
      yield = pdFALSE;
 8005fc6:	2300      	movs	r3, #0
 8005fc8:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 8005fca:	f107 0308 	add.w	r3, r7, #8
 8005fce:	461a      	mov	r2, r3
 8005fd0:	2100      	movs	r1, #0
 8005fd2:	69b8      	ldr	r0, [r7, #24]
 8005fd4:	f001 f8f2 	bl	80071bc <xQueueReceiveFromISR>
 8005fd8:	4603      	mov	r3, r0
 8005fda:	2b01      	cmp	r3, #1
 8005fdc:	d003      	beq.n	8005fe6 <osSemaphoreAcquire+0x7a>
        stat = osErrorResource;
 8005fde:	f06f 0302 	mvn.w	r3, #2
 8005fe2:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 8005fe4:	e01d      	b.n	8006022 <osSemaphoreAcquire+0xb6>
      } else {
        portYIELD_FROM_ISR (yield);
 8005fe6:	68bb      	ldr	r3, [r7, #8]
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d01a      	beq.n	8006022 <osSemaphoreAcquire+0xb6>
 8005fec:	4b11      	ldr	r3, [pc, #68]	@ (8006034 <osSemaphoreAcquire+0xc8>)
 8005fee:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005ff2:	601a      	str	r2, [r3, #0]
 8005ff4:	f3bf 8f4f 	dsb	sy
 8005ff8:	f3bf 8f6f 	isb	sy
    if (timeout != 0U) {
 8005ffc:	e011      	b.n	8006022 <osSemaphoreAcquire+0xb6>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 8005ffe:	6839      	ldr	r1, [r7, #0]
 8006000:	69b8      	ldr	r0, [r7, #24]
 8006002:	f000 ffc3 	bl	8006f8c <xQueueSemaphoreTake>
 8006006:	4603      	mov	r3, r0
 8006008:	2b01      	cmp	r3, #1
 800600a:	d00b      	beq.n	8006024 <osSemaphoreAcquire+0xb8>
      if (timeout != 0U) {
 800600c:	683b      	ldr	r3, [r7, #0]
 800600e:	2b00      	cmp	r3, #0
 8006010:	d003      	beq.n	800601a <osSemaphoreAcquire+0xae>
        stat = osErrorTimeout;
 8006012:	f06f 0301 	mvn.w	r3, #1
 8006016:	61fb      	str	r3, [r7, #28]
 8006018:	e004      	b.n	8006024 <osSemaphoreAcquire+0xb8>
      } else {
        stat = osErrorResource;
 800601a:	f06f 0302 	mvn.w	r3, #2
 800601e:	61fb      	str	r3, [r7, #28]
 8006020:	e000      	b.n	8006024 <osSemaphoreAcquire+0xb8>
    if (timeout != 0U) {
 8006022:	bf00      	nop
      }
    }
  }

  return (stat);
 8006024:	69fb      	ldr	r3, [r7, #28]
}
 8006026:	4618      	mov	r0, r3
 8006028:	3720      	adds	r7, #32
 800602a:	46bd      	mov	sp, r7
 800602c:	bd80      	pop	{r7, pc}
 800602e:	bf00      	nop
 8006030:	20000934 	.word	0x20000934
 8006034:	e000ed04 	.word	0xe000ed04

08006038 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8006038:	b580      	push	{r7, lr}
 800603a:	b088      	sub	sp, #32
 800603c:	af00      	add	r7, sp, #0
 800603e:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8006044:	2300      	movs	r3, #0
 8006046:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 8006048:	69bb      	ldr	r3, [r7, #24]
 800604a:	2b00      	cmp	r3, #0
 800604c:	d103      	bne.n	8006056 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 800604e:	f06f 0303 	mvn.w	r3, #3
 8006052:	61fb      	str	r3, [r7, #28]
 8006054:	e03e      	b.n	80060d4 <osSemaphoreRelease+0x9c>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006056:	f3ef 8305 	mrs	r3, IPSR
 800605a:	617b      	str	r3, [r7, #20]
  return(result);
 800605c:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 800605e:	2b00      	cmp	r3, #0
 8006060:	d10f      	bne.n	8006082 <osSemaphoreRelease+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006062:	f3ef 8310 	mrs	r3, PRIMASK
 8006066:	613b      	str	r3, [r7, #16]
  return(result);
 8006068:	693b      	ldr	r3, [r7, #16]
 800606a:	2b00      	cmp	r3, #0
 800606c:	d105      	bne.n	800607a <osSemaphoreRelease+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800606e:	f3ef 8311 	mrs	r3, BASEPRI
 8006072:	60fb      	str	r3, [r7, #12]
  return(result);
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	2b00      	cmp	r3, #0
 8006078:	d01e      	beq.n	80060b8 <osSemaphoreRelease+0x80>
 800607a:	4b19      	ldr	r3, [pc, #100]	@ (80060e0 <osSemaphoreRelease+0xa8>)
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	2b02      	cmp	r3, #2
 8006080:	d11a      	bne.n	80060b8 <osSemaphoreRelease+0x80>
    yield = pdFALSE;
 8006082:	2300      	movs	r3, #0
 8006084:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8006086:	f107 0308 	add.w	r3, r7, #8
 800608a:	4619      	mov	r1, r3
 800608c:	69b8      	ldr	r0, [r7, #24]
 800608e:	f000 fdfc 	bl	8006c8a <xQueueGiveFromISR>
 8006092:	4603      	mov	r3, r0
 8006094:	2b01      	cmp	r3, #1
 8006096:	d003      	beq.n	80060a0 <osSemaphoreRelease+0x68>
      stat = osErrorResource;
 8006098:	f06f 0302 	mvn.w	r3, #2
 800609c:	61fb      	str	r3, [r7, #28]
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800609e:	e018      	b.n	80060d2 <osSemaphoreRelease+0x9a>
    } else {
      portYIELD_FROM_ISR (yield);
 80060a0:	68bb      	ldr	r3, [r7, #8]
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d015      	beq.n	80060d2 <osSemaphoreRelease+0x9a>
 80060a6:	4b0f      	ldr	r3, [pc, #60]	@ (80060e4 <osSemaphoreRelease+0xac>)
 80060a8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80060ac:	601a      	str	r2, [r3, #0]
 80060ae:	f3bf 8f4f 	dsb	sy
 80060b2:	f3bf 8f6f 	isb	sy
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 80060b6:	e00c      	b.n	80060d2 <osSemaphoreRelease+0x9a>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 80060b8:	2300      	movs	r3, #0
 80060ba:	2200      	movs	r2, #0
 80060bc:	2100      	movs	r1, #0
 80060be:	69b8      	ldr	r0, [r7, #24]
 80060c0:	f000 fc36 	bl	8006930 <xQueueGenericSend>
 80060c4:	4603      	mov	r3, r0
 80060c6:	2b01      	cmp	r3, #1
 80060c8:	d004      	beq.n	80060d4 <osSemaphoreRelease+0x9c>
      stat = osErrorResource;
 80060ca:	f06f 0302 	mvn.w	r3, #2
 80060ce:	61fb      	str	r3, [r7, #28]
 80060d0:	e000      	b.n	80060d4 <osSemaphoreRelease+0x9c>
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 80060d2:	bf00      	nop
    }
  }

  return (stat);
 80060d4:	69fb      	ldr	r3, [r7, #28]
}
 80060d6:	4618      	mov	r0, r3
 80060d8:	3720      	adds	r7, #32
 80060da:	46bd      	mov	sp, r7
 80060dc:	bd80      	pop	{r7, pc}
 80060de:	bf00      	nop
 80060e0:	20000934 	.word	0x20000934
 80060e4:	e000ed04 	.word	0xe000ed04

080060e8 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 80060e8:	b580      	push	{r7, lr}
 80060ea:	b08c      	sub	sp, #48	@ 0x30
 80060ec:	af02      	add	r7, sp, #8
 80060ee:	60f8      	str	r0, [r7, #12]
 80060f0:	60b9      	str	r1, [r7, #8]
 80060f2:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 80060f4:	2300      	movs	r3, #0
 80060f6:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80060f8:	f3ef 8305 	mrs	r3, IPSR
 80060fc:	61bb      	str	r3, [r7, #24]
  return(result);
 80060fe:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8006100:	2b00      	cmp	r3, #0
 8006102:	d16f      	bne.n	80061e4 <osMessageQueueNew+0xfc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006104:	f3ef 8310 	mrs	r3, PRIMASK
 8006108:	617b      	str	r3, [r7, #20]
  return(result);
 800610a:	697b      	ldr	r3, [r7, #20]
 800610c:	2b00      	cmp	r3, #0
 800610e:	d105      	bne.n	800611c <osMessageQueueNew+0x34>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006110:	f3ef 8311 	mrs	r3, BASEPRI
 8006114:	613b      	str	r3, [r7, #16]
  return(result);
 8006116:	693b      	ldr	r3, [r7, #16]
 8006118:	2b00      	cmp	r3, #0
 800611a:	d003      	beq.n	8006124 <osMessageQueueNew+0x3c>
 800611c:	4b34      	ldr	r3, [pc, #208]	@ (80061f0 <osMessageQueueNew+0x108>)
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	2b02      	cmp	r3, #2
 8006122:	d05f      	beq.n	80061e4 <osMessageQueueNew+0xfc>
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	2b00      	cmp	r3, #0
 8006128:	d05c      	beq.n	80061e4 <osMessageQueueNew+0xfc>
 800612a:	68bb      	ldr	r3, [r7, #8]
 800612c:	2b00      	cmp	r3, #0
 800612e:	d059      	beq.n	80061e4 <osMessageQueueNew+0xfc>
    mem = -1;
 8006130:	f04f 33ff 	mov.w	r3, #4294967295
 8006134:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	2b00      	cmp	r3, #0
 800613a:	d029      	beq.n	8006190 <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	689b      	ldr	r3, [r3, #8]
 8006140:	2b00      	cmp	r3, #0
 8006142:	d012      	beq.n	800616a <osMessageQueueNew+0x82>
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	68db      	ldr	r3, [r3, #12]
 8006148:	2b4f      	cmp	r3, #79	@ 0x4f
 800614a:	d90e      	bls.n	800616a <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8006150:	2b00      	cmp	r3, #0
 8006152:	d00a      	beq.n	800616a <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	695a      	ldr	r2, [r3, #20]
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	68b9      	ldr	r1, [r7, #8]
 800615c:	fb01 f303 	mul.w	r3, r1, r3
 8006160:	429a      	cmp	r2, r3
 8006162:	d302      	bcc.n	800616a <osMessageQueueNew+0x82>
        mem = 1;
 8006164:	2301      	movs	r3, #1
 8006166:	623b      	str	r3, [r7, #32]
 8006168:	e014      	b.n	8006194 <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	689b      	ldr	r3, [r3, #8]
 800616e:	2b00      	cmp	r3, #0
 8006170:	d110      	bne.n	8006194 <osMessageQueueNew+0xac>
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	68db      	ldr	r3, [r3, #12]
 8006176:	2b00      	cmp	r3, #0
 8006178:	d10c      	bne.n	8006194 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800617e:	2b00      	cmp	r3, #0
 8006180:	d108      	bne.n	8006194 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	695b      	ldr	r3, [r3, #20]
 8006186:	2b00      	cmp	r3, #0
 8006188:	d104      	bne.n	8006194 <osMessageQueueNew+0xac>
          mem = 0;
 800618a:	2300      	movs	r3, #0
 800618c:	623b      	str	r3, [r7, #32]
 800618e:	e001      	b.n	8006194 <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 8006190:	2300      	movs	r3, #0
 8006192:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8006194:	6a3b      	ldr	r3, [r7, #32]
 8006196:	2b01      	cmp	r3, #1
 8006198:	d10b      	bne.n	80061b2 <osMessageQueueNew+0xca>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	691a      	ldr	r2, [r3, #16]
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	689b      	ldr	r3, [r3, #8]
 80061a2:	2100      	movs	r1, #0
 80061a4:	9100      	str	r1, [sp, #0]
 80061a6:	68b9      	ldr	r1, [r7, #8]
 80061a8:	68f8      	ldr	r0, [r7, #12]
 80061aa:	f000 fa5d 	bl	8006668 <xQueueGenericCreateStatic>
 80061ae:	6278      	str	r0, [r7, #36]	@ 0x24
 80061b0:	e008      	b.n	80061c4 <osMessageQueueNew+0xdc>
    }
    else {
      if (mem == 0) {
 80061b2:	6a3b      	ldr	r3, [r7, #32]
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d105      	bne.n	80061c4 <osMessageQueueNew+0xdc>
        hQueue = xQueueCreate (msg_count, msg_size);
 80061b8:	2200      	movs	r2, #0
 80061ba:	68b9      	ldr	r1, [r7, #8]
 80061bc:	68f8      	ldr	r0, [r7, #12]
 80061be:	f000 fada 	bl	8006776 <xQueueGenericCreate>
 80061c2:	6278      	str	r0, [r7, #36]	@ 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 80061c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d00c      	beq.n	80061e4 <osMessageQueueNew+0xfc>
      if (attr != NULL) {
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d003      	beq.n	80061d8 <osMessageQueueNew+0xf0>
        name = attr->name;
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	61fb      	str	r3, [r7, #28]
 80061d6:	e001      	b.n	80061dc <osMessageQueueNew+0xf4>
      } else {
        name = NULL;
 80061d8:	2300      	movs	r3, #0
 80061da:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 80061dc:	69f9      	ldr	r1, [r7, #28]
 80061de:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80061e0:	f001 f9c2 	bl	8007568 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 80061e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80061e6:	4618      	mov	r0, r3
 80061e8:	3728      	adds	r7, #40	@ 0x28
 80061ea:	46bd      	mov	sp, r7
 80061ec:	bd80      	pop	{r7, pc}
 80061ee:	bf00      	nop
 80061f0:	20000934 	.word	0x20000934

080061f4 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 80061f4:	b580      	push	{r7, lr}
 80061f6:	b08a      	sub	sp, #40	@ 0x28
 80061f8:	af00      	add	r7, sp, #0
 80061fa:	60f8      	str	r0, [r7, #12]
 80061fc:	60b9      	str	r1, [r7, #8]
 80061fe:	603b      	str	r3, [r7, #0]
 8006200:	4613      	mov	r3, r2
 8006202:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8006208:	2300      	movs	r3, #0
 800620a:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800620c:	f3ef 8305 	mrs	r3, IPSR
 8006210:	61fb      	str	r3, [r7, #28]
  return(result);
 8006212:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 8006214:	2b00      	cmp	r3, #0
 8006216:	d10f      	bne.n	8006238 <osMessageQueuePut+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006218:	f3ef 8310 	mrs	r3, PRIMASK
 800621c:	61bb      	str	r3, [r7, #24]
  return(result);
 800621e:	69bb      	ldr	r3, [r7, #24]
 8006220:	2b00      	cmp	r3, #0
 8006222:	d105      	bne.n	8006230 <osMessageQueuePut+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006224:	f3ef 8311 	mrs	r3, BASEPRI
 8006228:	617b      	str	r3, [r7, #20]
  return(result);
 800622a:	697b      	ldr	r3, [r7, #20]
 800622c:	2b00      	cmp	r3, #0
 800622e:	d02c      	beq.n	800628a <osMessageQueuePut+0x96>
 8006230:	4b28      	ldr	r3, [pc, #160]	@ (80062d4 <osMessageQueuePut+0xe0>)
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	2b02      	cmp	r3, #2
 8006236:	d128      	bne.n	800628a <osMessageQueuePut+0x96>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8006238:	6a3b      	ldr	r3, [r7, #32]
 800623a:	2b00      	cmp	r3, #0
 800623c:	d005      	beq.n	800624a <osMessageQueuePut+0x56>
 800623e:	68bb      	ldr	r3, [r7, #8]
 8006240:	2b00      	cmp	r3, #0
 8006242:	d002      	beq.n	800624a <osMessageQueuePut+0x56>
 8006244:	683b      	ldr	r3, [r7, #0]
 8006246:	2b00      	cmp	r3, #0
 8006248:	d003      	beq.n	8006252 <osMessageQueuePut+0x5e>
      stat = osErrorParameter;
 800624a:	f06f 0303 	mvn.w	r3, #3
 800624e:	627b      	str	r3, [r7, #36]	@ 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8006250:	e039      	b.n	80062c6 <osMessageQueuePut+0xd2>
    }
    else {
      yield = pdFALSE;
 8006252:	2300      	movs	r3, #0
 8006254:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8006256:	f107 0210 	add.w	r2, r7, #16
 800625a:	2300      	movs	r3, #0
 800625c:	68b9      	ldr	r1, [r7, #8]
 800625e:	6a38      	ldr	r0, [r7, #32]
 8006260:	f000 fc70 	bl	8006b44 <xQueueGenericSendFromISR>
 8006264:	4603      	mov	r3, r0
 8006266:	2b01      	cmp	r3, #1
 8006268:	d003      	beq.n	8006272 <osMessageQueuePut+0x7e>
        stat = osErrorResource;
 800626a:	f06f 0302 	mvn.w	r3, #2
 800626e:	627b      	str	r3, [r7, #36]	@ 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8006270:	e029      	b.n	80062c6 <osMessageQueuePut+0xd2>
      } else {
        portYIELD_FROM_ISR (yield);
 8006272:	693b      	ldr	r3, [r7, #16]
 8006274:	2b00      	cmp	r3, #0
 8006276:	d026      	beq.n	80062c6 <osMessageQueuePut+0xd2>
 8006278:	4b17      	ldr	r3, [pc, #92]	@ (80062d8 <osMessageQueuePut+0xe4>)
 800627a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800627e:	601a      	str	r2, [r3, #0]
 8006280:	f3bf 8f4f 	dsb	sy
 8006284:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8006288:	e01d      	b.n	80062c6 <osMessageQueuePut+0xd2>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800628a:	6a3b      	ldr	r3, [r7, #32]
 800628c:	2b00      	cmp	r3, #0
 800628e:	d002      	beq.n	8006296 <osMessageQueuePut+0xa2>
 8006290:	68bb      	ldr	r3, [r7, #8]
 8006292:	2b00      	cmp	r3, #0
 8006294:	d103      	bne.n	800629e <osMessageQueuePut+0xaa>
      stat = osErrorParameter;
 8006296:	f06f 0303 	mvn.w	r3, #3
 800629a:	627b      	str	r3, [r7, #36]	@ 0x24
 800629c:	e014      	b.n	80062c8 <osMessageQueuePut+0xd4>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800629e:	2300      	movs	r3, #0
 80062a0:	683a      	ldr	r2, [r7, #0]
 80062a2:	68b9      	ldr	r1, [r7, #8]
 80062a4:	6a38      	ldr	r0, [r7, #32]
 80062a6:	f000 fb43 	bl	8006930 <xQueueGenericSend>
 80062aa:	4603      	mov	r3, r0
 80062ac:	2b01      	cmp	r3, #1
 80062ae:	d00b      	beq.n	80062c8 <osMessageQueuePut+0xd4>
        if (timeout != 0U) {
 80062b0:	683b      	ldr	r3, [r7, #0]
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d003      	beq.n	80062be <osMessageQueuePut+0xca>
          stat = osErrorTimeout;
 80062b6:	f06f 0301 	mvn.w	r3, #1
 80062ba:	627b      	str	r3, [r7, #36]	@ 0x24
 80062bc:	e004      	b.n	80062c8 <osMessageQueuePut+0xd4>
        } else {
          stat = osErrorResource;
 80062be:	f06f 0302 	mvn.w	r3, #2
 80062c2:	627b      	str	r3, [r7, #36]	@ 0x24
 80062c4:	e000      	b.n	80062c8 <osMessageQueuePut+0xd4>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80062c6:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 80062c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80062ca:	4618      	mov	r0, r3
 80062cc:	3728      	adds	r7, #40	@ 0x28
 80062ce:	46bd      	mov	sp, r7
 80062d0:	bd80      	pop	{r7, pc}
 80062d2:	bf00      	nop
 80062d4:	20000934 	.word	0x20000934
 80062d8:	e000ed04 	.word	0xe000ed04

080062dc <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 80062dc:	b580      	push	{r7, lr}
 80062de:	b08a      	sub	sp, #40	@ 0x28
 80062e0:	af00      	add	r7, sp, #0
 80062e2:	60f8      	str	r0, [r7, #12]
 80062e4:	60b9      	str	r1, [r7, #8]
 80062e6:	607a      	str	r2, [r7, #4]
 80062e8:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 80062ee:	2300      	movs	r3, #0
 80062f0:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80062f2:	f3ef 8305 	mrs	r3, IPSR
 80062f6:	61fb      	str	r3, [r7, #28]
  return(result);
 80062f8:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d10f      	bne.n	800631e <osMessageQueueGet+0x42>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80062fe:	f3ef 8310 	mrs	r3, PRIMASK
 8006302:	61bb      	str	r3, [r7, #24]
  return(result);
 8006304:	69bb      	ldr	r3, [r7, #24]
 8006306:	2b00      	cmp	r3, #0
 8006308:	d105      	bne.n	8006316 <osMessageQueueGet+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800630a:	f3ef 8311 	mrs	r3, BASEPRI
 800630e:	617b      	str	r3, [r7, #20]
  return(result);
 8006310:	697b      	ldr	r3, [r7, #20]
 8006312:	2b00      	cmp	r3, #0
 8006314:	d02c      	beq.n	8006370 <osMessageQueueGet+0x94>
 8006316:	4b28      	ldr	r3, [pc, #160]	@ (80063b8 <osMessageQueueGet+0xdc>)
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	2b02      	cmp	r3, #2
 800631c:	d128      	bne.n	8006370 <osMessageQueueGet+0x94>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800631e:	6a3b      	ldr	r3, [r7, #32]
 8006320:	2b00      	cmp	r3, #0
 8006322:	d005      	beq.n	8006330 <osMessageQueueGet+0x54>
 8006324:	68bb      	ldr	r3, [r7, #8]
 8006326:	2b00      	cmp	r3, #0
 8006328:	d002      	beq.n	8006330 <osMessageQueueGet+0x54>
 800632a:	683b      	ldr	r3, [r7, #0]
 800632c:	2b00      	cmp	r3, #0
 800632e:	d003      	beq.n	8006338 <osMessageQueueGet+0x5c>
      stat = osErrorParameter;
 8006330:	f06f 0303 	mvn.w	r3, #3
 8006334:	627b      	str	r3, [r7, #36]	@ 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8006336:	e038      	b.n	80063aa <osMessageQueueGet+0xce>
    }
    else {
      yield = pdFALSE;
 8006338:	2300      	movs	r3, #0
 800633a:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800633c:	f107 0310 	add.w	r3, r7, #16
 8006340:	461a      	mov	r2, r3
 8006342:	68b9      	ldr	r1, [r7, #8]
 8006344:	6a38      	ldr	r0, [r7, #32]
 8006346:	f000 ff39 	bl	80071bc <xQueueReceiveFromISR>
 800634a:	4603      	mov	r3, r0
 800634c:	2b01      	cmp	r3, #1
 800634e:	d003      	beq.n	8006358 <osMessageQueueGet+0x7c>
        stat = osErrorResource;
 8006350:	f06f 0302 	mvn.w	r3, #2
 8006354:	627b      	str	r3, [r7, #36]	@ 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8006356:	e028      	b.n	80063aa <osMessageQueueGet+0xce>
      } else {
        portYIELD_FROM_ISR (yield);
 8006358:	693b      	ldr	r3, [r7, #16]
 800635a:	2b00      	cmp	r3, #0
 800635c:	d025      	beq.n	80063aa <osMessageQueueGet+0xce>
 800635e:	4b17      	ldr	r3, [pc, #92]	@ (80063bc <osMessageQueueGet+0xe0>)
 8006360:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006364:	601a      	str	r2, [r3, #0]
 8006366:	f3bf 8f4f 	dsb	sy
 800636a:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800636e:	e01c      	b.n	80063aa <osMessageQueueGet+0xce>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8006370:	6a3b      	ldr	r3, [r7, #32]
 8006372:	2b00      	cmp	r3, #0
 8006374:	d002      	beq.n	800637c <osMessageQueueGet+0xa0>
 8006376:	68bb      	ldr	r3, [r7, #8]
 8006378:	2b00      	cmp	r3, #0
 800637a:	d103      	bne.n	8006384 <osMessageQueueGet+0xa8>
      stat = osErrorParameter;
 800637c:	f06f 0303 	mvn.w	r3, #3
 8006380:	627b      	str	r3, [r7, #36]	@ 0x24
 8006382:	e013      	b.n	80063ac <osMessageQueueGet+0xd0>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8006384:	683a      	ldr	r2, [r7, #0]
 8006386:	68b9      	ldr	r1, [r7, #8]
 8006388:	6a38      	ldr	r0, [r7, #32]
 800638a:	f000 fd17 	bl	8006dbc <xQueueReceive>
 800638e:	4603      	mov	r3, r0
 8006390:	2b01      	cmp	r3, #1
 8006392:	d00b      	beq.n	80063ac <osMessageQueueGet+0xd0>
        if (timeout != 0U) {
 8006394:	683b      	ldr	r3, [r7, #0]
 8006396:	2b00      	cmp	r3, #0
 8006398:	d003      	beq.n	80063a2 <osMessageQueueGet+0xc6>
          stat = osErrorTimeout;
 800639a:	f06f 0301 	mvn.w	r3, #1
 800639e:	627b      	str	r3, [r7, #36]	@ 0x24
 80063a0:	e004      	b.n	80063ac <osMessageQueueGet+0xd0>
        } else {
          stat = osErrorResource;
 80063a2:	f06f 0302 	mvn.w	r3, #2
 80063a6:	627b      	str	r3, [r7, #36]	@ 0x24
 80063a8:	e000      	b.n	80063ac <osMessageQueueGet+0xd0>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80063aa:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 80063ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80063ae:	4618      	mov	r0, r3
 80063b0:	3728      	adds	r7, #40	@ 0x28
 80063b2:	46bd      	mov	sp, r7
 80063b4:	bd80      	pop	{r7, pc}
 80063b6:	bf00      	nop
 80063b8:	20000934 	.word	0x20000934
 80063bc:	e000ed04 	.word	0xe000ed04

080063c0 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80063c0:	b480      	push	{r7}
 80063c2:	b085      	sub	sp, #20
 80063c4:	af00      	add	r7, sp, #0
 80063c6:	60f8      	str	r0, [r7, #12]
 80063c8:	60b9      	str	r1, [r7, #8]
 80063ca:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	4a07      	ldr	r2, [pc, #28]	@ (80063ec <vApplicationGetIdleTaskMemory+0x2c>)
 80063d0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80063d2:	68bb      	ldr	r3, [r7, #8]
 80063d4:	4a06      	ldr	r2, [pc, #24]	@ (80063f0 <vApplicationGetIdleTaskMemory+0x30>)
 80063d6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	2280      	movs	r2, #128	@ 0x80
 80063dc:	601a      	str	r2, [r3, #0]
}
 80063de:	bf00      	nop
 80063e0:	3714      	adds	r7, #20
 80063e2:	46bd      	mov	sp, r7
 80063e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063e8:	4770      	bx	lr
 80063ea:	bf00      	nop
 80063ec:	20000938 	.word	0x20000938
 80063f0:	200009e0 	.word	0x200009e0

080063f4 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80063f4:	b480      	push	{r7}
 80063f6:	b085      	sub	sp, #20
 80063f8:	af00      	add	r7, sp, #0
 80063fa:	60f8      	str	r0, [r7, #12]
 80063fc:	60b9      	str	r1, [r7, #8]
 80063fe:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	4a07      	ldr	r2, [pc, #28]	@ (8006420 <vApplicationGetTimerTaskMemory+0x2c>)
 8006404:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8006406:	68bb      	ldr	r3, [r7, #8]
 8006408:	4a06      	ldr	r2, [pc, #24]	@ (8006424 <vApplicationGetTimerTaskMemory+0x30>)
 800640a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8006412:	601a      	str	r2, [r3, #0]
}
 8006414:	bf00      	nop
 8006416:	3714      	adds	r7, #20
 8006418:	46bd      	mov	sp, r7
 800641a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800641e:	4770      	bx	lr
 8006420:	20000be0 	.word	0x20000be0
 8006424:	20000c88 	.word	0x20000c88

08006428 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8006428:	b480      	push	{r7}
 800642a:	b083      	sub	sp, #12
 800642c:	af00      	add	r7, sp, #0
 800642e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	f103 0208 	add.w	r2, r3, #8
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	f04f 32ff 	mov.w	r2, #4294967295
 8006440:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	f103 0208 	add.w	r2, r3, #8
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	f103 0208 	add.w	r2, r3, #8
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	2200      	movs	r2, #0
 800645a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800645c:	bf00      	nop
 800645e:	370c      	adds	r7, #12
 8006460:	46bd      	mov	sp, r7
 8006462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006466:	4770      	bx	lr

08006468 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8006468:	b480      	push	{r7}
 800646a:	b083      	sub	sp, #12
 800646c:	af00      	add	r7, sp, #0
 800646e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	2200      	movs	r2, #0
 8006474:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8006476:	bf00      	nop
 8006478:	370c      	adds	r7, #12
 800647a:	46bd      	mov	sp, r7
 800647c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006480:	4770      	bx	lr

08006482 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006482:	b480      	push	{r7}
 8006484:	b085      	sub	sp, #20
 8006486:	af00      	add	r7, sp, #0
 8006488:	6078      	str	r0, [r7, #4]
 800648a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	685b      	ldr	r3, [r3, #4]
 8006490:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8006492:	683b      	ldr	r3, [r7, #0]
 8006494:	68fa      	ldr	r2, [r7, #12]
 8006496:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	689a      	ldr	r2, [r3, #8]
 800649c:	683b      	ldr	r3, [r7, #0]
 800649e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	689b      	ldr	r3, [r3, #8]
 80064a4:	683a      	ldr	r2, [r7, #0]
 80064a6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	683a      	ldr	r2, [r7, #0]
 80064ac:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80064ae:	683b      	ldr	r3, [r7, #0]
 80064b0:	687a      	ldr	r2, [r7, #4]
 80064b2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	1c5a      	adds	r2, r3, #1
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	601a      	str	r2, [r3, #0]
}
 80064be:	bf00      	nop
 80064c0:	3714      	adds	r7, #20
 80064c2:	46bd      	mov	sp, r7
 80064c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064c8:	4770      	bx	lr

080064ca <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80064ca:	b480      	push	{r7}
 80064cc:	b085      	sub	sp, #20
 80064ce:	af00      	add	r7, sp, #0
 80064d0:	6078      	str	r0, [r7, #4]
 80064d2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80064d4:	683b      	ldr	r3, [r7, #0]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80064da:	68bb      	ldr	r3, [r7, #8]
 80064dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064e0:	d103      	bne.n	80064ea <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	691b      	ldr	r3, [r3, #16]
 80064e6:	60fb      	str	r3, [r7, #12]
 80064e8:	e00c      	b.n	8006504 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	3308      	adds	r3, #8
 80064ee:	60fb      	str	r3, [r7, #12]
 80064f0:	e002      	b.n	80064f8 <vListInsert+0x2e>
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	685b      	ldr	r3, [r3, #4]
 80064f6:	60fb      	str	r3, [r7, #12]
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	685b      	ldr	r3, [r3, #4]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	68ba      	ldr	r2, [r7, #8]
 8006500:	429a      	cmp	r2, r3
 8006502:	d2f6      	bcs.n	80064f2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	685a      	ldr	r2, [r3, #4]
 8006508:	683b      	ldr	r3, [r7, #0]
 800650a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800650c:	683b      	ldr	r3, [r7, #0]
 800650e:	685b      	ldr	r3, [r3, #4]
 8006510:	683a      	ldr	r2, [r7, #0]
 8006512:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006514:	683b      	ldr	r3, [r7, #0]
 8006516:	68fa      	ldr	r2, [r7, #12]
 8006518:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	683a      	ldr	r2, [r7, #0]
 800651e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8006520:	683b      	ldr	r3, [r7, #0]
 8006522:	687a      	ldr	r2, [r7, #4]
 8006524:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	1c5a      	adds	r2, r3, #1
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	601a      	str	r2, [r3, #0]
}
 8006530:	bf00      	nop
 8006532:	3714      	adds	r7, #20
 8006534:	46bd      	mov	sp, r7
 8006536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800653a:	4770      	bx	lr

0800653c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800653c:	b480      	push	{r7}
 800653e:	b085      	sub	sp, #20
 8006540:	af00      	add	r7, sp, #0
 8006542:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	691b      	ldr	r3, [r3, #16]
 8006548:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	685b      	ldr	r3, [r3, #4]
 800654e:	687a      	ldr	r2, [r7, #4]
 8006550:	6892      	ldr	r2, [r2, #8]
 8006552:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	689b      	ldr	r3, [r3, #8]
 8006558:	687a      	ldr	r2, [r7, #4]
 800655a:	6852      	ldr	r2, [r2, #4]
 800655c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	685b      	ldr	r3, [r3, #4]
 8006562:	687a      	ldr	r2, [r7, #4]
 8006564:	429a      	cmp	r2, r3
 8006566:	d103      	bne.n	8006570 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	689a      	ldr	r2, [r3, #8]
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	2200      	movs	r2, #0
 8006574:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	1e5a      	subs	r2, r3, #1
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	681b      	ldr	r3, [r3, #0]
}
 8006584:	4618      	mov	r0, r3
 8006586:	3714      	adds	r7, #20
 8006588:	46bd      	mov	sp, r7
 800658a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800658e:	4770      	bx	lr

08006590 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8006590:	b580      	push	{r7, lr}
 8006592:	b084      	sub	sp, #16
 8006594:	af00      	add	r7, sp, #0
 8006596:	6078      	str	r0, [r7, #4]
 8006598:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	d10d      	bne.n	80065c0 <xQueueGenericReset+0x30>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80065a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80065a8:	b672      	cpsid	i
 80065aa:	f383 8811 	msr	BASEPRI, r3
 80065ae:	f3bf 8f6f 	isb	sy
 80065b2:	f3bf 8f4f 	dsb	sy
 80065b6:	b662      	cpsie	i
 80065b8:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80065ba:	bf00      	nop
 80065bc:	bf00      	nop
 80065be:	e7fd      	b.n	80065bc <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 80065c0:	f002 fd34 	bl	800902c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	681a      	ldr	r2, [r3, #0]
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80065cc:	68f9      	ldr	r1, [r7, #12]
 80065ce:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80065d0:	fb01 f303 	mul.w	r3, r1, r3
 80065d4:	441a      	add	r2, r3
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	2200      	movs	r2, #0
 80065de:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	681a      	ldr	r2, [r3, #0]
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	681a      	ldr	r2, [r3, #0]
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80065f0:	3b01      	subs	r3, #1
 80065f2:	68f9      	ldr	r1, [r7, #12]
 80065f4:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80065f6:	fb01 f303 	mul.w	r3, r1, r3
 80065fa:	441a      	add	r2, r3
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	22ff      	movs	r2, #255	@ 0xff
 8006604:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	22ff      	movs	r2, #255	@ 0xff
 800660c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8006610:	683b      	ldr	r3, [r7, #0]
 8006612:	2b00      	cmp	r3, #0
 8006614:	d114      	bne.n	8006640 <xQueueGenericReset+0xb0>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	691b      	ldr	r3, [r3, #16]
 800661a:	2b00      	cmp	r3, #0
 800661c:	d01a      	beq.n	8006654 <xQueueGenericReset+0xc4>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	3310      	adds	r3, #16
 8006622:	4618      	mov	r0, r3
 8006624:	f001 fcd2 	bl	8007fcc <xTaskRemoveFromEventList>
 8006628:	4603      	mov	r3, r0
 800662a:	2b00      	cmp	r3, #0
 800662c:	d012      	beq.n	8006654 <xQueueGenericReset+0xc4>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800662e:	4b0d      	ldr	r3, [pc, #52]	@ (8006664 <xQueueGenericReset+0xd4>)
 8006630:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006634:	601a      	str	r2, [r3, #0]
 8006636:	f3bf 8f4f 	dsb	sy
 800663a:	f3bf 8f6f 	isb	sy
 800663e:	e009      	b.n	8006654 <xQueueGenericReset+0xc4>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	3310      	adds	r3, #16
 8006644:	4618      	mov	r0, r3
 8006646:	f7ff feef 	bl	8006428 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	3324      	adds	r3, #36	@ 0x24
 800664e:	4618      	mov	r0, r3
 8006650:	f7ff feea 	bl	8006428 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8006654:	f002 fd20 	bl	8009098 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8006658:	2301      	movs	r3, #1
}
 800665a:	4618      	mov	r0, r3
 800665c:	3710      	adds	r7, #16
 800665e:	46bd      	mov	sp, r7
 8006660:	bd80      	pop	{r7, pc}
 8006662:	bf00      	nop
 8006664:	e000ed04 	.word	0xe000ed04

08006668 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8006668:	b580      	push	{r7, lr}
 800666a:	b08e      	sub	sp, #56	@ 0x38
 800666c:	af02      	add	r7, sp, #8
 800666e:	60f8      	str	r0, [r7, #12]
 8006670:	60b9      	str	r1, [r7, #8]
 8006672:	607a      	str	r2, [r7, #4]
 8006674:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	2b00      	cmp	r3, #0
 800667a:	d10d      	bne.n	8006698 <xQueueGenericCreateStatic+0x30>
	__asm volatile
 800667c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006680:	b672      	cpsid	i
 8006682:	f383 8811 	msr	BASEPRI, r3
 8006686:	f3bf 8f6f 	isb	sy
 800668a:	f3bf 8f4f 	dsb	sy
 800668e:	b662      	cpsie	i
 8006690:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8006692:	bf00      	nop
 8006694:	bf00      	nop
 8006696:	e7fd      	b.n	8006694 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8006698:	683b      	ldr	r3, [r7, #0]
 800669a:	2b00      	cmp	r3, #0
 800669c:	d10d      	bne.n	80066ba <xQueueGenericCreateStatic+0x52>
	__asm volatile
 800669e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80066a2:	b672      	cpsid	i
 80066a4:	f383 8811 	msr	BASEPRI, r3
 80066a8:	f3bf 8f6f 	isb	sy
 80066ac:	f3bf 8f4f 	dsb	sy
 80066b0:	b662      	cpsie	i
 80066b2:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80066b4:	bf00      	nop
 80066b6:	bf00      	nop
 80066b8:	e7fd      	b.n	80066b6 <xQueueGenericCreateStatic+0x4e>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d002      	beq.n	80066c6 <xQueueGenericCreateStatic+0x5e>
 80066c0:	68bb      	ldr	r3, [r7, #8]
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d001      	beq.n	80066ca <xQueueGenericCreateStatic+0x62>
 80066c6:	2301      	movs	r3, #1
 80066c8:	e000      	b.n	80066cc <xQueueGenericCreateStatic+0x64>
 80066ca:	2300      	movs	r3, #0
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d10d      	bne.n	80066ec <xQueueGenericCreateStatic+0x84>
	__asm volatile
 80066d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80066d4:	b672      	cpsid	i
 80066d6:	f383 8811 	msr	BASEPRI, r3
 80066da:	f3bf 8f6f 	isb	sy
 80066de:	f3bf 8f4f 	dsb	sy
 80066e2:	b662      	cpsie	i
 80066e4:	623b      	str	r3, [r7, #32]
}
 80066e6:	bf00      	nop
 80066e8:	bf00      	nop
 80066ea:	e7fd      	b.n	80066e8 <xQueueGenericCreateStatic+0x80>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d102      	bne.n	80066f8 <xQueueGenericCreateStatic+0x90>
 80066f2:	68bb      	ldr	r3, [r7, #8]
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d101      	bne.n	80066fc <xQueueGenericCreateStatic+0x94>
 80066f8:	2301      	movs	r3, #1
 80066fa:	e000      	b.n	80066fe <xQueueGenericCreateStatic+0x96>
 80066fc:	2300      	movs	r3, #0
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d10d      	bne.n	800671e <xQueueGenericCreateStatic+0xb6>
	__asm volatile
 8006702:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006706:	b672      	cpsid	i
 8006708:	f383 8811 	msr	BASEPRI, r3
 800670c:	f3bf 8f6f 	isb	sy
 8006710:	f3bf 8f4f 	dsb	sy
 8006714:	b662      	cpsie	i
 8006716:	61fb      	str	r3, [r7, #28]
}
 8006718:	bf00      	nop
 800671a:	bf00      	nop
 800671c:	e7fd      	b.n	800671a <xQueueGenericCreateStatic+0xb2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800671e:	2350      	movs	r3, #80	@ 0x50
 8006720:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8006722:	697b      	ldr	r3, [r7, #20]
 8006724:	2b50      	cmp	r3, #80	@ 0x50
 8006726:	d00d      	beq.n	8006744 <xQueueGenericCreateStatic+0xdc>
	__asm volatile
 8006728:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800672c:	b672      	cpsid	i
 800672e:	f383 8811 	msr	BASEPRI, r3
 8006732:	f3bf 8f6f 	isb	sy
 8006736:	f3bf 8f4f 	dsb	sy
 800673a:	b662      	cpsie	i
 800673c:	61bb      	str	r3, [r7, #24]
}
 800673e:	bf00      	nop
 8006740:	bf00      	nop
 8006742:	e7fd      	b.n	8006740 <xQueueGenericCreateStatic+0xd8>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8006744:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006746:	683b      	ldr	r3, [r7, #0]
 8006748:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800674a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800674c:	2b00      	cmp	r3, #0
 800674e:	d00d      	beq.n	800676c <xQueueGenericCreateStatic+0x104>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8006750:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006752:	2201      	movs	r2, #1
 8006754:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006758:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800675c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800675e:	9300      	str	r3, [sp, #0]
 8006760:	4613      	mov	r3, r2
 8006762:	687a      	ldr	r2, [r7, #4]
 8006764:	68b9      	ldr	r1, [r7, #8]
 8006766:	68f8      	ldr	r0, [r7, #12]
 8006768:	f000 f848 	bl	80067fc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800676c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800676e:	4618      	mov	r0, r3
 8006770:	3730      	adds	r7, #48	@ 0x30
 8006772:	46bd      	mov	sp, r7
 8006774:	bd80      	pop	{r7, pc}

08006776 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8006776:	b580      	push	{r7, lr}
 8006778:	b08a      	sub	sp, #40	@ 0x28
 800677a:	af02      	add	r7, sp, #8
 800677c:	60f8      	str	r0, [r7, #12]
 800677e:	60b9      	str	r1, [r7, #8]
 8006780:	4613      	mov	r3, r2
 8006782:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	2b00      	cmp	r3, #0
 8006788:	d10d      	bne.n	80067a6 <xQueueGenericCreate+0x30>
	__asm volatile
 800678a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800678e:	b672      	cpsid	i
 8006790:	f383 8811 	msr	BASEPRI, r3
 8006794:	f3bf 8f6f 	isb	sy
 8006798:	f3bf 8f4f 	dsb	sy
 800679c:	b662      	cpsie	i
 800679e:	613b      	str	r3, [r7, #16]
}
 80067a0:	bf00      	nop
 80067a2:	bf00      	nop
 80067a4:	e7fd      	b.n	80067a2 <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 80067a6:	68bb      	ldr	r3, [r7, #8]
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d102      	bne.n	80067b2 <xQueueGenericCreate+0x3c>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 80067ac:	2300      	movs	r3, #0
 80067ae:	61fb      	str	r3, [r7, #28]
 80067b0:	e004      	b.n	80067bc <xQueueGenericCreate+0x46>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	68ba      	ldr	r2, [r7, #8]
 80067b6:	fb02 f303 	mul.w	r3, r2, r3
 80067ba:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80067bc:	69fb      	ldr	r3, [r7, #28]
 80067be:	3350      	adds	r3, #80	@ 0x50
 80067c0:	4618      	mov	r0, r3
 80067c2:	f002 fd61 	bl	8009288 <pvPortMalloc>
 80067c6:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80067c8:	69bb      	ldr	r3, [r7, #24]
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d011      	beq.n	80067f2 <xQueueGenericCreate+0x7c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80067ce:	69bb      	ldr	r3, [r7, #24]
 80067d0:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80067d2:	697b      	ldr	r3, [r7, #20]
 80067d4:	3350      	adds	r3, #80	@ 0x50
 80067d6:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80067d8:	69bb      	ldr	r3, [r7, #24]
 80067da:	2200      	movs	r2, #0
 80067dc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80067e0:	79fa      	ldrb	r2, [r7, #7]
 80067e2:	69bb      	ldr	r3, [r7, #24]
 80067e4:	9300      	str	r3, [sp, #0]
 80067e6:	4613      	mov	r3, r2
 80067e8:	697a      	ldr	r2, [r7, #20]
 80067ea:	68b9      	ldr	r1, [r7, #8]
 80067ec:	68f8      	ldr	r0, [r7, #12]
 80067ee:	f000 f805 	bl	80067fc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80067f2:	69bb      	ldr	r3, [r7, #24]
	}
 80067f4:	4618      	mov	r0, r3
 80067f6:	3720      	adds	r7, #32
 80067f8:	46bd      	mov	sp, r7
 80067fa:	bd80      	pop	{r7, pc}

080067fc <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80067fc:	b580      	push	{r7, lr}
 80067fe:	b084      	sub	sp, #16
 8006800:	af00      	add	r7, sp, #0
 8006802:	60f8      	str	r0, [r7, #12]
 8006804:	60b9      	str	r1, [r7, #8]
 8006806:	607a      	str	r2, [r7, #4]
 8006808:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800680a:	68bb      	ldr	r3, [r7, #8]
 800680c:	2b00      	cmp	r3, #0
 800680e:	d103      	bne.n	8006818 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8006810:	69bb      	ldr	r3, [r7, #24]
 8006812:	69ba      	ldr	r2, [r7, #24]
 8006814:	601a      	str	r2, [r3, #0]
 8006816:	e002      	b.n	800681e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8006818:	69bb      	ldr	r3, [r7, #24]
 800681a:	687a      	ldr	r2, [r7, #4]
 800681c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800681e:	69bb      	ldr	r3, [r7, #24]
 8006820:	68fa      	ldr	r2, [r7, #12]
 8006822:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8006824:	69bb      	ldr	r3, [r7, #24]
 8006826:	68ba      	ldr	r2, [r7, #8]
 8006828:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800682a:	2101      	movs	r1, #1
 800682c:	69b8      	ldr	r0, [r7, #24]
 800682e:	f7ff feaf 	bl	8006590 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8006832:	69bb      	ldr	r3, [r7, #24]
 8006834:	78fa      	ldrb	r2, [r7, #3]
 8006836:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800683a:	bf00      	nop
 800683c:	3710      	adds	r7, #16
 800683e:	46bd      	mov	sp, r7
 8006840:	bd80      	pop	{r7, pc}

08006842 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8006842:	b580      	push	{r7, lr}
 8006844:	b08a      	sub	sp, #40	@ 0x28
 8006846:	af02      	add	r7, sp, #8
 8006848:	60f8      	str	r0, [r7, #12]
 800684a:	60b9      	str	r1, [r7, #8]
 800684c:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	2b00      	cmp	r3, #0
 8006852:	d10d      	bne.n	8006870 <xQueueCreateCountingSemaphoreStatic+0x2e>
	__asm volatile
 8006854:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006858:	b672      	cpsid	i
 800685a:	f383 8811 	msr	BASEPRI, r3
 800685e:	f3bf 8f6f 	isb	sy
 8006862:	f3bf 8f4f 	dsb	sy
 8006866:	b662      	cpsie	i
 8006868:	61bb      	str	r3, [r7, #24]
}
 800686a:	bf00      	nop
 800686c:	bf00      	nop
 800686e:	e7fd      	b.n	800686c <xQueueCreateCountingSemaphoreStatic+0x2a>
		configASSERT( uxInitialCount <= uxMaxCount );
 8006870:	68ba      	ldr	r2, [r7, #8]
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	429a      	cmp	r2, r3
 8006876:	d90d      	bls.n	8006894 <xQueueCreateCountingSemaphoreStatic+0x52>
	__asm volatile
 8006878:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800687c:	b672      	cpsid	i
 800687e:	f383 8811 	msr	BASEPRI, r3
 8006882:	f3bf 8f6f 	isb	sy
 8006886:	f3bf 8f4f 	dsb	sy
 800688a:	b662      	cpsie	i
 800688c:	617b      	str	r3, [r7, #20]
}
 800688e:	bf00      	nop
 8006890:	bf00      	nop
 8006892:	e7fd      	b.n	8006890 <xQueueCreateCountingSemaphoreStatic+0x4e>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8006894:	2302      	movs	r3, #2
 8006896:	9300      	str	r3, [sp, #0]
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	2200      	movs	r2, #0
 800689c:	2100      	movs	r1, #0
 800689e:	68f8      	ldr	r0, [r7, #12]
 80068a0:	f7ff fee2 	bl	8006668 <xQueueGenericCreateStatic>
 80068a4:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 80068a6:	69fb      	ldr	r3, [r7, #28]
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d002      	beq.n	80068b2 <xQueueCreateCountingSemaphoreStatic+0x70>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80068ac:	69fb      	ldr	r3, [r7, #28]
 80068ae:	68ba      	ldr	r2, [r7, #8]
 80068b0:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 80068b2:	69fb      	ldr	r3, [r7, #28]
	}
 80068b4:	4618      	mov	r0, r3
 80068b6:	3720      	adds	r7, #32
 80068b8:	46bd      	mov	sp, r7
 80068ba:	bd80      	pop	{r7, pc}

080068bc <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 80068bc:	b580      	push	{r7, lr}
 80068be:	b086      	sub	sp, #24
 80068c0:	af00      	add	r7, sp, #0
 80068c2:	6078      	str	r0, [r7, #4]
 80068c4:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d10d      	bne.n	80068e8 <xQueueCreateCountingSemaphore+0x2c>
	__asm volatile
 80068cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80068d0:	b672      	cpsid	i
 80068d2:	f383 8811 	msr	BASEPRI, r3
 80068d6:	f3bf 8f6f 	isb	sy
 80068da:	f3bf 8f4f 	dsb	sy
 80068de:	b662      	cpsie	i
 80068e0:	613b      	str	r3, [r7, #16]
}
 80068e2:	bf00      	nop
 80068e4:	bf00      	nop
 80068e6:	e7fd      	b.n	80068e4 <xQueueCreateCountingSemaphore+0x28>
		configASSERT( uxInitialCount <= uxMaxCount );
 80068e8:	683a      	ldr	r2, [r7, #0]
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	429a      	cmp	r2, r3
 80068ee:	d90d      	bls.n	800690c <xQueueCreateCountingSemaphore+0x50>
	__asm volatile
 80068f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80068f4:	b672      	cpsid	i
 80068f6:	f383 8811 	msr	BASEPRI, r3
 80068fa:	f3bf 8f6f 	isb	sy
 80068fe:	f3bf 8f4f 	dsb	sy
 8006902:	b662      	cpsie	i
 8006904:	60fb      	str	r3, [r7, #12]
}
 8006906:	bf00      	nop
 8006908:	bf00      	nop
 800690a:	e7fd      	b.n	8006908 <xQueueCreateCountingSemaphore+0x4c>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800690c:	2202      	movs	r2, #2
 800690e:	2100      	movs	r1, #0
 8006910:	6878      	ldr	r0, [r7, #4]
 8006912:	f7ff ff30 	bl	8006776 <xQueueGenericCreate>
 8006916:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8006918:	697b      	ldr	r3, [r7, #20]
 800691a:	2b00      	cmp	r3, #0
 800691c:	d002      	beq.n	8006924 <xQueueCreateCountingSemaphore+0x68>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800691e:	697b      	ldr	r3, [r7, #20]
 8006920:	683a      	ldr	r2, [r7, #0]
 8006922:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8006924:	697b      	ldr	r3, [r7, #20]
	}
 8006926:	4618      	mov	r0, r3
 8006928:	3718      	adds	r7, #24
 800692a:	46bd      	mov	sp, r7
 800692c:	bd80      	pop	{r7, pc}
	...

08006930 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8006930:	b580      	push	{r7, lr}
 8006932:	b08e      	sub	sp, #56	@ 0x38
 8006934:	af00      	add	r7, sp, #0
 8006936:	60f8      	str	r0, [r7, #12]
 8006938:	60b9      	str	r1, [r7, #8]
 800693a:	607a      	str	r2, [r7, #4]
 800693c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800693e:	2300      	movs	r3, #0
 8006940:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8006946:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006948:	2b00      	cmp	r3, #0
 800694a:	d10d      	bne.n	8006968 <xQueueGenericSend+0x38>
	__asm volatile
 800694c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006950:	b672      	cpsid	i
 8006952:	f383 8811 	msr	BASEPRI, r3
 8006956:	f3bf 8f6f 	isb	sy
 800695a:	f3bf 8f4f 	dsb	sy
 800695e:	b662      	cpsie	i
 8006960:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8006962:	bf00      	nop
 8006964:	bf00      	nop
 8006966:	e7fd      	b.n	8006964 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006968:	68bb      	ldr	r3, [r7, #8]
 800696a:	2b00      	cmp	r3, #0
 800696c:	d103      	bne.n	8006976 <xQueueGenericSend+0x46>
 800696e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006970:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006972:	2b00      	cmp	r3, #0
 8006974:	d101      	bne.n	800697a <xQueueGenericSend+0x4a>
 8006976:	2301      	movs	r3, #1
 8006978:	e000      	b.n	800697c <xQueueGenericSend+0x4c>
 800697a:	2300      	movs	r3, #0
 800697c:	2b00      	cmp	r3, #0
 800697e:	d10d      	bne.n	800699c <xQueueGenericSend+0x6c>
	__asm volatile
 8006980:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006984:	b672      	cpsid	i
 8006986:	f383 8811 	msr	BASEPRI, r3
 800698a:	f3bf 8f6f 	isb	sy
 800698e:	f3bf 8f4f 	dsb	sy
 8006992:	b662      	cpsie	i
 8006994:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8006996:	bf00      	nop
 8006998:	bf00      	nop
 800699a:	e7fd      	b.n	8006998 <xQueueGenericSend+0x68>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800699c:	683b      	ldr	r3, [r7, #0]
 800699e:	2b02      	cmp	r3, #2
 80069a0:	d103      	bne.n	80069aa <xQueueGenericSend+0x7a>
 80069a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069a4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80069a6:	2b01      	cmp	r3, #1
 80069a8:	d101      	bne.n	80069ae <xQueueGenericSend+0x7e>
 80069aa:	2301      	movs	r3, #1
 80069ac:	e000      	b.n	80069b0 <xQueueGenericSend+0x80>
 80069ae:	2300      	movs	r3, #0
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d10d      	bne.n	80069d0 <xQueueGenericSend+0xa0>
	__asm volatile
 80069b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80069b8:	b672      	cpsid	i
 80069ba:	f383 8811 	msr	BASEPRI, r3
 80069be:	f3bf 8f6f 	isb	sy
 80069c2:	f3bf 8f4f 	dsb	sy
 80069c6:	b662      	cpsie	i
 80069c8:	623b      	str	r3, [r7, #32]
}
 80069ca:	bf00      	nop
 80069cc:	bf00      	nop
 80069ce:	e7fd      	b.n	80069cc <xQueueGenericSend+0x9c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80069d0:	f001 fcca 	bl	8008368 <xTaskGetSchedulerState>
 80069d4:	4603      	mov	r3, r0
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	d102      	bne.n	80069e0 <xQueueGenericSend+0xb0>
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	2b00      	cmp	r3, #0
 80069de:	d101      	bne.n	80069e4 <xQueueGenericSend+0xb4>
 80069e0:	2301      	movs	r3, #1
 80069e2:	e000      	b.n	80069e6 <xQueueGenericSend+0xb6>
 80069e4:	2300      	movs	r3, #0
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d10d      	bne.n	8006a06 <xQueueGenericSend+0xd6>
	__asm volatile
 80069ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80069ee:	b672      	cpsid	i
 80069f0:	f383 8811 	msr	BASEPRI, r3
 80069f4:	f3bf 8f6f 	isb	sy
 80069f8:	f3bf 8f4f 	dsb	sy
 80069fc:	b662      	cpsie	i
 80069fe:	61fb      	str	r3, [r7, #28]
}
 8006a00:	bf00      	nop
 8006a02:	bf00      	nop
 8006a04:	e7fd      	b.n	8006a02 <xQueueGenericSend+0xd2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006a06:	f002 fb11 	bl	800902c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006a0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a0c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006a0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a10:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006a12:	429a      	cmp	r2, r3
 8006a14:	d302      	bcc.n	8006a1c <xQueueGenericSend+0xec>
 8006a16:	683b      	ldr	r3, [r7, #0]
 8006a18:	2b02      	cmp	r3, #2
 8006a1a:	d129      	bne.n	8006a70 <xQueueGenericSend+0x140>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006a1c:	683a      	ldr	r2, [r7, #0]
 8006a1e:	68b9      	ldr	r1, [r7, #8]
 8006a20:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006a22:	f000 fc91 	bl	8007348 <prvCopyDataToQueue>
 8006a26:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006a28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d010      	beq.n	8006a52 <xQueueGenericSend+0x122>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006a30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a32:	3324      	adds	r3, #36	@ 0x24
 8006a34:	4618      	mov	r0, r3
 8006a36:	f001 fac9 	bl	8007fcc <xTaskRemoveFromEventList>
 8006a3a:	4603      	mov	r3, r0
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d013      	beq.n	8006a68 <xQueueGenericSend+0x138>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8006a40:	4b3f      	ldr	r3, [pc, #252]	@ (8006b40 <xQueueGenericSend+0x210>)
 8006a42:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006a46:	601a      	str	r2, [r3, #0]
 8006a48:	f3bf 8f4f 	dsb	sy
 8006a4c:	f3bf 8f6f 	isb	sy
 8006a50:	e00a      	b.n	8006a68 <xQueueGenericSend+0x138>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8006a52:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	d007      	beq.n	8006a68 <xQueueGenericSend+0x138>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8006a58:	4b39      	ldr	r3, [pc, #228]	@ (8006b40 <xQueueGenericSend+0x210>)
 8006a5a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006a5e:	601a      	str	r2, [r3, #0]
 8006a60:	f3bf 8f4f 	dsb	sy
 8006a64:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8006a68:	f002 fb16 	bl	8009098 <vPortExitCritical>
				return pdPASS;
 8006a6c:	2301      	movs	r3, #1
 8006a6e:	e063      	b.n	8006b38 <xQueueGenericSend+0x208>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	d103      	bne.n	8006a7e <xQueueGenericSend+0x14e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006a76:	f002 fb0f 	bl	8009098 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8006a7a:	2300      	movs	r3, #0
 8006a7c:	e05c      	b.n	8006b38 <xQueueGenericSend+0x208>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006a7e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	d106      	bne.n	8006a92 <xQueueGenericSend+0x162>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006a84:	f107 0314 	add.w	r3, r7, #20
 8006a88:	4618      	mov	r0, r3
 8006a8a:	f001 fb05 	bl	8008098 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006a8e:	2301      	movs	r3, #1
 8006a90:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006a92:	f002 fb01 	bl	8009098 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006a96:	f001 f861 	bl	8007b5c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006a9a:	f002 fac7 	bl	800902c <vPortEnterCritical>
 8006a9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006aa0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006aa4:	b25b      	sxtb	r3, r3
 8006aa6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006aaa:	d103      	bne.n	8006ab4 <xQueueGenericSend+0x184>
 8006aac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006aae:	2200      	movs	r2, #0
 8006ab0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006ab4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ab6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006aba:	b25b      	sxtb	r3, r3
 8006abc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ac0:	d103      	bne.n	8006aca <xQueueGenericSend+0x19a>
 8006ac2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ac4:	2200      	movs	r2, #0
 8006ac6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006aca:	f002 fae5 	bl	8009098 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006ace:	1d3a      	adds	r2, r7, #4
 8006ad0:	f107 0314 	add.w	r3, r7, #20
 8006ad4:	4611      	mov	r1, r2
 8006ad6:	4618      	mov	r0, r3
 8006ad8:	f001 faf4 	bl	80080c4 <xTaskCheckForTimeOut>
 8006adc:	4603      	mov	r3, r0
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d124      	bne.n	8006b2c <xQueueGenericSend+0x1fc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8006ae2:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006ae4:	f000 fd28 	bl	8007538 <prvIsQueueFull>
 8006ae8:	4603      	mov	r3, r0
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d018      	beq.n	8006b20 <xQueueGenericSend+0x1f0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8006aee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006af0:	3310      	adds	r3, #16
 8006af2:	687a      	ldr	r2, [r7, #4]
 8006af4:	4611      	mov	r1, r2
 8006af6:	4618      	mov	r0, r3
 8006af8:	f001 fa12 	bl	8007f20 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8006afc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006afe:	f000 fcb3 	bl	8007468 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8006b02:	f001 f839 	bl	8007b78 <xTaskResumeAll>
 8006b06:	4603      	mov	r3, r0
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	f47f af7c 	bne.w	8006a06 <xQueueGenericSend+0xd6>
				{
					portYIELD_WITHIN_API();
 8006b0e:	4b0c      	ldr	r3, [pc, #48]	@ (8006b40 <xQueueGenericSend+0x210>)
 8006b10:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006b14:	601a      	str	r2, [r3, #0]
 8006b16:	f3bf 8f4f 	dsb	sy
 8006b1a:	f3bf 8f6f 	isb	sy
 8006b1e:	e772      	b.n	8006a06 <xQueueGenericSend+0xd6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8006b20:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006b22:	f000 fca1 	bl	8007468 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006b26:	f001 f827 	bl	8007b78 <xTaskResumeAll>
 8006b2a:	e76c      	b.n	8006a06 <xQueueGenericSend+0xd6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8006b2c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006b2e:	f000 fc9b 	bl	8007468 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006b32:	f001 f821 	bl	8007b78 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8006b36:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8006b38:	4618      	mov	r0, r3
 8006b3a:	3738      	adds	r7, #56	@ 0x38
 8006b3c:	46bd      	mov	sp, r7
 8006b3e:	bd80      	pop	{r7, pc}
 8006b40:	e000ed04 	.word	0xe000ed04

08006b44 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8006b44:	b580      	push	{r7, lr}
 8006b46:	b08e      	sub	sp, #56	@ 0x38
 8006b48:	af00      	add	r7, sp, #0
 8006b4a:	60f8      	str	r0, [r7, #12]
 8006b4c:	60b9      	str	r1, [r7, #8]
 8006b4e:	607a      	str	r2, [r7, #4]
 8006b50:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8006b56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	d10d      	bne.n	8006b78 <xQueueGenericSendFromISR+0x34>
	__asm volatile
 8006b5c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b60:	b672      	cpsid	i
 8006b62:	f383 8811 	msr	BASEPRI, r3
 8006b66:	f3bf 8f6f 	isb	sy
 8006b6a:	f3bf 8f4f 	dsb	sy
 8006b6e:	b662      	cpsie	i
 8006b70:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8006b72:	bf00      	nop
 8006b74:	bf00      	nop
 8006b76:	e7fd      	b.n	8006b74 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006b78:	68bb      	ldr	r3, [r7, #8]
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d103      	bne.n	8006b86 <xQueueGenericSendFromISR+0x42>
 8006b7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d101      	bne.n	8006b8a <xQueueGenericSendFromISR+0x46>
 8006b86:	2301      	movs	r3, #1
 8006b88:	e000      	b.n	8006b8c <xQueueGenericSendFromISR+0x48>
 8006b8a:	2300      	movs	r3, #0
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	d10d      	bne.n	8006bac <xQueueGenericSendFromISR+0x68>
	__asm volatile
 8006b90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b94:	b672      	cpsid	i
 8006b96:	f383 8811 	msr	BASEPRI, r3
 8006b9a:	f3bf 8f6f 	isb	sy
 8006b9e:	f3bf 8f4f 	dsb	sy
 8006ba2:	b662      	cpsie	i
 8006ba4:	623b      	str	r3, [r7, #32]
}
 8006ba6:	bf00      	nop
 8006ba8:	bf00      	nop
 8006baa:	e7fd      	b.n	8006ba8 <xQueueGenericSendFromISR+0x64>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006bac:	683b      	ldr	r3, [r7, #0]
 8006bae:	2b02      	cmp	r3, #2
 8006bb0:	d103      	bne.n	8006bba <xQueueGenericSendFromISR+0x76>
 8006bb2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006bb4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006bb6:	2b01      	cmp	r3, #1
 8006bb8:	d101      	bne.n	8006bbe <xQueueGenericSendFromISR+0x7a>
 8006bba:	2301      	movs	r3, #1
 8006bbc:	e000      	b.n	8006bc0 <xQueueGenericSendFromISR+0x7c>
 8006bbe:	2300      	movs	r3, #0
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	d10d      	bne.n	8006be0 <xQueueGenericSendFromISR+0x9c>
	__asm volatile
 8006bc4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006bc8:	b672      	cpsid	i
 8006bca:	f383 8811 	msr	BASEPRI, r3
 8006bce:	f3bf 8f6f 	isb	sy
 8006bd2:	f3bf 8f4f 	dsb	sy
 8006bd6:	b662      	cpsie	i
 8006bd8:	61fb      	str	r3, [r7, #28]
}
 8006bda:	bf00      	nop
 8006bdc:	bf00      	nop
 8006bde:	e7fd      	b.n	8006bdc <xQueueGenericSendFromISR+0x98>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006be0:	f002 fb0c 	bl	80091fc <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8006be4:	f3ef 8211 	mrs	r2, BASEPRI
 8006be8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006bec:	b672      	cpsid	i
 8006bee:	f383 8811 	msr	BASEPRI, r3
 8006bf2:	f3bf 8f6f 	isb	sy
 8006bf6:	f3bf 8f4f 	dsb	sy
 8006bfa:	b662      	cpsie	i
 8006bfc:	61ba      	str	r2, [r7, #24]
 8006bfe:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8006c00:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006c02:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006c04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c06:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006c08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c0a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006c0c:	429a      	cmp	r2, r3
 8006c0e:	d302      	bcc.n	8006c16 <xQueueGenericSendFromISR+0xd2>
 8006c10:	683b      	ldr	r3, [r7, #0]
 8006c12:	2b02      	cmp	r3, #2
 8006c14:	d12c      	bne.n	8006c70 <xQueueGenericSendFromISR+0x12c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006c16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c18:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006c1c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006c20:	683a      	ldr	r2, [r7, #0]
 8006c22:	68b9      	ldr	r1, [r7, #8]
 8006c24:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006c26:	f000 fb8f 	bl	8007348 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006c2a:	f997 302b 	ldrsb.w	r3, [r7, #43]	@ 0x2b
 8006c2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c32:	d112      	bne.n	8006c5a <xQueueGenericSendFromISR+0x116>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006c34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	d016      	beq.n	8006c6a <xQueueGenericSendFromISR+0x126>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006c3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c3e:	3324      	adds	r3, #36	@ 0x24
 8006c40:	4618      	mov	r0, r3
 8006c42:	f001 f9c3 	bl	8007fcc <xTaskRemoveFromEventList>
 8006c46:	4603      	mov	r3, r0
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	d00e      	beq.n	8006c6a <xQueueGenericSendFromISR+0x126>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d00b      	beq.n	8006c6a <xQueueGenericSendFromISR+0x126>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	2201      	movs	r2, #1
 8006c56:	601a      	str	r2, [r3, #0]
 8006c58:	e007      	b.n	8006c6a <xQueueGenericSendFromISR+0x126>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006c5a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8006c5e:	3301      	adds	r3, #1
 8006c60:	b2db      	uxtb	r3, r3
 8006c62:	b25a      	sxtb	r2, r3
 8006c64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c66:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8006c6a:	2301      	movs	r3, #1
 8006c6c:	637b      	str	r3, [r7, #52]	@ 0x34
		{
 8006c6e:	e001      	b.n	8006c74 <xQueueGenericSendFromISR+0x130>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006c70:	2300      	movs	r3, #0
 8006c72:	637b      	str	r3, [r7, #52]	@ 0x34
 8006c74:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006c76:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006c78:	693b      	ldr	r3, [r7, #16]
 8006c7a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8006c7e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006c80:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8006c82:	4618      	mov	r0, r3
 8006c84:	3738      	adds	r7, #56	@ 0x38
 8006c86:	46bd      	mov	sp, r7
 8006c88:	bd80      	pop	{r7, pc}

08006c8a <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8006c8a:	b580      	push	{r7, lr}
 8006c8c:	b08e      	sub	sp, #56	@ 0x38
 8006c8e:	af00      	add	r7, sp, #0
 8006c90:	6078      	str	r0, [r7, #4]
 8006c92:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8006c98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d10d      	bne.n	8006cba <xQueueGiveFromISR+0x30>
	__asm volatile
 8006c9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ca2:	b672      	cpsid	i
 8006ca4:	f383 8811 	msr	BASEPRI, r3
 8006ca8:	f3bf 8f6f 	isb	sy
 8006cac:	f3bf 8f4f 	dsb	sy
 8006cb0:	b662      	cpsie	i
 8006cb2:	623b      	str	r3, [r7, #32]
}
 8006cb4:	bf00      	nop
 8006cb6:	bf00      	nop
 8006cb8:	e7fd      	b.n	8006cb6 <xQueueGiveFromISR+0x2c>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8006cba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006cbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	d00d      	beq.n	8006cde <xQueueGiveFromISR+0x54>
	__asm volatile
 8006cc2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006cc6:	b672      	cpsid	i
 8006cc8:	f383 8811 	msr	BASEPRI, r3
 8006ccc:	f3bf 8f6f 	isb	sy
 8006cd0:	f3bf 8f4f 	dsb	sy
 8006cd4:	b662      	cpsie	i
 8006cd6:	61fb      	str	r3, [r7, #28]
}
 8006cd8:	bf00      	nop
 8006cda:	bf00      	nop
 8006cdc:	e7fd      	b.n	8006cda <xQueueGiveFromISR+0x50>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8006cde:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d103      	bne.n	8006cee <xQueueGiveFromISR+0x64>
 8006ce6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ce8:	689b      	ldr	r3, [r3, #8]
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	d101      	bne.n	8006cf2 <xQueueGiveFromISR+0x68>
 8006cee:	2301      	movs	r3, #1
 8006cf0:	e000      	b.n	8006cf4 <xQueueGiveFromISR+0x6a>
 8006cf2:	2300      	movs	r3, #0
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d10d      	bne.n	8006d14 <xQueueGiveFromISR+0x8a>
	__asm volatile
 8006cf8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006cfc:	b672      	cpsid	i
 8006cfe:	f383 8811 	msr	BASEPRI, r3
 8006d02:	f3bf 8f6f 	isb	sy
 8006d06:	f3bf 8f4f 	dsb	sy
 8006d0a:	b662      	cpsie	i
 8006d0c:	61bb      	str	r3, [r7, #24]
}
 8006d0e:	bf00      	nop
 8006d10:	bf00      	nop
 8006d12:	e7fd      	b.n	8006d10 <xQueueGiveFromISR+0x86>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006d14:	f002 fa72 	bl	80091fc <vPortValidateInterruptPriority>
	__asm volatile
 8006d18:	f3ef 8211 	mrs	r2, BASEPRI
 8006d1c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d20:	b672      	cpsid	i
 8006d22:	f383 8811 	msr	BASEPRI, r3
 8006d26:	f3bf 8f6f 	isb	sy
 8006d2a:	f3bf 8f4f 	dsb	sy
 8006d2e:	b662      	cpsie	i
 8006d30:	617a      	str	r2, [r7, #20]
 8006d32:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8006d34:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006d36:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006d38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d3a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d3c:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8006d3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d40:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006d42:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006d44:	429a      	cmp	r2, r3
 8006d46:	d22b      	bcs.n	8006da0 <xQueueGiveFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006d48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d4a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006d4e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006d52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d54:	1c5a      	adds	r2, r3, #1
 8006d56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d58:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006d5a:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8006d5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d62:	d112      	bne.n	8006d8a <xQueueGiveFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006d64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d016      	beq.n	8006d9a <xQueueGiveFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006d6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d6e:	3324      	adds	r3, #36	@ 0x24
 8006d70:	4618      	mov	r0, r3
 8006d72:	f001 f92b 	bl	8007fcc <xTaskRemoveFromEventList>
 8006d76:	4603      	mov	r3, r0
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	d00e      	beq.n	8006d9a <xQueueGiveFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006d7c:	683b      	ldr	r3, [r7, #0]
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	d00b      	beq.n	8006d9a <xQueueGiveFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006d82:	683b      	ldr	r3, [r7, #0]
 8006d84:	2201      	movs	r2, #1
 8006d86:	601a      	str	r2, [r3, #0]
 8006d88:	e007      	b.n	8006d9a <xQueueGiveFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006d8a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006d8e:	3301      	adds	r3, #1
 8006d90:	b2db      	uxtb	r3, r3
 8006d92:	b25a      	sxtb	r2, r3
 8006d94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d96:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8006d9a:	2301      	movs	r3, #1
 8006d9c:	637b      	str	r3, [r7, #52]	@ 0x34
 8006d9e:	e001      	b.n	8006da4 <xQueueGiveFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006da0:	2300      	movs	r3, #0
 8006da2:	637b      	str	r3, [r7, #52]	@ 0x34
 8006da4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006da6:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	f383 8811 	msr	BASEPRI, r3
}
 8006dae:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006db0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8006db2:	4618      	mov	r0, r3
 8006db4:	3738      	adds	r7, #56	@ 0x38
 8006db6:	46bd      	mov	sp, r7
 8006db8:	bd80      	pop	{r7, pc}
	...

08006dbc <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8006dbc:	b580      	push	{r7, lr}
 8006dbe:	b08c      	sub	sp, #48	@ 0x30
 8006dc0:	af00      	add	r7, sp, #0
 8006dc2:	60f8      	str	r0, [r7, #12]
 8006dc4:	60b9      	str	r1, [r7, #8]
 8006dc6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8006dc8:	2300      	movs	r3, #0
 8006dca:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006dd0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d10d      	bne.n	8006df2 <xQueueReceive+0x36>
	__asm volatile
 8006dd6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006dda:	b672      	cpsid	i
 8006ddc:	f383 8811 	msr	BASEPRI, r3
 8006de0:	f3bf 8f6f 	isb	sy
 8006de4:	f3bf 8f4f 	dsb	sy
 8006de8:	b662      	cpsie	i
 8006dea:	623b      	str	r3, [r7, #32]
}
 8006dec:	bf00      	nop
 8006dee:	bf00      	nop
 8006df0:	e7fd      	b.n	8006dee <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006df2:	68bb      	ldr	r3, [r7, #8]
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	d103      	bne.n	8006e00 <xQueueReceive+0x44>
 8006df8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006dfa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	d101      	bne.n	8006e04 <xQueueReceive+0x48>
 8006e00:	2301      	movs	r3, #1
 8006e02:	e000      	b.n	8006e06 <xQueueReceive+0x4a>
 8006e04:	2300      	movs	r3, #0
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	d10d      	bne.n	8006e26 <xQueueReceive+0x6a>
	__asm volatile
 8006e0a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e0e:	b672      	cpsid	i
 8006e10:	f383 8811 	msr	BASEPRI, r3
 8006e14:	f3bf 8f6f 	isb	sy
 8006e18:	f3bf 8f4f 	dsb	sy
 8006e1c:	b662      	cpsie	i
 8006e1e:	61fb      	str	r3, [r7, #28]
}
 8006e20:	bf00      	nop
 8006e22:	bf00      	nop
 8006e24:	e7fd      	b.n	8006e22 <xQueueReceive+0x66>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006e26:	f001 fa9f 	bl	8008368 <xTaskGetSchedulerState>
 8006e2a:	4603      	mov	r3, r0
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	d102      	bne.n	8006e36 <xQueueReceive+0x7a>
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d101      	bne.n	8006e3a <xQueueReceive+0x7e>
 8006e36:	2301      	movs	r3, #1
 8006e38:	e000      	b.n	8006e3c <xQueueReceive+0x80>
 8006e3a:	2300      	movs	r3, #0
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	d10d      	bne.n	8006e5c <xQueueReceive+0xa0>
	__asm volatile
 8006e40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e44:	b672      	cpsid	i
 8006e46:	f383 8811 	msr	BASEPRI, r3
 8006e4a:	f3bf 8f6f 	isb	sy
 8006e4e:	f3bf 8f4f 	dsb	sy
 8006e52:	b662      	cpsie	i
 8006e54:	61bb      	str	r3, [r7, #24]
}
 8006e56:	bf00      	nop
 8006e58:	bf00      	nop
 8006e5a:	e7fd      	b.n	8006e58 <xQueueReceive+0x9c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006e5c:	f002 f8e6 	bl	800902c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006e60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e62:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e64:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006e66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	d01f      	beq.n	8006eac <xQueueReceive+0xf0>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006e6c:	68b9      	ldr	r1, [r7, #8]
 8006e6e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006e70:	f000 fad4 	bl	800741c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006e74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e76:	1e5a      	subs	r2, r3, #1
 8006e78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e7a:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006e7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e7e:	691b      	ldr	r3, [r3, #16]
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	d00f      	beq.n	8006ea4 <xQueueReceive+0xe8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006e84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e86:	3310      	adds	r3, #16
 8006e88:	4618      	mov	r0, r3
 8006e8a:	f001 f89f 	bl	8007fcc <xTaskRemoveFromEventList>
 8006e8e:	4603      	mov	r3, r0
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	d007      	beq.n	8006ea4 <xQueueReceive+0xe8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006e94:	4b3c      	ldr	r3, [pc, #240]	@ (8006f88 <xQueueReceive+0x1cc>)
 8006e96:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006e9a:	601a      	str	r2, [r3, #0]
 8006e9c:	f3bf 8f4f 	dsb	sy
 8006ea0:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006ea4:	f002 f8f8 	bl	8009098 <vPortExitCritical>
				return pdPASS;
 8006ea8:	2301      	movs	r3, #1
 8006eaa:	e069      	b.n	8006f80 <xQueueReceive+0x1c4>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d103      	bne.n	8006eba <xQueueReceive+0xfe>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006eb2:	f002 f8f1 	bl	8009098 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006eb6:	2300      	movs	r3, #0
 8006eb8:	e062      	b.n	8006f80 <xQueueReceive+0x1c4>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006eba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	d106      	bne.n	8006ece <xQueueReceive+0x112>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006ec0:	f107 0310 	add.w	r3, r7, #16
 8006ec4:	4618      	mov	r0, r3
 8006ec6:	f001 f8e7 	bl	8008098 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006eca:	2301      	movs	r3, #1
 8006ecc:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006ece:	f002 f8e3 	bl	8009098 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006ed2:	f000 fe43 	bl	8007b5c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006ed6:	f002 f8a9 	bl	800902c <vPortEnterCritical>
 8006eda:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006edc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006ee0:	b25b      	sxtb	r3, r3
 8006ee2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ee6:	d103      	bne.n	8006ef0 <xQueueReceive+0x134>
 8006ee8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006eea:	2200      	movs	r2, #0
 8006eec:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006ef0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ef2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006ef6:	b25b      	sxtb	r3, r3
 8006ef8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006efc:	d103      	bne.n	8006f06 <xQueueReceive+0x14a>
 8006efe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f00:	2200      	movs	r2, #0
 8006f02:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006f06:	f002 f8c7 	bl	8009098 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006f0a:	1d3a      	adds	r2, r7, #4
 8006f0c:	f107 0310 	add.w	r3, r7, #16
 8006f10:	4611      	mov	r1, r2
 8006f12:	4618      	mov	r0, r3
 8006f14:	f001 f8d6 	bl	80080c4 <xTaskCheckForTimeOut>
 8006f18:	4603      	mov	r3, r0
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d123      	bne.n	8006f66 <xQueueReceive+0x1aa>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006f1e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006f20:	f000 faf4 	bl	800750c <prvIsQueueEmpty>
 8006f24:	4603      	mov	r3, r0
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	d017      	beq.n	8006f5a <xQueueReceive+0x19e>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006f2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f2c:	3324      	adds	r3, #36	@ 0x24
 8006f2e:	687a      	ldr	r2, [r7, #4]
 8006f30:	4611      	mov	r1, r2
 8006f32:	4618      	mov	r0, r3
 8006f34:	f000 fff4 	bl	8007f20 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006f38:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006f3a:	f000 fa95 	bl	8007468 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006f3e:	f000 fe1b 	bl	8007b78 <xTaskResumeAll>
 8006f42:	4603      	mov	r3, r0
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	d189      	bne.n	8006e5c <xQueueReceive+0xa0>
				{
					portYIELD_WITHIN_API();
 8006f48:	4b0f      	ldr	r3, [pc, #60]	@ (8006f88 <xQueueReceive+0x1cc>)
 8006f4a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006f4e:	601a      	str	r2, [r3, #0]
 8006f50:	f3bf 8f4f 	dsb	sy
 8006f54:	f3bf 8f6f 	isb	sy
 8006f58:	e780      	b.n	8006e5c <xQueueReceive+0xa0>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8006f5a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006f5c:	f000 fa84 	bl	8007468 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006f60:	f000 fe0a 	bl	8007b78 <xTaskResumeAll>
 8006f64:	e77a      	b.n	8006e5c <xQueueReceive+0xa0>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8006f66:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006f68:	f000 fa7e 	bl	8007468 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006f6c:	f000 fe04 	bl	8007b78 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006f70:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006f72:	f000 facb 	bl	800750c <prvIsQueueEmpty>
 8006f76:	4603      	mov	r3, r0
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	f43f af6f 	beq.w	8006e5c <xQueueReceive+0xa0>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006f7e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8006f80:	4618      	mov	r0, r3
 8006f82:	3730      	adds	r7, #48	@ 0x30
 8006f84:	46bd      	mov	sp, r7
 8006f86:	bd80      	pop	{r7, pc}
 8006f88:	e000ed04 	.word	0xe000ed04

08006f8c <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8006f8c:	b580      	push	{r7, lr}
 8006f8e:	b08e      	sub	sp, #56	@ 0x38
 8006f90:	af00      	add	r7, sp, #0
 8006f92:	6078      	str	r0, [r7, #4]
 8006f94:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8006f96:	2300      	movs	r3, #0
 8006f98:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8006f9e:	2300      	movs	r3, #0
 8006fa0:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006fa2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	d10d      	bne.n	8006fc4 <xQueueSemaphoreTake+0x38>
	__asm volatile
 8006fa8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006fac:	b672      	cpsid	i
 8006fae:	f383 8811 	msr	BASEPRI, r3
 8006fb2:	f3bf 8f6f 	isb	sy
 8006fb6:	f3bf 8f4f 	dsb	sy
 8006fba:	b662      	cpsie	i
 8006fbc:	623b      	str	r3, [r7, #32]
}
 8006fbe:	bf00      	nop
 8006fc0:	bf00      	nop
 8006fc2:	e7fd      	b.n	8006fc0 <xQueueSemaphoreTake+0x34>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8006fc4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006fc6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	d00d      	beq.n	8006fe8 <xQueueSemaphoreTake+0x5c>
	__asm volatile
 8006fcc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006fd0:	b672      	cpsid	i
 8006fd2:	f383 8811 	msr	BASEPRI, r3
 8006fd6:	f3bf 8f6f 	isb	sy
 8006fda:	f3bf 8f4f 	dsb	sy
 8006fde:	b662      	cpsie	i
 8006fe0:	61fb      	str	r3, [r7, #28]
}
 8006fe2:	bf00      	nop
 8006fe4:	bf00      	nop
 8006fe6:	e7fd      	b.n	8006fe4 <xQueueSemaphoreTake+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006fe8:	f001 f9be 	bl	8008368 <xTaskGetSchedulerState>
 8006fec:	4603      	mov	r3, r0
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	d102      	bne.n	8006ff8 <xQueueSemaphoreTake+0x6c>
 8006ff2:	683b      	ldr	r3, [r7, #0]
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	d101      	bne.n	8006ffc <xQueueSemaphoreTake+0x70>
 8006ff8:	2301      	movs	r3, #1
 8006ffa:	e000      	b.n	8006ffe <xQueueSemaphoreTake+0x72>
 8006ffc:	2300      	movs	r3, #0
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	d10d      	bne.n	800701e <xQueueSemaphoreTake+0x92>
	__asm volatile
 8007002:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007006:	b672      	cpsid	i
 8007008:	f383 8811 	msr	BASEPRI, r3
 800700c:	f3bf 8f6f 	isb	sy
 8007010:	f3bf 8f4f 	dsb	sy
 8007014:	b662      	cpsie	i
 8007016:	61bb      	str	r3, [r7, #24]
}
 8007018:	bf00      	nop
 800701a:	bf00      	nop
 800701c:	e7fd      	b.n	800701a <xQueueSemaphoreTake+0x8e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800701e:	f002 f805 	bl	800902c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8007022:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007024:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007026:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8007028:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800702a:	2b00      	cmp	r3, #0
 800702c:	d024      	beq.n	8007078 <xQueueSemaphoreTake+0xec>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800702e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007030:	1e5a      	subs	r2, r3, #1
 8007032:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007034:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007036:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	2b00      	cmp	r3, #0
 800703c:	d104      	bne.n	8007048 <xQueueSemaphoreTake+0xbc>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800703e:	f001 fb15 	bl	800866c <pvTaskIncrementMutexHeldCount>
 8007042:	4602      	mov	r2, r0
 8007044:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007046:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007048:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800704a:	691b      	ldr	r3, [r3, #16]
 800704c:	2b00      	cmp	r3, #0
 800704e:	d00f      	beq.n	8007070 <xQueueSemaphoreTake+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007050:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007052:	3310      	adds	r3, #16
 8007054:	4618      	mov	r0, r3
 8007056:	f000 ffb9 	bl	8007fcc <xTaskRemoveFromEventList>
 800705a:	4603      	mov	r3, r0
 800705c:	2b00      	cmp	r3, #0
 800705e:	d007      	beq.n	8007070 <xQueueSemaphoreTake+0xe4>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8007060:	4b55      	ldr	r3, [pc, #340]	@ (80071b8 <xQueueSemaphoreTake+0x22c>)
 8007062:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007066:	601a      	str	r2, [r3, #0]
 8007068:	f3bf 8f4f 	dsb	sy
 800706c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8007070:	f002 f812 	bl	8009098 <vPortExitCritical>
				return pdPASS;
 8007074:	2301      	movs	r3, #1
 8007076:	e09a      	b.n	80071ae <xQueueSemaphoreTake+0x222>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007078:	683b      	ldr	r3, [r7, #0]
 800707a:	2b00      	cmp	r3, #0
 800707c:	d114      	bne.n	80070a8 <xQueueSemaphoreTake+0x11c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800707e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007080:	2b00      	cmp	r3, #0
 8007082:	d00d      	beq.n	80070a0 <xQueueSemaphoreTake+0x114>
	__asm volatile
 8007084:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007088:	b672      	cpsid	i
 800708a:	f383 8811 	msr	BASEPRI, r3
 800708e:	f3bf 8f6f 	isb	sy
 8007092:	f3bf 8f4f 	dsb	sy
 8007096:	b662      	cpsie	i
 8007098:	617b      	str	r3, [r7, #20]
}
 800709a:	bf00      	nop
 800709c:	bf00      	nop
 800709e:	e7fd      	b.n	800709c <xQueueSemaphoreTake+0x110>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 80070a0:	f001 fffa 	bl	8009098 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80070a4:	2300      	movs	r3, #0
 80070a6:	e082      	b.n	80071ae <xQueueSemaphoreTake+0x222>
				}
				else if( xEntryTimeSet == pdFALSE )
 80070a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	d106      	bne.n	80070bc <xQueueSemaphoreTake+0x130>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80070ae:	f107 030c 	add.w	r3, r7, #12
 80070b2:	4618      	mov	r0, r3
 80070b4:	f000 fff0 	bl	8008098 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80070b8:	2301      	movs	r3, #1
 80070ba:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80070bc:	f001 ffec 	bl	8009098 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80070c0:	f000 fd4c 	bl	8007b5c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80070c4:	f001 ffb2 	bl	800902c <vPortEnterCritical>
 80070c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80070ca:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80070ce:	b25b      	sxtb	r3, r3
 80070d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80070d4:	d103      	bne.n	80070de <xQueueSemaphoreTake+0x152>
 80070d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80070d8:	2200      	movs	r2, #0
 80070da:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80070de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80070e0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80070e4:	b25b      	sxtb	r3, r3
 80070e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80070ea:	d103      	bne.n	80070f4 <xQueueSemaphoreTake+0x168>
 80070ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80070ee:	2200      	movs	r2, #0
 80070f0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80070f4:	f001 ffd0 	bl	8009098 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80070f8:	463a      	mov	r2, r7
 80070fa:	f107 030c 	add.w	r3, r7, #12
 80070fe:	4611      	mov	r1, r2
 8007100:	4618      	mov	r0, r3
 8007102:	f000 ffdf 	bl	80080c4 <xTaskCheckForTimeOut>
 8007106:	4603      	mov	r3, r0
 8007108:	2b00      	cmp	r3, #0
 800710a:	d132      	bne.n	8007172 <xQueueSemaphoreTake+0x1e6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800710c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800710e:	f000 f9fd 	bl	800750c <prvIsQueueEmpty>
 8007112:	4603      	mov	r3, r0
 8007114:	2b00      	cmp	r3, #0
 8007116:	d026      	beq.n	8007166 <xQueueSemaphoreTake+0x1da>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007118:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	2b00      	cmp	r3, #0
 800711e:	d109      	bne.n	8007134 <xQueueSemaphoreTake+0x1a8>
					{
						taskENTER_CRITICAL();
 8007120:	f001 ff84 	bl	800902c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007124:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007126:	689b      	ldr	r3, [r3, #8]
 8007128:	4618      	mov	r0, r3
 800712a:	f001 f93b 	bl	80083a4 <xTaskPriorityInherit>
 800712e:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 8007130:	f001 ffb2 	bl	8009098 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007134:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007136:	3324      	adds	r3, #36	@ 0x24
 8007138:	683a      	ldr	r2, [r7, #0]
 800713a:	4611      	mov	r1, r2
 800713c:	4618      	mov	r0, r3
 800713e:	f000 feef 	bl	8007f20 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007142:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8007144:	f000 f990 	bl	8007468 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007148:	f000 fd16 	bl	8007b78 <xTaskResumeAll>
 800714c:	4603      	mov	r3, r0
 800714e:	2b00      	cmp	r3, #0
 8007150:	f47f af65 	bne.w	800701e <xQueueSemaphoreTake+0x92>
				{
					portYIELD_WITHIN_API();
 8007154:	4b18      	ldr	r3, [pc, #96]	@ (80071b8 <xQueueSemaphoreTake+0x22c>)
 8007156:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800715a:	601a      	str	r2, [r3, #0]
 800715c:	f3bf 8f4f 	dsb	sy
 8007160:	f3bf 8f6f 	isb	sy
 8007164:	e75b      	b.n	800701e <xQueueSemaphoreTake+0x92>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8007166:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8007168:	f000 f97e 	bl	8007468 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800716c:	f000 fd04 	bl	8007b78 <xTaskResumeAll>
 8007170:	e755      	b.n	800701e <xQueueSemaphoreTake+0x92>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8007172:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8007174:	f000 f978 	bl	8007468 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007178:	f000 fcfe 	bl	8007b78 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800717c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800717e:	f000 f9c5 	bl	800750c <prvIsQueueEmpty>
 8007182:	4603      	mov	r3, r0
 8007184:	2b00      	cmp	r3, #0
 8007186:	f43f af4a 	beq.w	800701e <xQueueSemaphoreTake+0x92>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800718a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800718c:	2b00      	cmp	r3, #0
 800718e:	d00d      	beq.n	80071ac <xQueueSemaphoreTake+0x220>
					{
						taskENTER_CRITICAL();
 8007190:	f001 ff4c 	bl	800902c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8007194:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8007196:	f000 f8bf 	bl	8007318 <prvGetDisinheritPriorityAfterTimeout>
 800719a:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800719c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800719e:	689b      	ldr	r3, [r3, #8]
 80071a0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80071a2:	4618      	mov	r0, r3
 80071a4:	f001 f9da 	bl	800855c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80071a8:	f001 ff76 	bl	8009098 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80071ac:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80071ae:	4618      	mov	r0, r3
 80071b0:	3738      	adds	r7, #56	@ 0x38
 80071b2:	46bd      	mov	sp, r7
 80071b4:	bd80      	pop	{r7, pc}
 80071b6:	bf00      	nop
 80071b8:	e000ed04 	.word	0xe000ed04

080071bc <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80071bc:	b580      	push	{r7, lr}
 80071be:	b08e      	sub	sp, #56	@ 0x38
 80071c0:	af00      	add	r7, sp, #0
 80071c2:	60f8      	str	r0, [r7, #12]
 80071c4:	60b9      	str	r1, [r7, #8]
 80071c6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80071cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	d10d      	bne.n	80071ee <xQueueReceiveFromISR+0x32>
	__asm volatile
 80071d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80071d6:	b672      	cpsid	i
 80071d8:	f383 8811 	msr	BASEPRI, r3
 80071dc:	f3bf 8f6f 	isb	sy
 80071e0:	f3bf 8f4f 	dsb	sy
 80071e4:	b662      	cpsie	i
 80071e6:	623b      	str	r3, [r7, #32]
}
 80071e8:	bf00      	nop
 80071ea:	bf00      	nop
 80071ec:	e7fd      	b.n	80071ea <xQueueReceiveFromISR+0x2e>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80071ee:	68bb      	ldr	r3, [r7, #8]
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	d103      	bne.n	80071fc <xQueueReceiveFromISR+0x40>
 80071f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	d101      	bne.n	8007200 <xQueueReceiveFromISR+0x44>
 80071fc:	2301      	movs	r3, #1
 80071fe:	e000      	b.n	8007202 <xQueueReceiveFromISR+0x46>
 8007200:	2300      	movs	r3, #0
 8007202:	2b00      	cmp	r3, #0
 8007204:	d10d      	bne.n	8007222 <xQueueReceiveFromISR+0x66>
	__asm volatile
 8007206:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800720a:	b672      	cpsid	i
 800720c:	f383 8811 	msr	BASEPRI, r3
 8007210:	f3bf 8f6f 	isb	sy
 8007214:	f3bf 8f4f 	dsb	sy
 8007218:	b662      	cpsie	i
 800721a:	61fb      	str	r3, [r7, #28]
}
 800721c:	bf00      	nop
 800721e:	bf00      	nop
 8007220:	e7fd      	b.n	800721e <xQueueReceiveFromISR+0x62>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007222:	f001 ffeb 	bl	80091fc <vPortValidateInterruptPriority>
	__asm volatile
 8007226:	f3ef 8211 	mrs	r2, BASEPRI
 800722a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800722e:	b672      	cpsid	i
 8007230:	f383 8811 	msr	BASEPRI, r3
 8007234:	f3bf 8f6f 	isb	sy
 8007238:	f3bf 8f4f 	dsb	sy
 800723c:	b662      	cpsie	i
 800723e:	61ba      	str	r2, [r7, #24]
 8007240:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8007242:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007244:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007246:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007248:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800724a:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800724c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800724e:	2b00      	cmp	r3, #0
 8007250:	d02f      	beq.n	80072b2 <xQueueReceiveFromISR+0xf6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8007252:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007254:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007258:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800725c:	68b9      	ldr	r1, [r7, #8]
 800725e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007260:	f000 f8dc 	bl	800741c <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007264:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007266:	1e5a      	subs	r2, r3, #1
 8007268:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800726a:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800726c:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8007270:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007274:	d112      	bne.n	800729c <xQueueReceiveFromISR+0xe0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007276:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007278:	691b      	ldr	r3, [r3, #16]
 800727a:	2b00      	cmp	r3, #0
 800727c:	d016      	beq.n	80072ac <xQueueReceiveFromISR+0xf0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800727e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007280:	3310      	adds	r3, #16
 8007282:	4618      	mov	r0, r3
 8007284:	f000 fea2 	bl	8007fcc <xTaskRemoveFromEventList>
 8007288:	4603      	mov	r3, r0
 800728a:	2b00      	cmp	r3, #0
 800728c:	d00e      	beq.n	80072ac <xQueueReceiveFromISR+0xf0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	2b00      	cmp	r3, #0
 8007292:	d00b      	beq.n	80072ac <xQueueReceiveFromISR+0xf0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	2201      	movs	r2, #1
 8007298:	601a      	str	r2, [r3, #0]
 800729a:	e007      	b.n	80072ac <xQueueReceiveFromISR+0xf0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800729c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80072a0:	3301      	adds	r3, #1
 80072a2:	b2db      	uxtb	r3, r3
 80072a4:	b25a      	sxtb	r2, r3
 80072a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072a8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 80072ac:	2301      	movs	r3, #1
 80072ae:	637b      	str	r3, [r7, #52]	@ 0x34
 80072b0:	e001      	b.n	80072b6 <xQueueReceiveFromISR+0xfa>
		}
		else
		{
			xReturn = pdFAIL;
 80072b2:	2300      	movs	r3, #0
 80072b4:	637b      	str	r3, [r7, #52]	@ 0x34
 80072b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80072b8:	613b      	str	r3, [r7, #16]
	__asm volatile
 80072ba:	693b      	ldr	r3, [r7, #16]
 80072bc:	f383 8811 	msr	BASEPRI, r3
}
 80072c0:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80072c2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 80072c4:	4618      	mov	r0, r3
 80072c6:	3738      	adds	r7, #56	@ 0x38
 80072c8:	46bd      	mov	sp, r7
 80072ca:	bd80      	pop	{r7, pc}

080072cc <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 80072cc:	b580      	push	{r7, lr}
 80072ce:	b084      	sub	sp, #16
 80072d0:	af00      	add	r7, sp, #0
 80072d2:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	2b00      	cmp	r3, #0
 80072dc:	d10d      	bne.n	80072fa <vQueueDelete+0x2e>
	__asm volatile
 80072de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80072e2:	b672      	cpsid	i
 80072e4:	f383 8811 	msr	BASEPRI, r3
 80072e8:	f3bf 8f6f 	isb	sy
 80072ec:	f3bf 8f4f 	dsb	sy
 80072f0:	b662      	cpsie	i
 80072f2:	60bb      	str	r3, [r7, #8]
}
 80072f4:	bf00      	nop
 80072f6:	bf00      	nop
 80072f8:	e7fd      	b.n	80072f6 <vQueueDelete+0x2a>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 80072fa:	68f8      	ldr	r0, [r7, #12]
 80072fc:	f000 f95e 	bl	80075bc <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 8007306:	2b00      	cmp	r3, #0
 8007308:	d102      	bne.n	8007310 <vQueueDelete+0x44>
		{
			vPortFree( pxQueue );
 800730a:	68f8      	ldr	r0, [r7, #12]
 800730c:	f002 f88a 	bl	8009424 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8007310:	bf00      	nop
 8007312:	3710      	adds	r7, #16
 8007314:	46bd      	mov	sp, r7
 8007316:	bd80      	pop	{r7, pc}

08007318 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8007318:	b480      	push	{r7}
 800731a:	b085      	sub	sp, #20
 800731c:	af00      	add	r7, sp, #0
 800731e:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007324:	2b00      	cmp	r3, #0
 8007326:	d006      	beq.n	8007336 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 8007332:	60fb      	str	r3, [r7, #12]
 8007334:	e001      	b.n	800733a <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8007336:	2300      	movs	r3, #0
 8007338:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800733a:	68fb      	ldr	r3, [r7, #12]
	}
 800733c:	4618      	mov	r0, r3
 800733e:	3714      	adds	r7, #20
 8007340:	46bd      	mov	sp, r7
 8007342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007346:	4770      	bx	lr

08007348 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8007348:	b580      	push	{r7, lr}
 800734a:	b086      	sub	sp, #24
 800734c:	af00      	add	r7, sp, #0
 800734e:	60f8      	str	r0, [r7, #12]
 8007350:	60b9      	str	r1, [r7, #8]
 8007352:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8007354:	2300      	movs	r3, #0
 8007356:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800735c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007362:	2b00      	cmp	r3, #0
 8007364:	d10d      	bne.n	8007382 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	2b00      	cmp	r3, #0
 800736c:	d14d      	bne.n	800740a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	689b      	ldr	r3, [r3, #8]
 8007372:	4618      	mov	r0, r3
 8007374:	f001 f87e 	bl	8008474 <xTaskPriorityDisinherit>
 8007378:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	2200      	movs	r2, #0
 800737e:	609a      	str	r2, [r3, #8]
 8007380:	e043      	b.n	800740a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	2b00      	cmp	r3, #0
 8007386:	d119      	bne.n	80073bc <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	6858      	ldr	r0, [r3, #4]
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007390:	461a      	mov	r2, r3
 8007392:	68b9      	ldr	r1, [r7, #8]
 8007394:	f002 fc3d 	bl	8009c12 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	685a      	ldr	r2, [r3, #4]
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80073a0:	441a      	add	r2, r3
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	685a      	ldr	r2, [r3, #4]
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	689b      	ldr	r3, [r3, #8]
 80073ae:	429a      	cmp	r2, r3
 80073b0:	d32b      	bcc.n	800740a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80073b2:	68fb      	ldr	r3, [r7, #12]
 80073b4:	681a      	ldr	r2, [r3, #0]
 80073b6:	68fb      	ldr	r3, [r7, #12]
 80073b8:	605a      	str	r2, [r3, #4]
 80073ba:	e026      	b.n	800740a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	68d8      	ldr	r0, [r3, #12]
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80073c4:	461a      	mov	r2, r3
 80073c6:	68b9      	ldr	r1, [r7, #8]
 80073c8:	f002 fc23 	bl	8009c12 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	68da      	ldr	r2, [r3, #12]
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80073d4:	425b      	negs	r3, r3
 80073d6:	441a      	add	r2, r3
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	68da      	ldr	r2, [r3, #12]
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	429a      	cmp	r2, r3
 80073e6:	d207      	bcs.n	80073f8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	689a      	ldr	r2, [r3, #8]
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80073f0:	425b      	negs	r3, r3
 80073f2:	441a      	add	r2, r3
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	2b02      	cmp	r3, #2
 80073fc:	d105      	bne.n	800740a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80073fe:	693b      	ldr	r3, [r7, #16]
 8007400:	2b00      	cmp	r3, #0
 8007402:	d002      	beq.n	800740a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8007404:	693b      	ldr	r3, [r7, #16]
 8007406:	3b01      	subs	r3, #1
 8007408:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800740a:	693b      	ldr	r3, [r7, #16]
 800740c:	1c5a      	adds	r2, r3, #1
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8007412:	697b      	ldr	r3, [r7, #20]
}
 8007414:	4618      	mov	r0, r3
 8007416:	3718      	adds	r7, #24
 8007418:	46bd      	mov	sp, r7
 800741a:	bd80      	pop	{r7, pc}

0800741c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800741c:	b580      	push	{r7, lr}
 800741e:	b082      	sub	sp, #8
 8007420:	af00      	add	r7, sp, #0
 8007422:	6078      	str	r0, [r7, #4]
 8007424:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800742a:	2b00      	cmp	r3, #0
 800742c:	d018      	beq.n	8007460 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	68da      	ldr	r2, [r3, #12]
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007436:	441a      	add	r2, r3
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	68da      	ldr	r2, [r3, #12]
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	689b      	ldr	r3, [r3, #8]
 8007444:	429a      	cmp	r2, r3
 8007446:	d303      	bcc.n	8007450 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	681a      	ldr	r2, [r3, #0]
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	68d9      	ldr	r1, [r3, #12]
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007458:	461a      	mov	r2, r3
 800745a:	6838      	ldr	r0, [r7, #0]
 800745c:	f002 fbd9 	bl	8009c12 <memcpy>
	}
}
 8007460:	bf00      	nop
 8007462:	3708      	adds	r7, #8
 8007464:	46bd      	mov	sp, r7
 8007466:	bd80      	pop	{r7, pc}

08007468 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8007468:	b580      	push	{r7, lr}
 800746a:	b084      	sub	sp, #16
 800746c:	af00      	add	r7, sp, #0
 800746e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8007470:	f001 fddc 	bl	800902c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800747a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800747c:	e011      	b.n	80074a2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007482:	2b00      	cmp	r3, #0
 8007484:	d012      	beq.n	80074ac <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	3324      	adds	r3, #36	@ 0x24
 800748a:	4618      	mov	r0, r3
 800748c:	f000 fd9e 	bl	8007fcc <xTaskRemoveFromEventList>
 8007490:	4603      	mov	r3, r0
 8007492:	2b00      	cmp	r3, #0
 8007494:	d001      	beq.n	800749a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8007496:	f000 fe7d 	bl	8008194 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800749a:	7bfb      	ldrb	r3, [r7, #15]
 800749c:	3b01      	subs	r3, #1
 800749e:	b2db      	uxtb	r3, r3
 80074a0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80074a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	dce9      	bgt.n	800747e <prvUnlockQueue+0x16>
 80074aa:	e000      	b.n	80074ae <prvUnlockQueue+0x46>
					break;
 80074ac:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	22ff      	movs	r2, #255	@ 0xff
 80074b2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 80074b6:	f001 fdef 	bl	8009098 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80074ba:	f001 fdb7 	bl	800902c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80074c4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80074c6:	e011      	b.n	80074ec <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	691b      	ldr	r3, [r3, #16]
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	d012      	beq.n	80074f6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	3310      	adds	r3, #16
 80074d4:	4618      	mov	r0, r3
 80074d6:	f000 fd79 	bl	8007fcc <xTaskRemoveFromEventList>
 80074da:	4603      	mov	r3, r0
 80074dc:	2b00      	cmp	r3, #0
 80074de:	d001      	beq.n	80074e4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80074e0:	f000 fe58 	bl	8008194 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80074e4:	7bbb      	ldrb	r3, [r7, #14]
 80074e6:	3b01      	subs	r3, #1
 80074e8:	b2db      	uxtb	r3, r3
 80074ea:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80074ec:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	dce9      	bgt.n	80074c8 <prvUnlockQueue+0x60>
 80074f4:	e000      	b.n	80074f8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80074f6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	22ff      	movs	r2, #255	@ 0xff
 80074fc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8007500:	f001 fdca 	bl	8009098 <vPortExitCritical>
}
 8007504:	bf00      	nop
 8007506:	3710      	adds	r7, #16
 8007508:	46bd      	mov	sp, r7
 800750a:	bd80      	pop	{r7, pc}

0800750c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800750c:	b580      	push	{r7, lr}
 800750e:	b084      	sub	sp, #16
 8007510:	af00      	add	r7, sp, #0
 8007512:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007514:	f001 fd8a 	bl	800902c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800751c:	2b00      	cmp	r3, #0
 800751e:	d102      	bne.n	8007526 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8007520:	2301      	movs	r3, #1
 8007522:	60fb      	str	r3, [r7, #12]
 8007524:	e001      	b.n	800752a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8007526:	2300      	movs	r3, #0
 8007528:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800752a:	f001 fdb5 	bl	8009098 <vPortExitCritical>

	return xReturn;
 800752e:	68fb      	ldr	r3, [r7, #12]
}
 8007530:	4618      	mov	r0, r3
 8007532:	3710      	adds	r7, #16
 8007534:	46bd      	mov	sp, r7
 8007536:	bd80      	pop	{r7, pc}

08007538 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8007538:	b580      	push	{r7, lr}
 800753a:	b084      	sub	sp, #16
 800753c:	af00      	add	r7, sp, #0
 800753e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007540:	f001 fd74 	bl	800902c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800754c:	429a      	cmp	r2, r3
 800754e:	d102      	bne.n	8007556 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8007550:	2301      	movs	r3, #1
 8007552:	60fb      	str	r3, [r7, #12]
 8007554:	e001      	b.n	800755a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8007556:	2300      	movs	r3, #0
 8007558:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800755a:	f001 fd9d 	bl	8009098 <vPortExitCritical>

	return xReturn;
 800755e:	68fb      	ldr	r3, [r7, #12]
}
 8007560:	4618      	mov	r0, r3
 8007562:	3710      	adds	r7, #16
 8007564:	46bd      	mov	sp, r7
 8007566:	bd80      	pop	{r7, pc}

08007568 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8007568:	b480      	push	{r7}
 800756a:	b085      	sub	sp, #20
 800756c:	af00      	add	r7, sp, #0
 800756e:	6078      	str	r0, [r7, #4]
 8007570:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007572:	2300      	movs	r3, #0
 8007574:	60fb      	str	r3, [r7, #12]
 8007576:	e014      	b.n	80075a2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8007578:	4a0f      	ldr	r2, [pc, #60]	@ (80075b8 <vQueueAddToRegistry+0x50>)
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8007580:	2b00      	cmp	r3, #0
 8007582:	d10b      	bne.n	800759c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8007584:	490c      	ldr	r1, [pc, #48]	@ (80075b8 <vQueueAddToRegistry+0x50>)
 8007586:	68fb      	ldr	r3, [r7, #12]
 8007588:	683a      	ldr	r2, [r7, #0]
 800758a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800758e:	4a0a      	ldr	r2, [pc, #40]	@ (80075b8 <vQueueAddToRegistry+0x50>)
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	00db      	lsls	r3, r3, #3
 8007594:	4413      	add	r3, r2
 8007596:	687a      	ldr	r2, [r7, #4]
 8007598:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800759a:	e006      	b.n	80075aa <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	3301      	adds	r3, #1
 80075a0:	60fb      	str	r3, [r7, #12]
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	2b07      	cmp	r3, #7
 80075a6:	d9e7      	bls.n	8007578 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80075a8:	bf00      	nop
 80075aa:	bf00      	nop
 80075ac:	3714      	adds	r7, #20
 80075ae:	46bd      	mov	sp, r7
 80075b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075b4:	4770      	bx	lr
 80075b6:	bf00      	nop
 80075b8:	20001088 	.word	0x20001088

080075bc <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 80075bc:	b480      	push	{r7}
 80075be:	b085      	sub	sp, #20
 80075c0:	af00      	add	r7, sp, #0
 80075c2:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80075c4:	2300      	movs	r3, #0
 80075c6:	60fb      	str	r3, [r7, #12]
 80075c8:	e016      	b.n	80075f8 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 80075ca:	4a10      	ldr	r2, [pc, #64]	@ (800760c <vQueueUnregisterQueue+0x50>)
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	00db      	lsls	r3, r3, #3
 80075d0:	4413      	add	r3, r2
 80075d2:	685b      	ldr	r3, [r3, #4]
 80075d4:	687a      	ldr	r2, [r7, #4]
 80075d6:	429a      	cmp	r2, r3
 80075d8:	d10b      	bne.n	80075f2 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 80075da:	4a0c      	ldr	r2, [pc, #48]	@ (800760c <vQueueUnregisterQueue+0x50>)
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	2100      	movs	r1, #0
 80075e0:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 80075e4:	4a09      	ldr	r2, [pc, #36]	@ (800760c <vQueueUnregisterQueue+0x50>)
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	00db      	lsls	r3, r3, #3
 80075ea:	4413      	add	r3, r2
 80075ec:	2200      	movs	r2, #0
 80075ee:	605a      	str	r2, [r3, #4]
				break;
 80075f0:	e006      	b.n	8007600 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	3301      	adds	r3, #1
 80075f6:	60fb      	str	r3, [r7, #12]
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	2b07      	cmp	r3, #7
 80075fc:	d9e5      	bls.n	80075ca <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 80075fe:	bf00      	nop
 8007600:	bf00      	nop
 8007602:	3714      	adds	r7, #20
 8007604:	46bd      	mov	sp, r7
 8007606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800760a:	4770      	bx	lr
 800760c:	20001088 	.word	0x20001088

08007610 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007610:	b580      	push	{r7, lr}
 8007612:	b086      	sub	sp, #24
 8007614:	af00      	add	r7, sp, #0
 8007616:	60f8      	str	r0, [r7, #12]
 8007618:	60b9      	str	r1, [r7, #8]
 800761a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8007620:	f001 fd04 	bl	800902c <vPortEnterCritical>
 8007624:	697b      	ldr	r3, [r7, #20]
 8007626:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800762a:	b25b      	sxtb	r3, r3
 800762c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007630:	d103      	bne.n	800763a <vQueueWaitForMessageRestricted+0x2a>
 8007632:	697b      	ldr	r3, [r7, #20]
 8007634:	2200      	movs	r2, #0
 8007636:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800763a:	697b      	ldr	r3, [r7, #20]
 800763c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007640:	b25b      	sxtb	r3, r3
 8007642:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007646:	d103      	bne.n	8007650 <vQueueWaitForMessageRestricted+0x40>
 8007648:	697b      	ldr	r3, [r7, #20]
 800764a:	2200      	movs	r2, #0
 800764c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007650:	f001 fd22 	bl	8009098 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8007654:	697b      	ldr	r3, [r7, #20]
 8007656:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007658:	2b00      	cmp	r3, #0
 800765a:	d106      	bne.n	800766a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800765c:	697b      	ldr	r3, [r7, #20]
 800765e:	3324      	adds	r3, #36	@ 0x24
 8007660:	687a      	ldr	r2, [r7, #4]
 8007662:	68b9      	ldr	r1, [r7, #8]
 8007664:	4618      	mov	r0, r3
 8007666:	f000 fc83 	bl	8007f70 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800766a:	6978      	ldr	r0, [r7, #20]
 800766c:	f7ff fefc 	bl	8007468 <prvUnlockQueue>
	}
 8007670:	bf00      	nop
 8007672:	3718      	adds	r7, #24
 8007674:	46bd      	mov	sp, r7
 8007676:	bd80      	pop	{r7, pc}

08007678 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8007678:	b580      	push	{r7, lr}
 800767a:	b08e      	sub	sp, #56	@ 0x38
 800767c:	af04      	add	r7, sp, #16
 800767e:	60f8      	str	r0, [r7, #12]
 8007680:	60b9      	str	r1, [r7, #8]
 8007682:	607a      	str	r2, [r7, #4]
 8007684:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8007686:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007688:	2b00      	cmp	r3, #0
 800768a:	d10d      	bne.n	80076a8 <xTaskCreateStatic+0x30>
	__asm volatile
 800768c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007690:	b672      	cpsid	i
 8007692:	f383 8811 	msr	BASEPRI, r3
 8007696:	f3bf 8f6f 	isb	sy
 800769a:	f3bf 8f4f 	dsb	sy
 800769e:	b662      	cpsie	i
 80076a0:	623b      	str	r3, [r7, #32]
}
 80076a2:	bf00      	nop
 80076a4:	bf00      	nop
 80076a6:	e7fd      	b.n	80076a4 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 80076a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	d10d      	bne.n	80076ca <xTaskCreateStatic+0x52>
	__asm volatile
 80076ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80076b2:	b672      	cpsid	i
 80076b4:	f383 8811 	msr	BASEPRI, r3
 80076b8:	f3bf 8f6f 	isb	sy
 80076bc:	f3bf 8f4f 	dsb	sy
 80076c0:	b662      	cpsie	i
 80076c2:	61fb      	str	r3, [r7, #28]
}
 80076c4:	bf00      	nop
 80076c6:	bf00      	nop
 80076c8:	e7fd      	b.n	80076c6 <xTaskCreateStatic+0x4e>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80076ca:	23a8      	movs	r3, #168	@ 0xa8
 80076cc:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80076ce:	693b      	ldr	r3, [r7, #16]
 80076d0:	2ba8      	cmp	r3, #168	@ 0xa8
 80076d2:	d00d      	beq.n	80076f0 <xTaskCreateStatic+0x78>
	__asm volatile
 80076d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80076d8:	b672      	cpsid	i
 80076da:	f383 8811 	msr	BASEPRI, r3
 80076de:	f3bf 8f6f 	isb	sy
 80076e2:	f3bf 8f4f 	dsb	sy
 80076e6:	b662      	cpsie	i
 80076e8:	61bb      	str	r3, [r7, #24]
}
 80076ea:	bf00      	nop
 80076ec:	bf00      	nop
 80076ee:	e7fd      	b.n	80076ec <xTaskCreateStatic+0x74>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80076f0:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80076f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	d01e      	beq.n	8007736 <xTaskCreateStatic+0xbe>
 80076f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	d01b      	beq.n	8007736 <xTaskCreateStatic+0xbe>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80076fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007700:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8007702:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007704:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007706:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8007708:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800770a:	2202      	movs	r2, #2
 800770c:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8007710:	2300      	movs	r3, #0
 8007712:	9303      	str	r3, [sp, #12]
 8007714:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007716:	9302      	str	r3, [sp, #8]
 8007718:	f107 0314 	add.w	r3, r7, #20
 800771c:	9301      	str	r3, [sp, #4]
 800771e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007720:	9300      	str	r3, [sp, #0]
 8007722:	683b      	ldr	r3, [r7, #0]
 8007724:	687a      	ldr	r2, [r7, #4]
 8007726:	68b9      	ldr	r1, [r7, #8]
 8007728:	68f8      	ldr	r0, [r7, #12]
 800772a:	f000 f851 	bl	80077d0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800772e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8007730:	f000 f8f8 	bl	8007924 <prvAddNewTaskToReadyList>
 8007734:	e001      	b.n	800773a <xTaskCreateStatic+0xc2>
		}
		else
		{
			xReturn = NULL;
 8007736:	2300      	movs	r3, #0
 8007738:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800773a:	697b      	ldr	r3, [r7, #20]
	}
 800773c:	4618      	mov	r0, r3
 800773e:	3728      	adds	r7, #40	@ 0x28
 8007740:	46bd      	mov	sp, r7
 8007742:	bd80      	pop	{r7, pc}

08007744 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8007744:	b580      	push	{r7, lr}
 8007746:	b08c      	sub	sp, #48	@ 0x30
 8007748:	af04      	add	r7, sp, #16
 800774a:	60f8      	str	r0, [r7, #12]
 800774c:	60b9      	str	r1, [r7, #8]
 800774e:	603b      	str	r3, [r7, #0]
 8007750:	4613      	mov	r3, r2
 8007752:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8007754:	88fb      	ldrh	r3, [r7, #6]
 8007756:	009b      	lsls	r3, r3, #2
 8007758:	4618      	mov	r0, r3
 800775a:	f001 fd95 	bl	8009288 <pvPortMalloc>
 800775e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8007760:	697b      	ldr	r3, [r7, #20]
 8007762:	2b00      	cmp	r3, #0
 8007764:	d00e      	beq.n	8007784 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8007766:	20a8      	movs	r0, #168	@ 0xa8
 8007768:	f001 fd8e 	bl	8009288 <pvPortMalloc>
 800776c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800776e:	69fb      	ldr	r3, [r7, #28]
 8007770:	2b00      	cmp	r3, #0
 8007772:	d003      	beq.n	800777c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8007774:	69fb      	ldr	r3, [r7, #28]
 8007776:	697a      	ldr	r2, [r7, #20]
 8007778:	631a      	str	r2, [r3, #48]	@ 0x30
 800777a:	e005      	b.n	8007788 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800777c:	6978      	ldr	r0, [r7, #20]
 800777e:	f001 fe51 	bl	8009424 <vPortFree>
 8007782:	e001      	b.n	8007788 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8007784:	2300      	movs	r3, #0
 8007786:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8007788:	69fb      	ldr	r3, [r7, #28]
 800778a:	2b00      	cmp	r3, #0
 800778c:	d017      	beq.n	80077be <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800778e:	69fb      	ldr	r3, [r7, #28]
 8007790:	2200      	movs	r2, #0
 8007792:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8007796:	88fa      	ldrh	r2, [r7, #6]
 8007798:	2300      	movs	r3, #0
 800779a:	9303      	str	r3, [sp, #12]
 800779c:	69fb      	ldr	r3, [r7, #28]
 800779e:	9302      	str	r3, [sp, #8]
 80077a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80077a2:	9301      	str	r3, [sp, #4]
 80077a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80077a6:	9300      	str	r3, [sp, #0]
 80077a8:	683b      	ldr	r3, [r7, #0]
 80077aa:	68b9      	ldr	r1, [r7, #8]
 80077ac:	68f8      	ldr	r0, [r7, #12]
 80077ae:	f000 f80f 	bl	80077d0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80077b2:	69f8      	ldr	r0, [r7, #28]
 80077b4:	f000 f8b6 	bl	8007924 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80077b8:	2301      	movs	r3, #1
 80077ba:	61bb      	str	r3, [r7, #24]
 80077bc:	e002      	b.n	80077c4 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80077be:	f04f 33ff 	mov.w	r3, #4294967295
 80077c2:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80077c4:	69bb      	ldr	r3, [r7, #24]
	}
 80077c6:	4618      	mov	r0, r3
 80077c8:	3720      	adds	r7, #32
 80077ca:	46bd      	mov	sp, r7
 80077cc:	bd80      	pop	{r7, pc}
	...

080077d0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80077d0:	b580      	push	{r7, lr}
 80077d2:	b088      	sub	sp, #32
 80077d4:	af00      	add	r7, sp, #0
 80077d6:	60f8      	str	r0, [r7, #12]
 80077d8:	60b9      	str	r1, [r7, #8]
 80077da:	607a      	str	r2, [r7, #4]
 80077dc:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80077de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80077e0:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	009b      	lsls	r3, r3, #2
 80077e6:	461a      	mov	r2, r3
 80077e8:	21a5      	movs	r1, #165	@ 0xa5
 80077ea:	f002 f941 	bl	8009a70 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80077ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80077f0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80077f2:	6879      	ldr	r1, [r7, #4]
 80077f4:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 80077f8:	440b      	add	r3, r1
 80077fa:	009b      	lsls	r3, r3, #2
 80077fc:	4413      	add	r3, r2
 80077fe:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8007800:	69bb      	ldr	r3, [r7, #24]
 8007802:	f023 0307 	bic.w	r3, r3, #7
 8007806:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8007808:	69bb      	ldr	r3, [r7, #24]
 800780a:	f003 0307 	and.w	r3, r3, #7
 800780e:	2b00      	cmp	r3, #0
 8007810:	d00d      	beq.n	800782e <prvInitialiseNewTask+0x5e>
	__asm volatile
 8007812:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007816:	b672      	cpsid	i
 8007818:	f383 8811 	msr	BASEPRI, r3
 800781c:	f3bf 8f6f 	isb	sy
 8007820:	f3bf 8f4f 	dsb	sy
 8007824:	b662      	cpsie	i
 8007826:	617b      	str	r3, [r7, #20]
}
 8007828:	bf00      	nop
 800782a:	bf00      	nop
 800782c:	e7fd      	b.n	800782a <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800782e:	68bb      	ldr	r3, [r7, #8]
 8007830:	2b00      	cmp	r3, #0
 8007832:	d01f      	beq.n	8007874 <prvInitialiseNewTask+0xa4>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007834:	2300      	movs	r3, #0
 8007836:	61fb      	str	r3, [r7, #28]
 8007838:	e012      	b.n	8007860 <prvInitialiseNewTask+0x90>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800783a:	68ba      	ldr	r2, [r7, #8]
 800783c:	69fb      	ldr	r3, [r7, #28]
 800783e:	4413      	add	r3, r2
 8007840:	7819      	ldrb	r1, [r3, #0]
 8007842:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007844:	69fb      	ldr	r3, [r7, #28]
 8007846:	4413      	add	r3, r2
 8007848:	3334      	adds	r3, #52	@ 0x34
 800784a:	460a      	mov	r2, r1
 800784c:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800784e:	68ba      	ldr	r2, [r7, #8]
 8007850:	69fb      	ldr	r3, [r7, #28]
 8007852:	4413      	add	r3, r2
 8007854:	781b      	ldrb	r3, [r3, #0]
 8007856:	2b00      	cmp	r3, #0
 8007858:	d006      	beq.n	8007868 <prvInitialiseNewTask+0x98>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800785a:	69fb      	ldr	r3, [r7, #28]
 800785c:	3301      	adds	r3, #1
 800785e:	61fb      	str	r3, [r7, #28]
 8007860:	69fb      	ldr	r3, [r7, #28]
 8007862:	2b0f      	cmp	r3, #15
 8007864:	d9e9      	bls.n	800783a <prvInitialiseNewTask+0x6a>
 8007866:	e000      	b.n	800786a <prvInitialiseNewTask+0x9a>
			{
				break;
 8007868:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800786a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800786c:	2200      	movs	r2, #0
 800786e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8007872:	e003      	b.n	800787c <prvInitialiseNewTask+0xac>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8007874:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007876:	2200      	movs	r2, #0
 8007878:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800787c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800787e:	2b37      	cmp	r3, #55	@ 0x37
 8007880:	d901      	bls.n	8007886 <prvInitialiseNewTask+0xb6>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8007882:	2337      	movs	r3, #55	@ 0x37
 8007884:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8007886:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007888:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800788a:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800788c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800788e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007890:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8007892:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007894:	2200      	movs	r2, #0
 8007896:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8007898:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800789a:	3304      	adds	r3, #4
 800789c:	4618      	mov	r0, r3
 800789e:	f7fe fde3 	bl	8006468 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80078a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078a4:	3318      	adds	r3, #24
 80078a6:	4618      	mov	r0, r3
 80078a8:	f7fe fdde 	bl	8006468 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80078ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078ae:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80078b0:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80078b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80078b4:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80078b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078ba:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80078bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078be:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80078c0:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80078c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078c4:	2200      	movs	r2, #0
 80078c6:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80078ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078cc:	2200      	movs	r2, #0
 80078ce:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80078d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078d4:	3354      	adds	r3, #84	@ 0x54
 80078d6:	224c      	movs	r2, #76	@ 0x4c
 80078d8:	2100      	movs	r1, #0
 80078da:	4618      	mov	r0, r3
 80078dc:	f002 f8c8 	bl	8009a70 <memset>
 80078e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078e2:	4a0d      	ldr	r2, [pc, #52]	@ (8007918 <prvInitialiseNewTask+0x148>)
 80078e4:	659a      	str	r2, [r3, #88]	@ 0x58
 80078e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078e8:	4a0c      	ldr	r2, [pc, #48]	@ (800791c <prvInitialiseNewTask+0x14c>)
 80078ea:	65da      	str	r2, [r3, #92]	@ 0x5c
 80078ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078ee:	4a0c      	ldr	r2, [pc, #48]	@ (8007920 <prvInitialiseNewTask+0x150>)
 80078f0:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80078f2:	683a      	ldr	r2, [r7, #0]
 80078f4:	68f9      	ldr	r1, [r7, #12]
 80078f6:	69b8      	ldr	r0, [r7, #24]
 80078f8:	f001 fa88 	bl	8008e0c <pxPortInitialiseStack>
 80078fc:	4602      	mov	r2, r0
 80078fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007900:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8007902:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007904:	2b00      	cmp	r3, #0
 8007906:	d002      	beq.n	800790e <prvInitialiseNewTask+0x13e>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8007908:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800790a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800790c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800790e:	bf00      	nop
 8007910:	3720      	adds	r7, #32
 8007912:	46bd      	mov	sp, r7
 8007914:	bd80      	pop	{r7, pc}
 8007916:	bf00      	nop
 8007918:	20005314 	.word	0x20005314
 800791c:	2000537c 	.word	0x2000537c
 8007920:	200053e4 	.word	0x200053e4

08007924 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8007924:	b580      	push	{r7, lr}
 8007926:	b082      	sub	sp, #8
 8007928:	af00      	add	r7, sp, #0
 800792a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800792c:	f001 fb7e 	bl	800902c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007930:	4b2d      	ldr	r3, [pc, #180]	@ (80079e8 <prvAddNewTaskToReadyList+0xc4>)
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	3301      	adds	r3, #1
 8007936:	4a2c      	ldr	r2, [pc, #176]	@ (80079e8 <prvAddNewTaskToReadyList+0xc4>)
 8007938:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800793a:	4b2c      	ldr	r3, [pc, #176]	@ (80079ec <prvAddNewTaskToReadyList+0xc8>)
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	2b00      	cmp	r3, #0
 8007940:	d109      	bne.n	8007956 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8007942:	4a2a      	ldr	r2, [pc, #168]	@ (80079ec <prvAddNewTaskToReadyList+0xc8>)
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007948:	4b27      	ldr	r3, [pc, #156]	@ (80079e8 <prvAddNewTaskToReadyList+0xc4>)
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	2b01      	cmp	r3, #1
 800794e:	d110      	bne.n	8007972 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8007950:	f000 fc44 	bl	80081dc <prvInitialiseTaskLists>
 8007954:	e00d      	b.n	8007972 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8007956:	4b26      	ldr	r3, [pc, #152]	@ (80079f0 <prvAddNewTaskToReadyList+0xcc>)
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	2b00      	cmp	r3, #0
 800795c:	d109      	bne.n	8007972 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800795e:	4b23      	ldr	r3, [pc, #140]	@ (80079ec <prvAddNewTaskToReadyList+0xc8>)
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007968:	429a      	cmp	r2, r3
 800796a:	d802      	bhi.n	8007972 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800796c:	4a1f      	ldr	r2, [pc, #124]	@ (80079ec <prvAddNewTaskToReadyList+0xc8>)
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8007972:	4b20      	ldr	r3, [pc, #128]	@ (80079f4 <prvAddNewTaskToReadyList+0xd0>)
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	3301      	adds	r3, #1
 8007978:	4a1e      	ldr	r2, [pc, #120]	@ (80079f4 <prvAddNewTaskToReadyList+0xd0>)
 800797a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800797c:	4b1d      	ldr	r3, [pc, #116]	@ (80079f4 <prvAddNewTaskToReadyList+0xd0>)
 800797e:	681a      	ldr	r2, [r3, #0]
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007988:	4b1b      	ldr	r3, [pc, #108]	@ (80079f8 <prvAddNewTaskToReadyList+0xd4>)
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	429a      	cmp	r2, r3
 800798e:	d903      	bls.n	8007998 <prvAddNewTaskToReadyList+0x74>
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007994:	4a18      	ldr	r2, [pc, #96]	@ (80079f8 <prvAddNewTaskToReadyList+0xd4>)
 8007996:	6013      	str	r3, [r2, #0]
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800799c:	4613      	mov	r3, r2
 800799e:	009b      	lsls	r3, r3, #2
 80079a0:	4413      	add	r3, r2
 80079a2:	009b      	lsls	r3, r3, #2
 80079a4:	4a15      	ldr	r2, [pc, #84]	@ (80079fc <prvAddNewTaskToReadyList+0xd8>)
 80079a6:	441a      	add	r2, r3
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	3304      	adds	r3, #4
 80079ac:	4619      	mov	r1, r3
 80079ae:	4610      	mov	r0, r2
 80079b0:	f7fe fd67 	bl	8006482 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80079b4:	f001 fb70 	bl	8009098 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80079b8:	4b0d      	ldr	r3, [pc, #52]	@ (80079f0 <prvAddNewTaskToReadyList+0xcc>)
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	2b00      	cmp	r3, #0
 80079be:	d00e      	beq.n	80079de <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80079c0:	4b0a      	ldr	r3, [pc, #40]	@ (80079ec <prvAddNewTaskToReadyList+0xc8>)
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80079ca:	429a      	cmp	r2, r3
 80079cc:	d207      	bcs.n	80079de <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80079ce:	4b0c      	ldr	r3, [pc, #48]	@ (8007a00 <prvAddNewTaskToReadyList+0xdc>)
 80079d0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80079d4:	601a      	str	r2, [r3, #0]
 80079d6:	f3bf 8f4f 	dsb	sy
 80079da:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80079de:	bf00      	nop
 80079e0:	3708      	adds	r7, #8
 80079e2:	46bd      	mov	sp, r7
 80079e4:	bd80      	pop	{r7, pc}
 80079e6:	bf00      	nop
 80079e8:	2000159c 	.word	0x2000159c
 80079ec:	200010c8 	.word	0x200010c8
 80079f0:	200015a8 	.word	0x200015a8
 80079f4:	200015b8 	.word	0x200015b8
 80079f8:	200015a4 	.word	0x200015a4
 80079fc:	200010cc 	.word	0x200010cc
 8007a00:	e000ed04 	.word	0xe000ed04

08007a04 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8007a04:	b580      	push	{r7, lr}
 8007a06:	b084      	sub	sp, #16
 8007a08:	af00      	add	r7, sp, #0
 8007a0a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8007a0c:	2300      	movs	r3, #0
 8007a0e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	d01a      	beq.n	8007a4c <vTaskDelay+0x48>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8007a16:	4b15      	ldr	r3, [pc, #84]	@ (8007a6c <vTaskDelay+0x68>)
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	d00d      	beq.n	8007a3a <vTaskDelay+0x36>
	__asm volatile
 8007a1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a22:	b672      	cpsid	i
 8007a24:	f383 8811 	msr	BASEPRI, r3
 8007a28:	f3bf 8f6f 	isb	sy
 8007a2c:	f3bf 8f4f 	dsb	sy
 8007a30:	b662      	cpsie	i
 8007a32:	60bb      	str	r3, [r7, #8]
}
 8007a34:	bf00      	nop
 8007a36:	bf00      	nop
 8007a38:	e7fd      	b.n	8007a36 <vTaskDelay+0x32>
			vTaskSuspendAll();
 8007a3a:	f000 f88f 	bl	8007b5c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8007a3e:	2100      	movs	r1, #0
 8007a40:	6878      	ldr	r0, [r7, #4]
 8007a42:	f000 fe27 	bl	8008694 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8007a46:	f000 f897 	bl	8007b78 <xTaskResumeAll>
 8007a4a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8007a4c:	68fb      	ldr	r3, [r7, #12]
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	d107      	bne.n	8007a62 <vTaskDelay+0x5e>
		{
			portYIELD_WITHIN_API();
 8007a52:	4b07      	ldr	r3, [pc, #28]	@ (8007a70 <vTaskDelay+0x6c>)
 8007a54:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007a58:	601a      	str	r2, [r3, #0]
 8007a5a:	f3bf 8f4f 	dsb	sy
 8007a5e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007a62:	bf00      	nop
 8007a64:	3710      	adds	r7, #16
 8007a66:	46bd      	mov	sp, r7
 8007a68:	bd80      	pop	{r7, pc}
 8007a6a:	bf00      	nop
 8007a6c:	200015c4 	.word	0x200015c4
 8007a70:	e000ed04 	.word	0xe000ed04

08007a74 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8007a74:	b580      	push	{r7, lr}
 8007a76:	b08a      	sub	sp, #40	@ 0x28
 8007a78:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8007a7a:	2300      	movs	r3, #0
 8007a7c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8007a7e:	2300      	movs	r3, #0
 8007a80:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8007a82:	463a      	mov	r2, r7
 8007a84:	1d39      	adds	r1, r7, #4
 8007a86:	f107 0308 	add.w	r3, r7, #8
 8007a8a:	4618      	mov	r0, r3
 8007a8c:	f7fe fc98 	bl	80063c0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8007a90:	6839      	ldr	r1, [r7, #0]
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	68ba      	ldr	r2, [r7, #8]
 8007a96:	9202      	str	r2, [sp, #8]
 8007a98:	9301      	str	r3, [sp, #4]
 8007a9a:	2300      	movs	r3, #0
 8007a9c:	9300      	str	r3, [sp, #0]
 8007a9e:	2300      	movs	r3, #0
 8007aa0:	460a      	mov	r2, r1
 8007aa2:	4926      	ldr	r1, [pc, #152]	@ (8007b3c <vTaskStartScheduler+0xc8>)
 8007aa4:	4826      	ldr	r0, [pc, #152]	@ (8007b40 <vTaskStartScheduler+0xcc>)
 8007aa6:	f7ff fde7 	bl	8007678 <xTaskCreateStatic>
 8007aaa:	4603      	mov	r3, r0
 8007aac:	4a25      	ldr	r2, [pc, #148]	@ (8007b44 <vTaskStartScheduler+0xd0>)
 8007aae:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8007ab0:	4b24      	ldr	r3, [pc, #144]	@ (8007b44 <vTaskStartScheduler+0xd0>)
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	2b00      	cmp	r3, #0
 8007ab6:	d002      	beq.n	8007abe <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8007ab8:	2301      	movs	r3, #1
 8007aba:	617b      	str	r3, [r7, #20]
 8007abc:	e001      	b.n	8007ac2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8007abe:	2300      	movs	r3, #0
 8007ac0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8007ac2:	697b      	ldr	r3, [r7, #20]
 8007ac4:	2b01      	cmp	r3, #1
 8007ac6:	d102      	bne.n	8007ace <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8007ac8:	f000 fe38 	bl	800873c <xTimerCreateTimerTask>
 8007acc:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8007ace:	697b      	ldr	r3, [r7, #20]
 8007ad0:	2b01      	cmp	r3, #1
 8007ad2:	d11d      	bne.n	8007b10 <vTaskStartScheduler+0x9c>
	__asm volatile
 8007ad4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ad8:	b672      	cpsid	i
 8007ada:	f383 8811 	msr	BASEPRI, r3
 8007ade:	f3bf 8f6f 	isb	sy
 8007ae2:	f3bf 8f4f 	dsb	sy
 8007ae6:	b662      	cpsie	i
 8007ae8:	613b      	str	r3, [r7, #16]
}
 8007aea:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8007aec:	4b16      	ldr	r3, [pc, #88]	@ (8007b48 <vTaskStartScheduler+0xd4>)
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	3354      	adds	r3, #84	@ 0x54
 8007af2:	4a16      	ldr	r2, [pc, #88]	@ (8007b4c <vTaskStartScheduler+0xd8>)
 8007af4:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8007af6:	4b16      	ldr	r3, [pc, #88]	@ (8007b50 <vTaskStartScheduler+0xdc>)
 8007af8:	f04f 32ff 	mov.w	r2, #4294967295
 8007afc:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8007afe:	4b15      	ldr	r3, [pc, #84]	@ (8007b54 <vTaskStartScheduler+0xe0>)
 8007b00:	2201      	movs	r2, #1
 8007b02:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8007b04:	4b14      	ldr	r3, [pc, #80]	@ (8007b58 <vTaskStartScheduler+0xe4>)
 8007b06:	2200      	movs	r2, #0
 8007b08:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8007b0a:	f001 fa11 	bl	8008f30 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8007b0e:	e011      	b.n	8007b34 <vTaskStartScheduler+0xc0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8007b10:	697b      	ldr	r3, [r7, #20]
 8007b12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b16:	d10d      	bne.n	8007b34 <vTaskStartScheduler+0xc0>
	__asm volatile
 8007b18:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b1c:	b672      	cpsid	i
 8007b1e:	f383 8811 	msr	BASEPRI, r3
 8007b22:	f3bf 8f6f 	isb	sy
 8007b26:	f3bf 8f4f 	dsb	sy
 8007b2a:	b662      	cpsie	i
 8007b2c:	60fb      	str	r3, [r7, #12]
}
 8007b2e:	bf00      	nop
 8007b30:	bf00      	nop
 8007b32:	e7fd      	b.n	8007b30 <vTaskStartScheduler+0xbc>
}
 8007b34:	bf00      	nop
 8007b36:	3718      	adds	r7, #24
 8007b38:	46bd      	mov	sp, r7
 8007b3a:	bd80      	pop	{r7, pc}
 8007b3c:	0800a6bc 	.word	0x0800a6bc
 8007b40:	080081ad 	.word	0x080081ad
 8007b44:	200015c0 	.word	0x200015c0
 8007b48:	200010c8 	.word	0x200010c8
 8007b4c:	2000001c 	.word	0x2000001c
 8007b50:	200015bc 	.word	0x200015bc
 8007b54:	200015a8 	.word	0x200015a8
 8007b58:	200015a0 	.word	0x200015a0

08007b5c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007b5c:	b480      	push	{r7}
 8007b5e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8007b60:	4b04      	ldr	r3, [pc, #16]	@ (8007b74 <vTaskSuspendAll+0x18>)
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	3301      	adds	r3, #1
 8007b66:	4a03      	ldr	r2, [pc, #12]	@ (8007b74 <vTaskSuspendAll+0x18>)
 8007b68:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8007b6a:	bf00      	nop
 8007b6c:	46bd      	mov	sp, r7
 8007b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b72:	4770      	bx	lr
 8007b74:	200015c4 	.word	0x200015c4

08007b78 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8007b78:	b580      	push	{r7, lr}
 8007b7a:	b084      	sub	sp, #16
 8007b7c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8007b7e:	2300      	movs	r3, #0
 8007b80:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8007b82:	2300      	movs	r3, #0
 8007b84:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8007b86:	4b43      	ldr	r3, [pc, #268]	@ (8007c94 <xTaskResumeAll+0x11c>)
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	d10d      	bne.n	8007baa <xTaskResumeAll+0x32>
	__asm volatile
 8007b8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b92:	b672      	cpsid	i
 8007b94:	f383 8811 	msr	BASEPRI, r3
 8007b98:	f3bf 8f6f 	isb	sy
 8007b9c:	f3bf 8f4f 	dsb	sy
 8007ba0:	b662      	cpsie	i
 8007ba2:	603b      	str	r3, [r7, #0]
}
 8007ba4:	bf00      	nop
 8007ba6:	bf00      	nop
 8007ba8:	e7fd      	b.n	8007ba6 <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8007baa:	f001 fa3f 	bl	800902c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8007bae:	4b39      	ldr	r3, [pc, #228]	@ (8007c94 <xTaskResumeAll+0x11c>)
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	3b01      	subs	r3, #1
 8007bb4:	4a37      	ldr	r2, [pc, #220]	@ (8007c94 <xTaskResumeAll+0x11c>)
 8007bb6:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007bb8:	4b36      	ldr	r3, [pc, #216]	@ (8007c94 <xTaskResumeAll+0x11c>)
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	d162      	bne.n	8007c86 <xTaskResumeAll+0x10e>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8007bc0:	4b35      	ldr	r3, [pc, #212]	@ (8007c98 <xTaskResumeAll+0x120>)
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	2b00      	cmp	r3, #0
 8007bc6:	d05e      	beq.n	8007c86 <xTaskResumeAll+0x10e>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007bc8:	e02f      	b.n	8007c2a <xTaskResumeAll+0xb2>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007bca:	4b34      	ldr	r3, [pc, #208]	@ (8007c9c <xTaskResumeAll+0x124>)
 8007bcc:	68db      	ldr	r3, [r3, #12]
 8007bce:	68db      	ldr	r3, [r3, #12]
 8007bd0:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007bd2:	68fb      	ldr	r3, [r7, #12]
 8007bd4:	3318      	adds	r3, #24
 8007bd6:	4618      	mov	r0, r3
 8007bd8:	f7fe fcb0 	bl	800653c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007bdc:	68fb      	ldr	r3, [r7, #12]
 8007bde:	3304      	adds	r3, #4
 8007be0:	4618      	mov	r0, r3
 8007be2:	f7fe fcab 	bl	800653c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007be6:	68fb      	ldr	r3, [r7, #12]
 8007be8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007bea:	4b2d      	ldr	r3, [pc, #180]	@ (8007ca0 <xTaskResumeAll+0x128>)
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	429a      	cmp	r2, r3
 8007bf0:	d903      	bls.n	8007bfa <xTaskResumeAll+0x82>
 8007bf2:	68fb      	ldr	r3, [r7, #12]
 8007bf4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007bf6:	4a2a      	ldr	r2, [pc, #168]	@ (8007ca0 <xTaskResumeAll+0x128>)
 8007bf8:	6013      	str	r3, [r2, #0]
 8007bfa:	68fb      	ldr	r3, [r7, #12]
 8007bfc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007bfe:	4613      	mov	r3, r2
 8007c00:	009b      	lsls	r3, r3, #2
 8007c02:	4413      	add	r3, r2
 8007c04:	009b      	lsls	r3, r3, #2
 8007c06:	4a27      	ldr	r2, [pc, #156]	@ (8007ca4 <xTaskResumeAll+0x12c>)
 8007c08:	441a      	add	r2, r3
 8007c0a:	68fb      	ldr	r3, [r7, #12]
 8007c0c:	3304      	adds	r3, #4
 8007c0e:	4619      	mov	r1, r3
 8007c10:	4610      	mov	r0, r2
 8007c12:	f7fe fc36 	bl	8006482 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007c16:	68fb      	ldr	r3, [r7, #12]
 8007c18:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007c1a:	4b23      	ldr	r3, [pc, #140]	@ (8007ca8 <xTaskResumeAll+0x130>)
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c20:	429a      	cmp	r2, r3
 8007c22:	d302      	bcc.n	8007c2a <xTaskResumeAll+0xb2>
					{
						xYieldPending = pdTRUE;
 8007c24:	4b21      	ldr	r3, [pc, #132]	@ (8007cac <xTaskResumeAll+0x134>)
 8007c26:	2201      	movs	r2, #1
 8007c28:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007c2a:	4b1c      	ldr	r3, [pc, #112]	@ (8007c9c <xTaskResumeAll+0x124>)
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	d1cb      	bne.n	8007bca <xTaskResumeAll+0x52>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8007c32:	68fb      	ldr	r3, [r7, #12]
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	d001      	beq.n	8007c3c <xTaskResumeAll+0xc4>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8007c38:	f000 fb76 	bl	8008328 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8007c3c:	4b1c      	ldr	r3, [pc, #112]	@ (8007cb0 <xTaskResumeAll+0x138>)
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	d010      	beq.n	8007c6a <xTaskResumeAll+0xf2>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8007c48:	f000 f846 	bl	8007cd8 <xTaskIncrementTick>
 8007c4c:	4603      	mov	r3, r0
 8007c4e:	2b00      	cmp	r3, #0
 8007c50:	d002      	beq.n	8007c58 <xTaskResumeAll+0xe0>
							{
								xYieldPending = pdTRUE;
 8007c52:	4b16      	ldr	r3, [pc, #88]	@ (8007cac <xTaskResumeAll+0x134>)
 8007c54:	2201      	movs	r2, #1
 8007c56:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	3b01      	subs	r3, #1
 8007c5c:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	2b00      	cmp	r3, #0
 8007c62:	d1f1      	bne.n	8007c48 <xTaskResumeAll+0xd0>

						uxPendedTicks = 0;
 8007c64:	4b12      	ldr	r3, [pc, #72]	@ (8007cb0 <xTaskResumeAll+0x138>)
 8007c66:	2200      	movs	r2, #0
 8007c68:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8007c6a:	4b10      	ldr	r3, [pc, #64]	@ (8007cac <xTaskResumeAll+0x134>)
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	2b00      	cmp	r3, #0
 8007c70:	d009      	beq.n	8007c86 <xTaskResumeAll+0x10e>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8007c72:	2301      	movs	r3, #1
 8007c74:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8007c76:	4b0f      	ldr	r3, [pc, #60]	@ (8007cb4 <xTaskResumeAll+0x13c>)
 8007c78:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007c7c:	601a      	str	r2, [r3, #0]
 8007c7e:	f3bf 8f4f 	dsb	sy
 8007c82:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007c86:	f001 fa07 	bl	8009098 <vPortExitCritical>

	return xAlreadyYielded;
 8007c8a:	68bb      	ldr	r3, [r7, #8]
}
 8007c8c:	4618      	mov	r0, r3
 8007c8e:	3710      	adds	r7, #16
 8007c90:	46bd      	mov	sp, r7
 8007c92:	bd80      	pop	{r7, pc}
 8007c94:	200015c4 	.word	0x200015c4
 8007c98:	2000159c 	.word	0x2000159c
 8007c9c:	2000155c 	.word	0x2000155c
 8007ca0:	200015a4 	.word	0x200015a4
 8007ca4:	200010cc 	.word	0x200010cc
 8007ca8:	200010c8 	.word	0x200010c8
 8007cac:	200015b0 	.word	0x200015b0
 8007cb0:	200015ac 	.word	0x200015ac
 8007cb4:	e000ed04 	.word	0xe000ed04

08007cb8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8007cb8:	b480      	push	{r7}
 8007cba:	b083      	sub	sp, #12
 8007cbc:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8007cbe:	4b05      	ldr	r3, [pc, #20]	@ (8007cd4 <xTaskGetTickCount+0x1c>)
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8007cc4:	687b      	ldr	r3, [r7, #4]
}
 8007cc6:	4618      	mov	r0, r3
 8007cc8:	370c      	adds	r7, #12
 8007cca:	46bd      	mov	sp, r7
 8007ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cd0:	4770      	bx	lr
 8007cd2:	bf00      	nop
 8007cd4:	200015a0 	.word	0x200015a0

08007cd8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007cd8:	b580      	push	{r7, lr}
 8007cda:	b086      	sub	sp, #24
 8007cdc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8007cde:	2300      	movs	r3, #0
 8007ce0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007ce2:	4b50      	ldr	r3, [pc, #320]	@ (8007e24 <xTaskIncrementTick+0x14c>)
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	2b00      	cmp	r3, #0
 8007ce8:	f040 808c 	bne.w	8007e04 <xTaskIncrementTick+0x12c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007cec:	4b4e      	ldr	r3, [pc, #312]	@ (8007e28 <xTaskIncrementTick+0x150>)
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	3301      	adds	r3, #1
 8007cf2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007cf4:	4a4c      	ldr	r2, [pc, #304]	@ (8007e28 <xTaskIncrementTick+0x150>)
 8007cf6:	693b      	ldr	r3, [r7, #16]
 8007cf8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8007cfa:	693b      	ldr	r3, [r7, #16]
 8007cfc:	2b00      	cmp	r3, #0
 8007cfe:	d123      	bne.n	8007d48 <xTaskIncrementTick+0x70>
		{
			taskSWITCH_DELAYED_LISTS();
 8007d00:	4b4a      	ldr	r3, [pc, #296]	@ (8007e2c <xTaskIncrementTick+0x154>)
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	2b00      	cmp	r3, #0
 8007d08:	d00d      	beq.n	8007d26 <xTaskIncrementTick+0x4e>
	__asm volatile
 8007d0a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d0e:	b672      	cpsid	i
 8007d10:	f383 8811 	msr	BASEPRI, r3
 8007d14:	f3bf 8f6f 	isb	sy
 8007d18:	f3bf 8f4f 	dsb	sy
 8007d1c:	b662      	cpsie	i
 8007d1e:	603b      	str	r3, [r7, #0]
}
 8007d20:	bf00      	nop
 8007d22:	bf00      	nop
 8007d24:	e7fd      	b.n	8007d22 <xTaskIncrementTick+0x4a>
 8007d26:	4b41      	ldr	r3, [pc, #260]	@ (8007e2c <xTaskIncrementTick+0x154>)
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	60fb      	str	r3, [r7, #12]
 8007d2c:	4b40      	ldr	r3, [pc, #256]	@ (8007e30 <xTaskIncrementTick+0x158>)
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	4a3e      	ldr	r2, [pc, #248]	@ (8007e2c <xTaskIncrementTick+0x154>)
 8007d32:	6013      	str	r3, [r2, #0]
 8007d34:	4a3e      	ldr	r2, [pc, #248]	@ (8007e30 <xTaskIncrementTick+0x158>)
 8007d36:	68fb      	ldr	r3, [r7, #12]
 8007d38:	6013      	str	r3, [r2, #0]
 8007d3a:	4b3e      	ldr	r3, [pc, #248]	@ (8007e34 <xTaskIncrementTick+0x15c>)
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	3301      	adds	r3, #1
 8007d40:	4a3c      	ldr	r2, [pc, #240]	@ (8007e34 <xTaskIncrementTick+0x15c>)
 8007d42:	6013      	str	r3, [r2, #0]
 8007d44:	f000 faf0 	bl	8008328 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007d48:	4b3b      	ldr	r3, [pc, #236]	@ (8007e38 <xTaskIncrementTick+0x160>)
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	693a      	ldr	r2, [r7, #16]
 8007d4e:	429a      	cmp	r2, r3
 8007d50:	d349      	bcc.n	8007de6 <xTaskIncrementTick+0x10e>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007d52:	4b36      	ldr	r3, [pc, #216]	@ (8007e2c <xTaskIncrementTick+0x154>)
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	2b00      	cmp	r3, #0
 8007d5a:	d104      	bne.n	8007d66 <xTaskIncrementTick+0x8e>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007d5c:	4b36      	ldr	r3, [pc, #216]	@ (8007e38 <xTaskIncrementTick+0x160>)
 8007d5e:	f04f 32ff 	mov.w	r2, #4294967295
 8007d62:	601a      	str	r2, [r3, #0]
					break;
 8007d64:	e03f      	b.n	8007de6 <xTaskIncrementTick+0x10e>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007d66:	4b31      	ldr	r3, [pc, #196]	@ (8007e2c <xTaskIncrementTick+0x154>)
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	68db      	ldr	r3, [r3, #12]
 8007d6c:	68db      	ldr	r3, [r3, #12]
 8007d6e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007d70:	68bb      	ldr	r3, [r7, #8]
 8007d72:	685b      	ldr	r3, [r3, #4]
 8007d74:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8007d76:	693a      	ldr	r2, [r7, #16]
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	429a      	cmp	r2, r3
 8007d7c:	d203      	bcs.n	8007d86 <xTaskIncrementTick+0xae>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8007d7e:	4a2e      	ldr	r2, [pc, #184]	@ (8007e38 <xTaskIncrementTick+0x160>)
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8007d84:	e02f      	b.n	8007de6 <xTaskIncrementTick+0x10e>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007d86:	68bb      	ldr	r3, [r7, #8]
 8007d88:	3304      	adds	r3, #4
 8007d8a:	4618      	mov	r0, r3
 8007d8c:	f7fe fbd6 	bl	800653c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007d90:	68bb      	ldr	r3, [r7, #8]
 8007d92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007d94:	2b00      	cmp	r3, #0
 8007d96:	d004      	beq.n	8007da2 <xTaskIncrementTick+0xca>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007d98:	68bb      	ldr	r3, [r7, #8]
 8007d9a:	3318      	adds	r3, #24
 8007d9c:	4618      	mov	r0, r3
 8007d9e:	f7fe fbcd 	bl	800653c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8007da2:	68bb      	ldr	r3, [r7, #8]
 8007da4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007da6:	4b25      	ldr	r3, [pc, #148]	@ (8007e3c <xTaskIncrementTick+0x164>)
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	429a      	cmp	r2, r3
 8007dac:	d903      	bls.n	8007db6 <xTaskIncrementTick+0xde>
 8007dae:	68bb      	ldr	r3, [r7, #8]
 8007db0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007db2:	4a22      	ldr	r2, [pc, #136]	@ (8007e3c <xTaskIncrementTick+0x164>)
 8007db4:	6013      	str	r3, [r2, #0]
 8007db6:	68bb      	ldr	r3, [r7, #8]
 8007db8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007dba:	4613      	mov	r3, r2
 8007dbc:	009b      	lsls	r3, r3, #2
 8007dbe:	4413      	add	r3, r2
 8007dc0:	009b      	lsls	r3, r3, #2
 8007dc2:	4a1f      	ldr	r2, [pc, #124]	@ (8007e40 <xTaskIncrementTick+0x168>)
 8007dc4:	441a      	add	r2, r3
 8007dc6:	68bb      	ldr	r3, [r7, #8]
 8007dc8:	3304      	adds	r3, #4
 8007dca:	4619      	mov	r1, r3
 8007dcc:	4610      	mov	r0, r2
 8007dce:	f7fe fb58 	bl	8006482 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007dd2:	68bb      	ldr	r3, [r7, #8]
 8007dd4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007dd6:	4b1b      	ldr	r3, [pc, #108]	@ (8007e44 <xTaskIncrementTick+0x16c>)
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007ddc:	429a      	cmp	r2, r3
 8007dde:	d3b8      	bcc.n	8007d52 <xTaskIncrementTick+0x7a>
						{
							xSwitchRequired = pdTRUE;
 8007de0:	2301      	movs	r3, #1
 8007de2:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007de4:	e7b5      	b.n	8007d52 <xTaskIncrementTick+0x7a>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007de6:	4b17      	ldr	r3, [pc, #92]	@ (8007e44 <xTaskIncrementTick+0x16c>)
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007dec:	4914      	ldr	r1, [pc, #80]	@ (8007e40 <xTaskIncrementTick+0x168>)
 8007dee:	4613      	mov	r3, r2
 8007df0:	009b      	lsls	r3, r3, #2
 8007df2:	4413      	add	r3, r2
 8007df4:	009b      	lsls	r3, r3, #2
 8007df6:	440b      	add	r3, r1
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	2b01      	cmp	r3, #1
 8007dfc:	d907      	bls.n	8007e0e <xTaskIncrementTick+0x136>
			{
				xSwitchRequired = pdTRUE;
 8007dfe:	2301      	movs	r3, #1
 8007e00:	617b      	str	r3, [r7, #20]
 8007e02:	e004      	b.n	8007e0e <xTaskIncrementTick+0x136>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8007e04:	4b10      	ldr	r3, [pc, #64]	@ (8007e48 <xTaskIncrementTick+0x170>)
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	3301      	adds	r3, #1
 8007e0a:	4a0f      	ldr	r2, [pc, #60]	@ (8007e48 <xTaskIncrementTick+0x170>)
 8007e0c:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8007e0e:	4b0f      	ldr	r3, [pc, #60]	@ (8007e4c <xTaskIncrementTick+0x174>)
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	2b00      	cmp	r3, #0
 8007e14:	d001      	beq.n	8007e1a <xTaskIncrementTick+0x142>
		{
			xSwitchRequired = pdTRUE;
 8007e16:	2301      	movs	r3, #1
 8007e18:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8007e1a:	697b      	ldr	r3, [r7, #20]
}
 8007e1c:	4618      	mov	r0, r3
 8007e1e:	3718      	adds	r7, #24
 8007e20:	46bd      	mov	sp, r7
 8007e22:	bd80      	pop	{r7, pc}
 8007e24:	200015c4 	.word	0x200015c4
 8007e28:	200015a0 	.word	0x200015a0
 8007e2c:	20001554 	.word	0x20001554
 8007e30:	20001558 	.word	0x20001558
 8007e34:	200015b4 	.word	0x200015b4
 8007e38:	200015bc 	.word	0x200015bc
 8007e3c:	200015a4 	.word	0x200015a4
 8007e40:	200010cc 	.word	0x200010cc
 8007e44:	200010c8 	.word	0x200010c8
 8007e48:	200015ac 	.word	0x200015ac
 8007e4c:	200015b0 	.word	0x200015b0

08007e50 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007e50:	b480      	push	{r7}
 8007e52:	b085      	sub	sp, #20
 8007e54:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007e56:	4b2c      	ldr	r3, [pc, #176]	@ (8007f08 <vTaskSwitchContext+0xb8>)
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	2b00      	cmp	r3, #0
 8007e5c:	d003      	beq.n	8007e66 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8007e5e:	4b2b      	ldr	r3, [pc, #172]	@ (8007f0c <vTaskSwitchContext+0xbc>)
 8007e60:	2201      	movs	r2, #1
 8007e62:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007e64:	e049      	b.n	8007efa <vTaskSwitchContext+0xaa>
		xYieldPending = pdFALSE;
 8007e66:	4b29      	ldr	r3, [pc, #164]	@ (8007f0c <vTaskSwitchContext+0xbc>)
 8007e68:	2200      	movs	r2, #0
 8007e6a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007e6c:	4b28      	ldr	r3, [pc, #160]	@ (8007f10 <vTaskSwitchContext+0xc0>)
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	60fb      	str	r3, [r7, #12]
 8007e72:	e013      	b.n	8007e9c <vTaskSwitchContext+0x4c>
 8007e74:	68fb      	ldr	r3, [r7, #12]
 8007e76:	2b00      	cmp	r3, #0
 8007e78:	d10d      	bne.n	8007e96 <vTaskSwitchContext+0x46>
	__asm volatile
 8007e7a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e7e:	b672      	cpsid	i
 8007e80:	f383 8811 	msr	BASEPRI, r3
 8007e84:	f3bf 8f6f 	isb	sy
 8007e88:	f3bf 8f4f 	dsb	sy
 8007e8c:	b662      	cpsie	i
 8007e8e:	607b      	str	r3, [r7, #4]
}
 8007e90:	bf00      	nop
 8007e92:	bf00      	nop
 8007e94:	e7fd      	b.n	8007e92 <vTaskSwitchContext+0x42>
 8007e96:	68fb      	ldr	r3, [r7, #12]
 8007e98:	3b01      	subs	r3, #1
 8007e9a:	60fb      	str	r3, [r7, #12]
 8007e9c:	491d      	ldr	r1, [pc, #116]	@ (8007f14 <vTaskSwitchContext+0xc4>)
 8007e9e:	68fa      	ldr	r2, [r7, #12]
 8007ea0:	4613      	mov	r3, r2
 8007ea2:	009b      	lsls	r3, r3, #2
 8007ea4:	4413      	add	r3, r2
 8007ea6:	009b      	lsls	r3, r3, #2
 8007ea8:	440b      	add	r3, r1
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	2b00      	cmp	r3, #0
 8007eae:	d0e1      	beq.n	8007e74 <vTaskSwitchContext+0x24>
 8007eb0:	68fa      	ldr	r2, [r7, #12]
 8007eb2:	4613      	mov	r3, r2
 8007eb4:	009b      	lsls	r3, r3, #2
 8007eb6:	4413      	add	r3, r2
 8007eb8:	009b      	lsls	r3, r3, #2
 8007eba:	4a16      	ldr	r2, [pc, #88]	@ (8007f14 <vTaskSwitchContext+0xc4>)
 8007ebc:	4413      	add	r3, r2
 8007ebe:	60bb      	str	r3, [r7, #8]
 8007ec0:	68bb      	ldr	r3, [r7, #8]
 8007ec2:	685b      	ldr	r3, [r3, #4]
 8007ec4:	685a      	ldr	r2, [r3, #4]
 8007ec6:	68bb      	ldr	r3, [r7, #8]
 8007ec8:	605a      	str	r2, [r3, #4]
 8007eca:	68bb      	ldr	r3, [r7, #8]
 8007ecc:	685a      	ldr	r2, [r3, #4]
 8007ece:	68bb      	ldr	r3, [r7, #8]
 8007ed0:	3308      	adds	r3, #8
 8007ed2:	429a      	cmp	r2, r3
 8007ed4:	d104      	bne.n	8007ee0 <vTaskSwitchContext+0x90>
 8007ed6:	68bb      	ldr	r3, [r7, #8]
 8007ed8:	685b      	ldr	r3, [r3, #4]
 8007eda:	685a      	ldr	r2, [r3, #4]
 8007edc:	68bb      	ldr	r3, [r7, #8]
 8007ede:	605a      	str	r2, [r3, #4]
 8007ee0:	68bb      	ldr	r3, [r7, #8]
 8007ee2:	685b      	ldr	r3, [r3, #4]
 8007ee4:	68db      	ldr	r3, [r3, #12]
 8007ee6:	4a0c      	ldr	r2, [pc, #48]	@ (8007f18 <vTaskSwitchContext+0xc8>)
 8007ee8:	6013      	str	r3, [r2, #0]
 8007eea:	4a09      	ldr	r2, [pc, #36]	@ (8007f10 <vTaskSwitchContext+0xc0>)
 8007eec:	68fb      	ldr	r3, [r7, #12]
 8007eee:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8007ef0:	4b09      	ldr	r3, [pc, #36]	@ (8007f18 <vTaskSwitchContext+0xc8>)
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	3354      	adds	r3, #84	@ 0x54
 8007ef6:	4a09      	ldr	r2, [pc, #36]	@ (8007f1c <vTaskSwitchContext+0xcc>)
 8007ef8:	6013      	str	r3, [r2, #0]
}
 8007efa:	bf00      	nop
 8007efc:	3714      	adds	r7, #20
 8007efe:	46bd      	mov	sp, r7
 8007f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f04:	4770      	bx	lr
 8007f06:	bf00      	nop
 8007f08:	200015c4 	.word	0x200015c4
 8007f0c:	200015b0 	.word	0x200015b0
 8007f10:	200015a4 	.word	0x200015a4
 8007f14:	200010cc 	.word	0x200010cc
 8007f18:	200010c8 	.word	0x200010c8
 8007f1c:	2000001c 	.word	0x2000001c

08007f20 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8007f20:	b580      	push	{r7, lr}
 8007f22:	b084      	sub	sp, #16
 8007f24:	af00      	add	r7, sp, #0
 8007f26:	6078      	str	r0, [r7, #4]
 8007f28:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	2b00      	cmp	r3, #0
 8007f2e:	d10d      	bne.n	8007f4c <vTaskPlaceOnEventList+0x2c>
	__asm volatile
 8007f30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f34:	b672      	cpsid	i
 8007f36:	f383 8811 	msr	BASEPRI, r3
 8007f3a:	f3bf 8f6f 	isb	sy
 8007f3e:	f3bf 8f4f 	dsb	sy
 8007f42:	b662      	cpsie	i
 8007f44:	60fb      	str	r3, [r7, #12]
}
 8007f46:	bf00      	nop
 8007f48:	bf00      	nop
 8007f4a:	e7fd      	b.n	8007f48 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007f4c:	4b07      	ldr	r3, [pc, #28]	@ (8007f6c <vTaskPlaceOnEventList+0x4c>)
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	3318      	adds	r3, #24
 8007f52:	4619      	mov	r1, r3
 8007f54:	6878      	ldr	r0, [r7, #4]
 8007f56:	f7fe fab8 	bl	80064ca <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007f5a:	2101      	movs	r1, #1
 8007f5c:	6838      	ldr	r0, [r7, #0]
 8007f5e:	f000 fb99 	bl	8008694 <prvAddCurrentTaskToDelayedList>
}
 8007f62:	bf00      	nop
 8007f64:	3710      	adds	r7, #16
 8007f66:	46bd      	mov	sp, r7
 8007f68:	bd80      	pop	{r7, pc}
 8007f6a:	bf00      	nop
 8007f6c:	200010c8 	.word	0x200010c8

08007f70 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007f70:	b580      	push	{r7, lr}
 8007f72:	b086      	sub	sp, #24
 8007f74:	af00      	add	r7, sp, #0
 8007f76:	60f8      	str	r0, [r7, #12]
 8007f78:	60b9      	str	r1, [r7, #8]
 8007f7a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8007f7c:	68fb      	ldr	r3, [r7, #12]
 8007f7e:	2b00      	cmp	r3, #0
 8007f80:	d10d      	bne.n	8007f9e <vTaskPlaceOnEventListRestricted+0x2e>
	__asm volatile
 8007f82:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f86:	b672      	cpsid	i
 8007f88:	f383 8811 	msr	BASEPRI, r3
 8007f8c:	f3bf 8f6f 	isb	sy
 8007f90:	f3bf 8f4f 	dsb	sy
 8007f94:	b662      	cpsie	i
 8007f96:	617b      	str	r3, [r7, #20]
}
 8007f98:	bf00      	nop
 8007f9a:	bf00      	nop
 8007f9c:	e7fd      	b.n	8007f9a <vTaskPlaceOnEventListRestricted+0x2a>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007f9e:	4b0a      	ldr	r3, [pc, #40]	@ (8007fc8 <vTaskPlaceOnEventListRestricted+0x58>)
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	3318      	adds	r3, #24
 8007fa4:	4619      	mov	r1, r3
 8007fa6:	68f8      	ldr	r0, [r7, #12]
 8007fa8:	f7fe fa6b 	bl	8006482 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	2b00      	cmp	r3, #0
 8007fb0:	d002      	beq.n	8007fb8 <vTaskPlaceOnEventListRestricted+0x48>
		{
			xTicksToWait = portMAX_DELAY;
 8007fb2:	f04f 33ff 	mov.w	r3, #4294967295
 8007fb6:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8007fb8:	6879      	ldr	r1, [r7, #4]
 8007fba:	68b8      	ldr	r0, [r7, #8]
 8007fbc:	f000 fb6a 	bl	8008694 <prvAddCurrentTaskToDelayedList>
	}
 8007fc0:	bf00      	nop
 8007fc2:	3718      	adds	r7, #24
 8007fc4:	46bd      	mov	sp, r7
 8007fc6:	bd80      	pop	{r7, pc}
 8007fc8:	200010c8 	.word	0x200010c8

08007fcc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8007fcc:	b580      	push	{r7, lr}
 8007fce:	b086      	sub	sp, #24
 8007fd0:	af00      	add	r7, sp, #0
 8007fd2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	68db      	ldr	r3, [r3, #12]
 8007fd8:	68db      	ldr	r3, [r3, #12]
 8007fda:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8007fdc:	693b      	ldr	r3, [r7, #16]
 8007fde:	2b00      	cmp	r3, #0
 8007fe0:	d10d      	bne.n	8007ffe <xTaskRemoveFromEventList+0x32>
	__asm volatile
 8007fe2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007fe6:	b672      	cpsid	i
 8007fe8:	f383 8811 	msr	BASEPRI, r3
 8007fec:	f3bf 8f6f 	isb	sy
 8007ff0:	f3bf 8f4f 	dsb	sy
 8007ff4:	b662      	cpsie	i
 8007ff6:	60fb      	str	r3, [r7, #12]
}
 8007ff8:	bf00      	nop
 8007ffa:	bf00      	nop
 8007ffc:	e7fd      	b.n	8007ffa <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8007ffe:	693b      	ldr	r3, [r7, #16]
 8008000:	3318      	adds	r3, #24
 8008002:	4618      	mov	r0, r3
 8008004:	f7fe fa9a 	bl	800653c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008008:	4b1d      	ldr	r3, [pc, #116]	@ (8008080 <xTaskRemoveFromEventList+0xb4>)
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	2b00      	cmp	r3, #0
 800800e:	d11d      	bne.n	800804c <xTaskRemoveFromEventList+0x80>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8008010:	693b      	ldr	r3, [r7, #16]
 8008012:	3304      	adds	r3, #4
 8008014:	4618      	mov	r0, r3
 8008016:	f7fe fa91 	bl	800653c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800801a:	693b      	ldr	r3, [r7, #16]
 800801c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800801e:	4b19      	ldr	r3, [pc, #100]	@ (8008084 <xTaskRemoveFromEventList+0xb8>)
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	429a      	cmp	r2, r3
 8008024:	d903      	bls.n	800802e <xTaskRemoveFromEventList+0x62>
 8008026:	693b      	ldr	r3, [r7, #16]
 8008028:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800802a:	4a16      	ldr	r2, [pc, #88]	@ (8008084 <xTaskRemoveFromEventList+0xb8>)
 800802c:	6013      	str	r3, [r2, #0]
 800802e:	693b      	ldr	r3, [r7, #16]
 8008030:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008032:	4613      	mov	r3, r2
 8008034:	009b      	lsls	r3, r3, #2
 8008036:	4413      	add	r3, r2
 8008038:	009b      	lsls	r3, r3, #2
 800803a:	4a13      	ldr	r2, [pc, #76]	@ (8008088 <xTaskRemoveFromEventList+0xbc>)
 800803c:	441a      	add	r2, r3
 800803e:	693b      	ldr	r3, [r7, #16]
 8008040:	3304      	adds	r3, #4
 8008042:	4619      	mov	r1, r3
 8008044:	4610      	mov	r0, r2
 8008046:	f7fe fa1c 	bl	8006482 <vListInsertEnd>
 800804a:	e005      	b.n	8008058 <xTaskRemoveFromEventList+0x8c>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800804c:	693b      	ldr	r3, [r7, #16]
 800804e:	3318      	adds	r3, #24
 8008050:	4619      	mov	r1, r3
 8008052:	480e      	ldr	r0, [pc, #56]	@ (800808c <xTaskRemoveFromEventList+0xc0>)
 8008054:	f7fe fa15 	bl	8006482 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008058:	693b      	ldr	r3, [r7, #16]
 800805a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800805c:	4b0c      	ldr	r3, [pc, #48]	@ (8008090 <xTaskRemoveFromEventList+0xc4>)
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008062:	429a      	cmp	r2, r3
 8008064:	d905      	bls.n	8008072 <xTaskRemoveFromEventList+0xa6>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8008066:	2301      	movs	r3, #1
 8008068:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800806a:	4b0a      	ldr	r3, [pc, #40]	@ (8008094 <xTaskRemoveFromEventList+0xc8>)
 800806c:	2201      	movs	r2, #1
 800806e:	601a      	str	r2, [r3, #0]
 8008070:	e001      	b.n	8008076 <xTaskRemoveFromEventList+0xaa>
	}
	else
	{
		xReturn = pdFALSE;
 8008072:	2300      	movs	r3, #0
 8008074:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8008076:	697b      	ldr	r3, [r7, #20]
}
 8008078:	4618      	mov	r0, r3
 800807a:	3718      	adds	r7, #24
 800807c:	46bd      	mov	sp, r7
 800807e:	bd80      	pop	{r7, pc}
 8008080:	200015c4 	.word	0x200015c4
 8008084:	200015a4 	.word	0x200015a4
 8008088:	200010cc 	.word	0x200010cc
 800808c:	2000155c 	.word	0x2000155c
 8008090:	200010c8 	.word	0x200010c8
 8008094:	200015b0 	.word	0x200015b0

08008098 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8008098:	b480      	push	{r7}
 800809a:	b083      	sub	sp, #12
 800809c:	af00      	add	r7, sp, #0
 800809e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80080a0:	4b06      	ldr	r3, [pc, #24]	@ (80080bc <vTaskInternalSetTimeOutState+0x24>)
 80080a2:	681a      	ldr	r2, [r3, #0]
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80080a8:	4b05      	ldr	r3, [pc, #20]	@ (80080c0 <vTaskInternalSetTimeOutState+0x28>)
 80080aa:	681a      	ldr	r2, [r3, #0]
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	605a      	str	r2, [r3, #4]
}
 80080b0:	bf00      	nop
 80080b2:	370c      	adds	r7, #12
 80080b4:	46bd      	mov	sp, r7
 80080b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ba:	4770      	bx	lr
 80080bc:	200015b4 	.word	0x200015b4
 80080c0:	200015a0 	.word	0x200015a0

080080c4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80080c4:	b580      	push	{r7, lr}
 80080c6:	b088      	sub	sp, #32
 80080c8:	af00      	add	r7, sp, #0
 80080ca:	6078      	str	r0, [r7, #4]
 80080cc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	2b00      	cmp	r3, #0
 80080d2:	d10d      	bne.n	80080f0 <xTaskCheckForTimeOut+0x2c>
	__asm volatile
 80080d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80080d8:	b672      	cpsid	i
 80080da:	f383 8811 	msr	BASEPRI, r3
 80080de:	f3bf 8f6f 	isb	sy
 80080e2:	f3bf 8f4f 	dsb	sy
 80080e6:	b662      	cpsie	i
 80080e8:	613b      	str	r3, [r7, #16]
}
 80080ea:	bf00      	nop
 80080ec:	bf00      	nop
 80080ee:	e7fd      	b.n	80080ec <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 80080f0:	683b      	ldr	r3, [r7, #0]
 80080f2:	2b00      	cmp	r3, #0
 80080f4:	d10d      	bne.n	8008112 <xTaskCheckForTimeOut+0x4e>
	__asm volatile
 80080f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80080fa:	b672      	cpsid	i
 80080fc:	f383 8811 	msr	BASEPRI, r3
 8008100:	f3bf 8f6f 	isb	sy
 8008104:	f3bf 8f4f 	dsb	sy
 8008108:	b662      	cpsie	i
 800810a:	60fb      	str	r3, [r7, #12]
}
 800810c:	bf00      	nop
 800810e:	bf00      	nop
 8008110:	e7fd      	b.n	800810e <xTaskCheckForTimeOut+0x4a>

	taskENTER_CRITICAL();
 8008112:	f000 ff8b 	bl	800902c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8008116:	4b1d      	ldr	r3, [pc, #116]	@ (800818c <xTaskCheckForTimeOut+0xc8>)
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	685b      	ldr	r3, [r3, #4]
 8008120:	69ba      	ldr	r2, [r7, #24]
 8008122:	1ad3      	subs	r3, r2, r3
 8008124:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8008126:	683b      	ldr	r3, [r7, #0]
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800812e:	d102      	bne.n	8008136 <xTaskCheckForTimeOut+0x72>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8008130:	2300      	movs	r3, #0
 8008132:	61fb      	str	r3, [r7, #28]
 8008134:	e023      	b.n	800817e <xTaskCheckForTimeOut+0xba>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	681a      	ldr	r2, [r3, #0]
 800813a:	4b15      	ldr	r3, [pc, #84]	@ (8008190 <xTaskCheckForTimeOut+0xcc>)
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	429a      	cmp	r2, r3
 8008140:	d007      	beq.n	8008152 <xTaskCheckForTimeOut+0x8e>
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	685b      	ldr	r3, [r3, #4]
 8008146:	69ba      	ldr	r2, [r7, #24]
 8008148:	429a      	cmp	r2, r3
 800814a:	d302      	bcc.n	8008152 <xTaskCheckForTimeOut+0x8e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800814c:	2301      	movs	r3, #1
 800814e:	61fb      	str	r3, [r7, #28]
 8008150:	e015      	b.n	800817e <xTaskCheckForTimeOut+0xba>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8008152:	683b      	ldr	r3, [r7, #0]
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	697a      	ldr	r2, [r7, #20]
 8008158:	429a      	cmp	r2, r3
 800815a:	d20b      	bcs.n	8008174 <xTaskCheckForTimeOut+0xb0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800815c:	683b      	ldr	r3, [r7, #0]
 800815e:	681a      	ldr	r2, [r3, #0]
 8008160:	697b      	ldr	r3, [r7, #20]
 8008162:	1ad2      	subs	r2, r2, r3
 8008164:	683b      	ldr	r3, [r7, #0]
 8008166:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8008168:	6878      	ldr	r0, [r7, #4]
 800816a:	f7ff ff95 	bl	8008098 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800816e:	2300      	movs	r3, #0
 8008170:	61fb      	str	r3, [r7, #28]
 8008172:	e004      	b.n	800817e <xTaskCheckForTimeOut+0xba>
		}
		else
		{
			*pxTicksToWait = 0;
 8008174:	683b      	ldr	r3, [r7, #0]
 8008176:	2200      	movs	r2, #0
 8008178:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800817a:	2301      	movs	r3, #1
 800817c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800817e:	f000 ff8b 	bl	8009098 <vPortExitCritical>

	return xReturn;
 8008182:	69fb      	ldr	r3, [r7, #28]
}
 8008184:	4618      	mov	r0, r3
 8008186:	3720      	adds	r7, #32
 8008188:	46bd      	mov	sp, r7
 800818a:	bd80      	pop	{r7, pc}
 800818c:	200015a0 	.word	0x200015a0
 8008190:	200015b4 	.word	0x200015b4

08008194 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8008194:	b480      	push	{r7}
 8008196:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8008198:	4b03      	ldr	r3, [pc, #12]	@ (80081a8 <vTaskMissedYield+0x14>)
 800819a:	2201      	movs	r2, #1
 800819c:	601a      	str	r2, [r3, #0]
}
 800819e:	bf00      	nop
 80081a0:	46bd      	mov	sp, r7
 80081a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081a6:	4770      	bx	lr
 80081a8:	200015b0 	.word	0x200015b0

080081ac <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80081ac:	b580      	push	{r7, lr}
 80081ae:	b082      	sub	sp, #8
 80081b0:	af00      	add	r7, sp, #0
 80081b2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80081b4:	f000 f852 	bl	800825c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80081b8:	4b06      	ldr	r3, [pc, #24]	@ (80081d4 <prvIdleTask+0x28>)
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	2b01      	cmp	r3, #1
 80081be:	d9f9      	bls.n	80081b4 <prvIdleTask+0x8>
			{
				taskYIELD();
 80081c0:	4b05      	ldr	r3, [pc, #20]	@ (80081d8 <prvIdleTask+0x2c>)
 80081c2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80081c6:	601a      	str	r2, [r3, #0]
 80081c8:	f3bf 8f4f 	dsb	sy
 80081cc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80081d0:	e7f0      	b.n	80081b4 <prvIdleTask+0x8>
 80081d2:	bf00      	nop
 80081d4:	200010cc 	.word	0x200010cc
 80081d8:	e000ed04 	.word	0xe000ed04

080081dc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80081dc:	b580      	push	{r7, lr}
 80081de:	b082      	sub	sp, #8
 80081e0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80081e2:	2300      	movs	r3, #0
 80081e4:	607b      	str	r3, [r7, #4]
 80081e6:	e00c      	b.n	8008202 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80081e8:	687a      	ldr	r2, [r7, #4]
 80081ea:	4613      	mov	r3, r2
 80081ec:	009b      	lsls	r3, r3, #2
 80081ee:	4413      	add	r3, r2
 80081f0:	009b      	lsls	r3, r3, #2
 80081f2:	4a12      	ldr	r2, [pc, #72]	@ (800823c <prvInitialiseTaskLists+0x60>)
 80081f4:	4413      	add	r3, r2
 80081f6:	4618      	mov	r0, r3
 80081f8:	f7fe f916 	bl	8006428 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	3301      	adds	r3, #1
 8008200:	607b      	str	r3, [r7, #4]
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	2b37      	cmp	r3, #55	@ 0x37
 8008206:	d9ef      	bls.n	80081e8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8008208:	480d      	ldr	r0, [pc, #52]	@ (8008240 <prvInitialiseTaskLists+0x64>)
 800820a:	f7fe f90d 	bl	8006428 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800820e:	480d      	ldr	r0, [pc, #52]	@ (8008244 <prvInitialiseTaskLists+0x68>)
 8008210:	f7fe f90a 	bl	8006428 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8008214:	480c      	ldr	r0, [pc, #48]	@ (8008248 <prvInitialiseTaskLists+0x6c>)
 8008216:	f7fe f907 	bl	8006428 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800821a:	480c      	ldr	r0, [pc, #48]	@ (800824c <prvInitialiseTaskLists+0x70>)
 800821c:	f7fe f904 	bl	8006428 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8008220:	480b      	ldr	r0, [pc, #44]	@ (8008250 <prvInitialiseTaskLists+0x74>)
 8008222:	f7fe f901 	bl	8006428 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8008226:	4b0b      	ldr	r3, [pc, #44]	@ (8008254 <prvInitialiseTaskLists+0x78>)
 8008228:	4a05      	ldr	r2, [pc, #20]	@ (8008240 <prvInitialiseTaskLists+0x64>)
 800822a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800822c:	4b0a      	ldr	r3, [pc, #40]	@ (8008258 <prvInitialiseTaskLists+0x7c>)
 800822e:	4a05      	ldr	r2, [pc, #20]	@ (8008244 <prvInitialiseTaskLists+0x68>)
 8008230:	601a      	str	r2, [r3, #0]
}
 8008232:	bf00      	nop
 8008234:	3708      	adds	r7, #8
 8008236:	46bd      	mov	sp, r7
 8008238:	bd80      	pop	{r7, pc}
 800823a:	bf00      	nop
 800823c:	200010cc 	.word	0x200010cc
 8008240:	2000152c 	.word	0x2000152c
 8008244:	20001540 	.word	0x20001540
 8008248:	2000155c 	.word	0x2000155c
 800824c:	20001570 	.word	0x20001570
 8008250:	20001588 	.word	0x20001588
 8008254:	20001554 	.word	0x20001554
 8008258:	20001558 	.word	0x20001558

0800825c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800825c:	b580      	push	{r7, lr}
 800825e:	b082      	sub	sp, #8
 8008260:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008262:	e019      	b.n	8008298 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8008264:	f000 fee2 	bl	800902c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008268:	4b10      	ldr	r3, [pc, #64]	@ (80082ac <prvCheckTasksWaitingTermination+0x50>)
 800826a:	68db      	ldr	r3, [r3, #12]
 800826c:	68db      	ldr	r3, [r3, #12]
 800826e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	3304      	adds	r3, #4
 8008274:	4618      	mov	r0, r3
 8008276:	f7fe f961 	bl	800653c <uxListRemove>
				--uxCurrentNumberOfTasks;
 800827a:	4b0d      	ldr	r3, [pc, #52]	@ (80082b0 <prvCheckTasksWaitingTermination+0x54>)
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	3b01      	subs	r3, #1
 8008280:	4a0b      	ldr	r2, [pc, #44]	@ (80082b0 <prvCheckTasksWaitingTermination+0x54>)
 8008282:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8008284:	4b0b      	ldr	r3, [pc, #44]	@ (80082b4 <prvCheckTasksWaitingTermination+0x58>)
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	3b01      	subs	r3, #1
 800828a:	4a0a      	ldr	r2, [pc, #40]	@ (80082b4 <prvCheckTasksWaitingTermination+0x58>)
 800828c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800828e:	f000 ff03 	bl	8009098 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8008292:	6878      	ldr	r0, [r7, #4]
 8008294:	f000 f810 	bl	80082b8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008298:	4b06      	ldr	r3, [pc, #24]	@ (80082b4 <prvCheckTasksWaitingTermination+0x58>)
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	2b00      	cmp	r3, #0
 800829e:	d1e1      	bne.n	8008264 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80082a0:	bf00      	nop
 80082a2:	bf00      	nop
 80082a4:	3708      	adds	r7, #8
 80082a6:	46bd      	mov	sp, r7
 80082a8:	bd80      	pop	{r7, pc}
 80082aa:	bf00      	nop
 80082ac:	20001570 	.word	0x20001570
 80082b0:	2000159c 	.word	0x2000159c
 80082b4:	20001584 	.word	0x20001584

080082b8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80082b8:	b580      	push	{r7, lr}
 80082ba:	b084      	sub	sp, #16
 80082bc:	af00      	add	r7, sp, #0
 80082be:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	3354      	adds	r3, #84	@ 0x54
 80082c4:	4618      	mov	r0, r3
 80082c6:	f001 fbeb 	bl	8009aa0 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 80082d0:	2b00      	cmp	r3, #0
 80082d2:	d108      	bne.n	80082e6 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80082d8:	4618      	mov	r0, r3
 80082da:	f001 f8a3 	bl	8009424 <vPortFree>
				vPortFree( pxTCB );
 80082de:	6878      	ldr	r0, [r7, #4]
 80082e0:	f001 f8a0 	bl	8009424 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80082e4:	e01b      	b.n	800831e <prvDeleteTCB+0x66>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 80082ec:	2b01      	cmp	r3, #1
 80082ee:	d103      	bne.n	80082f8 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80082f0:	6878      	ldr	r0, [r7, #4]
 80082f2:	f001 f897 	bl	8009424 <vPortFree>
	}
 80082f6:	e012      	b.n	800831e <prvDeleteTCB+0x66>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 80082fe:	2b02      	cmp	r3, #2
 8008300:	d00d      	beq.n	800831e <prvDeleteTCB+0x66>
	__asm volatile
 8008302:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008306:	b672      	cpsid	i
 8008308:	f383 8811 	msr	BASEPRI, r3
 800830c:	f3bf 8f6f 	isb	sy
 8008310:	f3bf 8f4f 	dsb	sy
 8008314:	b662      	cpsie	i
 8008316:	60fb      	str	r3, [r7, #12]
}
 8008318:	bf00      	nop
 800831a:	bf00      	nop
 800831c:	e7fd      	b.n	800831a <prvDeleteTCB+0x62>
	}
 800831e:	bf00      	nop
 8008320:	3710      	adds	r7, #16
 8008322:	46bd      	mov	sp, r7
 8008324:	bd80      	pop	{r7, pc}
	...

08008328 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8008328:	b480      	push	{r7}
 800832a:	b083      	sub	sp, #12
 800832c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800832e:	4b0c      	ldr	r3, [pc, #48]	@ (8008360 <prvResetNextTaskUnblockTime+0x38>)
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	2b00      	cmp	r3, #0
 8008336:	d104      	bne.n	8008342 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8008338:	4b0a      	ldr	r3, [pc, #40]	@ (8008364 <prvResetNextTaskUnblockTime+0x3c>)
 800833a:	f04f 32ff 	mov.w	r2, #4294967295
 800833e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8008340:	e008      	b.n	8008354 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008342:	4b07      	ldr	r3, [pc, #28]	@ (8008360 <prvResetNextTaskUnblockTime+0x38>)
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	68db      	ldr	r3, [r3, #12]
 8008348:	68db      	ldr	r3, [r3, #12]
 800834a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	685b      	ldr	r3, [r3, #4]
 8008350:	4a04      	ldr	r2, [pc, #16]	@ (8008364 <prvResetNextTaskUnblockTime+0x3c>)
 8008352:	6013      	str	r3, [r2, #0]
}
 8008354:	bf00      	nop
 8008356:	370c      	adds	r7, #12
 8008358:	46bd      	mov	sp, r7
 800835a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800835e:	4770      	bx	lr
 8008360:	20001554 	.word	0x20001554
 8008364:	200015bc 	.word	0x200015bc

08008368 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8008368:	b480      	push	{r7}
 800836a:	b083      	sub	sp, #12
 800836c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800836e:	4b0b      	ldr	r3, [pc, #44]	@ (800839c <xTaskGetSchedulerState+0x34>)
 8008370:	681b      	ldr	r3, [r3, #0]
 8008372:	2b00      	cmp	r3, #0
 8008374:	d102      	bne.n	800837c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8008376:	2301      	movs	r3, #1
 8008378:	607b      	str	r3, [r7, #4]
 800837a:	e008      	b.n	800838e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800837c:	4b08      	ldr	r3, [pc, #32]	@ (80083a0 <xTaskGetSchedulerState+0x38>)
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	2b00      	cmp	r3, #0
 8008382:	d102      	bne.n	800838a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8008384:	2302      	movs	r3, #2
 8008386:	607b      	str	r3, [r7, #4]
 8008388:	e001      	b.n	800838e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800838a:	2300      	movs	r3, #0
 800838c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800838e:	687b      	ldr	r3, [r7, #4]
	}
 8008390:	4618      	mov	r0, r3
 8008392:	370c      	adds	r7, #12
 8008394:	46bd      	mov	sp, r7
 8008396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800839a:	4770      	bx	lr
 800839c:	200015a8 	.word	0x200015a8
 80083a0:	200015c4 	.word	0x200015c4

080083a4 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80083a4:	b580      	push	{r7, lr}
 80083a6:	b084      	sub	sp, #16
 80083a8:	af00      	add	r7, sp, #0
 80083aa:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80083b0:	2300      	movs	r3, #0
 80083b2:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	2b00      	cmp	r3, #0
 80083b8:	d051      	beq.n	800845e <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80083ba:	68bb      	ldr	r3, [r7, #8]
 80083bc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80083be:	4b2a      	ldr	r3, [pc, #168]	@ (8008468 <xTaskPriorityInherit+0xc4>)
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80083c4:	429a      	cmp	r2, r3
 80083c6:	d241      	bcs.n	800844c <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80083c8:	68bb      	ldr	r3, [r7, #8]
 80083ca:	699b      	ldr	r3, [r3, #24]
 80083cc:	2b00      	cmp	r3, #0
 80083ce:	db06      	blt.n	80083de <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80083d0:	4b25      	ldr	r3, [pc, #148]	@ (8008468 <xTaskPriorityInherit+0xc4>)
 80083d2:	681b      	ldr	r3, [r3, #0]
 80083d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80083d6:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80083da:	68bb      	ldr	r3, [r7, #8]
 80083dc:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80083de:	68bb      	ldr	r3, [r7, #8]
 80083e0:	6959      	ldr	r1, [r3, #20]
 80083e2:	68bb      	ldr	r3, [r7, #8]
 80083e4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80083e6:	4613      	mov	r3, r2
 80083e8:	009b      	lsls	r3, r3, #2
 80083ea:	4413      	add	r3, r2
 80083ec:	009b      	lsls	r3, r3, #2
 80083ee:	4a1f      	ldr	r2, [pc, #124]	@ (800846c <xTaskPriorityInherit+0xc8>)
 80083f0:	4413      	add	r3, r2
 80083f2:	4299      	cmp	r1, r3
 80083f4:	d122      	bne.n	800843c <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80083f6:	68bb      	ldr	r3, [r7, #8]
 80083f8:	3304      	adds	r3, #4
 80083fa:	4618      	mov	r0, r3
 80083fc:	f7fe f89e 	bl	800653c <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8008400:	4b19      	ldr	r3, [pc, #100]	@ (8008468 <xTaskPriorityInherit+0xc4>)
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008406:	68bb      	ldr	r3, [r7, #8]
 8008408:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800840a:	68bb      	ldr	r3, [r7, #8]
 800840c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800840e:	4b18      	ldr	r3, [pc, #96]	@ (8008470 <xTaskPriorityInherit+0xcc>)
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	429a      	cmp	r2, r3
 8008414:	d903      	bls.n	800841e <xTaskPriorityInherit+0x7a>
 8008416:	68bb      	ldr	r3, [r7, #8]
 8008418:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800841a:	4a15      	ldr	r2, [pc, #84]	@ (8008470 <xTaskPriorityInherit+0xcc>)
 800841c:	6013      	str	r3, [r2, #0]
 800841e:	68bb      	ldr	r3, [r7, #8]
 8008420:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008422:	4613      	mov	r3, r2
 8008424:	009b      	lsls	r3, r3, #2
 8008426:	4413      	add	r3, r2
 8008428:	009b      	lsls	r3, r3, #2
 800842a:	4a10      	ldr	r2, [pc, #64]	@ (800846c <xTaskPriorityInherit+0xc8>)
 800842c:	441a      	add	r2, r3
 800842e:	68bb      	ldr	r3, [r7, #8]
 8008430:	3304      	adds	r3, #4
 8008432:	4619      	mov	r1, r3
 8008434:	4610      	mov	r0, r2
 8008436:	f7fe f824 	bl	8006482 <vListInsertEnd>
 800843a:	e004      	b.n	8008446 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800843c:	4b0a      	ldr	r3, [pc, #40]	@ (8008468 <xTaskPriorityInherit+0xc4>)
 800843e:	681b      	ldr	r3, [r3, #0]
 8008440:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008442:	68bb      	ldr	r3, [r7, #8]
 8008444:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8008446:	2301      	movs	r3, #1
 8008448:	60fb      	str	r3, [r7, #12]
 800844a:	e008      	b.n	800845e <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800844c:	68bb      	ldr	r3, [r7, #8]
 800844e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8008450:	4b05      	ldr	r3, [pc, #20]	@ (8008468 <xTaskPriorityInherit+0xc4>)
 8008452:	681b      	ldr	r3, [r3, #0]
 8008454:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008456:	429a      	cmp	r2, r3
 8008458:	d201      	bcs.n	800845e <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800845a:	2301      	movs	r3, #1
 800845c:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800845e:	68fb      	ldr	r3, [r7, #12]
	}
 8008460:	4618      	mov	r0, r3
 8008462:	3710      	adds	r7, #16
 8008464:	46bd      	mov	sp, r7
 8008466:	bd80      	pop	{r7, pc}
 8008468:	200010c8 	.word	0x200010c8
 800846c:	200010cc 	.word	0x200010cc
 8008470:	200015a4 	.word	0x200015a4

08008474 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8008474:	b580      	push	{r7, lr}
 8008476:	b086      	sub	sp, #24
 8008478:	af00      	add	r7, sp, #0
 800847a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8008480:	2300      	movs	r3, #0
 8008482:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	2b00      	cmp	r3, #0
 8008488:	d05c      	beq.n	8008544 <xTaskPriorityDisinherit+0xd0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800848a:	4b31      	ldr	r3, [pc, #196]	@ (8008550 <xTaskPriorityDisinherit+0xdc>)
 800848c:	681b      	ldr	r3, [r3, #0]
 800848e:	693a      	ldr	r2, [r7, #16]
 8008490:	429a      	cmp	r2, r3
 8008492:	d00d      	beq.n	80084b0 <xTaskPriorityDisinherit+0x3c>
	__asm volatile
 8008494:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008498:	b672      	cpsid	i
 800849a:	f383 8811 	msr	BASEPRI, r3
 800849e:	f3bf 8f6f 	isb	sy
 80084a2:	f3bf 8f4f 	dsb	sy
 80084a6:	b662      	cpsie	i
 80084a8:	60fb      	str	r3, [r7, #12]
}
 80084aa:	bf00      	nop
 80084ac:	bf00      	nop
 80084ae:	e7fd      	b.n	80084ac <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 80084b0:	693b      	ldr	r3, [r7, #16]
 80084b2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80084b4:	2b00      	cmp	r3, #0
 80084b6:	d10d      	bne.n	80084d4 <xTaskPriorityDisinherit+0x60>
	__asm volatile
 80084b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80084bc:	b672      	cpsid	i
 80084be:	f383 8811 	msr	BASEPRI, r3
 80084c2:	f3bf 8f6f 	isb	sy
 80084c6:	f3bf 8f4f 	dsb	sy
 80084ca:	b662      	cpsie	i
 80084cc:	60bb      	str	r3, [r7, #8]
}
 80084ce:	bf00      	nop
 80084d0:	bf00      	nop
 80084d2:	e7fd      	b.n	80084d0 <xTaskPriorityDisinherit+0x5c>
			( pxTCB->uxMutexesHeld )--;
 80084d4:	693b      	ldr	r3, [r7, #16]
 80084d6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80084d8:	1e5a      	subs	r2, r3, #1
 80084da:	693b      	ldr	r3, [r7, #16]
 80084dc:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80084de:	693b      	ldr	r3, [r7, #16]
 80084e0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80084e2:	693b      	ldr	r3, [r7, #16]
 80084e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80084e6:	429a      	cmp	r2, r3
 80084e8:	d02c      	beq.n	8008544 <xTaskPriorityDisinherit+0xd0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80084ea:	693b      	ldr	r3, [r7, #16]
 80084ec:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80084ee:	2b00      	cmp	r3, #0
 80084f0:	d128      	bne.n	8008544 <xTaskPriorityDisinherit+0xd0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80084f2:	693b      	ldr	r3, [r7, #16]
 80084f4:	3304      	adds	r3, #4
 80084f6:	4618      	mov	r0, r3
 80084f8:	f7fe f820 	bl	800653c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80084fc:	693b      	ldr	r3, [r7, #16]
 80084fe:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8008500:	693b      	ldr	r3, [r7, #16]
 8008502:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008504:	693b      	ldr	r3, [r7, #16]
 8008506:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008508:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800850c:	693b      	ldr	r3, [r7, #16]
 800850e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8008510:	693b      	ldr	r3, [r7, #16]
 8008512:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008514:	4b0f      	ldr	r3, [pc, #60]	@ (8008554 <xTaskPriorityDisinherit+0xe0>)
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	429a      	cmp	r2, r3
 800851a:	d903      	bls.n	8008524 <xTaskPriorityDisinherit+0xb0>
 800851c:	693b      	ldr	r3, [r7, #16]
 800851e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008520:	4a0c      	ldr	r2, [pc, #48]	@ (8008554 <xTaskPriorityDisinherit+0xe0>)
 8008522:	6013      	str	r3, [r2, #0]
 8008524:	693b      	ldr	r3, [r7, #16]
 8008526:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008528:	4613      	mov	r3, r2
 800852a:	009b      	lsls	r3, r3, #2
 800852c:	4413      	add	r3, r2
 800852e:	009b      	lsls	r3, r3, #2
 8008530:	4a09      	ldr	r2, [pc, #36]	@ (8008558 <xTaskPriorityDisinherit+0xe4>)
 8008532:	441a      	add	r2, r3
 8008534:	693b      	ldr	r3, [r7, #16]
 8008536:	3304      	adds	r3, #4
 8008538:	4619      	mov	r1, r3
 800853a:	4610      	mov	r0, r2
 800853c:	f7fd ffa1 	bl	8006482 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8008540:	2301      	movs	r3, #1
 8008542:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008544:	697b      	ldr	r3, [r7, #20]
	}
 8008546:	4618      	mov	r0, r3
 8008548:	3718      	adds	r7, #24
 800854a:	46bd      	mov	sp, r7
 800854c:	bd80      	pop	{r7, pc}
 800854e:	bf00      	nop
 8008550:	200010c8 	.word	0x200010c8
 8008554:	200015a4 	.word	0x200015a4
 8008558:	200010cc 	.word	0x200010cc

0800855c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800855c:	b580      	push	{r7, lr}
 800855e:	b088      	sub	sp, #32
 8008560:	af00      	add	r7, sp, #0
 8008562:	6078      	str	r0, [r7, #4]
 8008564:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800856a:	2301      	movs	r3, #1
 800856c:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	2b00      	cmp	r3, #0
 8008572:	d070      	beq.n	8008656 <vTaskPriorityDisinheritAfterTimeout+0xfa>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8008574:	69bb      	ldr	r3, [r7, #24]
 8008576:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008578:	2b00      	cmp	r3, #0
 800857a:	d10d      	bne.n	8008598 <vTaskPriorityDisinheritAfterTimeout+0x3c>
	__asm volatile
 800857c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008580:	b672      	cpsid	i
 8008582:	f383 8811 	msr	BASEPRI, r3
 8008586:	f3bf 8f6f 	isb	sy
 800858a:	f3bf 8f4f 	dsb	sy
 800858e:	b662      	cpsie	i
 8008590:	60fb      	str	r3, [r7, #12]
}
 8008592:	bf00      	nop
 8008594:	bf00      	nop
 8008596:	e7fd      	b.n	8008594 <vTaskPriorityDisinheritAfterTimeout+0x38>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8008598:	69bb      	ldr	r3, [r7, #24]
 800859a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800859c:	683a      	ldr	r2, [r7, #0]
 800859e:	429a      	cmp	r2, r3
 80085a0:	d902      	bls.n	80085a8 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80085a2:	683b      	ldr	r3, [r7, #0]
 80085a4:	61fb      	str	r3, [r7, #28]
 80085a6:	e002      	b.n	80085ae <vTaskPriorityDisinheritAfterTimeout+0x52>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 80085a8:	69bb      	ldr	r3, [r7, #24]
 80085aa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80085ac:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 80085ae:	69bb      	ldr	r3, [r7, #24]
 80085b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80085b2:	69fa      	ldr	r2, [r7, #28]
 80085b4:	429a      	cmp	r2, r3
 80085b6:	d04e      	beq.n	8008656 <vTaskPriorityDisinheritAfterTimeout+0xfa>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80085b8:	69bb      	ldr	r3, [r7, #24]
 80085ba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80085bc:	697a      	ldr	r2, [r7, #20]
 80085be:	429a      	cmp	r2, r3
 80085c0:	d149      	bne.n	8008656 <vTaskPriorityDisinheritAfterTimeout+0xfa>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80085c2:	4b27      	ldr	r3, [pc, #156]	@ (8008660 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	69ba      	ldr	r2, [r7, #24]
 80085c8:	429a      	cmp	r2, r3
 80085ca:	d10d      	bne.n	80085e8 <vTaskPriorityDisinheritAfterTimeout+0x8c>
	__asm volatile
 80085cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80085d0:	b672      	cpsid	i
 80085d2:	f383 8811 	msr	BASEPRI, r3
 80085d6:	f3bf 8f6f 	isb	sy
 80085da:	f3bf 8f4f 	dsb	sy
 80085de:	b662      	cpsie	i
 80085e0:	60bb      	str	r3, [r7, #8]
}
 80085e2:	bf00      	nop
 80085e4:	bf00      	nop
 80085e6:	e7fd      	b.n	80085e4 <vTaskPriorityDisinheritAfterTimeout+0x88>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80085e8:	69bb      	ldr	r3, [r7, #24]
 80085ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80085ec:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 80085ee:	69bb      	ldr	r3, [r7, #24]
 80085f0:	69fa      	ldr	r2, [r7, #28]
 80085f2:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80085f4:	69bb      	ldr	r3, [r7, #24]
 80085f6:	699b      	ldr	r3, [r3, #24]
 80085f8:	2b00      	cmp	r3, #0
 80085fa:	db04      	blt.n	8008606 <vTaskPriorityDisinheritAfterTimeout+0xaa>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80085fc:	69fb      	ldr	r3, [r7, #28]
 80085fe:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8008602:	69bb      	ldr	r3, [r7, #24]
 8008604:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8008606:	69bb      	ldr	r3, [r7, #24]
 8008608:	6959      	ldr	r1, [r3, #20]
 800860a:	693a      	ldr	r2, [r7, #16]
 800860c:	4613      	mov	r3, r2
 800860e:	009b      	lsls	r3, r3, #2
 8008610:	4413      	add	r3, r2
 8008612:	009b      	lsls	r3, r3, #2
 8008614:	4a13      	ldr	r2, [pc, #76]	@ (8008664 <vTaskPriorityDisinheritAfterTimeout+0x108>)
 8008616:	4413      	add	r3, r2
 8008618:	4299      	cmp	r1, r3
 800861a:	d11c      	bne.n	8008656 <vTaskPriorityDisinheritAfterTimeout+0xfa>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800861c:	69bb      	ldr	r3, [r7, #24]
 800861e:	3304      	adds	r3, #4
 8008620:	4618      	mov	r0, r3
 8008622:	f7fd ff8b 	bl	800653c <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8008626:	69bb      	ldr	r3, [r7, #24]
 8008628:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800862a:	4b0f      	ldr	r3, [pc, #60]	@ (8008668 <vTaskPriorityDisinheritAfterTimeout+0x10c>)
 800862c:	681b      	ldr	r3, [r3, #0]
 800862e:	429a      	cmp	r2, r3
 8008630:	d903      	bls.n	800863a <vTaskPriorityDisinheritAfterTimeout+0xde>
 8008632:	69bb      	ldr	r3, [r7, #24]
 8008634:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008636:	4a0c      	ldr	r2, [pc, #48]	@ (8008668 <vTaskPriorityDisinheritAfterTimeout+0x10c>)
 8008638:	6013      	str	r3, [r2, #0]
 800863a:	69bb      	ldr	r3, [r7, #24]
 800863c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800863e:	4613      	mov	r3, r2
 8008640:	009b      	lsls	r3, r3, #2
 8008642:	4413      	add	r3, r2
 8008644:	009b      	lsls	r3, r3, #2
 8008646:	4a07      	ldr	r2, [pc, #28]	@ (8008664 <vTaskPriorityDisinheritAfterTimeout+0x108>)
 8008648:	441a      	add	r2, r3
 800864a:	69bb      	ldr	r3, [r7, #24]
 800864c:	3304      	adds	r3, #4
 800864e:	4619      	mov	r1, r3
 8008650:	4610      	mov	r0, r2
 8008652:	f7fd ff16 	bl	8006482 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008656:	bf00      	nop
 8008658:	3720      	adds	r7, #32
 800865a:	46bd      	mov	sp, r7
 800865c:	bd80      	pop	{r7, pc}
 800865e:	bf00      	nop
 8008660:	200010c8 	.word	0x200010c8
 8008664:	200010cc 	.word	0x200010cc
 8008668:	200015a4 	.word	0x200015a4

0800866c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800866c:	b480      	push	{r7}
 800866e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8008670:	4b07      	ldr	r3, [pc, #28]	@ (8008690 <pvTaskIncrementMutexHeldCount+0x24>)
 8008672:	681b      	ldr	r3, [r3, #0]
 8008674:	2b00      	cmp	r3, #0
 8008676:	d004      	beq.n	8008682 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8008678:	4b05      	ldr	r3, [pc, #20]	@ (8008690 <pvTaskIncrementMutexHeldCount+0x24>)
 800867a:	681b      	ldr	r3, [r3, #0]
 800867c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800867e:	3201      	adds	r2, #1
 8008680:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 8008682:	4b03      	ldr	r3, [pc, #12]	@ (8008690 <pvTaskIncrementMutexHeldCount+0x24>)
 8008684:	681b      	ldr	r3, [r3, #0]
	}
 8008686:	4618      	mov	r0, r3
 8008688:	46bd      	mov	sp, r7
 800868a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800868e:	4770      	bx	lr
 8008690:	200010c8 	.word	0x200010c8

08008694 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008694:	b580      	push	{r7, lr}
 8008696:	b084      	sub	sp, #16
 8008698:	af00      	add	r7, sp, #0
 800869a:	6078      	str	r0, [r7, #4]
 800869c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800869e:	4b21      	ldr	r3, [pc, #132]	@ (8008724 <prvAddCurrentTaskToDelayedList+0x90>)
 80086a0:	681b      	ldr	r3, [r3, #0]
 80086a2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80086a4:	4b20      	ldr	r3, [pc, #128]	@ (8008728 <prvAddCurrentTaskToDelayedList+0x94>)
 80086a6:	681b      	ldr	r3, [r3, #0]
 80086a8:	3304      	adds	r3, #4
 80086aa:	4618      	mov	r0, r3
 80086ac:	f7fd ff46 	bl	800653c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80086b6:	d10a      	bne.n	80086ce <prvAddCurrentTaskToDelayedList+0x3a>
 80086b8:	683b      	ldr	r3, [r7, #0]
 80086ba:	2b00      	cmp	r3, #0
 80086bc:	d007      	beq.n	80086ce <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80086be:	4b1a      	ldr	r3, [pc, #104]	@ (8008728 <prvAddCurrentTaskToDelayedList+0x94>)
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	3304      	adds	r3, #4
 80086c4:	4619      	mov	r1, r3
 80086c6:	4819      	ldr	r0, [pc, #100]	@ (800872c <prvAddCurrentTaskToDelayedList+0x98>)
 80086c8:	f7fd fedb 	bl	8006482 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80086cc:	e026      	b.n	800871c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80086ce:	68fa      	ldr	r2, [r7, #12]
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	4413      	add	r3, r2
 80086d4:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80086d6:	4b14      	ldr	r3, [pc, #80]	@ (8008728 <prvAddCurrentTaskToDelayedList+0x94>)
 80086d8:	681b      	ldr	r3, [r3, #0]
 80086da:	68ba      	ldr	r2, [r7, #8]
 80086dc:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80086de:	68ba      	ldr	r2, [r7, #8]
 80086e0:	68fb      	ldr	r3, [r7, #12]
 80086e2:	429a      	cmp	r2, r3
 80086e4:	d209      	bcs.n	80086fa <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80086e6:	4b12      	ldr	r3, [pc, #72]	@ (8008730 <prvAddCurrentTaskToDelayedList+0x9c>)
 80086e8:	681a      	ldr	r2, [r3, #0]
 80086ea:	4b0f      	ldr	r3, [pc, #60]	@ (8008728 <prvAddCurrentTaskToDelayedList+0x94>)
 80086ec:	681b      	ldr	r3, [r3, #0]
 80086ee:	3304      	adds	r3, #4
 80086f0:	4619      	mov	r1, r3
 80086f2:	4610      	mov	r0, r2
 80086f4:	f7fd fee9 	bl	80064ca <vListInsert>
}
 80086f8:	e010      	b.n	800871c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80086fa:	4b0e      	ldr	r3, [pc, #56]	@ (8008734 <prvAddCurrentTaskToDelayedList+0xa0>)
 80086fc:	681a      	ldr	r2, [r3, #0]
 80086fe:	4b0a      	ldr	r3, [pc, #40]	@ (8008728 <prvAddCurrentTaskToDelayedList+0x94>)
 8008700:	681b      	ldr	r3, [r3, #0]
 8008702:	3304      	adds	r3, #4
 8008704:	4619      	mov	r1, r3
 8008706:	4610      	mov	r0, r2
 8008708:	f7fd fedf 	bl	80064ca <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800870c:	4b0a      	ldr	r3, [pc, #40]	@ (8008738 <prvAddCurrentTaskToDelayedList+0xa4>)
 800870e:	681b      	ldr	r3, [r3, #0]
 8008710:	68ba      	ldr	r2, [r7, #8]
 8008712:	429a      	cmp	r2, r3
 8008714:	d202      	bcs.n	800871c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8008716:	4a08      	ldr	r2, [pc, #32]	@ (8008738 <prvAddCurrentTaskToDelayedList+0xa4>)
 8008718:	68bb      	ldr	r3, [r7, #8]
 800871a:	6013      	str	r3, [r2, #0]
}
 800871c:	bf00      	nop
 800871e:	3710      	adds	r7, #16
 8008720:	46bd      	mov	sp, r7
 8008722:	bd80      	pop	{r7, pc}
 8008724:	200015a0 	.word	0x200015a0
 8008728:	200010c8 	.word	0x200010c8
 800872c:	20001588 	.word	0x20001588
 8008730:	20001558 	.word	0x20001558
 8008734:	20001554 	.word	0x20001554
 8008738:	200015bc 	.word	0x200015bc

0800873c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800873c:	b580      	push	{r7, lr}
 800873e:	b08a      	sub	sp, #40	@ 0x28
 8008740:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8008742:	2300      	movs	r3, #0
 8008744:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8008746:	f000 fb21 	bl	8008d8c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800874a:	4b1e      	ldr	r3, [pc, #120]	@ (80087c4 <xTimerCreateTimerTask+0x88>)
 800874c:	681b      	ldr	r3, [r3, #0]
 800874e:	2b00      	cmp	r3, #0
 8008750:	d021      	beq.n	8008796 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8008752:	2300      	movs	r3, #0
 8008754:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8008756:	2300      	movs	r3, #0
 8008758:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800875a:	1d3a      	adds	r2, r7, #4
 800875c:	f107 0108 	add.w	r1, r7, #8
 8008760:	f107 030c 	add.w	r3, r7, #12
 8008764:	4618      	mov	r0, r3
 8008766:	f7fd fe45 	bl	80063f4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800876a:	6879      	ldr	r1, [r7, #4]
 800876c:	68bb      	ldr	r3, [r7, #8]
 800876e:	68fa      	ldr	r2, [r7, #12]
 8008770:	9202      	str	r2, [sp, #8]
 8008772:	9301      	str	r3, [sp, #4]
 8008774:	2302      	movs	r3, #2
 8008776:	9300      	str	r3, [sp, #0]
 8008778:	2300      	movs	r3, #0
 800877a:	460a      	mov	r2, r1
 800877c:	4912      	ldr	r1, [pc, #72]	@ (80087c8 <xTimerCreateTimerTask+0x8c>)
 800877e:	4813      	ldr	r0, [pc, #76]	@ (80087cc <xTimerCreateTimerTask+0x90>)
 8008780:	f7fe ff7a 	bl	8007678 <xTaskCreateStatic>
 8008784:	4603      	mov	r3, r0
 8008786:	4a12      	ldr	r2, [pc, #72]	@ (80087d0 <xTimerCreateTimerTask+0x94>)
 8008788:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800878a:	4b11      	ldr	r3, [pc, #68]	@ (80087d0 <xTimerCreateTimerTask+0x94>)
 800878c:	681b      	ldr	r3, [r3, #0]
 800878e:	2b00      	cmp	r3, #0
 8008790:	d001      	beq.n	8008796 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8008792:	2301      	movs	r3, #1
 8008794:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8008796:	697b      	ldr	r3, [r7, #20]
 8008798:	2b00      	cmp	r3, #0
 800879a:	d10d      	bne.n	80087b8 <xTimerCreateTimerTask+0x7c>
	__asm volatile
 800879c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80087a0:	b672      	cpsid	i
 80087a2:	f383 8811 	msr	BASEPRI, r3
 80087a6:	f3bf 8f6f 	isb	sy
 80087aa:	f3bf 8f4f 	dsb	sy
 80087ae:	b662      	cpsie	i
 80087b0:	613b      	str	r3, [r7, #16]
}
 80087b2:	bf00      	nop
 80087b4:	bf00      	nop
 80087b6:	e7fd      	b.n	80087b4 <xTimerCreateTimerTask+0x78>
	return xReturn;
 80087b8:	697b      	ldr	r3, [r7, #20]
}
 80087ba:	4618      	mov	r0, r3
 80087bc:	3718      	adds	r7, #24
 80087be:	46bd      	mov	sp, r7
 80087c0:	bd80      	pop	{r7, pc}
 80087c2:	bf00      	nop
 80087c4:	200015f8 	.word	0x200015f8
 80087c8:	0800a6c4 	.word	0x0800a6c4
 80087cc:	08008915 	.word	0x08008915
 80087d0:	200015fc 	.word	0x200015fc

080087d4 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80087d4:	b580      	push	{r7, lr}
 80087d6:	b08a      	sub	sp, #40	@ 0x28
 80087d8:	af00      	add	r7, sp, #0
 80087da:	60f8      	str	r0, [r7, #12]
 80087dc:	60b9      	str	r1, [r7, #8]
 80087de:	607a      	str	r2, [r7, #4]
 80087e0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80087e2:	2300      	movs	r3, #0
 80087e4:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80087e6:	68fb      	ldr	r3, [r7, #12]
 80087e8:	2b00      	cmp	r3, #0
 80087ea:	d10d      	bne.n	8008808 <xTimerGenericCommand+0x34>
	__asm volatile
 80087ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80087f0:	b672      	cpsid	i
 80087f2:	f383 8811 	msr	BASEPRI, r3
 80087f6:	f3bf 8f6f 	isb	sy
 80087fa:	f3bf 8f4f 	dsb	sy
 80087fe:	b662      	cpsie	i
 8008800:	623b      	str	r3, [r7, #32]
}
 8008802:	bf00      	nop
 8008804:	bf00      	nop
 8008806:	e7fd      	b.n	8008804 <xTimerGenericCommand+0x30>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8008808:	4b19      	ldr	r3, [pc, #100]	@ (8008870 <xTimerGenericCommand+0x9c>)
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	2b00      	cmp	r3, #0
 800880e:	d02a      	beq.n	8008866 <xTimerGenericCommand+0x92>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8008810:	68bb      	ldr	r3, [r7, #8]
 8008812:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8008818:	68fb      	ldr	r3, [r7, #12]
 800881a:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800881c:	68bb      	ldr	r3, [r7, #8]
 800881e:	2b05      	cmp	r3, #5
 8008820:	dc18      	bgt.n	8008854 <xTimerGenericCommand+0x80>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8008822:	f7ff fda1 	bl	8008368 <xTaskGetSchedulerState>
 8008826:	4603      	mov	r3, r0
 8008828:	2b02      	cmp	r3, #2
 800882a:	d109      	bne.n	8008840 <xTimerGenericCommand+0x6c>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800882c:	4b10      	ldr	r3, [pc, #64]	@ (8008870 <xTimerGenericCommand+0x9c>)
 800882e:	6818      	ldr	r0, [r3, #0]
 8008830:	f107 0110 	add.w	r1, r7, #16
 8008834:	2300      	movs	r3, #0
 8008836:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008838:	f7fe f87a 	bl	8006930 <xQueueGenericSend>
 800883c:	6278      	str	r0, [r7, #36]	@ 0x24
 800883e:	e012      	b.n	8008866 <xTimerGenericCommand+0x92>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8008840:	4b0b      	ldr	r3, [pc, #44]	@ (8008870 <xTimerGenericCommand+0x9c>)
 8008842:	6818      	ldr	r0, [r3, #0]
 8008844:	f107 0110 	add.w	r1, r7, #16
 8008848:	2300      	movs	r3, #0
 800884a:	2200      	movs	r2, #0
 800884c:	f7fe f870 	bl	8006930 <xQueueGenericSend>
 8008850:	6278      	str	r0, [r7, #36]	@ 0x24
 8008852:	e008      	b.n	8008866 <xTimerGenericCommand+0x92>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8008854:	4b06      	ldr	r3, [pc, #24]	@ (8008870 <xTimerGenericCommand+0x9c>)
 8008856:	6818      	ldr	r0, [r3, #0]
 8008858:	f107 0110 	add.w	r1, r7, #16
 800885c:	2300      	movs	r3, #0
 800885e:	683a      	ldr	r2, [r7, #0]
 8008860:	f7fe f970 	bl	8006b44 <xQueueGenericSendFromISR>
 8008864:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8008866:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8008868:	4618      	mov	r0, r3
 800886a:	3728      	adds	r7, #40	@ 0x28
 800886c:	46bd      	mov	sp, r7
 800886e:	bd80      	pop	{r7, pc}
 8008870:	200015f8 	.word	0x200015f8

08008874 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8008874:	b580      	push	{r7, lr}
 8008876:	b088      	sub	sp, #32
 8008878:	af02      	add	r7, sp, #8
 800887a:	6078      	str	r0, [r7, #4]
 800887c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800887e:	4b24      	ldr	r3, [pc, #144]	@ (8008910 <prvProcessExpiredTimer+0x9c>)
 8008880:	681b      	ldr	r3, [r3, #0]
 8008882:	68db      	ldr	r3, [r3, #12]
 8008884:	68db      	ldr	r3, [r3, #12]
 8008886:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008888:	697b      	ldr	r3, [r7, #20]
 800888a:	3304      	adds	r3, #4
 800888c:	4618      	mov	r0, r3
 800888e:	f7fd fe55 	bl	800653c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008892:	697b      	ldr	r3, [r7, #20]
 8008894:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008898:	f003 0304 	and.w	r3, r3, #4
 800889c:	2b00      	cmp	r3, #0
 800889e:	d025      	beq.n	80088ec <prvProcessExpiredTimer+0x78>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80088a0:	697b      	ldr	r3, [r7, #20]
 80088a2:	699a      	ldr	r2, [r3, #24]
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	18d1      	adds	r1, r2, r3
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	683a      	ldr	r2, [r7, #0]
 80088ac:	6978      	ldr	r0, [r7, #20]
 80088ae:	f000 f8d7 	bl	8008a60 <prvInsertTimerInActiveList>
 80088b2:	4603      	mov	r3, r0
 80088b4:	2b00      	cmp	r3, #0
 80088b6:	d022      	beq.n	80088fe <prvProcessExpiredTimer+0x8a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80088b8:	2300      	movs	r3, #0
 80088ba:	9300      	str	r3, [sp, #0]
 80088bc:	2300      	movs	r3, #0
 80088be:	687a      	ldr	r2, [r7, #4]
 80088c0:	2100      	movs	r1, #0
 80088c2:	6978      	ldr	r0, [r7, #20]
 80088c4:	f7ff ff86 	bl	80087d4 <xTimerGenericCommand>
 80088c8:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80088ca:	693b      	ldr	r3, [r7, #16]
 80088cc:	2b00      	cmp	r3, #0
 80088ce:	d116      	bne.n	80088fe <prvProcessExpiredTimer+0x8a>
	__asm volatile
 80088d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80088d4:	b672      	cpsid	i
 80088d6:	f383 8811 	msr	BASEPRI, r3
 80088da:	f3bf 8f6f 	isb	sy
 80088de:	f3bf 8f4f 	dsb	sy
 80088e2:	b662      	cpsie	i
 80088e4:	60fb      	str	r3, [r7, #12]
}
 80088e6:	bf00      	nop
 80088e8:	bf00      	nop
 80088ea:	e7fd      	b.n	80088e8 <prvProcessExpiredTimer+0x74>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80088ec:	697b      	ldr	r3, [r7, #20]
 80088ee:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80088f2:	f023 0301 	bic.w	r3, r3, #1
 80088f6:	b2da      	uxtb	r2, r3
 80088f8:	697b      	ldr	r3, [r7, #20]
 80088fa:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80088fe:	697b      	ldr	r3, [r7, #20]
 8008900:	6a1b      	ldr	r3, [r3, #32]
 8008902:	6978      	ldr	r0, [r7, #20]
 8008904:	4798      	blx	r3
}
 8008906:	bf00      	nop
 8008908:	3718      	adds	r7, #24
 800890a:	46bd      	mov	sp, r7
 800890c:	bd80      	pop	{r7, pc}
 800890e:	bf00      	nop
 8008910:	200015f0 	.word	0x200015f0

08008914 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8008914:	b580      	push	{r7, lr}
 8008916:	b084      	sub	sp, #16
 8008918:	af00      	add	r7, sp, #0
 800891a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800891c:	f107 0308 	add.w	r3, r7, #8
 8008920:	4618      	mov	r0, r3
 8008922:	f000 f859 	bl	80089d8 <prvGetNextExpireTime>
 8008926:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8008928:	68bb      	ldr	r3, [r7, #8]
 800892a:	4619      	mov	r1, r3
 800892c:	68f8      	ldr	r0, [r7, #12]
 800892e:	f000 f805 	bl	800893c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8008932:	f000 f8d7 	bl	8008ae4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008936:	bf00      	nop
 8008938:	e7f0      	b.n	800891c <prvTimerTask+0x8>
	...

0800893c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800893c:	b580      	push	{r7, lr}
 800893e:	b084      	sub	sp, #16
 8008940:	af00      	add	r7, sp, #0
 8008942:	6078      	str	r0, [r7, #4]
 8008944:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8008946:	f7ff f909 	bl	8007b5c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800894a:	f107 0308 	add.w	r3, r7, #8
 800894e:	4618      	mov	r0, r3
 8008950:	f000 f866 	bl	8008a20 <prvSampleTimeNow>
 8008954:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8008956:	68bb      	ldr	r3, [r7, #8]
 8008958:	2b00      	cmp	r3, #0
 800895a:	d130      	bne.n	80089be <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800895c:	683b      	ldr	r3, [r7, #0]
 800895e:	2b00      	cmp	r3, #0
 8008960:	d10a      	bne.n	8008978 <prvProcessTimerOrBlockTask+0x3c>
 8008962:	687a      	ldr	r2, [r7, #4]
 8008964:	68fb      	ldr	r3, [r7, #12]
 8008966:	429a      	cmp	r2, r3
 8008968:	d806      	bhi.n	8008978 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800896a:	f7ff f905 	bl	8007b78 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800896e:	68f9      	ldr	r1, [r7, #12]
 8008970:	6878      	ldr	r0, [r7, #4]
 8008972:	f7ff ff7f 	bl	8008874 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8008976:	e024      	b.n	80089c2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8008978:	683b      	ldr	r3, [r7, #0]
 800897a:	2b00      	cmp	r3, #0
 800897c:	d008      	beq.n	8008990 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800897e:	4b13      	ldr	r3, [pc, #76]	@ (80089cc <prvProcessTimerOrBlockTask+0x90>)
 8008980:	681b      	ldr	r3, [r3, #0]
 8008982:	681b      	ldr	r3, [r3, #0]
 8008984:	2b00      	cmp	r3, #0
 8008986:	d101      	bne.n	800898c <prvProcessTimerOrBlockTask+0x50>
 8008988:	2301      	movs	r3, #1
 800898a:	e000      	b.n	800898e <prvProcessTimerOrBlockTask+0x52>
 800898c:	2300      	movs	r3, #0
 800898e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8008990:	4b0f      	ldr	r3, [pc, #60]	@ (80089d0 <prvProcessTimerOrBlockTask+0x94>)
 8008992:	6818      	ldr	r0, [r3, #0]
 8008994:	687a      	ldr	r2, [r7, #4]
 8008996:	68fb      	ldr	r3, [r7, #12]
 8008998:	1ad3      	subs	r3, r2, r3
 800899a:	683a      	ldr	r2, [r7, #0]
 800899c:	4619      	mov	r1, r3
 800899e:	f7fe fe37 	bl	8007610 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80089a2:	f7ff f8e9 	bl	8007b78 <xTaskResumeAll>
 80089a6:	4603      	mov	r3, r0
 80089a8:	2b00      	cmp	r3, #0
 80089aa:	d10a      	bne.n	80089c2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80089ac:	4b09      	ldr	r3, [pc, #36]	@ (80089d4 <prvProcessTimerOrBlockTask+0x98>)
 80089ae:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80089b2:	601a      	str	r2, [r3, #0]
 80089b4:	f3bf 8f4f 	dsb	sy
 80089b8:	f3bf 8f6f 	isb	sy
}
 80089bc:	e001      	b.n	80089c2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80089be:	f7ff f8db 	bl	8007b78 <xTaskResumeAll>
}
 80089c2:	bf00      	nop
 80089c4:	3710      	adds	r7, #16
 80089c6:	46bd      	mov	sp, r7
 80089c8:	bd80      	pop	{r7, pc}
 80089ca:	bf00      	nop
 80089cc:	200015f4 	.word	0x200015f4
 80089d0:	200015f8 	.word	0x200015f8
 80089d4:	e000ed04 	.word	0xe000ed04

080089d8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80089d8:	b480      	push	{r7}
 80089da:	b085      	sub	sp, #20
 80089dc:	af00      	add	r7, sp, #0
 80089de:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80089e0:	4b0e      	ldr	r3, [pc, #56]	@ (8008a1c <prvGetNextExpireTime+0x44>)
 80089e2:	681b      	ldr	r3, [r3, #0]
 80089e4:	681b      	ldr	r3, [r3, #0]
 80089e6:	2b00      	cmp	r3, #0
 80089e8:	d101      	bne.n	80089ee <prvGetNextExpireTime+0x16>
 80089ea:	2201      	movs	r2, #1
 80089ec:	e000      	b.n	80089f0 <prvGetNextExpireTime+0x18>
 80089ee:	2200      	movs	r2, #0
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	681b      	ldr	r3, [r3, #0]
 80089f8:	2b00      	cmp	r3, #0
 80089fa:	d105      	bne.n	8008a08 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80089fc:	4b07      	ldr	r3, [pc, #28]	@ (8008a1c <prvGetNextExpireTime+0x44>)
 80089fe:	681b      	ldr	r3, [r3, #0]
 8008a00:	68db      	ldr	r3, [r3, #12]
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	60fb      	str	r3, [r7, #12]
 8008a06:	e001      	b.n	8008a0c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8008a08:	2300      	movs	r3, #0
 8008a0a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8008a0c:	68fb      	ldr	r3, [r7, #12]
}
 8008a0e:	4618      	mov	r0, r3
 8008a10:	3714      	adds	r7, #20
 8008a12:	46bd      	mov	sp, r7
 8008a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a18:	4770      	bx	lr
 8008a1a:	bf00      	nop
 8008a1c:	200015f0 	.word	0x200015f0

08008a20 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8008a20:	b580      	push	{r7, lr}
 8008a22:	b084      	sub	sp, #16
 8008a24:	af00      	add	r7, sp, #0
 8008a26:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8008a28:	f7ff f946 	bl	8007cb8 <xTaskGetTickCount>
 8008a2c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8008a2e:	4b0b      	ldr	r3, [pc, #44]	@ (8008a5c <prvSampleTimeNow+0x3c>)
 8008a30:	681b      	ldr	r3, [r3, #0]
 8008a32:	68fa      	ldr	r2, [r7, #12]
 8008a34:	429a      	cmp	r2, r3
 8008a36:	d205      	bcs.n	8008a44 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8008a38:	f000 f940 	bl	8008cbc <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	2201      	movs	r2, #1
 8008a40:	601a      	str	r2, [r3, #0]
 8008a42:	e002      	b.n	8008a4a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	2200      	movs	r2, #0
 8008a48:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8008a4a:	4a04      	ldr	r2, [pc, #16]	@ (8008a5c <prvSampleTimeNow+0x3c>)
 8008a4c:	68fb      	ldr	r3, [r7, #12]
 8008a4e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8008a50:	68fb      	ldr	r3, [r7, #12]
}
 8008a52:	4618      	mov	r0, r3
 8008a54:	3710      	adds	r7, #16
 8008a56:	46bd      	mov	sp, r7
 8008a58:	bd80      	pop	{r7, pc}
 8008a5a:	bf00      	nop
 8008a5c:	20001600 	.word	0x20001600

08008a60 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8008a60:	b580      	push	{r7, lr}
 8008a62:	b086      	sub	sp, #24
 8008a64:	af00      	add	r7, sp, #0
 8008a66:	60f8      	str	r0, [r7, #12]
 8008a68:	60b9      	str	r1, [r7, #8]
 8008a6a:	607a      	str	r2, [r7, #4]
 8008a6c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8008a6e:	2300      	movs	r3, #0
 8008a70:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8008a72:	68fb      	ldr	r3, [r7, #12]
 8008a74:	68ba      	ldr	r2, [r7, #8]
 8008a76:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008a78:	68fb      	ldr	r3, [r7, #12]
 8008a7a:	68fa      	ldr	r2, [r7, #12]
 8008a7c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8008a7e:	68ba      	ldr	r2, [r7, #8]
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	429a      	cmp	r2, r3
 8008a84:	d812      	bhi.n	8008aac <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008a86:	687a      	ldr	r2, [r7, #4]
 8008a88:	683b      	ldr	r3, [r7, #0]
 8008a8a:	1ad2      	subs	r2, r2, r3
 8008a8c:	68fb      	ldr	r3, [r7, #12]
 8008a8e:	699b      	ldr	r3, [r3, #24]
 8008a90:	429a      	cmp	r2, r3
 8008a92:	d302      	bcc.n	8008a9a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8008a94:	2301      	movs	r3, #1
 8008a96:	617b      	str	r3, [r7, #20]
 8008a98:	e01b      	b.n	8008ad2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8008a9a:	4b10      	ldr	r3, [pc, #64]	@ (8008adc <prvInsertTimerInActiveList+0x7c>)
 8008a9c:	681a      	ldr	r2, [r3, #0]
 8008a9e:	68fb      	ldr	r3, [r7, #12]
 8008aa0:	3304      	adds	r3, #4
 8008aa2:	4619      	mov	r1, r3
 8008aa4:	4610      	mov	r0, r2
 8008aa6:	f7fd fd10 	bl	80064ca <vListInsert>
 8008aaa:	e012      	b.n	8008ad2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8008aac:	687a      	ldr	r2, [r7, #4]
 8008aae:	683b      	ldr	r3, [r7, #0]
 8008ab0:	429a      	cmp	r2, r3
 8008ab2:	d206      	bcs.n	8008ac2 <prvInsertTimerInActiveList+0x62>
 8008ab4:	68ba      	ldr	r2, [r7, #8]
 8008ab6:	683b      	ldr	r3, [r7, #0]
 8008ab8:	429a      	cmp	r2, r3
 8008aba:	d302      	bcc.n	8008ac2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8008abc:	2301      	movs	r3, #1
 8008abe:	617b      	str	r3, [r7, #20]
 8008ac0:	e007      	b.n	8008ad2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008ac2:	4b07      	ldr	r3, [pc, #28]	@ (8008ae0 <prvInsertTimerInActiveList+0x80>)
 8008ac4:	681a      	ldr	r2, [r3, #0]
 8008ac6:	68fb      	ldr	r3, [r7, #12]
 8008ac8:	3304      	adds	r3, #4
 8008aca:	4619      	mov	r1, r3
 8008acc:	4610      	mov	r0, r2
 8008ace:	f7fd fcfc 	bl	80064ca <vListInsert>
		}
	}

	return xProcessTimerNow;
 8008ad2:	697b      	ldr	r3, [r7, #20]
}
 8008ad4:	4618      	mov	r0, r3
 8008ad6:	3718      	adds	r7, #24
 8008ad8:	46bd      	mov	sp, r7
 8008ada:	bd80      	pop	{r7, pc}
 8008adc:	200015f4 	.word	0x200015f4
 8008ae0:	200015f0 	.word	0x200015f0

08008ae4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8008ae4:	b580      	push	{r7, lr}
 8008ae6:	b08e      	sub	sp, #56	@ 0x38
 8008ae8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008aea:	e0d4      	b.n	8008c96 <prvProcessReceivedCommands+0x1b2>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	2b00      	cmp	r3, #0
 8008af0:	da1b      	bge.n	8008b2a <prvProcessReceivedCommands+0x46>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8008af2:	1d3b      	adds	r3, r7, #4
 8008af4:	3304      	adds	r3, #4
 8008af6:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8008af8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008afa:	2b00      	cmp	r3, #0
 8008afc:	d10d      	bne.n	8008b1a <prvProcessReceivedCommands+0x36>
	__asm volatile
 8008afe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008b02:	b672      	cpsid	i
 8008b04:	f383 8811 	msr	BASEPRI, r3
 8008b08:	f3bf 8f6f 	isb	sy
 8008b0c:	f3bf 8f4f 	dsb	sy
 8008b10:	b662      	cpsie	i
 8008b12:	61fb      	str	r3, [r7, #28]
}
 8008b14:	bf00      	nop
 8008b16:	bf00      	nop
 8008b18:	e7fd      	b.n	8008b16 <prvProcessReceivedCommands+0x32>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8008b1a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008b1c:	681b      	ldr	r3, [r3, #0]
 8008b1e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008b20:	6850      	ldr	r0, [r2, #4]
 8008b22:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008b24:	6892      	ldr	r2, [r2, #8]
 8008b26:	4611      	mov	r1, r2
 8008b28:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	2b00      	cmp	r3, #0
 8008b2e:	f2c0 80b2 	blt.w	8008c96 <prvProcessReceivedCommands+0x1b2>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8008b32:	68fb      	ldr	r3, [r7, #12]
 8008b34:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8008b36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008b38:	695b      	ldr	r3, [r3, #20]
 8008b3a:	2b00      	cmp	r3, #0
 8008b3c:	d004      	beq.n	8008b48 <prvProcessReceivedCommands+0x64>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008b3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008b40:	3304      	adds	r3, #4
 8008b42:	4618      	mov	r0, r3
 8008b44:	f7fd fcfa 	bl	800653c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008b48:	463b      	mov	r3, r7
 8008b4a:	4618      	mov	r0, r3
 8008b4c:	f7ff ff68 	bl	8008a20 <prvSampleTimeNow>
 8008b50:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	2b09      	cmp	r3, #9
 8008b56:	f200 809b 	bhi.w	8008c90 <prvProcessReceivedCommands+0x1ac>
 8008b5a:	a201      	add	r2, pc, #4	@ (adr r2, 8008b60 <prvProcessReceivedCommands+0x7c>)
 8008b5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b60:	08008b89 	.word	0x08008b89
 8008b64:	08008b89 	.word	0x08008b89
 8008b68:	08008b89 	.word	0x08008b89
 8008b6c:	08008c03 	.word	0x08008c03
 8008b70:	08008c17 	.word	0x08008c17
 8008b74:	08008c67 	.word	0x08008c67
 8008b78:	08008b89 	.word	0x08008b89
 8008b7c:	08008b89 	.word	0x08008b89
 8008b80:	08008c03 	.word	0x08008c03
 8008b84:	08008c17 	.word	0x08008c17
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008b88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008b8a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008b8e:	f043 0301 	orr.w	r3, r3, #1
 8008b92:	b2da      	uxtb	r2, r3
 8008b94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008b96:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8008b9a:	68ba      	ldr	r2, [r7, #8]
 8008b9c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008b9e:	699b      	ldr	r3, [r3, #24]
 8008ba0:	18d1      	adds	r1, r2, r3
 8008ba2:	68bb      	ldr	r3, [r7, #8]
 8008ba4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008ba6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008ba8:	f7ff ff5a 	bl	8008a60 <prvInsertTimerInActiveList>
 8008bac:	4603      	mov	r3, r0
 8008bae:	2b00      	cmp	r3, #0
 8008bb0:	d070      	beq.n	8008c94 <prvProcessReceivedCommands+0x1b0>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008bb2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008bb4:	6a1b      	ldr	r3, [r3, #32]
 8008bb6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008bb8:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008bba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008bbc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008bc0:	f003 0304 	and.w	r3, r3, #4
 8008bc4:	2b00      	cmp	r3, #0
 8008bc6:	d065      	beq.n	8008c94 <prvProcessReceivedCommands+0x1b0>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8008bc8:	68ba      	ldr	r2, [r7, #8]
 8008bca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008bcc:	699b      	ldr	r3, [r3, #24]
 8008bce:	441a      	add	r2, r3
 8008bd0:	2300      	movs	r3, #0
 8008bd2:	9300      	str	r3, [sp, #0]
 8008bd4:	2300      	movs	r3, #0
 8008bd6:	2100      	movs	r1, #0
 8008bd8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008bda:	f7ff fdfb 	bl	80087d4 <xTimerGenericCommand>
 8008bde:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8008be0:	6a3b      	ldr	r3, [r7, #32]
 8008be2:	2b00      	cmp	r3, #0
 8008be4:	d156      	bne.n	8008c94 <prvProcessReceivedCommands+0x1b0>
	__asm volatile
 8008be6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008bea:	b672      	cpsid	i
 8008bec:	f383 8811 	msr	BASEPRI, r3
 8008bf0:	f3bf 8f6f 	isb	sy
 8008bf4:	f3bf 8f4f 	dsb	sy
 8008bf8:	b662      	cpsie	i
 8008bfa:	61bb      	str	r3, [r7, #24]
}
 8008bfc:	bf00      	nop
 8008bfe:	bf00      	nop
 8008c00:	e7fd      	b.n	8008bfe <prvProcessReceivedCommands+0x11a>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008c02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008c04:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008c08:	f023 0301 	bic.w	r3, r3, #1
 8008c0c:	b2da      	uxtb	r2, r3
 8008c0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008c10:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8008c14:	e03f      	b.n	8008c96 <prvProcessReceivedCommands+0x1b2>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008c16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008c18:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008c1c:	f043 0301 	orr.w	r3, r3, #1
 8008c20:	b2da      	uxtb	r2, r3
 8008c22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008c24:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8008c28:	68ba      	ldr	r2, [r7, #8]
 8008c2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008c2c:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8008c2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008c30:	699b      	ldr	r3, [r3, #24]
 8008c32:	2b00      	cmp	r3, #0
 8008c34:	d10d      	bne.n	8008c52 <prvProcessReceivedCommands+0x16e>
	__asm volatile
 8008c36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c3a:	b672      	cpsid	i
 8008c3c:	f383 8811 	msr	BASEPRI, r3
 8008c40:	f3bf 8f6f 	isb	sy
 8008c44:	f3bf 8f4f 	dsb	sy
 8008c48:	b662      	cpsie	i
 8008c4a:	617b      	str	r3, [r7, #20]
}
 8008c4c:	bf00      	nop
 8008c4e:	bf00      	nop
 8008c50:	e7fd      	b.n	8008c4e <prvProcessReceivedCommands+0x16a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8008c52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008c54:	699a      	ldr	r2, [r3, #24]
 8008c56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c58:	18d1      	adds	r1, r2, r3
 8008c5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c5c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008c5e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008c60:	f7ff fefe 	bl	8008a60 <prvInsertTimerInActiveList>
					break;
 8008c64:	e017      	b.n	8008c96 <prvProcessReceivedCommands+0x1b2>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8008c66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008c68:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008c6c:	f003 0302 	and.w	r3, r3, #2
 8008c70:	2b00      	cmp	r3, #0
 8008c72:	d103      	bne.n	8008c7c <prvProcessReceivedCommands+0x198>
						{
							vPortFree( pxTimer );
 8008c74:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008c76:	f000 fbd5 	bl	8009424 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8008c7a:	e00c      	b.n	8008c96 <prvProcessReceivedCommands+0x1b2>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008c7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008c7e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008c82:	f023 0301 	bic.w	r3, r3, #1
 8008c86:	b2da      	uxtb	r2, r3
 8008c88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008c8a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8008c8e:	e002      	b.n	8008c96 <prvProcessReceivedCommands+0x1b2>

				default	:
					/* Don't expect to get here. */
					break;
 8008c90:	bf00      	nop
 8008c92:	e000      	b.n	8008c96 <prvProcessReceivedCommands+0x1b2>
					break;
 8008c94:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008c96:	4b08      	ldr	r3, [pc, #32]	@ (8008cb8 <prvProcessReceivedCommands+0x1d4>)
 8008c98:	681b      	ldr	r3, [r3, #0]
 8008c9a:	1d39      	adds	r1, r7, #4
 8008c9c:	2200      	movs	r2, #0
 8008c9e:	4618      	mov	r0, r3
 8008ca0:	f7fe f88c 	bl	8006dbc <xQueueReceive>
 8008ca4:	4603      	mov	r3, r0
 8008ca6:	2b00      	cmp	r3, #0
 8008ca8:	f47f af20 	bne.w	8008aec <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8008cac:	bf00      	nop
 8008cae:	bf00      	nop
 8008cb0:	3730      	adds	r7, #48	@ 0x30
 8008cb2:	46bd      	mov	sp, r7
 8008cb4:	bd80      	pop	{r7, pc}
 8008cb6:	bf00      	nop
 8008cb8:	200015f8 	.word	0x200015f8

08008cbc <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8008cbc:	b580      	push	{r7, lr}
 8008cbe:	b088      	sub	sp, #32
 8008cc0:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008cc2:	e04b      	b.n	8008d5c <prvSwitchTimerLists+0xa0>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008cc4:	4b2f      	ldr	r3, [pc, #188]	@ (8008d84 <prvSwitchTimerLists+0xc8>)
 8008cc6:	681b      	ldr	r3, [r3, #0]
 8008cc8:	68db      	ldr	r3, [r3, #12]
 8008cca:	681b      	ldr	r3, [r3, #0]
 8008ccc:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008cce:	4b2d      	ldr	r3, [pc, #180]	@ (8008d84 <prvSwitchTimerLists+0xc8>)
 8008cd0:	681b      	ldr	r3, [r3, #0]
 8008cd2:	68db      	ldr	r3, [r3, #12]
 8008cd4:	68db      	ldr	r3, [r3, #12]
 8008cd6:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008cd8:	68fb      	ldr	r3, [r7, #12]
 8008cda:	3304      	adds	r3, #4
 8008cdc:	4618      	mov	r0, r3
 8008cde:	f7fd fc2d 	bl	800653c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008ce2:	68fb      	ldr	r3, [r7, #12]
 8008ce4:	6a1b      	ldr	r3, [r3, #32]
 8008ce6:	68f8      	ldr	r0, [r7, #12]
 8008ce8:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008cea:	68fb      	ldr	r3, [r7, #12]
 8008cec:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008cf0:	f003 0304 	and.w	r3, r3, #4
 8008cf4:	2b00      	cmp	r3, #0
 8008cf6:	d031      	beq.n	8008d5c <prvSwitchTimerLists+0xa0>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8008cf8:	68fb      	ldr	r3, [r7, #12]
 8008cfa:	699b      	ldr	r3, [r3, #24]
 8008cfc:	693a      	ldr	r2, [r7, #16]
 8008cfe:	4413      	add	r3, r2
 8008d00:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8008d02:	68ba      	ldr	r2, [r7, #8]
 8008d04:	693b      	ldr	r3, [r7, #16]
 8008d06:	429a      	cmp	r2, r3
 8008d08:	d90e      	bls.n	8008d28 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8008d0a:	68fb      	ldr	r3, [r7, #12]
 8008d0c:	68ba      	ldr	r2, [r7, #8]
 8008d0e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008d10:	68fb      	ldr	r3, [r7, #12]
 8008d12:	68fa      	ldr	r2, [r7, #12]
 8008d14:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008d16:	4b1b      	ldr	r3, [pc, #108]	@ (8008d84 <prvSwitchTimerLists+0xc8>)
 8008d18:	681a      	ldr	r2, [r3, #0]
 8008d1a:	68fb      	ldr	r3, [r7, #12]
 8008d1c:	3304      	adds	r3, #4
 8008d1e:	4619      	mov	r1, r3
 8008d20:	4610      	mov	r0, r2
 8008d22:	f7fd fbd2 	bl	80064ca <vListInsert>
 8008d26:	e019      	b.n	8008d5c <prvSwitchTimerLists+0xa0>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008d28:	2300      	movs	r3, #0
 8008d2a:	9300      	str	r3, [sp, #0]
 8008d2c:	2300      	movs	r3, #0
 8008d2e:	693a      	ldr	r2, [r7, #16]
 8008d30:	2100      	movs	r1, #0
 8008d32:	68f8      	ldr	r0, [r7, #12]
 8008d34:	f7ff fd4e 	bl	80087d4 <xTimerGenericCommand>
 8008d38:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	2b00      	cmp	r3, #0
 8008d3e:	d10d      	bne.n	8008d5c <prvSwitchTimerLists+0xa0>
	__asm volatile
 8008d40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d44:	b672      	cpsid	i
 8008d46:	f383 8811 	msr	BASEPRI, r3
 8008d4a:	f3bf 8f6f 	isb	sy
 8008d4e:	f3bf 8f4f 	dsb	sy
 8008d52:	b662      	cpsie	i
 8008d54:	603b      	str	r3, [r7, #0]
}
 8008d56:	bf00      	nop
 8008d58:	bf00      	nop
 8008d5a:	e7fd      	b.n	8008d58 <prvSwitchTimerLists+0x9c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008d5c:	4b09      	ldr	r3, [pc, #36]	@ (8008d84 <prvSwitchTimerLists+0xc8>)
 8008d5e:	681b      	ldr	r3, [r3, #0]
 8008d60:	681b      	ldr	r3, [r3, #0]
 8008d62:	2b00      	cmp	r3, #0
 8008d64:	d1ae      	bne.n	8008cc4 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8008d66:	4b07      	ldr	r3, [pc, #28]	@ (8008d84 <prvSwitchTimerLists+0xc8>)
 8008d68:	681b      	ldr	r3, [r3, #0]
 8008d6a:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8008d6c:	4b06      	ldr	r3, [pc, #24]	@ (8008d88 <prvSwitchTimerLists+0xcc>)
 8008d6e:	681b      	ldr	r3, [r3, #0]
 8008d70:	4a04      	ldr	r2, [pc, #16]	@ (8008d84 <prvSwitchTimerLists+0xc8>)
 8008d72:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8008d74:	4a04      	ldr	r2, [pc, #16]	@ (8008d88 <prvSwitchTimerLists+0xcc>)
 8008d76:	697b      	ldr	r3, [r7, #20]
 8008d78:	6013      	str	r3, [r2, #0]
}
 8008d7a:	bf00      	nop
 8008d7c:	3718      	adds	r7, #24
 8008d7e:	46bd      	mov	sp, r7
 8008d80:	bd80      	pop	{r7, pc}
 8008d82:	bf00      	nop
 8008d84:	200015f0 	.word	0x200015f0
 8008d88:	200015f4 	.word	0x200015f4

08008d8c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8008d8c:	b580      	push	{r7, lr}
 8008d8e:	b082      	sub	sp, #8
 8008d90:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8008d92:	f000 f94b 	bl	800902c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8008d96:	4b15      	ldr	r3, [pc, #84]	@ (8008dec <prvCheckForValidListAndQueue+0x60>)
 8008d98:	681b      	ldr	r3, [r3, #0]
 8008d9a:	2b00      	cmp	r3, #0
 8008d9c:	d120      	bne.n	8008de0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8008d9e:	4814      	ldr	r0, [pc, #80]	@ (8008df0 <prvCheckForValidListAndQueue+0x64>)
 8008da0:	f7fd fb42 	bl	8006428 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8008da4:	4813      	ldr	r0, [pc, #76]	@ (8008df4 <prvCheckForValidListAndQueue+0x68>)
 8008da6:	f7fd fb3f 	bl	8006428 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8008daa:	4b13      	ldr	r3, [pc, #76]	@ (8008df8 <prvCheckForValidListAndQueue+0x6c>)
 8008dac:	4a10      	ldr	r2, [pc, #64]	@ (8008df0 <prvCheckForValidListAndQueue+0x64>)
 8008dae:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8008db0:	4b12      	ldr	r3, [pc, #72]	@ (8008dfc <prvCheckForValidListAndQueue+0x70>)
 8008db2:	4a10      	ldr	r2, [pc, #64]	@ (8008df4 <prvCheckForValidListAndQueue+0x68>)
 8008db4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8008db6:	2300      	movs	r3, #0
 8008db8:	9300      	str	r3, [sp, #0]
 8008dba:	4b11      	ldr	r3, [pc, #68]	@ (8008e00 <prvCheckForValidListAndQueue+0x74>)
 8008dbc:	4a11      	ldr	r2, [pc, #68]	@ (8008e04 <prvCheckForValidListAndQueue+0x78>)
 8008dbe:	2110      	movs	r1, #16
 8008dc0:	200a      	movs	r0, #10
 8008dc2:	f7fd fc51 	bl	8006668 <xQueueGenericCreateStatic>
 8008dc6:	4603      	mov	r3, r0
 8008dc8:	4a08      	ldr	r2, [pc, #32]	@ (8008dec <prvCheckForValidListAndQueue+0x60>)
 8008dca:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8008dcc:	4b07      	ldr	r3, [pc, #28]	@ (8008dec <prvCheckForValidListAndQueue+0x60>)
 8008dce:	681b      	ldr	r3, [r3, #0]
 8008dd0:	2b00      	cmp	r3, #0
 8008dd2:	d005      	beq.n	8008de0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8008dd4:	4b05      	ldr	r3, [pc, #20]	@ (8008dec <prvCheckForValidListAndQueue+0x60>)
 8008dd6:	681b      	ldr	r3, [r3, #0]
 8008dd8:	490b      	ldr	r1, [pc, #44]	@ (8008e08 <prvCheckForValidListAndQueue+0x7c>)
 8008dda:	4618      	mov	r0, r3
 8008ddc:	f7fe fbc4 	bl	8007568 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008de0:	f000 f95a 	bl	8009098 <vPortExitCritical>
}
 8008de4:	bf00      	nop
 8008de6:	46bd      	mov	sp, r7
 8008de8:	bd80      	pop	{r7, pc}
 8008dea:	bf00      	nop
 8008dec:	200015f8 	.word	0x200015f8
 8008df0:	200015c8 	.word	0x200015c8
 8008df4:	200015dc 	.word	0x200015dc
 8008df8:	200015f0 	.word	0x200015f0
 8008dfc:	200015f4 	.word	0x200015f4
 8008e00:	200016a4 	.word	0x200016a4
 8008e04:	20001604 	.word	0x20001604
 8008e08:	0800a6cc 	.word	0x0800a6cc

08008e0c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8008e0c:	b480      	push	{r7}
 8008e0e:	b085      	sub	sp, #20
 8008e10:	af00      	add	r7, sp, #0
 8008e12:	60f8      	str	r0, [r7, #12]
 8008e14:	60b9      	str	r1, [r7, #8]
 8008e16:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8008e18:	68fb      	ldr	r3, [r7, #12]
 8008e1a:	3b04      	subs	r3, #4
 8008e1c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8008e1e:	68fb      	ldr	r3, [r7, #12]
 8008e20:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8008e24:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008e26:	68fb      	ldr	r3, [r7, #12]
 8008e28:	3b04      	subs	r3, #4
 8008e2a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8008e2c:	68bb      	ldr	r3, [r7, #8]
 8008e2e:	f023 0201 	bic.w	r2, r3, #1
 8008e32:	68fb      	ldr	r3, [r7, #12]
 8008e34:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008e36:	68fb      	ldr	r3, [r7, #12]
 8008e38:	3b04      	subs	r3, #4
 8008e3a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008e3c:	4a0c      	ldr	r2, [pc, #48]	@ (8008e70 <pxPortInitialiseStack+0x64>)
 8008e3e:	68fb      	ldr	r3, [r7, #12]
 8008e40:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8008e42:	68fb      	ldr	r3, [r7, #12]
 8008e44:	3b14      	subs	r3, #20
 8008e46:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008e48:	687a      	ldr	r2, [r7, #4]
 8008e4a:	68fb      	ldr	r3, [r7, #12]
 8008e4c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8008e4e:	68fb      	ldr	r3, [r7, #12]
 8008e50:	3b04      	subs	r3, #4
 8008e52:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8008e54:	68fb      	ldr	r3, [r7, #12]
 8008e56:	f06f 0202 	mvn.w	r2, #2
 8008e5a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8008e5c:	68fb      	ldr	r3, [r7, #12]
 8008e5e:	3b20      	subs	r3, #32
 8008e60:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8008e62:	68fb      	ldr	r3, [r7, #12]
}
 8008e64:	4618      	mov	r0, r3
 8008e66:	3714      	adds	r7, #20
 8008e68:	46bd      	mov	sp, r7
 8008e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e6e:	4770      	bx	lr
 8008e70:	08008e75 	.word	0x08008e75

08008e74 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8008e74:	b480      	push	{r7}
 8008e76:	b085      	sub	sp, #20
 8008e78:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8008e7a:	2300      	movs	r3, #0
 8008e7c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8008e7e:	4b15      	ldr	r3, [pc, #84]	@ (8008ed4 <prvTaskExitError+0x60>)
 8008e80:	681b      	ldr	r3, [r3, #0]
 8008e82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e86:	d00d      	beq.n	8008ea4 <prvTaskExitError+0x30>
	__asm volatile
 8008e88:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008e8c:	b672      	cpsid	i
 8008e8e:	f383 8811 	msr	BASEPRI, r3
 8008e92:	f3bf 8f6f 	isb	sy
 8008e96:	f3bf 8f4f 	dsb	sy
 8008e9a:	b662      	cpsie	i
 8008e9c:	60fb      	str	r3, [r7, #12]
}
 8008e9e:	bf00      	nop
 8008ea0:	bf00      	nop
 8008ea2:	e7fd      	b.n	8008ea0 <prvTaskExitError+0x2c>
	__asm volatile
 8008ea4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ea8:	b672      	cpsid	i
 8008eaa:	f383 8811 	msr	BASEPRI, r3
 8008eae:	f3bf 8f6f 	isb	sy
 8008eb2:	f3bf 8f4f 	dsb	sy
 8008eb6:	b662      	cpsie	i
 8008eb8:	60bb      	str	r3, [r7, #8]
}
 8008eba:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8008ebc:	bf00      	nop
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	2b00      	cmp	r3, #0
 8008ec2:	d0fc      	beq.n	8008ebe <prvTaskExitError+0x4a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8008ec4:	bf00      	nop
 8008ec6:	bf00      	nop
 8008ec8:	3714      	adds	r7, #20
 8008eca:	46bd      	mov	sp, r7
 8008ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ed0:	4770      	bx	lr
 8008ed2:	bf00      	nop
 8008ed4:	2000000c 	.word	0x2000000c
	...

08008ee0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008ee0:	4b07      	ldr	r3, [pc, #28]	@ (8008f00 <pxCurrentTCBConst2>)
 8008ee2:	6819      	ldr	r1, [r3, #0]
 8008ee4:	6808      	ldr	r0, [r1, #0]
 8008ee6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008eea:	f380 8809 	msr	PSP, r0
 8008eee:	f3bf 8f6f 	isb	sy
 8008ef2:	f04f 0000 	mov.w	r0, #0
 8008ef6:	f380 8811 	msr	BASEPRI, r0
 8008efa:	4770      	bx	lr
 8008efc:	f3af 8000 	nop.w

08008f00 <pxCurrentTCBConst2>:
 8008f00:	200010c8 	.word	0x200010c8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008f04:	bf00      	nop
 8008f06:	bf00      	nop

08008f08 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8008f08:	4808      	ldr	r0, [pc, #32]	@ (8008f2c <prvPortStartFirstTask+0x24>)
 8008f0a:	6800      	ldr	r0, [r0, #0]
 8008f0c:	6800      	ldr	r0, [r0, #0]
 8008f0e:	f380 8808 	msr	MSP, r0
 8008f12:	f04f 0000 	mov.w	r0, #0
 8008f16:	f380 8814 	msr	CONTROL, r0
 8008f1a:	b662      	cpsie	i
 8008f1c:	b661      	cpsie	f
 8008f1e:	f3bf 8f4f 	dsb	sy
 8008f22:	f3bf 8f6f 	isb	sy
 8008f26:	df00      	svc	0
 8008f28:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8008f2a:	bf00      	nop
 8008f2c:	e000ed08 	.word	0xe000ed08

08008f30 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008f30:	b580      	push	{r7, lr}
 8008f32:	b084      	sub	sp, #16
 8008f34:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8008f36:	4b37      	ldr	r3, [pc, #220]	@ (8009014 <xPortStartScheduler+0xe4>)
 8008f38:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8008f3a:	68fb      	ldr	r3, [r7, #12]
 8008f3c:	781b      	ldrb	r3, [r3, #0]
 8008f3e:	b2db      	uxtb	r3, r3
 8008f40:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008f42:	68fb      	ldr	r3, [r7, #12]
 8008f44:	22ff      	movs	r2, #255	@ 0xff
 8008f46:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008f48:	68fb      	ldr	r3, [r7, #12]
 8008f4a:	781b      	ldrb	r3, [r3, #0]
 8008f4c:	b2db      	uxtb	r3, r3
 8008f4e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008f50:	78fb      	ldrb	r3, [r7, #3]
 8008f52:	b2db      	uxtb	r3, r3
 8008f54:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8008f58:	b2da      	uxtb	r2, r3
 8008f5a:	4b2f      	ldr	r3, [pc, #188]	@ (8009018 <xPortStartScheduler+0xe8>)
 8008f5c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8008f5e:	4b2f      	ldr	r3, [pc, #188]	@ (800901c <xPortStartScheduler+0xec>)
 8008f60:	2207      	movs	r2, #7
 8008f62:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008f64:	e009      	b.n	8008f7a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8008f66:	4b2d      	ldr	r3, [pc, #180]	@ (800901c <xPortStartScheduler+0xec>)
 8008f68:	681b      	ldr	r3, [r3, #0]
 8008f6a:	3b01      	subs	r3, #1
 8008f6c:	4a2b      	ldr	r2, [pc, #172]	@ (800901c <xPortStartScheduler+0xec>)
 8008f6e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008f70:	78fb      	ldrb	r3, [r7, #3]
 8008f72:	b2db      	uxtb	r3, r3
 8008f74:	005b      	lsls	r3, r3, #1
 8008f76:	b2db      	uxtb	r3, r3
 8008f78:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008f7a:	78fb      	ldrb	r3, [r7, #3]
 8008f7c:	b2db      	uxtb	r3, r3
 8008f7e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008f82:	2b80      	cmp	r3, #128	@ 0x80
 8008f84:	d0ef      	beq.n	8008f66 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8008f86:	4b25      	ldr	r3, [pc, #148]	@ (800901c <xPortStartScheduler+0xec>)
 8008f88:	681b      	ldr	r3, [r3, #0]
 8008f8a:	f1c3 0307 	rsb	r3, r3, #7
 8008f8e:	2b04      	cmp	r3, #4
 8008f90:	d00d      	beq.n	8008fae <xPortStartScheduler+0x7e>
	__asm volatile
 8008f92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008f96:	b672      	cpsid	i
 8008f98:	f383 8811 	msr	BASEPRI, r3
 8008f9c:	f3bf 8f6f 	isb	sy
 8008fa0:	f3bf 8f4f 	dsb	sy
 8008fa4:	b662      	cpsie	i
 8008fa6:	60bb      	str	r3, [r7, #8]
}
 8008fa8:	bf00      	nop
 8008faa:	bf00      	nop
 8008fac:	e7fd      	b.n	8008faa <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8008fae:	4b1b      	ldr	r3, [pc, #108]	@ (800901c <xPortStartScheduler+0xec>)
 8008fb0:	681b      	ldr	r3, [r3, #0]
 8008fb2:	021b      	lsls	r3, r3, #8
 8008fb4:	4a19      	ldr	r2, [pc, #100]	@ (800901c <xPortStartScheduler+0xec>)
 8008fb6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008fb8:	4b18      	ldr	r3, [pc, #96]	@ (800901c <xPortStartScheduler+0xec>)
 8008fba:	681b      	ldr	r3, [r3, #0]
 8008fbc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8008fc0:	4a16      	ldr	r2, [pc, #88]	@ (800901c <xPortStartScheduler+0xec>)
 8008fc2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	b2da      	uxtb	r2, r3
 8008fc8:	68fb      	ldr	r3, [r7, #12]
 8008fca:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8008fcc:	4b14      	ldr	r3, [pc, #80]	@ (8009020 <xPortStartScheduler+0xf0>)
 8008fce:	681b      	ldr	r3, [r3, #0]
 8008fd0:	4a13      	ldr	r2, [pc, #76]	@ (8009020 <xPortStartScheduler+0xf0>)
 8008fd2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8008fd6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008fd8:	4b11      	ldr	r3, [pc, #68]	@ (8009020 <xPortStartScheduler+0xf0>)
 8008fda:	681b      	ldr	r3, [r3, #0]
 8008fdc:	4a10      	ldr	r2, [pc, #64]	@ (8009020 <xPortStartScheduler+0xf0>)
 8008fde:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8008fe2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8008fe4:	f000 f8dc 	bl	80091a0 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008fe8:	4b0e      	ldr	r3, [pc, #56]	@ (8009024 <xPortStartScheduler+0xf4>)
 8008fea:	2200      	movs	r2, #0
 8008fec:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8008fee:	f000 f8fb 	bl	80091e8 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8008ff2:	4b0d      	ldr	r3, [pc, #52]	@ (8009028 <xPortStartScheduler+0xf8>)
 8008ff4:	681b      	ldr	r3, [r3, #0]
 8008ff6:	4a0c      	ldr	r2, [pc, #48]	@ (8009028 <xPortStartScheduler+0xf8>)
 8008ff8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8008ffc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8008ffe:	f7ff ff83 	bl	8008f08 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8009002:	f7fe ff25 	bl	8007e50 <vTaskSwitchContext>
	prvTaskExitError();
 8009006:	f7ff ff35 	bl	8008e74 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800900a:	2300      	movs	r3, #0
}
 800900c:	4618      	mov	r0, r3
 800900e:	3710      	adds	r7, #16
 8009010:	46bd      	mov	sp, r7
 8009012:	bd80      	pop	{r7, pc}
 8009014:	e000e400 	.word	0xe000e400
 8009018:	200016f4 	.word	0x200016f4
 800901c:	200016f8 	.word	0x200016f8
 8009020:	e000ed20 	.word	0xe000ed20
 8009024:	2000000c 	.word	0x2000000c
 8009028:	e000ef34 	.word	0xe000ef34

0800902c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800902c:	b480      	push	{r7}
 800902e:	b083      	sub	sp, #12
 8009030:	af00      	add	r7, sp, #0
	__asm volatile
 8009032:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009036:	b672      	cpsid	i
 8009038:	f383 8811 	msr	BASEPRI, r3
 800903c:	f3bf 8f6f 	isb	sy
 8009040:	f3bf 8f4f 	dsb	sy
 8009044:	b662      	cpsie	i
 8009046:	607b      	str	r3, [r7, #4]
}
 8009048:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800904a:	4b11      	ldr	r3, [pc, #68]	@ (8009090 <vPortEnterCritical+0x64>)
 800904c:	681b      	ldr	r3, [r3, #0]
 800904e:	3301      	adds	r3, #1
 8009050:	4a0f      	ldr	r2, [pc, #60]	@ (8009090 <vPortEnterCritical+0x64>)
 8009052:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8009054:	4b0e      	ldr	r3, [pc, #56]	@ (8009090 <vPortEnterCritical+0x64>)
 8009056:	681b      	ldr	r3, [r3, #0]
 8009058:	2b01      	cmp	r3, #1
 800905a:	d112      	bne.n	8009082 <vPortEnterCritical+0x56>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800905c:	4b0d      	ldr	r3, [pc, #52]	@ (8009094 <vPortEnterCritical+0x68>)
 800905e:	681b      	ldr	r3, [r3, #0]
 8009060:	b2db      	uxtb	r3, r3
 8009062:	2b00      	cmp	r3, #0
 8009064:	d00d      	beq.n	8009082 <vPortEnterCritical+0x56>
	__asm volatile
 8009066:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800906a:	b672      	cpsid	i
 800906c:	f383 8811 	msr	BASEPRI, r3
 8009070:	f3bf 8f6f 	isb	sy
 8009074:	f3bf 8f4f 	dsb	sy
 8009078:	b662      	cpsie	i
 800907a:	603b      	str	r3, [r7, #0]
}
 800907c:	bf00      	nop
 800907e:	bf00      	nop
 8009080:	e7fd      	b.n	800907e <vPortEnterCritical+0x52>
	}
}
 8009082:	bf00      	nop
 8009084:	370c      	adds	r7, #12
 8009086:	46bd      	mov	sp, r7
 8009088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800908c:	4770      	bx	lr
 800908e:	bf00      	nop
 8009090:	2000000c 	.word	0x2000000c
 8009094:	e000ed04 	.word	0xe000ed04

08009098 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8009098:	b480      	push	{r7}
 800909a:	b083      	sub	sp, #12
 800909c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800909e:	4b13      	ldr	r3, [pc, #76]	@ (80090ec <vPortExitCritical+0x54>)
 80090a0:	681b      	ldr	r3, [r3, #0]
 80090a2:	2b00      	cmp	r3, #0
 80090a4:	d10d      	bne.n	80090c2 <vPortExitCritical+0x2a>
	__asm volatile
 80090a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80090aa:	b672      	cpsid	i
 80090ac:	f383 8811 	msr	BASEPRI, r3
 80090b0:	f3bf 8f6f 	isb	sy
 80090b4:	f3bf 8f4f 	dsb	sy
 80090b8:	b662      	cpsie	i
 80090ba:	607b      	str	r3, [r7, #4]
}
 80090bc:	bf00      	nop
 80090be:	bf00      	nop
 80090c0:	e7fd      	b.n	80090be <vPortExitCritical+0x26>
	uxCriticalNesting--;
 80090c2:	4b0a      	ldr	r3, [pc, #40]	@ (80090ec <vPortExitCritical+0x54>)
 80090c4:	681b      	ldr	r3, [r3, #0]
 80090c6:	3b01      	subs	r3, #1
 80090c8:	4a08      	ldr	r2, [pc, #32]	@ (80090ec <vPortExitCritical+0x54>)
 80090ca:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80090cc:	4b07      	ldr	r3, [pc, #28]	@ (80090ec <vPortExitCritical+0x54>)
 80090ce:	681b      	ldr	r3, [r3, #0]
 80090d0:	2b00      	cmp	r3, #0
 80090d2:	d105      	bne.n	80090e0 <vPortExitCritical+0x48>
 80090d4:	2300      	movs	r3, #0
 80090d6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80090d8:	683b      	ldr	r3, [r7, #0]
 80090da:	f383 8811 	msr	BASEPRI, r3
}
 80090de:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80090e0:	bf00      	nop
 80090e2:	370c      	adds	r7, #12
 80090e4:	46bd      	mov	sp, r7
 80090e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090ea:	4770      	bx	lr
 80090ec:	2000000c 	.word	0x2000000c

080090f0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80090f0:	f3ef 8009 	mrs	r0, PSP
 80090f4:	f3bf 8f6f 	isb	sy
 80090f8:	4b15      	ldr	r3, [pc, #84]	@ (8009150 <pxCurrentTCBConst>)
 80090fa:	681a      	ldr	r2, [r3, #0]
 80090fc:	f01e 0f10 	tst.w	lr, #16
 8009100:	bf08      	it	eq
 8009102:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8009106:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800910a:	6010      	str	r0, [r2, #0]
 800910c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8009110:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8009114:	b672      	cpsid	i
 8009116:	f380 8811 	msr	BASEPRI, r0
 800911a:	f3bf 8f4f 	dsb	sy
 800911e:	f3bf 8f6f 	isb	sy
 8009122:	b662      	cpsie	i
 8009124:	f7fe fe94 	bl	8007e50 <vTaskSwitchContext>
 8009128:	f04f 0000 	mov.w	r0, #0
 800912c:	f380 8811 	msr	BASEPRI, r0
 8009130:	bc09      	pop	{r0, r3}
 8009132:	6819      	ldr	r1, [r3, #0]
 8009134:	6808      	ldr	r0, [r1, #0]
 8009136:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800913a:	f01e 0f10 	tst.w	lr, #16
 800913e:	bf08      	it	eq
 8009140:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8009144:	f380 8809 	msr	PSP, r0
 8009148:	f3bf 8f6f 	isb	sy
 800914c:	4770      	bx	lr
 800914e:	bf00      	nop

08009150 <pxCurrentTCBConst>:
 8009150:	200010c8 	.word	0x200010c8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8009154:	bf00      	nop
 8009156:	bf00      	nop

08009158 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009158:	b580      	push	{r7, lr}
 800915a:	b082      	sub	sp, #8
 800915c:	af00      	add	r7, sp, #0
	__asm volatile
 800915e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009162:	b672      	cpsid	i
 8009164:	f383 8811 	msr	BASEPRI, r3
 8009168:	f3bf 8f6f 	isb	sy
 800916c:	f3bf 8f4f 	dsb	sy
 8009170:	b662      	cpsie	i
 8009172:	607b      	str	r3, [r7, #4]
}
 8009174:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009176:	f7fe fdaf 	bl	8007cd8 <xTaskIncrementTick>
 800917a:	4603      	mov	r3, r0
 800917c:	2b00      	cmp	r3, #0
 800917e:	d003      	beq.n	8009188 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8009180:	4b06      	ldr	r3, [pc, #24]	@ (800919c <SysTick_Handler+0x44>)
 8009182:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009186:	601a      	str	r2, [r3, #0]
 8009188:	2300      	movs	r3, #0
 800918a:	603b      	str	r3, [r7, #0]
	__asm volatile
 800918c:	683b      	ldr	r3, [r7, #0]
 800918e:	f383 8811 	msr	BASEPRI, r3
}
 8009192:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8009194:	bf00      	nop
 8009196:	3708      	adds	r7, #8
 8009198:	46bd      	mov	sp, r7
 800919a:	bd80      	pop	{r7, pc}
 800919c:	e000ed04 	.word	0xe000ed04

080091a0 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80091a0:	b480      	push	{r7}
 80091a2:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80091a4:	4b0b      	ldr	r3, [pc, #44]	@ (80091d4 <vPortSetupTimerInterrupt+0x34>)
 80091a6:	2200      	movs	r2, #0
 80091a8:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80091aa:	4b0b      	ldr	r3, [pc, #44]	@ (80091d8 <vPortSetupTimerInterrupt+0x38>)
 80091ac:	2200      	movs	r2, #0
 80091ae:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80091b0:	4b0a      	ldr	r3, [pc, #40]	@ (80091dc <vPortSetupTimerInterrupt+0x3c>)
 80091b2:	681b      	ldr	r3, [r3, #0]
 80091b4:	4a0a      	ldr	r2, [pc, #40]	@ (80091e0 <vPortSetupTimerInterrupt+0x40>)
 80091b6:	fba2 2303 	umull	r2, r3, r2, r3
 80091ba:	099b      	lsrs	r3, r3, #6
 80091bc:	4a09      	ldr	r2, [pc, #36]	@ (80091e4 <vPortSetupTimerInterrupt+0x44>)
 80091be:	3b01      	subs	r3, #1
 80091c0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80091c2:	4b04      	ldr	r3, [pc, #16]	@ (80091d4 <vPortSetupTimerInterrupt+0x34>)
 80091c4:	2207      	movs	r2, #7
 80091c6:	601a      	str	r2, [r3, #0]
}
 80091c8:	bf00      	nop
 80091ca:	46bd      	mov	sp, r7
 80091cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091d0:	4770      	bx	lr
 80091d2:	bf00      	nop
 80091d4:	e000e010 	.word	0xe000e010
 80091d8:	e000e018 	.word	0xe000e018
 80091dc:	20000000 	.word	0x20000000
 80091e0:	10624dd3 	.word	0x10624dd3
 80091e4:	e000e014 	.word	0xe000e014

080091e8 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80091e8:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 80091f8 <vPortEnableVFP+0x10>
 80091ec:	6801      	ldr	r1, [r0, #0]
 80091ee:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80091f2:	6001      	str	r1, [r0, #0]
 80091f4:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80091f6:	bf00      	nop
 80091f8:	e000ed88 	.word	0xe000ed88

080091fc <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80091fc:	b480      	push	{r7}
 80091fe:	b085      	sub	sp, #20
 8009200:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8009202:	f3ef 8305 	mrs	r3, IPSR
 8009206:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8009208:	68fb      	ldr	r3, [r7, #12]
 800920a:	2b0f      	cmp	r3, #15
 800920c:	d917      	bls.n	800923e <vPortValidateInterruptPriority+0x42>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800920e:	4a1a      	ldr	r2, [pc, #104]	@ (8009278 <vPortValidateInterruptPriority+0x7c>)
 8009210:	68fb      	ldr	r3, [r7, #12]
 8009212:	4413      	add	r3, r2
 8009214:	781b      	ldrb	r3, [r3, #0]
 8009216:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8009218:	4b18      	ldr	r3, [pc, #96]	@ (800927c <vPortValidateInterruptPriority+0x80>)
 800921a:	781b      	ldrb	r3, [r3, #0]
 800921c:	7afa      	ldrb	r2, [r7, #11]
 800921e:	429a      	cmp	r2, r3
 8009220:	d20d      	bcs.n	800923e <vPortValidateInterruptPriority+0x42>
	__asm volatile
 8009222:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009226:	b672      	cpsid	i
 8009228:	f383 8811 	msr	BASEPRI, r3
 800922c:	f3bf 8f6f 	isb	sy
 8009230:	f3bf 8f4f 	dsb	sy
 8009234:	b662      	cpsie	i
 8009236:	607b      	str	r3, [r7, #4]
}
 8009238:	bf00      	nop
 800923a:	bf00      	nop
 800923c:	e7fd      	b.n	800923a <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800923e:	4b10      	ldr	r3, [pc, #64]	@ (8009280 <vPortValidateInterruptPriority+0x84>)
 8009240:	681b      	ldr	r3, [r3, #0]
 8009242:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8009246:	4b0f      	ldr	r3, [pc, #60]	@ (8009284 <vPortValidateInterruptPriority+0x88>)
 8009248:	681b      	ldr	r3, [r3, #0]
 800924a:	429a      	cmp	r2, r3
 800924c:	d90d      	bls.n	800926a <vPortValidateInterruptPriority+0x6e>
	__asm volatile
 800924e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009252:	b672      	cpsid	i
 8009254:	f383 8811 	msr	BASEPRI, r3
 8009258:	f3bf 8f6f 	isb	sy
 800925c:	f3bf 8f4f 	dsb	sy
 8009260:	b662      	cpsie	i
 8009262:	603b      	str	r3, [r7, #0]
}
 8009264:	bf00      	nop
 8009266:	bf00      	nop
 8009268:	e7fd      	b.n	8009266 <vPortValidateInterruptPriority+0x6a>
	}
 800926a:	bf00      	nop
 800926c:	3714      	adds	r7, #20
 800926e:	46bd      	mov	sp, r7
 8009270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009274:	4770      	bx	lr
 8009276:	bf00      	nop
 8009278:	e000e3f0 	.word	0xe000e3f0
 800927c:	200016f4 	.word	0x200016f4
 8009280:	e000ed0c 	.word	0xe000ed0c
 8009284:	200016f8 	.word	0x200016f8

08009288 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8009288:	b580      	push	{r7, lr}
 800928a:	b08a      	sub	sp, #40	@ 0x28
 800928c:	af00      	add	r7, sp, #0
 800928e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8009290:	2300      	movs	r3, #0
 8009292:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8009294:	f7fe fc62 	bl	8007b5c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8009298:	4b5d      	ldr	r3, [pc, #372]	@ (8009410 <pvPortMalloc+0x188>)
 800929a:	681b      	ldr	r3, [r3, #0]
 800929c:	2b00      	cmp	r3, #0
 800929e:	d101      	bne.n	80092a4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80092a0:	f000 f920 	bl	80094e4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80092a4:	4b5b      	ldr	r3, [pc, #364]	@ (8009414 <pvPortMalloc+0x18c>)
 80092a6:	681a      	ldr	r2, [r3, #0]
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	4013      	ands	r3, r2
 80092ac:	2b00      	cmp	r3, #0
 80092ae:	f040 8094 	bne.w	80093da <pvPortMalloc+0x152>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	2b00      	cmp	r3, #0
 80092b6:	d020      	beq.n	80092fa <pvPortMalloc+0x72>
			{
				xWantedSize += xHeapStructSize;
 80092b8:	2208      	movs	r2, #8
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	4413      	add	r3, r2
 80092be:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	f003 0307 	and.w	r3, r3, #7
 80092c6:	2b00      	cmp	r3, #0
 80092c8:	d017      	beq.n	80092fa <pvPortMalloc+0x72>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	f023 0307 	bic.w	r3, r3, #7
 80092d0:	3308      	adds	r3, #8
 80092d2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	f003 0307 	and.w	r3, r3, #7
 80092da:	2b00      	cmp	r3, #0
 80092dc:	d00d      	beq.n	80092fa <pvPortMalloc+0x72>
	__asm volatile
 80092de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80092e2:	b672      	cpsid	i
 80092e4:	f383 8811 	msr	BASEPRI, r3
 80092e8:	f3bf 8f6f 	isb	sy
 80092ec:	f3bf 8f4f 	dsb	sy
 80092f0:	b662      	cpsie	i
 80092f2:	617b      	str	r3, [r7, #20]
}
 80092f4:	bf00      	nop
 80092f6:	bf00      	nop
 80092f8:	e7fd      	b.n	80092f6 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	2b00      	cmp	r3, #0
 80092fe:	d06c      	beq.n	80093da <pvPortMalloc+0x152>
 8009300:	4b45      	ldr	r3, [pc, #276]	@ (8009418 <pvPortMalloc+0x190>)
 8009302:	681b      	ldr	r3, [r3, #0]
 8009304:	687a      	ldr	r2, [r7, #4]
 8009306:	429a      	cmp	r2, r3
 8009308:	d867      	bhi.n	80093da <pvPortMalloc+0x152>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800930a:	4b44      	ldr	r3, [pc, #272]	@ (800941c <pvPortMalloc+0x194>)
 800930c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800930e:	4b43      	ldr	r3, [pc, #268]	@ (800941c <pvPortMalloc+0x194>)
 8009310:	681b      	ldr	r3, [r3, #0]
 8009312:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009314:	e004      	b.n	8009320 <pvPortMalloc+0x98>
				{
					pxPreviousBlock = pxBlock;
 8009316:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009318:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800931a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800931c:	681b      	ldr	r3, [r3, #0]
 800931e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009320:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009322:	685b      	ldr	r3, [r3, #4]
 8009324:	687a      	ldr	r2, [r7, #4]
 8009326:	429a      	cmp	r2, r3
 8009328:	d903      	bls.n	8009332 <pvPortMalloc+0xaa>
 800932a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800932c:	681b      	ldr	r3, [r3, #0]
 800932e:	2b00      	cmp	r3, #0
 8009330:	d1f1      	bne.n	8009316 <pvPortMalloc+0x8e>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8009332:	4b37      	ldr	r3, [pc, #220]	@ (8009410 <pvPortMalloc+0x188>)
 8009334:	681b      	ldr	r3, [r3, #0]
 8009336:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009338:	429a      	cmp	r2, r3
 800933a:	d04e      	beq.n	80093da <pvPortMalloc+0x152>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800933c:	6a3b      	ldr	r3, [r7, #32]
 800933e:	681b      	ldr	r3, [r3, #0]
 8009340:	2208      	movs	r2, #8
 8009342:	4413      	add	r3, r2
 8009344:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009346:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009348:	681a      	ldr	r2, [r3, #0]
 800934a:	6a3b      	ldr	r3, [r7, #32]
 800934c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800934e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009350:	685a      	ldr	r2, [r3, #4]
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	1ad2      	subs	r2, r2, r3
 8009356:	2308      	movs	r3, #8
 8009358:	005b      	lsls	r3, r3, #1
 800935a:	429a      	cmp	r2, r3
 800935c:	d922      	bls.n	80093a4 <pvPortMalloc+0x11c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800935e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	4413      	add	r3, r2
 8009364:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009366:	69bb      	ldr	r3, [r7, #24]
 8009368:	f003 0307 	and.w	r3, r3, #7
 800936c:	2b00      	cmp	r3, #0
 800936e:	d00d      	beq.n	800938c <pvPortMalloc+0x104>
	__asm volatile
 8009370:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009374:	b672      	cpsid	i
 8009376:	f383 8811 	msr	BASEPRI, r3
 800937a:	f3bf 8f6f 	isb	sy
 800937e:	f3bf 8f4f 	dsb	sy
 8009382:	b662      	cpsie	i
 8009384:	613b      	str	r3, [r7, #16]
}
 8009386:	bf00      	nop
 8009388:	bf00      	nop
 800938a:	e7fd      	b.n	8009388 <pvPortMalloc+0x100>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800938c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800938e:	685a      	ldr	r2, [r3, #4]
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	1ad2      	subs	r2, r2, r3
 8009394:	69bb      	ldr	r3, [r7, #24]
 8009396:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8009398:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800939a:	687a      	ldr	r2, [r7, #4]
 800939c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800939e:	69b8      	ldr	r0, [r7, #24]
 80093a0:	f000 f902 	bl	80095a8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80093a4:	4b1c      	ldr	r3, [pc, #112]	@ (8009418 <pvPortMalloc+0x190>)
 80093a6:	681a      	ldr	r2, [r3, #0]
 80093a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80093aa:	685b      	ldr	r3, [r3, #4]
 80093ac:	1ad3      	subs	r3, r2, r3
 80093ae:	4a1a      	ldr	r2, [pc, #104]	@ (8009418 <pvPortMalloc+0x190>)
 80093b0:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80093b2:	4b19      	ldr	r3, [pc, #100]	@ (8009418 <pvPortMalloc+0x190>)
 80093b4:	681a      	ldr	r2, [r3, #0]
 80093b6:	4b1a      	ldr	r3, [pc, #104]	@ (8009420 <pvPortMalloc+0x198>)
 80093b8:	681b      	ldr	r3, [r3, #0]
 80093ba:	429a      	cmp	r2, r3
 80093bc:	d203      	bcs.n	80093c6 <pvPortMalloc+0x13e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80093be:	4b16      	ldr	r3, [pc, #88]	@ (8009418 <pvPortMalloc+0x190>)
 80093c0:	681b      	ldr	r3, [r3, #0]
 80093c2:	4a17      	ldr	r2, [pc, #92]	@ (8009420 <pvPortMalloc+0x198>)
 80093c4:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80093c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80093c8:	685a      	ldr	r2, [r3, #4]
 80093ca:	4b12      	ldr	r3, [pc, #72]	@ (8009414 <pvPortMalloc+0x18c>)
 80093cc:	681b      	ldr	r3, [r3, #0]
 80093ce:	431a      	orrs	r2, r3
 80093d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80093d2:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80093d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80093d6:	2200      	movs	r2, #0
 80093d8:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80093da:	f7fe fbcd 	bl	8007b78 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80093de:	69fb      	ldr	r3, [r7, #28]
 80093e0:	f003 0307 	and.w	r3, r3, #7
 80093e4:	2b00      	cmp	r3, #0
 80093e6:	d00d      	beq.n	8009404 <pvPortMalloc+0x17c>
	__asm volatile
 80093e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80093ec:	b672      	cpsid	i
 80093ee:	f383 8811 	msr	BASEPRI, r3
 80093f2:	f3bf 8f6f 	isb	sy
 80093f6:	f3bf 8f4f 	dsb	sy
 80093fa:	b662      	cpsie	i
 80093fc:	60fb      	str	r3, [r7, #12]
}
 80093fe:	bf00      	nop
 8009400:	bf00      	nop
 8009402:	e7fd      	b.n	8009400 <pvPortMalloc+0x178>
	return pvReturn;
 8009404:	69fb      	ldr	r3, [r7, #28]
}
 8009406:	4618      	mov	r0, r3
 8009408:	3728      	adds	r7, #40	@ 0x28
 800940a:	46bd      	mov	sp, r7
 800940c:	bd80      	pop	{r7, pc}
 800940e:	bf00      	nop
 8009410:	20005304 	.word	0x20005304
 8009414:	20005310 	.word	0x20005310
 8009418:	20005308 	.word	0x20005308
 800941c:	200052fc 	.word	0x200052fc
 8009420:	2000530c 	.word	0x2000530c

08009424 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8009424:	b580      	push	{r7, lr}
 8009426:	b086      	sub	sp, #24
 8009428:	af00      	add	r7, sp, #0
 800942a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	2b00      	cmp	r3, #0
 8009434:	d04e      	beq.n	80094d4 <vPortFree+0xb0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8009436:	2308      	movs	r3, #8
 8009438:	425b      	negs	r3, r3
 800943a:	697a      	ldr	r2, [r7, #20]
 800943c:	4413      	add	r3, r2
 800943e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8009440:	697b      	ldr	r3, [r7, #20]
 8009442:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8009444:	693b      	ldr	r3, [r7, #16]
 8009446:	685a      	ldr	r2, [r3, #4]
 8009448:	4b24      	ldr	r3, [pc, #144]	@ (80094dc <vPortFree+0xb8>)
 800944a:	681b      	ldr	r3, [r3, #0]
 800944c:	4013      	ands	r3, r2
 800944e:	2b00      	cmp	r3, #0
 8009450:	d10d      	bne.n	800946e <vPortFree+0x4a>
	__asm volatile
 8009452:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009456:	b672      	cpsid	i
 8009458:	f383 8811 	msr	BASEPRI, r3
 800945c:	f3bf 8f6f 	isb	sy
 8009460:	f3bf 8f4f 	dsb	sy
 8009464:	b662      	cpsie	i
 8009466:	60fb      	str	r3, [r7, #12]
}
 8009468:	bf00      	nop
 800946a:	bf00      	nop
 800946c:	e7fd      	b.n	800946a <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800946e:	693b      	ldr	r3, [r7, #16]
 8009470:	681b      	ldr	r3, [r3, #0]
 8009472:	2b00      	cmp	r3, #0
 8009474:	d00d      	beq.n	8009492 <vPortFree+0x6e>
	__asm volatile
 8009476:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800947a:	b672      	cpsid	i
 800947c:	f383 8811 	msr	BASEPRI, r3
 8009480:	f3bf 8f6f 	isb	sy
 8009484:	f3bf 8f4f 	dsb	sy
 8009488:	b662      	cpsie	i
 800948a:	60bb      	str	r3, [r7, #8]
}
 800948c:	bf00      	nop
 800948e:	bf00      	nop
 8009490:	e7fd      	b.n	800948e <vPortFree+0x6a>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8009492:	693b      	ldr	r3, [r7, #16]
 8009494:	685a      	ldr	r2, [r3, #4]
 8009496:	4b11      	ldr	r3, [pc, #68]	@ (80094dc <vPortFree+0xb8>)
 8009498:	681b      	ldr	r3, [r3, #0]
 800949a:	4013      	ands	r3, r2
 800949c:	2b00      	cmp	r3, #0
 800949e:	d019      	beq.n	80094d4 <vPortFree+0xb0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80094a0:	693b      	ldr	r3, [r7, #16]
 80094a2:	681b      	ldr	r3, [r3, #0]
 80094a4:	2b00      	cmp	r3, #0
 80094a6:	d115      	bne.n	80094d4 <vPortFree+0xb0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80094a8:	693b      	ldr	r3, [r7, #16]
 80094aa:	685a      	ldr	r2, [r3, #4]
 80094ac:	4b0b      	ldr	r3, [pc, #44]	@ (80094dc <vPortFree+0xb8>)
 80094ae:	681b      	ldr	r3, [r3, #0]
 80094b0:	43db      	mvns	r3, r3
 80094b2:	401a      	ands	r2, r3
 80094b4:	693b      	ldr	r3, [r7, #16]
 80094b6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80094b8:	f7fe fb50 	bl	8007b5c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80094bc:	693b      	ldr	r3, [r7, #16]
 80094be:	685a      	ldr	r2, [r3, #4]
 80094c0:	4b07      	ldr	r3, [pc, #28]	@ (80094e0 <vPortFree+0xbc>)
 80094c2:	681b      	ldr	r3, [r3, #0]
 80094c4:	4413      	add	r3, r2
 80094c6:	4a06      	ldr	r2, [pc, #24]	@ (80094e0 <vPortFree+0xbc>)
 80094c8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80094ca:	6938      	ldr	r0, [r7, #16]
 80094cc:	f000 f86c 	bl	80095a8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80094d0:	f7fe fb52 	bl	8007b78 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80094d4:	bf00      	nop
 80094d6:	3718      	adds	r7, #24
 80094d8:	46bd      	mov	sp, r7
 80094da:	bd80      	pop	{r7, pc}
 80094dc:	20005310 	.word	0x20005310
 80094e0:	20005308 	.word	0x20005308

080094e4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80094e4:	b480      	push	{r7}
 80094e6:	b085      	sub	sp, #20
 80094e8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80094ea:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 80094ee:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80094f0:	4b27      	ldr	r3, [pc, #156]	@ (8009590 <prvHeapInit+0xac>)
 80094f2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80094f4:	68fb      	ldr	r3, [r7, #12]
 80094f6:	f003 0307 	and.w	r3, r3, #7
 80094fa:	2b00      	cmp	r3, #0
 80094fc:	d00c      	beq.n	8009518 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80094fe:	68fb      	ldr	r3, [r7, #12]
 8009500:	3307      	adds	r3, #7
 8009502:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009504:	68fb      	ldr	r3, [r7, #12]
 8009506:	f023 0307 	bic.w	r3, r3, #7
 800950a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800950c:	68ba      	ldr	r2, [r7, #8]
 800950e:	68fb      	ldr	r3, [r7, #12]
 8009510:	1ad3      	subs	r3, r2, r3
 8009512:	4a1f      	ldr	r2, [pc, #124]	@ (8009590 <prvHeapInit+0xac>)
 8009514:	4413      	add	r3, r2
 8009516:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8009518:	68fb      	ldr	r3, [r7, #12]
 800951a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800951c:	4a1d      	ldr	r2, [pc, #116]	@ (8009594 <prvHeapInit+0xb0>)
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8009522:	4b1c      	ldr	r3, [pc, #112]	@ (8009594 <prvHeapInit+0xb0>)
 8009524:	2200      	movs	r2, #0
 8009526:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	68ba      	ldr	r2, [r7, #8]
 800952c:	4413      	add	r3, r2
 800952e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8009530:	2208      	movs	r2, #8
 8009532:	68fb      	ldr	r3, [r7, #12]
 8009534:	1a9b      	subs	r3, r3, r2
 8009536:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009538:	68fb      	ldr	r3, [r7, #12]
 800953a:	f023 0307 	bic.w	r3, r3, #7
 800953e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8009540:	68fb      	ldr	r3, [r7, #12]
 8009542:	4a15      	ldr	r2, [pc, #84]	@ (8009598 <prvHeapInit+0xb4>)
 8009544:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8009546:	4b14      	ldr	r3, [pc, #80]	@ (8009598 <prvHeapInit+0xb4>)
 8009548:	681b      	ldr	r3, [r3, #0]
 800954a:	2200      	movs	r2, #0
 800954c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800954e:	4b12      	ldr	r3, [pc, #72]	@ (8009598 <prvHeapInit+0xb4>)
 8009550:	681b      	ldr	r3, [r3, #0]
 8009552:	2200      	movs	r2, #0
 8009554:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800955a:	683b      	ldr	r3, [r7, #0]
 800955c:	68fa      	ldr	r2, [r7, #12]
 800955e:	1ad2      	subs	r2, r2, r3
 8009560:	683b      	ldr	r3, [r7, #0]
 8009562:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009564:	4b0c      	ldr	r3, [pc, #48]	@ (8009598 <prvHeapInit+0xb4>)
 8009566:	681a      	ldr	r2, [r3, #0]
 8009568:	683b      	ldr	r3, [r7, #0]
 800956a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800956c:	683b      	ldr	r3, [r7, #0]
 800956e:	685b      	ldr	r3, [r3, #4]
 8009570:	4a0a      	ldr	r2, [pc, #40]	@ (800959c <prvHeapInit+0xb8>)
 8009572:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009574:	683b      	ldr	r3, [r7, #0]
 8009576:	685b      	ldr	r3, [r3, #4]
 8009578:	4a09      	ldr	r2, [pc, #36]	@ (80095a0 <prvHeapInit+0xbc>)
 800957a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800957c:	4b09      	ldr	r3, [pc, #36]	@ (80095a4 <prvHeapInit+0xc0>)
 800957e:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8009582:	601a      	str	r2, [r3, #0]
}
 8009584:	bf00      	nop
 8009586:	3714      	adds	r7, #20
 8009588:	46bd      	mov	sp, r7
 800958a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800958e:	4770      	bx	lr
 8009590:	200016fc 	.word	0x200016fc
 8009594:	200052fc 	.word	0x200052fc
 8009598:	20005304 	.word	0x20005304
 800959c:	2000530c 	.word	0x2000530c
 80095a0:	20005308 	.word	0x20005308
 80095a4:	20005310 	.word	0x20005310

080095a8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80095a8:	b480      	push	{r7}
 80095aa:	b085      	sub	sp, #20
 80095ac:	af00      	add	r7, sp, #0
 80095ae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80095b0:	4b28      	ldr	r3, [pc, #160]	@ (8009654 <prvInsertBlockIntoFreeList+0xac>)
 80095b2:	60fb      	str	r3, [r7, #12]
 80095b4:	e002      	b.n	80095bc <prvInsertBlockIntoFreeList+0x14>
 80095b6:	68fb      	ldr	r3, [r7, #12]
 80095b8:	681b      	ldr	r3, [r3, #0]
 80095ba:	60fb      	str	r3, [r7, #12]
 80095bc:	68fb      	ldr	r3, [r7, #12]
 80095be:	681b      	ldr	r3, [r3, #0]
 80095c0:	687a      	ldr	r2, [r7, #4]
 80095c2:	429a      	cmp	r2, r3
 80095c4:	d8f7      	bhi.n	80095b6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80095c6:	68fb      	ldr	r3, [r7, #12]
 80095c8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80095ca:	68fb      	ldr	r3, [r7, #12]
 80095cc:	685b      	ldr	r3, [r3, #4]
 80095ce:	68ba      	ldr	r2, [r7, #8]
 80095d0:	4413      	add	r3, r2
 80095d2:	687a      	ldr	r2, [r7, #4]
 80095d4:	429a      	cmp	r2, r3
 80095d6:	d108      	bne.n	80095ea <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80095d8:	68fb      	ldr	r3, [r7, #12]
 80095da:	685a      	ldr	r2, [r3, #4]
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	685b      	ldr	r3, [r3, #4]
 80095e0:	441a      	add	r2, r3
 80095e2:	68fb      	ldr	r3, [r7, #12]
 80095e4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80095e6:	68fb      	ldr	r3, [r7, #12]
 80095e8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	685b      	ldr	r3, [r3, #4]
 80095f2:	68ba      	ldr	r2, [r7, #8]
 80095f4:	441a      	add	r2, r3
 80095f6:	68fb      	ldr	r3, [r7, #12]
 80095f8:	681b      	ldr	r3, [r3, #0]
 80095fa:	429a      	cmp	r2, r3
 80095fc:	d118      	bne.n	8009630 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80095fe:	68fb      	ldr	r3, [r7, #12]
 8009600:	681a      	ldr	r2, [r3, #0]
 8009602:	4b15      	ldr	r3, [pc, #84]	@ (8009658 <prvInsertBlockIntoFreeList+0xb0>)
 8009604:	681b      	ldr	r3, [r3, #0]
 8009606:	429a      	cmp	r2, r3
 8009608:	d00d      	beq.n	8009626 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	685a      	ldr	r2, [r3, #4]
 800960e:	68fb      	ldr	r3, [r7, #12]
 8009610:	681b      	ldr	r3, [r3, #0]
 8009612:	685b      	ldr	r3, [r3, #4]
 8009614:	441a      	add	r2, r3
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800961a:	68fb      	ldr	r3, [r7, #12]
 800961c:	681b      	ldr	r3, [r3, #0]
 800961e:	681a      	ldr	r2, [r3, #0]
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	601a      	str	r2, [r3, #0]
 8009624:	e008      	b.n	8009638 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8009626:	4b0c      	ldr	r3, [pc, #48]	@ (8009658 <prvInsertBlockIntoFreeList+0xb0>)
 8009628:	681a      	ldr	r2, [r3, #0]
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	601a      	str	r2, [r3, #0]
 800962e:	e003      	b.n	8009638 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8009630:	68fb      	ldr	r3, [r7, #12]
 8009632:	681a      	ldr	r2, [r3, #0]
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8009638:	68fa      	ldr	r2, [r7, #12]
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	429a      	cmp	r2, r3
 800963e:	d002      	beq.n	8009646 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8009640:	68fb      	ldr	r3, [r7, #12]
 8009642:	687a      	ldr	r2, [r7, #4]
 8009644:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009646:	bf00      	nop
 8009648:	3714      	adds	r7, #20
 800964a:	46bd      	mov	sp, r7
 800964c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009650:	4770      	bx	lr
 8009652:	bf00      	nop
 8009654:	200052fc 	.word	0x200052fc
 8009658:	20005304 	.word	0x20005304

0800965c <std>:
 800965c:	2300      	movs	r3, #0
 800965e:	b510      	push	{r4, lr}
 8009660:	4604      	mov	r4, r0
 8009662:	e9c0 3300 	strd	r3, r3, [r0]
 8009666:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800966a:	6083      	str	r3, [r0, #8]
 800966c:	8181      	strh	r1, [r0, #12]
 800966e:	6643      	str	r3, [r0, #100]	@ 0x64
 8009670:	81c2      	strh	r2, [r0, #14]
 8009672:	6183      	str	r3, [r0, #24]
 8009674:	4619      	mov	r1, r3
 8009676:	2208      	movs	r2, #8
 8009678:	305c      	adds	r0, #92	@ 0x5c
 800967a:	f000 f9f9 	bl	8009a70 <memset>
 800967e:	4b0d      	ldr	r3, [pc, #52]	@ (80096b4 <std+0x58>)
 8009680:	6263      	str	r3, [r4, #36]	@ 0x24
 8009682:	4b0d      	ldr	r3, [pc, #52]	@ (80096b8 <std+0x5c>)
 8009684:	62a3      	str	r3, [r4, #40]	@ 0x28
 8009686:	4b0d      	ldr	r3, [pc, #52]	@ (80096bc <std+0x60>)
 8009688:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800968a:	4b0d      	ldr	r3, [pc, #52]	@ (80096c0 <std+0x64>)
 800968c:	6323      	str	r3, [r4, #48]	@ 0x30
 800968e:	4b0d      	ldr	r3, [pc, #52]	@ (80096c4 <std+0x68>)
 8009690:	6224      	str	r4, [r4, #32]
 8009692:	429c      	cmp	r4, r3
 8009694:	d006      	beq.n	80096a4 <std+0x48>
 8009696:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800969a:	4294      	cmp	r4, r2
 800969c:	d002      	beq.n	80096a4 <std+0x48>
 800969e:	33d0      	adds	r3, #208	@ 0xd0
 80096a0:	429c      	cmp	r4, r3
 80096a2:	d105      	bne.n	80096b0 <std+0x54>
 80096a4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80096a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80096ac:	f000 baae 	b.w	8009c0c <__retarget_lock_init_recursive>
 80096b0:	bd10      	pop	{r4, pc}
 80096b2:	bf00      	nop
 80096b4:	080098c1 	.word	0x080098c1
 80096b8:	080098e3 	.word	0x080098e3
 80096bc:	0800991b 	.word	0x0800991b
 80096c0:	0800993f 	.word	0x0800993f
 80096c4:	20005314 	.word	0x20005314

080096c8 <stdio_exit_handler>:
 80096c8:	4a02      	ldr	r2, [pc, #8]	@ (80096d4 <stdio_exit_handler+0xc>)
 80096ca:	4903      	ldr	r1, [pc, #12]	@ (80096d8 <stdio_exit_handler+0x10>)
 80096cc:	4803      	ldr	r0, [pc, #12]	@ (80096dc <stdio_exit_handler+0x14>)
 80096ce:	f000 b869 	b.w	80097a4 <_fwalk_sglue>
 80096d2:	bf00      	nop
 80096d4:	20000010 	.word	0x20000010
 80096d8:	0800a4c9 	.word	0x0800a4c9
 80096dc:	20000020 	.word	0x20000020

080096e0 <cleanup_stdio>:
 80096e0:	6841      	ldr	r1, [r0, #4]
 80096e2:	4b0c      	ldr	r3, [pc, #48]	@ (8009714 <cleanup_stdio+0x34>)
 80096e4:	4299      	cmp	r1, r3
 80096e6:	b510      	push	{r4, lr}
 80096e8:	4604      	mov	r4, r0
 80096ea:	d001      	beq.n	80096f0 <cleanup_stdio+0x10>
 80096ec:	f000 feec 	bl	800a4c8 <_fflush_r>
 80096f0:	68a1      	ldr	r1, [r4, #8]
 80096f2:	4b09      	ldr	r3, [pc, #36]	@ (8009718 <cleanup_stdio+0x38>)
 80096f4:	4299      	cmp	r1, r3
 80096f6:	d002      	beq.n	80096fe <cleanup_stdio+0x1e>
 80096f8:	4620      	mov	r0, r4
 80096fa:	f000 fee5 	bl	800a4c8 <_fflush_r>
 80096fe:	68e1      	ldr	r1, [r4, #12]
 8009700:	4b06      	ldr	r3, [pc, #24]	@ (800971c <cleanup_stdio+0x3c>)
 8009702:	4299      	cmp	r1, r3
 8009704:	d004      	beq.n	8009710 <cleanup_stdio+0x30>
 8009706:	4620      	mov	r0, r4
 8009708:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800970c:	f000 bedc 	b.w	800a4c8 <_fflush_r>
 8009710:	bd10      	pop	{r4, pc}
 8009712:	bf00      	nop
 8009714:	20005314 	.word	0x20005314
 8009718:	2000537c 	.word	0x2000537c
 800971c:	200053e4 	.word	0x200053e4

08009720 <global_stdio_init.part.0>:
 8009720:	b510      	push	{r4, lr}
 8009722:	4b0b      	ldr	r3, [pc, #44]	@ (8009750 <global_stdio_init.part.0+0x30>)
 8009724:	4c0b      	ldr	r4, [pc, #44]	@ (8009754 <global_stdio_init.part.0+0x34>)
 8009726:	4a0c      	ldr	r2, [pc, #48]	@ (8009758 <global_stdio_init.part.0+0x38>)
 8009728:	601a      	str	r2, [r3, #0]
 800972a:	4620      	mov	r0, r4
 800972c:	2200      	movs	r2, #0
 800972e:	2104      	movs	r1, #4
 8009730:	f7ff ff94 	bl	800965c <std>
 8009734:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8009738:	2201      	movs	r2, #1
 800973a:	2109      	movs	r1, #9
 800973c:	f7ff ff8e 	bl	800965c <std>
 8009740:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8009744:	2202      	movs	r2, #2
 8009746:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800974a:	2112      	movs	r1, #18
 800974c:	f7ff bf86 	b.w	800965c <std>
 8009750:	2000544c 	.word	0x2000544c
 8009754:	20005314 	.word	0x20005314
 8009758:	080096c9 	.word	0x080096c9

0800975c <__sfp_lock_acquire>:
 800975c:	4801      	ldr	r0, [pc, #4]	@ (8009764 <__sfp_lock_acquire+0x8>)
 800975e:	f000 ba56 	b.w	8009c0e <__retarget_lock_acquire_recursive>
 8009762:	bf00      	nop
 8009764:	20005455 	.word	0x20005455

08009768 <__sfp_lock_release>:
 8009768:	4801      	ldr	r0, [pc, #4]	@ (8009770 <__sfp_lock_release+0x8>)
 800976a:	f000 ba51 	b.w	8009c10 <__retarget_lock_release_recursive>
 800976e:	bf00      	nop
 8009770:	20005455 	.word	0x20005455

08009774 <__sinit>:
 8009774:	b510      	push	{r4, lr}
 8009776:	4604      	mov	r4, r0
 8009778:	f7ff fff0 	bl	800975c <__sfp_lock_acquire>
 800977c:	6a23      	ldr	r3, [r4, #32]
 800977e:	b11b      	cbz	r3, 8009788 <__sinit+0x14>
 8009780:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009784:	f7ff bff0 	b.w	8009768 <__sfp_lock_release>
 8009788:	4b04      	ldr	r3, [pc, #16]	@ (800979c <__sinit+0x28>)
 800978a:	6223      	str	r3, [r4, #32]
 800978c:	4b04      	ldr	r3, [pc, #16]	@ (80097a0 <__sinit+0x2c>)
 800978e:	681b      	ldr	r3, [r3, #0]
 8009790:	2b00      	cmp	r3, #0
 8009792:	d1f5      	bne.n	8009780 <__sinit+0xc>
 8009794:	f7ff ffc4 	bl	8009720 <global_stdio_init.part.0>
 8009798:	e7f2      	b.n	8009780 <__sinit+0xc>
 800979a:	bf00      	nop
 800979c:	080096e1 	.word	0x080096e1
 80097a0:	2000544c 	.word	0x2000544c

080097a4 <_fwalk_sglue>:
 80097a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80097a8:	4607      	mov	r7, r0
 80097aa:	4688      	mov	r8, r1
 80097ac:	4614      	mov	r4, r2
 80097ae:	2600      	movs	r6, #0
 80097b0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80097b4:	f1b9 0901 	subs.w	r9, r9, #1
 80097b8:	d505      	bpl.n	80097c6 <_fwalk_sglue+0x22>
 80097ba:	6824      	ldr	r4, [r4, #0]
 80097bc:	2c00      	cmp	r4, #0
 80097be:	d1f7      	bne.n	80097b0 <_fwalk_sglue+0xc>
 80097c0:	4630      	mov	r0, r6
 80097c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80097c6:	89ab      	ldrh	r3, [r5, #12]
 80097c8:	2b01      	cmp	r3, #1
 80097ca:	d907      	bls.n	80097dc <_fwalk_sglue+0x38>
 80097cc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80097d0:	3301      	adds	r3, #1
 80097d2:	d003      	beq.n	80097dc <_fwalk_sglue+0x38>
 80097d4:	4629      	mov	r1, r5
 80097d6:	4638      	mov	r0, r7
 80097d8:	47c0      	blx	r8
 80097da:	4306      	orrs	r6, r0
 80097dc:	3568      	adds	r5, #104	@ 0x68
 80097de:	e7e9      	b.n	80097b4 <_fwalk_sglue+0x10>

080097e0 <iprintf>:
 80097e0:	b40f      	push	{r0, r1, r2, r3}
 80097e2:	b507      	push	{r0, r1, r2, lr}
 80097e4:	4906      	ldr	r1, [pc, #24]	@ (8009800 <iprintf+0x20>)
 80097e6:	ab04      	add	r3, sp, #16
 80097e8:	6808      	ldr	r0, [r1, #0]
 80097ea:	f853 2b04 	ldr.w	r2, [r3], #4
 80097ee:	6881      	ldr	r1, [r0, #8]
 80097f0:	9301      	str	r3, [sp, #4]
 80097f2:	f000 fb3f 	bl	8009e74 <_vfiprintf_r>
 80097f6:	b003      	add	sp, #12
 80097f8:	f85d eb04 	ldr.w	lr, [sp], #4
 80097fc:	b004      	add	sp, #16
 80097fe:	4770      	bx	lr
 8009800:	2000001c 	.word	0x2000001c

08009804 <_puts_r>:
 8009804:	6a03      	ldr	r3, [r0, #32]
 8009806:	b570      	push	{r4, r5, r6, lr}
 8009808:	6884      	ldr	r4, [r0, #8]
 800980a:	4605      	mov	r5, r0
 800980c:	460e      	mov	r6, r1
 800980e:	b90b      	cbnz	r3, 8009814 <_puts_r+0x10>
 8009810:	f7ff ffb0 	bl	8009774 <__sinit>
 8009814:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009816:	07db      	lsls	r3, r3, #31
 8009818:	d405      	bmi.n	8009826 <_puts_r+0x22>
 800981a:	89a3      	ldrh	r3, [r4, #12]
 800981c:	0598      	lsls	r0, r3, #22
 800981e:	d402      	bmi.n	8009826 <_puts_r+0x22>
 8009820:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009822:	f000 f9f4 	bl	8009c0e <__retarget_lock_acquire_recursive>
 8009826:	89a3      	ldrh	r3, [r4, #12]
 8009828:	0719      	lsls	r1, r3, #28
 800982a:	d502      	bpl.n	8009832 <_puts_r+0x2e>
 800982c:	6923      	ldr	r3, [r4, #16]
 800982e:	2b00      	cmp	r3, #0
 8009830:	d135      	bne.n	800989e <_puts_r+0x9a>
 8009832:	4621      	mov	r1, r4
 8009834:	4628      	mov	r0, r5
 8009836:	f000 f8c5 	bl	80099c4 <__swsetup_r>
 800983a:	b380      	cbz	r0, 800989e <_puts_r+0x9a>
 800983c:	f04f 35ff 	mov.w	r5, #4294967295
 8009840:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009842:	07da      	lsls	r2, r3, #31
 8009844:	d405      	bmi.n	8009852 <_puts_r+0x4e>
 8009846:	89a3      	ldrh	r3, [r4, #12]
 8009848:	059b      	lsls	r3, r3, #22
 800984a:	d402      	bmi.n	8009852 <_puts_r+0x4e>
 800984c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800984e:	f000 f9df 	bl	8009c10 <__retarget_lock_release_recursive>
 8009852:	4628      	mov	r0, r5
 8009854:	bd70      	pop	{r4, r5, r6, pc}
 8009856:	2b00      	cmp	r3, #0
 8009858:	da04      	bge.n	8009864 <_puts_r+0x60>
 800985a:	69a2      	ldr	r2, [r4, #24]
 800985c:	429a      	cmp	r2, r3
 800985e:	dc17      	bgt.n	8009890 <_puts_r+0x8c>
 8009860:	290a      	cmp	r1, #10
 8009862:	d015      	beq.n	8009890 <_puts_r+0x8c>
 8009864:	6823      	ldr	r3, [r4, #0]
 8009866:	1c5a      	adds	r2, r3, #1
 8009868:	6022      	str	r2, [r4, #0]
 800986a:	7019      	strb	r1, [r3, #0]
 800986c:	68a3      	ldr	r3, [r4, #8]
 800986e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8009872:	3b01      	subs	r3, #1
 8009874:	60a3      	str	r3, [r4, #8]
 8009876:	2900      	cmp	r1, #0
 8009878:	d1ed      	bne.n	8009856 <_puts_r+0x52>
 800987a:	2b00      	cmp	r3, #0
 800987c:	da11      	bge.n	80098a2 <_puts_r+0x9e>
 800987e:	4622      	mov	r2, r4
 8009880:	210a      	movs	r1, #10
 8009882:	4628      	mov	r0, r5
 8009884:	f000 f85f 	bl	8009946 <__swbuf_r>
 8009888:	3001      	adds	r0, #1
 800988a:	d0d7      	beq.n	800983c <_puts_r+0x38>
 800988c:	250a      	movs	r5, #10
 800988e:	e7d7      	b.n	8009840 <_puts_r+0x3c>
 8009890:	4622      	mov	r2, r4
 8009892:	4628      	mov	r0, r5
 8009894:	f000 f857 	bl	8009946 <__swbuf_r>
 8009898:	3001      	adds	r0, #1
 800989a:	d1e7      	bne.n	800986c <_puts_r+0x68>
 800989c:	e7ce      	b.n	800983c <_puts_r+0x38>
 800989e:	3e01      	subs	r6, #1
 80098a0:	e7e4      	b.n	800986c <_puts_r+0x68>
 80098a2:	6823      	ldr	r3, [r4, #0]
 80098a4:	1c5a      	adds	r2, r3, #1
 80098a6:	6022      	str	r2, [r4, #0]
 80098a8:	220a      	movs	r2, #10
 80098aa:	701a      	strb	r2, [r3, #0]
 80098ac:	e7ee      	b.n	800988c <_puts_r+0x88>
	...

080098b0 <puts>:
 80098b0:	4b02      	ldr	r3, [pc, #8]	@ (80098bc <puts+0xc>)
 80098b2:	4601      	mov	r1, r0
 80098b4:	6818      	ldr	r0, [r3, #0]
 80098b6:	f7ff bfa5 	b.w	8009804 <_puts_r>
 80098ba:	bf00      	nop
 80098bc:	2000001c 	.word	0x2000001c

080098c0 <__sread>:
 80098c0:	b510      	push	{r4, lr}
 80098c2:	460c      	mov	r4, r1
 80098c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80098c8:	f000 f952 	bl	8009b70 <_read_r>
 80098cc:	2800      	cmp	r0, #0
 80098ce:	bfab      	itete	ge
 80098d0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80098d2:	89a3      	ldrhlt	r3, [r4, #12]
 80098d4:	181b      	addge	r3, r3, r0
 80098d6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80098da:	bfac      	ite	ge
 80098dc:	6563      	strge	r3, [r4, #84]	@ 0x54
 80098de:	81a3      	strhlt	r3, [r4, #12]
 80098e0:	bd10      	pop	{r4, pc}

080098e2 <__swrite>:
 80098e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80098e6:	461f      	mov	r7, r3
 80098e8:	898b      	ldrh	r3, [r1, #12]
 80098ea:	05db      	lsls	r3, r3, #23
 80098ec:	4605      	mov	r5, r0
 80098ee:	460c      	mov	r4, r1
 80098f0:	4616      	mov	r6, r2
 80098f2:	d505      	bpl.n	8009900 <__swrite+0x1e>
 80098f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80098f8:	2302      	movs	r3, #2
 80098fa:	2200      	movs	r2, #0
 80098fc:	f000 f926 	bl	8009b4c <_lseek_r>
 8009900:	89a3      	ldrh	r3, [r4, #12]
 8009902:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009906:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800990a:	81a3      	strh	r3, [r4, #12]
 800990c:	4632      	mov	r2, r6
 800990e:	463b      	mov	r3, r7
 8009910:	4628      	mov	r0, r5
 8009912:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009916:	f000 b93d 	b.w	8009b94 <_write_r>

0800991a <__sseek>:
 800991a:	b510      	push	{r4, lr}
 800991c:	460c      	mov	r4, r1
 800991e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009922:	f000 f913 	bl	8009b4c <_lseek_r>
 8009926:	1c43      	adds	r3, r0, #1
 8009928:	89a3      	ldrh	r3, [r4, #12]
 800992a:	bf15      	itete	ne
 800992c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800992e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8009932:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8009936:	81a3      	strheq	r3, [r4, #12]
 8009938:	bf18      	it	ne
 800993a:	81a3      	strhne	r3, [r4, #12]
 800993c:	bd10      	pop	{r4, pc}

0800993e <__sclose>:
 800993e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009942:	f000 b89d 	b.w	8009a80 <_close_r>

08009946 <__swbuf_r>:
 8009946:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009948:	460e      	mov	r6, r1
 800994a:	4614      	mov	r4, r2
 800994c:	4605      	mov	r5, r0
 800994e:	b118      	cbz	r0, 8009958 <__swbuf_r+0x12>
 8009950:	6a03      	ldr	r3, [r0, #32]
 8009952:	b90b      	cbnz	r3, 8009958 <__swbuf_r+0x12>
 8009954:	f7ff ff0e 	bl	8009774 <__sinit>
 8009958:	69a3      	ldr	r3, [r4, #24]
 800995a:	60a3      	str	r3, [r4, #8]
 800995c:	89a3      	ldrh	r3, [r4, #12]
 800995e:	071a      	lsls	r2, r3, #28
 8009960:	d501      	bpl.n	8009966 <__swbuf_r+0x20>
 8009962:	6923      	ldr	r3, [r4, #16]
 8009964:	b943      	cbnz	r3, 8009978 <__swbuf_r+0x32>
 8009966:	4621      	mov	r1, r4
 8009968:	4628      	mov	r0, r5
 800996a:	f000 f82b 	bl	80099c4 <__swsetup_r>
 800996e:	b118      	cbz	r0, 8009978 <__swbuf_r+0x32>
 8009970:	f04f 37ff 	mov.w	r7, #4294967295
 8009974:	4638      	mov	r0, r7
 8009976:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009978:	6823      	ldr	r3, [r4, #0]
 800997a:	6922      	ldr	r2, [r4, #16]
 800997c:	1a98      	subs	r0, r3, r2
 800997e:	6963      	ldr	r3, [r4, #20]
 8009980:	b2f6      	uxtb	r6, r6
 8009982:	4283      	cmp	r3, r0
 8009984:	4637      	mov	r7, r6
 8009986:	dc05      	bgt.n	8009994 <__swbuf_r+0x4e>
 8009988:	4621      	mov	r1, r4
 800998a:	4628      	mov	r0, r5
 800998c:	f000 fd9c 	bl	800a4c8 <_fflush_r>
 8009990:	2800      	cmp	r0, #0
 8009992:	d1ed      	bne.n	8009970 <__swbuf_r+0x2a>
 8009994:	68a3      	ldr	r3, [r4, #8]
 8009996:	3b01      	subs	r3, #1
 8009998:	60a3      	str	r3, [r4, #8]
 800999a:	6823      	ldr	r3, [r4, #0]
 800999c:	1c5a      	adds	r2, r3, #1
 800999e:	6022      	str	r2, [r4, #0]
 80099a0:	701e      	strb	r6, [r3, #0]
 80099a2:	6962      	ldr	r2, [r4, #20]
 80099a4:	1c43      	adds	r3, r0, #1
 80099a6:	429a      	cmp	r2, r3
 80099a8:	d004      	beq.n	80099b4 <__swbuf_r+0x6e>
 80099aa:	89a3      	ldrh	r3, [r4, #12]
 80099ac:	07db      	lsls	r3, r3, #31
 80099ae:	d5e1      	bpl.n	8009974 <__swbuf_r+0x2e>
 80099b0:	2e0a      	cmp	r6, #10
 80099b2:	d1df      	bne.n	8009974 <__swbuf_r+0x2e>
 80099b4:	4621      	mov	r1, r4
 80099b6:	4628      	mov	r0, r5
 80099b8:	f000 fd86 	bl	800a4c8 <_fflush_r>
 80099bc:	2800      	cmp	r0, #0
 80099be:	d0d9      	beq.n	8009974 <__swbuf_r+0x2e>
 80099c0:	e7d6      	b.n	8009970 <__swbuf_r+0x2a>
	...

080099c4 <__swsetup_r>:
 80099c4:	b538      	push	{r3, r4, r5, lr}
 80099c6:	4b29      	ldr	r3, [pc, #164]	@ (8009a6c <__swsetup_r+0xa8>)
 80099c8:	4605      	mov	r5, r0
 80099ca:	6818      	ldr	r0, [r3, #0]
 80099cc:	460c      	mov	r4, r1
 80099ce:	b118      	cbz	r0, 80099d8 <__swsetup_r+0x14>
 80099d0:	6a03      	ldr	r3, [r0, #32]
 80099d2:	b90b      	cbnz	r3, 80099d8 <__swsetup_r+0x14>
 80099d4:	f7ff fece 	bl	8009774 <__sinit>
 80099d8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80099dc:	0719      	lsls	r1, r3, #28
 80099de:	d422      	bmi.n	8009a26 <__swsetup_r+0x62>
 80099e0:	06da      	lsls	r2, r3, #27
 80099e2:	d407      	bmi.n	80099f4 <__swsetup_r+0x30>
 80099e4:	2209      	movs	r2, #9
 80099e6:	602a      	str	r2, [r5, #0]
 80099e8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80099ec:	81a3      	strh	r3, [r4, #12]
 80099ee:	f04f 30ff 	mov.w	r0, #4294967295
 80099f2:	e033      	b.n	8009a5c <__swsetup_r+0x98>
 80099f4:	0758      	lsls	r0, r3, #29
 80099f6:	d512      	bpl.n	8009a1e <__swsetup_r+0x5a>
 80099f8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80099fa:	b141      	cbz	r1, 8009a0e <__swsetup_r+0x4a>
 80099fc:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009a00:	4299      	cmp	r1, r3
 8009a02:	d002      	beq.n	8009a0a <__swsetup_r+0x46>
 8009a04:	4628      	mov	r0, r5
 8009a06:	f000 f913 	bl	8009c30 <_free_r>
 8009a0a:	2300      	movs	r3, #0
 8009a0c:	6363      	str	r3, [r4, #52]	@ 0x34
 8009a0e:	89a3      	ldrh	r3, [r4, #12]
 8009a10:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8009a14:	81a3      	strh	r3, [r4, #12]
 8009a16:	2300      	movs	r3, #0
 8009a18:	6063      	str	r3, [r4, #4]
 8009a1a:	6923      	ldr	r3, [r4, #16]
 8009a1c:	6023      	str	r3, [r4, #0]
 8009a1e:	89a3      	ldrh	r3, [r4, #12]
 8009a20:	f043 0308 	orr.w	r3, r3, #8
 8009a24:	81a3      	strh	r3, [r4, #12]
 8009a26:	6923      	ldr	r3, [r4, #16]
 8009a28:	b94b      	cbnz	r3, 8009a3e <__swsetup_r+0x7a>
 8009a2a:	89a3      	ldrh	r3, [r4, #12]
 8009a2c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8009a30:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009a34:	d003      	beq.n	8009a3e <__swsetup_r+0x7a>
 8009a36:	4621      	mov	r1, r4
 8009a38:	4628      	mov	r0, r5
 8009a3a:	f000 fd93 	bl	800a564 <__smakebuf_r>
 8009a3e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009a42:	f013 0201 	ands.w	r2, r3, #1
 8009a46:	d00a      	beq.n	8009a5e <__swsetup_r+0x9a>
 8009a48:	2200      	movs	r2, #0
 8009a4a:	60a2      	str	r2, [r4, #8]
 8009a4c:	6962      	ldr	r2, [r4, #20]
 8009a4e:	4252      	negs	r2, r2
 8009a50:	61a2      	str	r2, [r4, #24]
 8009a52:	6922      	ldr	r2, [r4, #16]
 8009a54:	b942      	cbnz	r2, 8009a68 <__swsetup_r+0xa4>
 8009a56:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8009a5a:	d1c5      	bne.n	80099e8 <__swsetup_r+0x24>
 8009a5c:	bd38      	pop	{r3, r4, r5, pc}
 8009a5e:	0799      	lsls	r1, r3, #30
 8009a60:	bf58      	it	pl
 8009a62:	6962      	ldrpl	r2, [r4, #20]
 8009a64:	60a2      	str	r2, [r4, #8]
 8009a66:	e7f4      	b.n	8009a52 <__swsetup_r+0x8e>
 8009a68:	2000      	movs	r0, #0
 8009a6a:	e7f7      	b.n	8009a5c <__swsetup_r+0x98>
 8009a6c:	2000001c 	.word	0x2000001c

08009a70 <memset>:
 8009a70:	4402      	add	r2, r0
 8009a72:	4603      	mov	r3, r0
 8009a74:	4293      	cmp	r3, r2
 8009a76:	d100      	bne.n	8009a7a <memset+0xa>
 8009a78:	4770      	bx	lr
 8009a7a:	f803 1b01 	strb.w	r1, [r3], #1
 8009a7e:	e7f9      	b.n	8009a74 <memset+0x4>

08009a80 <_close_r>:
 8009a80:	b538      	push	{r3, r4, r5, lr}
 8009a82:	4d06      	ldr	r5, [pc, #24]	@ (8009a9c <_close_r+0x1c>)
 8009a84:	2300      	movs	r3, #0
 8009a86:	4604      	mov	r4, r0
 8009a88:	4608      	mov	r0, r1
 8009a8a:	602b      	str	r3, [r5, #0]
 8009a8c:	f7f7 fca1 	bl	80013d2 <_close>
 8009a90:	1c43      	adds	r3, r0, #1
 8009a92:	d102      	bne.n	8009a9a <_close_r+0x1a>
 8009a94:	682b      	ldr	r3, [r5, #0]
 8009a96:	b103      	cbz	r3, 8009a9a <_close_r+0x1a>
 8009a98:	6023      	str	r3, [r4, #0]
 8009a9a:	bd38      	pop	{r3, r4, r5, pc}
 8009a9c:	20005450 	.word	0x20005450

08009aa0 <_reclaim_reent>:
 8009aa0:	4b29      	ldr	r3, [pc, #164]	@ (8009b48 <_reclaim_reent+0xa8>)
 8009aa2:	681b      	ldr	r3, [r3, #0]
 8009aa4:	4283      	cmp	r3, r0
 8009aa6:	b570      	push	{r4, r5, r6, lr}
 8009aa8:	4604      	mov	r4, r0
 8009aaa:	d04b      	beq.n	8009b44 <_reclaim_reent+0xa4>
 8009aac:	69c3      	ldr	r3, [r0, #28]
 8009aae:	b1ab      	cbz	r3, 8009adc <_reclaim_reent+0x3c>
 8009ab0:	68db      	ldr	r3, [r3, #12]
 8009ab2:	b16b      	cbz	r3, 8009ad0 <_reclaim_reent+0x30>
 8009ab4:	2500      	movs	r5, #0
 8009ab6:	69e3      	ldr	r3, [r4, #28]
 8009ab8:	68db      	ldr	r3, [r3, #12]
 8009aba:	5959      	ldr	r1, [r3, r5]
 8009abc:	2900      	cmp	r1, #0
 8009abe:	d13b      	bne.n	8009b38 <_reclaim_reent+0x98>
 8009ac0:	3504      	adds	r5, #4
 8009ac2:	2d80      	cmp	r5, #128	@ 0x80
 8009ac4:	d1f7      	bne.n	8009ab6 <_reclaim_reent+0x16>
 8009ac6:	69e3      	ldr	r3, [r4, #28]
 8009ac8:	4620      	mov	r0, r4
 8009aca:	68d9      	ldr	r1, [r3, #12]
 8009acc:	f000 f8b0 	bl	8009c30 <_free_r>
 8009ad0:	69e3      	ldr	r3, [r4, #28]
 8009ad2:	6819      	ldr	r1, [r3, #0]
 8009ad4:	b111      	cbz	r1, 8009adc <_reclaim_reent+0x3c>
 8009ad6:	4620      	mov	r0, r4
 8009ad8:	f000 f8aa 	bl	8009c30 <_free_r>
 8009adc:	6961      	ldr	r1, [r4, #20]
 8009ade:	b111      	cbz	r1, 8009ae6 <_reclaim_reent+0x46>
 8009ae0:	4620      	mov	r0, r4
 8009ae2:	f000 f8a5 	bl	8009c30 <_free_r>
 8009ae6:	69e1      	ldr	r1, [r4, #28]
 8009ae8:	b111      	cbz	r1, 8009af0 <_reclaim_reent+0x50>
 8009aea:	4620      	mov	r0, r4
 8009aec:	f000 f8a0 	bl	8009c30 <_free_r>
 8009af0:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8009af2:	b111      	cbz	r1, 8009afa <_reclaim_reent+0x5a>
 8009af4:	4620      	mov	r0, r4
 8009af6:	f000 f89b 	bl	8009c30 <_free_r>
 8009afa:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009afc:	b111      	cbz	r1, 8009b04 <_reclaim_reent+0x64>
 8009afe:	4620      	mov	r0, r4
 8009b00:	f000 f896 	bl	8009c30 <_free_r>
 8009b04:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8009b06:	b111      	cbz	r1, 8009b0e <_reclaim_reent+0x6e>
 8009b08:	4620      	mov	r0, r4
 8009b0a:	f000 f891 	bl	8009c30 <_free_r>
 8009b0e:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8009b10:	b111      	cbz	r1, 8009b18 <_reclaim_reent+0x78>
 8009b12:	4620      	mov	r0, r4
 8009b14:	f000 f88c 	bl	8009c30 <_free_r>
 8009b18:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8009b1a:	b111      	cbz	r1, 8009b22 <_reclaim_reent+0x82>
 8009b1c:	4620      	mov	r0, r4
 8009b1e:	f000 f887 	bl	8009c30 <_free_r>
 8009b22:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8009b24:	b111      	cbz	r1, 8009b2c <_reclaim_reent+0x8c>
 8009b26:	4620      	mov	r0, r4
 8009b28:	f000 f882 	bl	8009c30 <_free_r>
 8009b2c:	6a23      	ldr	r3, [r4, #32]
 8009b2e:	b14b      	cbz	r3, 8009b44 <_reclaim_reent+0xa4>
 8009b30:	4620      	mov	r0, r4
 8009b32:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8009b36:	4718      	bx	r3
 8009b38:	680e      	ldr	r6, [r1, #0]
 8009b3a:	4620      	mov	r0, r4
 8009b3c:	f000 f878 	bl	8009c30 <_free_r>
 8009b40:	4631      	mov	r1, r6
 8009b42:	e7bb      	b.n	8009abc <_reclaim_reent+0x1c>
 8009b44:	bd70      	pop	{r4, r5, r6, pc}
 8009b46:	bf00      	nop
 8009b48:	2000001c 	.word	0x2000001c

08009b4c <_lseek_r>:
 8009b4c:	b538      	push	{r3, r4, r5, lr}
 8009b4e:	4d07      	ldr	r5, [pc, #28]	@ (8009b6c <_lseek_r+0x20>)
 8009b50:	4604      	mov	r4, r0
 8009b52:	4608      	mov	r0, r1
 8009b54:	4611      	mov	r1, r2
 8009b56:	2200      	movs	r2, #0
 8009b58:	602a      	str	r2, [r5, #0]
 8009b5a:	461a      	mov	r2, r3
 8009b5c:	f7f7 fc60 	bl	8001420 <_lseek>
 8009b60:	1c43      	adds	r3, r0, #1
 8009b62:	d102      	bne.n	8009b6a <_lseek_r+0x1e>
 8009b64:	682b      	ldr	r3, [r5, #0]
 8009b66:	b103      	cbz	r3, 8009b6a <_lseek_r+0x1e>
 8009b68:	6023      	str	r3, [r4, #0]
 8009b6a:	bd38      	pop	{r3, r4, r5, pc}
 8009b6c:	20005450 	.word	0x20005450

08009b70 <_read_r>:
 8009b70:	b538      	push	{r3, r4, r5, lr}
 8009b72:	4d07      	ldr	r5, [pc, #28]	@ (8009b90 <_read_r+0x20>)
 8009b74:	4604      	mov	r4, r0
 8009b76:	4608      	mov	r0, r1
 8009b78:	4611      	mov	r1, r2
 8009b7a:	2200      	movs	r2, #0
 8009b7c:	602a      	str	r2, [r5, #0]
 8009b7e:	461a      	mov	r2, r3
 8009b80:	f7f7 fbee 	bl	8001360 <_read>
 8009b84:	1c43      	adds	r3, r0, #1
 8009b86:	d102      	bne.n	8009b8e <_read_r+0x1e>
 8009b88:	682b      	ldr	r3, [r5, #0]
 8009b8a:	b103      	cbz	r3, 8009b8e <_read_r+0x1e>
 8009b8c:	6023      	str	r3, [r4, #0]
 8009b8e:	bd38      	pop	{r3, r4, r5, pc}
 8009b90:	20005450 	.word	0x20005450

08009b94 <_write_r>:
 8009b94:	b538      	push	{r3, r4, r5, lr}
 8009b96:	4d07      	ldr	r5, [pc, #28]	@ (8009bb4 <_write_r+0x20>)
 8009b98:	4604      	mov	r4, r0
 8009b9a:	4608      	mov	r0, r1
 8009b9c:	4611      	mov	r1, r2
 8009b9e:	2200      	movs	r2, #0
 8009ba0:	602a      	str	r2, [r5, #0]
 8009ba2:	461a      	mov	r2, r3
 8009ba4:	f7f7 fbf9 	bl	800139a <_write>
 8009ba8:	1c43      	adds	r3, r0, #1
 8009baa:	d102      	bne.n	8009bb2 <_write_r+0x1e>
 8009bac:	682b      	ldr	r3, [r5, #0]
 8009bae:	b103      	cbz	r3, 8009bb2 <_write_r+0x1e>
 8009bb0:	6023      	str	r3, [r4, #0]
 8009bb2:	bd38      	pop	{r3, r4, r5, pc}
 8009bb4:	20005450 	.word	0x20005450

08009bb8 <__errno>:
 8009bb8:	4b01      	ldr	r3, [pc, #4]	@ (8009bc0 <__errno+0x8>)
 8009bba:	6818      	ldr	r0, [r3, #0]
 8009bbc:	4770      	bx	lr
 8009bbe:	bf00      	nop
 8009bc0:	2000001c 	.word	0x2000001c

08009bc4 <__libc_init_array>:
 8009bc4:	b570      	push	{r4, r5, r6, lr}
 8009bc6:	4d0d      	ldr	r5, [pc, #52]	@ (8009bfc <__libc_init_array+0x38>)
 8009bc8:	4c0d      	ldr	r4, [pc, #52]	@ (8009c00 <__libc_init_array+0x3c>)
 8009bca:	1b64      	subs	r4, r4, r5
 8009bcc:	10a4      	asrs	r4, r4, #2
 8009bce:	2600      	movs	r6, #0
 8009bd0:	42a6      	cmp	r6, r4
 8009bd2:	d109      	bne.n	8009be8 <__libc_init_array+0x24>
 8009bd4:	4d0b      	ldr	r5, [pc, #44]	@ (8009c04 <__libc_init_array+0x40>)
 8009bd6:	4c0c      	ldr	r4, [pc, #48]	@ (8009c08 <__libc_init_array+0x44>)
 8009bd8:	f000 fd32 	bl	800a640 <_init>
 8009bdc:	1b64      	subs	r4, r4, r5
 8009bde:	10a4      	asrs	r4, r4, #2
 8009be0:	2600      	movs	r6, #0
 8009be2:	42a6      	cmp	r6, r4
 8009be4:	d105      	bne.n	8009bf2 <__libc_init_array+0x2e>
 8009be6:	bd70      	pop	{r4, r5, r6, pc}
 8009be8:	f855 3b04 	ldr.w	r3, [r5], #4
 8009bec:	4798      	blx	r3
 8009bee:	3601      	adds	r6, #1
 8009bf0:	e7ee      	b.n	8009bd0 <__libc_init_array+0xc>
 8009bf2:	f855 3b04 	ldr.w	r3, [r5], #4
 8009bf6:	4798      	blx	r3
 8009bf8:	3601      	adds	r6, #1
 8009bfa:	e7f2      	b.n	8009be2 <__libc_init_array+0x1e>
 8009bfc:	0800a7b0 	.word	0x0800a7b0
 8009c00:	0800a7b0 	.word	0x0800a7b0
 8009c04:	0800a7b0 	.word	0x0800a7b0
 8009c08:	0800a7b4 	.word	0x0800a7b4

08009c0c <__retarget_lock_init_recursive>:
 8009c0c:	4770      	bx	lr

08009c0e <__retarget_lock_acquire_recursive>:
 8009c0e:	4770      	bx	lr

08009c10 <__retarget_lock_release_recursive>:
 8009c10:	4770      	bx	lr

08009c12 <memcpy>:
 8009c12:	440a      	add	r2, r1
 8009c14:	4291      	cmp	r1, r2
 8009c16:	f100 33ff 	add.w	r3, r0, #4294967295
 8009c1a:	d100      	bne.n	8009c1e <memcpy+0xc>
 8009c1c:	4770      	bx	lr
 8009c1e:	b510      	push	{r4, lr}
 8009c20:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009c24:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009c28:	4291      	cmp	r1, r2
 8009c2a:	d1f9      	bne.n	8009c20 <memcpy+0xe>
 8009c2c:	bd10      	pop	{r4, pc}
	...

08009c30 <_free_r>:
 8009c30:	b538      	push	{r3, r4, r5, lr}
 8009c32:	4605      	mov	r5, r0
 8009c34:	2900      	cmp	r1, #0
 8009c36:	d041      	beq.n	8009cbc <_free_r+0x8c>
 8009c38:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009c3c:	1f0c      	subs	r4, r1, #4
 8009c3e:	2b00      	cmp	r3, #0
 8009c40:	bfb8      	it	lt
 8009c42:	18e4      	addlt	r4, r4, r3
 8009c44:	f000 f8e0 	bl	8009e08 <__malloc_lock>
 8009c48:	4a1d      	ldr	r2, [pc, #116]	@ (8009cc0 <_free_r+0x90>)
 8009c4a:	6813      	ldr	r3, [r2, #0]
 8009c4c:	b933      	cbnz	r3, 8009c5c <_free_r+0x2c>
 8009c4e:	6063      	str	r3, [r4, #4]
 8009c50:	6014      	str	r4, [r2, #0]
 8009c52:	4628      	mov	r0, r5
 8009c54:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009c58:	f000 b8dc 	b.w	8009e14 <__malloc_unlock>
 8009c5c:	42a3      	cmp	r3, r4
 8009c5e:	d908      	bls.n	8009c72 <_free_r+0x42>
 8009c60:	6820      	ldr	r0, [r4, #0]
 8009c62:	1821      	adds	r1, r4, r0
 8009c64:	428b      	cmp	r3, r1
 8009c66:	bf01      	itttt	eq
 8009c68:	6819      	ldreq	r1, [r3, #0]
 8009c6a:	685b      	ldreq	r3, [r3, #4]
 8009c6c:	1809      	addeq	r1, r1, r0
 8009c6e:	6021      	streq	r1, [r4, #0]
 8009c70:	e7ed      	b.n	8009c4e <_free_r+0x1e>
 8009c72:	461a      	mov	r2, r3
 8009c74:	685b      	ldr	r3, [r3, #4]
 8009c76:	b10b      	cbz	r3, 8009c7c <_free_r+0x4c>
 8009c78:	42a3      	cmp	r3, r4
 8009c7a:	d9fa      	bls.n	8009c72 <_free_r+0x42>
 8009c7c:	6811      	ldr	r1, [r2, #0]
 8009c7e:	1850      	adds	r0, r2, r1
 8009c80:	42a0      	cmp	r0, r4
 8009c82:	d10b      	bne.n	8009c9c <_free_r+0x6c>
 8009c84:	6820      	ldr	r0, [r4, #0]
 8009c86:	4401      	add	r1, r0
 8009c88:	1850      	adds	r0, r2, r1
 8009c8a:	4283      	cmp	r3, r0
 8009c8c:	6011      	str	r1, [r2, #0]
 8009c8e:	d1e0      	bne.n	8009c52 <_free_r+0x22>
 8009c90:	6818      	ldr	r0, [r3, #0]
 8009c92:	685b      	ldr	r3, [r3, #4]
 8009c94:	6053      	str	r3, [r2, #4]
 8009c96:	4408      	add	r0, r1
 8009c98:	6010      	str	r0, [r2, #0]
 8009c9a:	e7da      	b.n	8009c52 <_free_r+0x22>
 8009c9c:	d902      	bls.n	8009ca4 <_free_r+0x74>
 8009c9e:	230c      	movs	r3, #12
 8009ca0:	602b      	str	r3, [r5, #0]
 8009ca2:	e7d6      	b.n	8009c52 <_free_r+0x22>
 8009ca4:	6820      	ldr	r0, [r4, #0]
 8009ca6:	1821      	adds	r1, r4, r0
 8009ca8:	428b      	cmp	r3, r1
 8009caa:	bf04      	itt	eq
 8009cac:	6819      	ldreq	r1, [r3, #0]
 8009cae:	685b      	ldreq	r3, [r3, #4]
 8009cb0:	6063      	str	r3, [r4, #4]
 8009cb2:	bf04      	itt	eq
 8009cb4:	1809      	addeq	r1, r1, r0
 8009cb6:	6021      	streq	r1, [r4, #0]
 8009cb8:	6054      	str	r4, [r2, #4]
 8009cba:	e7ca      	b.n	8009c52 <_free_r+0x22>
 8009cbc:	bd38      	pop	{r3, r4, r5, pc}
 8009cbe:	bf00      	nop
 8009cc0:	2000545c 	.word	0x2000545c

08009cc4 <sbrk_aligned>:
 8009cc4:	b570      	push	{r4, r5, r6, lr}
 8009cc6:	4e0f      	ldr	r6, [pc, #60]	@ (8009d04 <sbrk_aligned+0x40>)
 8009cc8:	460c      	mov	r4, r1
 8009cca:	6831      	ldr	r1, [r6, #0]
 8009ccc:	4605      	mov	r5, r0
 8009cce:	b911      	cbnz	r1, 8009cd6 <sbrk_aligned+0x12>
 8009cd0:	f000 fca6 	bl	800a620 <_sbrk_r>
 8009cd4:	6030      	str	r0, [r6, #0]
 8009cd6:	4621      	mov	r1, r4
 8009cd8:	4628      	mov	r0, r5
 8009cda:	f000 fca1 	bl	800a620 <_sbrk_r>
 8009cde:	1c43      	adds	r3, r0, #1
 8009ce0:	d103      	bne.n	8009cea <sbrk_aligned+0x26>
 8009ce2:	f04f 34ff 	mov.w	r4, #4294967295
 8009ce6:	4620      	mov	r0, r4
 8009ce8:	bd70      	pop	{r4, r5, r6, pc}
 8009cea:	1cc4      	adds	r4, r0, #3
 8009cec:	f024 0403 	bic.w	r4, r4, #3
 8009cf0:	42a0      	cmp	r0, r4
 8009cf2:	d0f8      	beq.n	8009ce6 <sbrk_aligned+0x22>
 8009cf4:	1a21      	subs	r1, r4, r0
 8009cf6:	4628      	mov	r0, r5
 8009cf8:	f000 fc92 	bl	800a620 <_sbrk_r>
 8009cfc:	3001      	adds	r0, #1
 8009cfe:	d1f2      	bne.n	8009ce6 <sbrk_aligned+0x22>
 8009d00:	e7ef      	b.n	8009ce2 <sbrk_aligned+0x1e>
 8009d02:	bf00      	nop
 8009d04:	20005458 	.word	0x20005458

08009d08 <_malloc_r>:
 8009d08:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009d0c:	1ccd      	adds	r5, r1, #3
 8009d0e:	f025 0503 	bic.w	r5, r5, #3
 8009d12:	3508      	adds	r5, #8
 8009d14:	2d0c      	cmp	r5, #12
 8009d16:	bf38      	it	cc
 8009d18:	250c      	movcc	r5, #12
 8009d1a:	2d00      	cmp	r5, #0
 8009d1c:	4606      	mov	r6, r0
 8009d1e:	db01      	blt.n	8009d24 <_malloc_r+0x1c>
 8009d20:	42a9      	cmp	r1, r5
 8009d22:	d904      	bls.n	8009d2e <_malloc_r+0x26>
 8009d24:	230c      	movs	r3, #12
 8009d26:	6033      	str	r3, [r6, #0]
 8009d28:	2000      	movs	r0, #0
 8009d2a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009d2e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8009e04 <_malloc_r+0xfc>
 8009d32:	f000 f869 	bl	8009e08 <__malloc_lock>
 8009d36:	f8d8 3000 	ldr.w	r3, [r8]
 8009d3a:	461c      	mov	r4, r3
 8009d3c:	bb44      	cbnz	r4, 8009d90 <_malloc_r+0x88>
 8009d3e:	4629      	mov	r1, r5
 8009d40:	4630      	mov	r0, r6
 8009d42:	f7ff ffbf 	bl	8009cc4 <sbrk_aligned>
 8009d46:	1c43      	adds	r3, r0, #1
 8009d48:	4604      	mov	r4, r0
 8009d4a:	d158      	bne.n	8009dfe <_malloc_r+0xf6>
 8009d4c:	f8d8 4000 	ldr.w	r4, [r8]
 8009d50:	4627      	mov	r7, r4
 8009d52:	2f00      	cmp	r7, #0
 8009d54:	d143      	bne.n	8009dde <_malloc_r+0xd6>
 8009d56:	2c00      	cmp	r4, #0
 8009d58:	d04b      	beq.n	8009df2 <_malloc_r+0xea>
 8009d5a:	6823      	ldr	r3, [r4, #0]
 8009d5c:	4639      	mov	r1, r7
 8009d5e:	4630      	mov	r0, r6
 8009d60:	eb04 0903 	add.w	r9, r4, r3
 8009d64:	f000 fc5c 	bl	800a620 <_sbrk_r>
 8009d68:	4581      	cmp	r9, r0
 8009d6a:	d142      	bne.n	8009df2 <_malloc_r+0xea>
 8009d6c:	6821      	ldr	r1, [r4, #0]
 8009d6e:	1a6d      	subs	r5, r5, r1
 8009d70:	4629      	mov	r1, r5
 8009d72:	4630      	mov	r0, r6
 8009d74:	f7ff ffa6 	bl	8009cc4 <sbrk_aligned>
 8009d78:	3001      	adds	r0, #1
 8009d7a:	d03a      	beq.n	8009df2 <_malloc_r+0xea>
 8009d7c:	6823      	ldr	r3, [r4, #0]
 8009d7e:	442b      	add	r3, r5
 8009d80:	6023      	str	r3, [r4, #0]
 8009d82:	f8d8 3000 	ldr.w	r3, [r8]
 8009d86:	685a      	ldr	r2, [r3, #4]
 8009d88:	bb62      	cbnz	r2, 8009de4 <_malloc_r+0xdc>
 8009d8a:	f8c8 7000 	str.w	r7, [r8]
 8009d8e:	e00f      	b.n	8009db0 <_malloc_r+0xa8>
 8009d90:	6822      	ldr	r2, [r4, #0]
 8009d92:	1b52      	subs	r2, r2, r5
 8009d94:	d420      	bmi.n	8009dd8 <_malloc_r+0xd0>
 8009d96:	2a0b      	cmp	r2, #11
 8009d98:	d917      	bls.n	8009dca <_malloc_r+0xc2>
 8009d9a:	1961      	adds	r1, r4, r5
 8009d9c:	42a3      	cmp	r3, r4
 8009d9e:	6025      	str	r5, [r4, #0]
 8009da0:	bf18      	it	ne
 8009da2:	6059      	strne	r1, [r3, #4]
 8009da4:	6863      	ldr	r3, [r4, #4]
 8009da6:	bf08      	it	eq
 8009da8:	f8c8 1000 	streq.w	r1, [r8]
 8009dac:	5162      	str	r2, [r4, r5]
 8009dae:	604b      	str	r3, [r1, #4]
 8009db0:	4630      	mov	r0, r6
 8009db2:	f000 f82f 	bl	8009e14 <__malloc_unlock>
 8009db6:	f104 000b 	add.w	r0, r4, #11
 8009dba:	1d23      	adds	r3, r4, #4
 8009dbc:	f020 0007 	bic.w	r0, r0, #7
 8009dc0:	1ac2      	subs	r2, r0, r3
 8009dc2:	bf1c      	itt	ne
 8009dc4:	1a1b      	subne	r3, r3, r0
 8009dc6:	50a3      	strne	r3, [r4, r2]
 8009dc8:	e7af      	b.n	8009d2a <_malloc_r+0x22>
 8009dca:	6862      	ldr	r2, [r4, #4]
 8009dcc:	42a3      	cmp	r3, r4
 8009dce:	bf0c      	ite	eq
 8009dd0:	f8c8 2000 	streq.w	r2, [r8]
 8009dd4:	605a      	strne	r2, [r3, #4]
 8009dd6:	e7eb      	b.n	8009db0 <_malloc_r+0xa8>
 8009dd8:	4623      	mov	r3, r4
 8009dda:	6864      	ldr	r4, [r4, #4]
 8009ddc:	e7ae      	b.n	8009d3c <_malloc_r+0x34>
 8009dde:	463c      	mov	r4, r7
 8009de0:	687f      	ldr	r7, [r7, #4]
 8009de2:	e7b6      	b.n	8009d52 <_malloc_r+0x4a>
 8009de4:	461a      	mov	r2, r3
 8009de6:	685b      	ldr	r3, [r3, #4]
 8009de8:	42a3      	cmp	r3, r4
 8009dea:	d1fb      	bne.n	8009de4 <_malloc_r+0xdc>
 8009dec:	2300      	movs	r3, #0
 8009dee:	6053      	str	r3, [r2, #4]
 8009df0:	e7de      	b.n	8009db0 <_malloc_r+0xa8>
 8009df2:	230c      	movs	r3, #12
 8009df4:	6033      	str	r3, [r6, #0]
 8009df6:	4630      	mov	r0, r6
 8009df8:	f000 f80c 	bl	8009e14 <__malloc_unlock>
 8009dfc:	e794      	b.n	8009d28 <_malloc_r+0x20>
 8009dfe:	6005      	str	r5, [r0, #0]
 8009e00:	e7d6      	b.n	8009db0 <_malloc_r+0xa8>
 8009e02:	bf00      	nop
 8009e04:	2000545c 	.word	0x2000545c

08009e08 <__malloc_lock>:
 8009e08:	4801      	ldr	r0, [pc, #4]	@ (8009e10 <__malloc_lock+0x8>)
 8009e0a:	f7ff bf00 	b.w	8009c0e <__retarget_lock_acquire_recursive>
 8009e0e:	bf00      	nop
 8009e10:	20005454 	.word	0x20005454

08009e14 <__malloc_unlock>:
 8009e14:	4801      	ldr	r0, [pc, #4]	@ (8009e1c <__malloc_unlock+0x8>)
 8009e16:	f7ff befb 	b.w	8009c10 <__retarget_lock_release_recursive>
 8009e1a:	bf00      	nop
 8009e1c:	20005454 	.word	0x20005454

08009e20 <__sfputc_r>:
 8009e20:	6893      	ldr	r3, [r2, #8]
 8009e22:	3b01      	subs	r3, #1
 8009e24:	2b00      	cmp	r3, #0
 8009e26:	b410      	push	{r4}
 8009e28:	6093      	str	r3, [r2, #8]
 8009e2a:	da08      	bge.n	8009e3e <__sfputc_r+0x1e>
 8009e2c:	6994      	ldr	r4, [r2, #24]
 8009e2e:	42a3      	cmp	r3, r4
 8009e30:	db01      	blt.n	8009e36 <__sfputc_r+0x16>
 8009e32:	290a      	cmp	r1, #10
 8009e34:	d103      	bne.n	8009e3e <__sfputc_r+0x1e>
 8009e36:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009e3a:	f7ff bd84 	b.w	8009946 <__swbuf_r>
 8009e3e:	6813      	ldr	r3, [r2, #0]
 8009e40:	1c58      	adds	r0, r3, #1
 8009e42:	6010      	str	r0, [r2, #0]
 8009e44:	7019      	strb	r1, [r3, #0]
 8009e46:	4608      	mov	r0, r1
 8009e48:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009e4c:	4770      	bx	lr

08009e4e <__sfputs_r>:
 8009e4e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e50:	4606      	mov	r6, r0
 8009e52:	460f      	mov	r7, r1
 8009e54:	4614      	mov	r4, r2
 8009e56:	18d5      	adds	r5, r2, r3
 8009e58:	42ac      	cmp	r4, r5
 8009e5a:	d101      	bne.n	8009e60 <__sfputs_r+0x12>
 8009e5c:	2000      	movs	r0, #0
 8009e5e:	e007      	b.n	8009e70 <__sfputs_r+0x22>
 8009e60:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009e64:	463a      	mov	r2, r7
 8009e66:	4630      	mov	r0, r6
 8009e68:	f7ff ffda 	bl	8009e20 <__sfputc_r>
 8009e6c:	1c43      	adds	r3, r0, #1
 8009e6e:	d1f3      	bne.n	8009e58 <__sfputs_r+0xa>
 8009e70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009e74 <_vfiprintf_r>:
 8009e74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e78:	460d      	mov	r5, r1
 8009e7a:	b09d      	sub	sp, #116	@ 0x74
 8009e7c:	4614      	mov	r4, r2
 8009e7e:	4698      	mov	r8, r3
 8009e80:	4606      	mov	r6, r0
 8009e82:	b118      	cbz	r0, 8009e8c <_vfiprintf_r+0x18>
 8009e84:	6a03      	ldr	r3, [r0, #32]
 8009e86:	b90b      	cbnz	r3, 8009e8c <_vfiprintf_r+0x18>
 8009e88:	f7ff fc74 	bl	8009774 <__sinit>
 8009e8c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009e8e:	07d9      	lsls	r1, r3, #31
 8009e90:	d405      	bmi.n	8009e9e <_vfiprintf_r+0x2a>
 8009e92:	89ab      	ldrh	r3, [r5, #12]
 8009e94:	059a      	lsls	r2, r3, #22
 8009e96:	d402      	bmi.n	8009e9e <_vfiprintf_r+0x2a>
 8009e98:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009e9a:	f7ff feb8 	bl	8009c0e <__retarget_lock_acquire_recursive>
 8009e9e:	89ab      	ldrh	r3, [r5, #12]
 8009ea0:	071b      	lsls	r3, r3, #28
 8009ea2:	d501      	bpl.n	8009ea8 <_vfiprintf_r+0x34>
 8009ea4:	692b      	ldr	r3, [r5, #16]
 8009ea6:	b99b      	cbnz	r3, 8009ed0 <_vfiprintf_r+0x5c>
 8009ea8:	4629      	mov	r1, r5
 8009eaa:	4630      	mov	r0, r6
 8009eac:	f7ff fd8a 	bl	80099c4 <__swsetup_r>
 8009eb0:	b170      	cbz	r0, 8009ed0 <_vfiprintf_r+0x5c>
 8009eb2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009eb4:	07dc      	lsls	r4, r3, #31
 8009eb6:	d504      	bpl.n	8009ec2 <_vfiprintf_r+0x4e>
 8009eb8:	f04f 30ff 	mov.w	r0, #4294967295
 8009ebc:	b01d      	add	sp, #116	@ 0x74
 8009ebe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009ec2:	89ab      	ldrh	r3, [r5, #12]
 8009ec4:	0598      	lsls	r0, r3, #22
 8009ec6:	d4f7      	bmi.n	8009eb8 <_vfiprintf_r+0x44>
 8009ec8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009eca:	f7ff fea1 	bl	8009c10 <__retarget_lock_release_recursive>
 8009ece:	e7f3      	b.n	8009eb8 <_vfiprintf_r+0x44>
 8009ed0:	2300      	movs	r3, #0
 8009ed2:	9309      	str	r3, [sp, #36]	@ 0x24
 8009ed4:	2320      	movs	r3, #32
 8009ed6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009eda:	f8cd 800c 	str.w	r8, [sp, #12]
 8009ede:	2330      	movs	r3, #48	@ 0x30
 8009ee0:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800a090 <_vfiprintf_r+0x21c>
 8009ee4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009ee8:	f04f 0901 	mov.w	r9, #1
 8009eec:	4623      	mov	r3, r4
 8009eee:	469a      	mov	sl, r3
 8009ef0:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009ef4:	b10a      	cbz	r2, 8009efa <_vfiprintf_r+0x86>
 8009ef6:	2a25      	cmp	r2, #37	@ 0x25
 8009ef8:	d1f9      	bne.n	8009eee <_vfiprintf_r+0x7a>
 8009efa:	ebba 0b04 	subs.w	fp, sl, r4
 8009efe:	d00b      	beq.n	8009f18 <_vfiprintf_r+0xa4>
 8009f00:	465b      	mov	r3, fp
 8009f02:	4622      	mov	r2, r4
 8009f04:	4629      	mov	r1, r5
 8009f06:	4630      	mov	r0, r6
 8009f08:	f7ff ffa1 	bl	8009e4e <__sfputs_r>
 8009f0c:	3001      	adds	r0, #1
 8009f0e:	f000 80a7 	beq.w	800a060 <_vfiprintf_r+0x1ec>
 8009f12:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009f14:	445a      	add	r2, fp
 8009f16:	9209      	str	r2, [sp, #36]	@ 0x24
 8009f18:	f89a 3000 	ldrb.w	r3, [sl]
 8009f1c:	2b00      	cmp	r3, #0
 8009f1e:	f000 809f 	beq.w	800a060 <_vfiprintf_r+0x1ec>
 8009f22:	2300      	movs	r3, #0
 8009f24:	f04f 32ff 	mov.w	r2, #4294967295
 8009f28:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009f2c:	f10a 0a01 	add.w	sl, sl, #1
 8009f30:	9304      	str	r3, [sp, #16]
 8009f32:	9307      	str	r3, [sp, #28]
 8009f34:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009f38:	931a      	str	r3, [sp, #104]	@ 0x68
 8009f3a:	4654      	mov	r4, sl
 8009f3c:	2205      	movs	r2, #5
 8009f3e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009f42:	4853      	ldr	r0, [pc, #332]	@ (800a090 <_vfiprintf_r+0x21c>)
 8009f44:	f7f6 f97c 	bl	8000240 <memchr>
 8009f48:	9a04      	ldr	r2, [sp, #16]
 8009f4a:	b9d8      	cbnz	r0, 8009f84 <_vfiprintf_r+0x110>
 8009f4c:	06d1      	lsls	r1, r2, #27
 8009f4e:	bf44      	itt	mi
 8009f50:	2320      	movmi	r3, #32
 8009f52:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009f56:	0713      	lsls	r3, r2, #28
 8009f58:	bf44      	itt	mi
 8009f5a:	232b      	movmi	r3, #43	@ 0x2b
 8009f5c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009f60:	f89a 3000 	ldrb.w	r3, [sl]
 8009f64:	2b2a      	cmp	r3, #42	@ 0x2a
 8009f66:	d015      	beq.n	8009f94 <_vfiprintf_r+0x120>
 8009f68:	9a07      	ldr	r2, [sp, #28]
 8009f6a:	4654      	mov	r4, sl
 8009f6c:	2000      	movs	r0, #0
 8009f6e:	f04f 0c0a 	mov.w	ip, #10
 8009f72:	4621      	mov	r1, r4
 8009f74:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009f78:	3b30      	subs	r3, #48	@ 0x30
 8009f7a:	2b09      	cmp	r3, #9
 8009f7c:	d94b      	bls.n	800a016 <_vfiprintf_r+0x1a2>
 8009f7e:	b1b0      	cbz	r0, 8009fae <_vfiprintf_r+0x13a>
 8009f80:	9207      	str	r2, [sp, #28]
 8009f82:	e014      	b.n	8009fae <_vfiprintf_r+0x13a>
 8009f84:	eba0 0308 	sub.w	r3, r0, r8
 8009f88:	fa09 f303 	lsl.w	r3, r9, r3
 8009f8c:	4313      	orrs	r3, r2
 8009f8e:	9304      	str	r3, [sp, #16]
 8009f90:	46a2      	mov	sl, r4
 8009f92:	e7d2      	b.n	8009f3a <_vfiprintf_r+0xc6>
 8009f94:	9b03      	ldr	r3, [sp, #12]
 8009f96:	1d19      	adds	r1, r3, #4
 8009f98:	681b      	ldr	r3, [r3, #0]
 8009f9a:	9103      	str	r1, [sp, #12]
 8009f9c:	2b00      	cmp	r3, #0
 8009f9e:	bfbb      	ittet	lt
 8009fa0:	425b      	neglt	r3, r3
 8009fa2:	f042 0202 	orrlt.w	r2, r2, #2
 8009fa6:	9307      	strge	r3, [sp, #28]
 8009fa8:	9307      	strlt	r3, [sp, #28]
 8009faa:	bfb8      	it	lt
 8009fac:	9204      	strlt	r2, [sp, #16]
 8009fae:	7823      	ldrb	r3, [r4, #0]
 8009fb0:	2b2e      	cmp	r3, #46	@ 0x2e
 8009fb2:	d10a      	bne.n	8009fca <_vfiprintf_r+0x156>
 8009fb4:	7863      	ldrb	r3, [r4, #1]
 8009fb6:	2b2a      	cmp	r3, #42	@ 0x2a
 8009fb8:	d132      	bne.n	800a020 <_vfiprintf_r+0x1ac>
 8009fba:	9b03      	ldr	r3, [sp, #12]
 8009fbc:	1d1a      	adds	r2, r3, #4
 8009fbe:	681b      	ldr	r3, [r3, #0]
 8009fc0:	9203      	str	r2, [sp, #12]
 8009fc2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009fc6:	3402      	adds	r4, #2
 8009fc8:	9305      	str	r3, [sp, #20]
 8009fca:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800a0a0 <_vfiprintf_r+0x22c>
 8009fce:	7821      	ldrb	r1, [r4, #0]
 8009fd0:	2203      	movs	r2, #3
 8009fd2:	4650      	mov	r0, sl
 8009fd4:	f7f6 f934 	bl	8000240 <memchr>
 8009fd8:	b138      	cbz	r0, 8009fea <_vfiprintf_r+0x176>
 8009fda:	9b04      	ldr	r3, [sp, #16]
 8009fdc:	eba0 000a 	sub.w	r0, r0, sl
 8009fe0:	2240      	movs	r2, #64	@ 0x40
 8009fe2:	4082      	lsls	r2, r0
 8009fe4:	4313      	orrs	r3, r2
 8009fe6:	3401      	adds	r4, #1
 8009fe8:	9304      	str	r3, [sp, #16]
 8009fea:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009fee:	4829      	ldr	r0, [pc, #164]	@ (800a094 <_vfiprintf_r+0x220>)
 8009ff0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009ff4:	2206      	movs	r2, #6
 8009ff6:	f7f6 f923 	bl	8000240 <memchr>
 8009ffa:	2800      	cmp	r0, #0
 8009ffc:	d03f      	beq.n	800a07e <_vfiprintf_r+0x20a>
 8009ffe:	4b26      	ldr	r3, [pc, #152]	@ (800a098 <_vfiprintf_r+0x224>)
 800a000:	bb1b      	cbnz	r3, 800a04a <_vfiprintf_r+0x1d6>
 800a002:	9b03      	ldr	r3, [sp, #12]
 800a004:	3307      	adds	r3, #7
 800a006:	f023 0307 	bic.w	r3, r3, #7
 800a00a:	3308      	adds	r3, #8
 800a00c:	9303      	str	r3, [sp, #12]
 800a00e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a010:	443b      	add	r3, r7
 800a012:	9309      	str	r3, [sp, #36]	@ 0x24
 800a014:	e76a      	b.n	8009eec <_vfiprintf_r+0x78>
 800a016:	fb0c 3202 	mla	r2, ip, r2, r3
 800a01a:	460c      	mov	r4, r1
 800a01c:	2001      	movs	r0, #1
 800a01e:	e7a8      	b.n	8009f72 <_vfiprintf_r+0xfe>
 800a020:	2300      	movs	r3, #0
 800a022:	3401      	adds	r4, #1
 800a024:	9305      	str	r3, [sp, #20]
 800a026:	4619      	mov	r1, r3
 800a028:	f04f 0c0a 	mov.w	ip, #10
 800a02c:	4620      	mov	r0, r4
 800a02e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a032:	3a30      	subs	r2, #48	@ 0x30
 800a034:	2a09      	cmp	r2, #9
 800a036:	d903      	bls.n	800a040 <_vfiprintf_r+0x1cc>
 800a038:	2b00      	cmp	r3, #0
 800a03a:	d0c6      	beq.n	8009fca <_vfiprintf_r+0x156>
 800a03c:	9105      	str	r1, [sp, #20]
 800a03e:	e7c4      	b.n	8009fca <_vfiprintf_r+0x156>
 800a040:	fb0c 2101 	mla	r1, ip, r1, r2
 800a044:	4604      	mov	r4, r0
 800a046:	2301      	movs	r3, #1
 800a048:	e7f0      	b.n	800a02c <_vfiprintf_r+0x1b8>
 800a04a:	ab03      	add	r3, sp, #12
 800a04c:	9300      	str	r3, [sp, #0]
 800a04e:	462a      	mov	r2, r5
 800a050:	4b12      	ldr	r3, [pc, #72]	@ (800a09c <_vfiprintf_r+0x228>)
 800a052:	a904      	add	r1, sp, #16
 800a054:	4630      	mov	r0, r6
 800a056:	f3af 8000 	nop.w
 800a05a:	4607      	mov	r7, r0
 800a05c:	1c78      	adds	r0, r7, #1
 800a05e:	d1d6      	bne.n	800a00e <_vfiprintf_r+0x19a>
 800a060:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a062:	07d9      	lsls	r1, r3, #31
 800a064:	d405      	bmi.n	800a072 <_vfiprintf_r+0x1fe>
 800a066:	89ab      	ldrh	r3, [r5, #12]
 800a068:	059a      	lsls	r2, r3, #22
 800a06a:	d402      	bmi.n	800a072 <_vfiprintf_r+0x1fe>
 800a06c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a06e:	f7ff fdcf 	bl	8009c10 <__retarget_lock_release_recursive>
 800a072:	89ab      	ldrh	r3, [r5, #12]
 800a074:	065b      	lsls	r3, r3, #25
 800a076:	f53f af1f 	bmi.w	8009eb8 <_vfiprintf_r+0x44>
 800a07a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a07c:	e71e      	b.n	8009ebc <_vfiprintf_r+0x48>
 800a07e:	ab03      	add	r3, sp, #12
 800a080:	9300      	str	r3, [sp, #0]
 800a082:	462a      	mov	r2, r5
 800a084:	4b05      	ldr	r3, [pc, #20]	@ (800a09c <_vfiprintf_r+0x228>)
 800a086:	a904      	add	r1, sp, #16
 800a088:	4630      	mov	r0, r6
 800a08a:	f000 f879 	bl	800a180 <_printf_i>
 800a08e:	e7e4      	b.n	800a05a <_vfiprintf_r+0x1e6>
 800a090:	0800a774 	.word	0x0800a774
 800a094:	0800a77e 	.word	0x0800a77e
 800a098:	00000000 	.word	0x00000000
 800a09c:	08009e4f 	.word	0x08009e4f
 800a0a0:	0800a77a 	.word	0x0800a77a

0800a0a4 <_printf_common>:
 800a0a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a0a8:	4616      	mov	r6, r2
 800a0aa:	4698      	mov	r8, r3
 800a0ac:	688a      	ldr	r2, [r1, #8]
 800a0ae:	690b      	ldr	r3, [r1, #16]
 800a0b0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800a0b4:	4293      	cmp	r3, r2
 800a0b6:	bfb8      	it	lt
 800a0b8:	4613      	movlt	r3, r2
 800a0ba:	6033      	str	r3, [r6, #0]
 800a0bc:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800a0c0:	4607      	mov	r7, r0
 800a0c2:	460c      	mov	r4, r1
 800a0c4:	b10a      	cbz	r2, 800a0ca <_printf_common+0x26>
 800a0c6:	3301      	adds	r3, #1
 800a0c8:	6033      	str	r3, [r6, #0]
 800a0ca:	6823      	ldr	r3, [r4, #0]
 800a0cc:	0699      	lsls	r1, r3, #26
 800a0ce:	bf42      	ittt	mi
 800a0d0:	6833      	ldrmi	r3, [r6, #0]
 800a0d2:	3302      	addmi	r3, #2
 800a0d4:	6033      	strmi	r3, [r6, #0]
 800a0d6:	6825      	ldr	r5, [r4, #0]
 800a0d8:	f015 0506 	ands.w	r5, r5, #6
 800a0dc:	d106      	bne.n	800a0ec <_printf_common+0x48>
 800a0de:	f104 0a19 	add.w	sl, r4, #25
 800a0e2:	68e3      	ldr	r3, [r4, #12]
 800a0e4:	6832      	ldr	r2, [r6, #0]
 800a0e6:	1a9b      	subs	r3, r3, r2
 800a0e8:	42ab      	cmp	r3, r5
 800a0ea:	dc26      	bgt.n	800a13a <_printf_common+0x96>
 800a0ec:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800a0f0:	6822      	ldr	r2, [r4, #0]
 800a0f2:	3b00      	subs	r3, #0
 800a0f4:	bf18      	it	ne
 800a0f6:	2301      	movne	r3, #1
 800a0f8:	0692      	lsls	r2, r2, #26
 800a0fa:	d42b      	bmi.n	800a154 <_printf_common+0xb0>
 800a0fc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800a100:	4641      	mov	r1, r8
 800a102:	4638      	mov	r0, r7
 800a104:	47c8      	blx	r9
 800a106:	3001      	adds	r0, #1
 800a108:	d01e      	beq.n	800a148 <_printf_common+0xa4>
 800a10a:	6823      	ldr	r3, [r4, #0]
 800a10c:	6922      	ldr	r2, [r4, #16]
 800a10e:	f003 0306 	and.w	r3, r3, #6
 800a112:	2b04      	cmp	r3, #4
 800a114:	bf02      	ittt	eq
 800a116:	68e5      	ldreq	r5, [r4, #12]
 800a118:	6833      	ldreq	r3, [r6, #0]
 800a11a:	1aed      	subeq	r5, r5, r3
 800a11c:	68a3      	ldr	r3, [r4, #8]
 800a11e:	bf0c      	ite	eq
 800a120:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a124:	2500      	movne	r5, #0
 800a126:	4293      	cmp	r3, r2
 800a128:	bfc4      	itt	gt
 800a12a:	1a9b      	subgt	r3, r3, r2
 800a12c:	18ed      	addgt	r5, r5, r3
 800a12e:	2600      	movs	r6, #0
 800a130:	341a      	adds	r4, #26
 800a132:	42b5      	cmp	r5, r6
 800a134:	d11a      	bne.n	800a16c <_printf_common+0xc8>
 800a136:	2000      	movs	r0, #0
 800a138:	e008      	b.n	800a14c <_printf_common+0xa8>
 800a13a:	2301      	movs	r3, #1
 800a13c:	4652      	mov	r2, sl
 800a13e:	4641      	mov	r1, r8
 800a140:	4638      	mov	r0, r7
 800a142:	47c8      	blx	r9
 800a144:	3001      	adds	r0, #1
 800a146:	d103      	bne.n	800a150 <_printf_common+0xac>
 800a148:	f04f 30ff 	mov.w	r0, #4294967295
 800a14c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a150:	3501      	adds	r5, #1
 800a152:	e7c6      	b.n	800a0e2 <_printf_common+0x3e>
 800a154:	18e1      	adds	r1, r4, r3
 800a156:	1c5a      	adds	r2, r3, #1
 800a158:	2030      	movs	r0, #48	@ 0x30
 800a15a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800a15e:	4422      	add	r2, r4
 800a160:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800a164:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800a168:	3302      	adds	r3, #2
 800a16a:	e7c7      	b.n	800a0fc <_printf_common+0x58>
 800a16c:	2301      	movs	r3, #1
 800a16e:	4622      	mov	r2, r4
 800a170:	4641      	mov	r1, r8
 800a172:	4638      	mov	r0, r7
 800a174:	47c8      	blx	r9
 800a176:	3001      	adds	r0, #1
 800a178:	d0e6      	beq.n	800a148 <_printf_common+0xa4>
 800a17a:	3601      	adds	r6, #1
 800a17c:	e7d9      	b.n	800a132 <_printf_common+0x8e>
	...

0800a180 <_printf_i>:
 800a180:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a184:	7e0f      	ldrb	r7, [r1, #24]
 800a186:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800a188:	2f78      	cmp	r7, #120	@ 0x78
 800a18a:	4691      	mov	r9, r2
 800a18c:	4680      	mov	r8, r0
 800a18e:	460c      	mov	r4, r1
 800a190:	469a      	mov	sl, r3
 800a192:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800a196:	d807      	bhi.n	800a1a8 <_printf_i+0x28>
 800a198:	2f62      	cmp	r7, #98	@ 0x62
 800a19a:	d80a      	bhi.n	800a1b2 <_printf_i+0x32>
 800a19c:	2f00      	cmp	r7, #0
 800a19e:	f000 80d2 	beq.w	800a346 <_printf_i+0x1c6>
 800a1a2:	2f58      	cmp	r7, #88	@ 0x58
 800a1a4:	f000 80b9 	beq.w	800a31a <_printf_i+0x19a>
 800a1a8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a1ac:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800a1b0:	e03a      	b.n	800a228 <_printf_i+0xa8>
 800a1b2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800a1b6:	2b15      	cmp	r3, #21
 800a1b8:	d8f6      	bhi.n	800a1a8 <_printf_i+0x28>
 800a1ba:	a101      	add	r1, pc, #4	@ (adr r1, 800a1c0 <_printf_i+0x40>)
 800a1bc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a1c0:	0800a219 	.word	0x0800a219
 800a1c4:	0800a22d 	.word	0x0800a22d
 800a1c8:	0800a1a9 	.word	0x0800a1a9
 800a1cc:	0800a1a9 	.word	0x0800a1a9
 800a1d0:	0800a1a9 	.word	0x0800a1a9
 800a1d4:	0800a1a9 	.word	0x0800a1a9
 800a1d8:	0800a22d 	.word	0x0800a22d
 800a1dc:	0800a1a9 	.word	0x0800a1a9
 800a1e0:	0800a1a9 	.word	0x0800a1a9
 800a1e4:	0800a1a9 	.word	0x0800a1a9
 800a1e8:	0800a1a9 	.word	0x0800a1a9
 800a1ec:	0800a32d 	.word	0x0800a32d
 800a1f0:	0800a257 	.word	0x0800a257
 800a1f4:	0800a2e7 	.word	0x0800a2e7
 800a1f8:	0800a1a9 	.word	0x0800a1a9
 800a1fc:	0800a1a9 	.word	0x0800a1a9
 800a200:	0800a34f 	.word	0x0800a34f
 800a204:	0800a1a9 	.word	0x0800a1a9
 800a208:	0800a257 	.word	0x0800a257
 800a20c:	0800a1a9 	.word	0x0800a1a9
 800a210:	0800a1a9 	.word	0x0800a1a9
 800a214:	0800a2ef 	.word	0x0800a2ef
 800a218:	6833      	ldr	r3, [r6, #0]
 800a21a:	1d1a      	adds	r2, r3, #4
 800a21c:	681b      	ldr	r3, [r3, #0]
 800a21e:	6032      	str	r2, [r6, #0]
 800a220:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a224:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800a228:	2301      	movs	r3, #1
 800a22a:	e09d      	b.n	800a368 <_printf_i+0x1e8>
 800a22c:	6833      	ldr	r3, [r6, #0]
 800a22e:	6820      	ldr	r0, [r4, #0]
 800a230:	1d19      	adds	r1, r3, #4
 800a232:	6031      	str	r1, [r6, #0]
 800a234:	0606      	lsls	r6, r0, #24
 800a236:	d501      	bpl.n	800a23c <_printf_i+0xbc>
 800a238:	681d      	ldr	r5, [r3, #0]
 800a23a:	e003      	b.n	800a244 <_printf_i+0xc4>
 800a23c:	0645      	lsls	r5, r0, #25
 800a23e:	d5fb      	bpl.n	800a238 <_printf_i+0xb8>
 800a240:	f9b3 5000 	ldrsh.w	r5, [r3]
 800a244:	2d00      	cmp	r5, #0
 800a246:	da03      	bge.n	800a250 <_printf_i+0xd0>
 800a248:	232d      	movs	r3, #45	@ 0x2d
 800a24a:	426d      	negs	r5, r5
 800a24c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a250:	4859      	ldr	r0, [pc, #356]	@ (800a3b8 <_printf_i+0x238>)
 800a252:	230a      	movs	r3, #10
 800a254:	e011      	b.n	800a27a <_printf_i+0xfa>
 800a256:	6821      	ldr	r1, [r4, #0]
 800a258:	6833      	ldr	r3, [r6, #0]
 800a25a:	0608      	lsls	r0, r1, #24
 800a25c:	f853 5b04 	ldr.w	r5, [r3], #4
 800a260:	d402      	bmi.n	800a268 <_printf_i+0xe8>
 800a262:	0649      	lsls	r1, r1, #25
 800a264:	bf48      	it	mi
 800a266:	b2ad      	uxthmi	r5, r5
 800a268:	2f6f      	cmp	r7, #111	@ 0x6f
 800a26a:	4853      	ldr	r0, [pc, #332]	@ (800a3b8 <_printf_i+0x238>)
 800a26c:	6033      	str	r3, [r6, #0]
 800a26e:	bf14      	ite	ne
 800a270:	230a      	movne	r3, #10
 800a272:	2308      	moveq	r3, #8
 800a274:	2100      	movs	r1, #0
 800a276:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800a27a:	6866      	ldr	r6, [r4, #4]
 800a27c:	60a6      	str	r6, [r4, #8]
 800a27e:	2e00      	cmp	r6, #0
 800a280:	bfa2      	ittt	ge
 800a282:	6821      	ldrge	r1, [r4, #0]
 800a284:	f021 0104 	bicge.w	r1, r1, #4
 800a288:	6021      	strge	r1, [r4, #0]
 800a28a:	b90d      	cbnz	r5, 800a290 <_printf_i+0x110>
 800a28c:	2e00      	cmp	r6, #0
 800a28e:	d04b      	beq.n	800a328 <_printf_i+0x1a8>
 800a290:	4616      	mov	r6, r2
 800a292:	fbb5 f1f3 	udiv	r1, r5, r3
 800a296:	fb03 5711 	mls	r7, r3, r1, r5
 800a29a:	5dc7      	ldrb	r7, [r0, r7]
 800a29c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800a2a0:	462f      	mov	r7, r5
 800a2a2:	42bb      	cmp	r3, r7
 800a2a4:	460d      	mov	r5, r1
 800a2a6:	d9f4      	bls.n	800a292 <_printf_i+0x112>
 800a2a8:	2b08      	cmp	r3, #8
 800a2aa:	d10b      	bne.n	800a2c4 <_printf_i+0x144>
 800a2ac:	6823      	ldr	r3, [r4, #0]
 800a2ae:	07df      	lsls	r7, r3, #31
 800a2b0:	d508      	bpl.n	800a2c4 <_printf_i+0x144>
 800a2b2:	6923      	ldr	r3, [r4, #16]
 800a2b4:	6861      	ldr	r1, [r4, #4]
 800a2b6:	4299      	cmp	r1, r3
 800a2b8:	bfde      	ittt	le
 800a2ba:	2330      	movle	r3, #48	@ 0x30
 800a2bc:	f806 3c01 	strble.w	r3, [r6, #-1]
 800a2c0:	f106 36ff 	addle.w	r6, r6, #4294967295
 800a2c4:	1b92      	subs	r2, r2, r6
 800a2c6:	6122      	str	r2, [r4, #16]
 800a2c8:	f8cd a000 	str.w	sl, [sp]
 800a2cc:	464b      	mov	r3, r9
 800a2ce:	aa03      	add	r2, sp, #12
 800a2d0:	4621      	mov	r1, r4
 800a2d2:	4640      	mov	r0, r8
 800a2d4:	f7ff fee6 	bl	800a0a4 <_printf_common>
 800a2d8:	3001      	adds	r0, #1
 800a2da:	d14a      	bne.n	800a372 <_printf_i+0x1f2>
 800a2dc:	f04f 30ff 	mov.w	r0, #4294967295
 800a2e0:	b004      	add	sp, #16
 800a2e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a2e6:	6823      	ldr	r3, [r4, #0]
 800a2e8:	f043 0320 	orr.w	r3, r3, #32
 800a2ec:	6023      	str	r3, [r4, #0]
 800a2ee:	4833      	ldr	r0, [pc, #204]	@ (800a3bc <_printf_i+0x23c>)
 800a2f0:	2778      	movs	r7, #120	@ 0x78
 800a2f2:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800a2f6:	6823      	ldr	r3, [r4, #0]
 800a2f8:	6831      	ldr	r1, [r6, #0]
 800a2fa:	061f      	lsls	r7, r3, #24
 800a2fc:	f851 5b04 	ldr.w	r5, [r1], #4
 800a300:	d402      	bmi.n	800a308 <_printf_i+0x188>
 800a302:	065f      	lsls	r7, r3, #25
 800a304:	bf48      	it	mi
 800a306:	b2ad      	uxthmi	r5, r5
 800a308:	6031      	str	r1, [r6, #0]
 800a30a:	07d9      	lsls	r1, r3, #31
 800a30c:	bf44      	itt	mi
 800a30e:	f043 0320 	orrmi.w	r3, r3, #32
 800a312:	6023      	strmi	r3, [r4, #0]
 800a314:	b11d      	cbz	r5, 800a31e <_printf_i+0x19e>
 800a316:	2310      	movs	r3, #16
 800a318:	e7ac      	b.n	800a274 <_printf_i+0xf4>
 800a31a:	4827      	ldr	r0, [pc, #156]	@ (800a3b8 <_printf_i+0x238>)
 800a31c:	e7e9      	b.n	800a2f2 <_printf_i+0x172>
 800a31e:	6823      	ldr	r3, [r4, #0]
 800a320:	f023 0320 	bic.w	r3, r3, #32
 800a324:	6023      	str	r3, [r4, #0]
 800a326:	e7f6      	b.n	800a316 <_printf_i+0x196>
 800a328:	4616      	mov	r6, r2
 800a32a:	e7bd      	b.n	800a2a8 <_printf_i+0x128>
 800a32c:	6833      	ldr	r3, [r6, #0]
 800a32e:	6825      	ldr	r5, [r4, #0]
 800a330:	6961      	ldr	r1, [r4, #20]
 800a332:	1d18      	adds	r0, r3, #4
 800a334:	6030      	str	r0, [r6, #0]
 800a336:	062e      	lsls	r6, r5, #24
 800a338:	681b      	ldr	r3, [r3, #0]
 800a33a:	d501      	bpl.n	800a340 <_printf_i+0x1c0>
 800a33c:	6019      	str	r1, [r3, #0]
 800a33e:	e002      	b.n	800a346 <_printf_i+0x1c6>
 800a340:	0668      	lsls	r0, r5, #25
 800a342:	d5fb      	bpl.n	800a33c <_printf_i+0x1bc>
 800a344:	8019      	strh	r1, [r3, #0]
 800a346:	2300      	movs	r3, #0
 800a348:	6123      	str	r3, [r4, #16]
 800a34a:	4616      	mov	r6, r2
 800a34c:	e7bc      	b.n	800a2c8 <_printf_i+0x148>
 800a34e:	6833      	ldr	r3, [r6, #0]
 800a350:	1d1a      	adds	r2, r3, #4
 800a352:	6032      	str	r2, [r6, #0]
 800a354:	681e      	ldr	r6, [r3, #0]
 800a356:	6862      	ldr	r2, [r4, #4]
 800a358:	2100      	movs	r1, #0
 800a35a:	4630      	mov	r0, r6
 800a35c:	f7f5 ff70 	bl	8000240 <memchr>
 800a360:	b108      	cbz	r0, 800a366 <_printf_i+0x1e6>
 800a362:	1b80      	subs	r0, r0, r6
 800a364:	6060      	str	r0, [r4, #4]
 800a366:	6863      	ldr	r3, [r4, #4]
 800a368:	6123      	str	r3, [r4, #16]
 800a36a:	2300      	movs	r3, #0
 800a36c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a370:	e7aa      	b.n	800a2c8 <_printf_i+0x148>
 800a372:	6923      	ldr	r3, [r4, #16]
 800a374:	4632      	mov	r2, r6
 800a376:	4649      	mov	r1, r9
 800a378:	4640      	mov	r0, r8
 800a37a:	47d0      	blx	sl
 800a37c:	3001      	adds	r0, #1
 800a37e:	d0ad      	beq.n	800a2dc <_printf_i+0x15c>
 800a380:	6823      	ldr	r3, [r4, #0]
 800a382:	079b      	lsls	r3, r3, #30
 800a384:	d413      	bmi.n	800a3ae <_printf_i+0x22e>
 800a386:	68e0      	ldr	r0, [r4, #12]
 800a388:	9b03      	ldr	r3, [sp, #12]
 800a38a:	4298      	cmp	r0, r3
 800a38c:	bfb8      	it	lt
 800a38e:	4618      	movlt	r0, r3
 800a390:	e7a6      	b.n	800a2e0 <_printf_i+0x160>
 800a392:	2301      	movs	r3, #1
 800a394:	4632      	mov	r2, r6
 800a396:	4649      	mov	r1, r9
 800a398:	4640      	mov	r0, r8
 800a39a:	47d0      	blx	sl
 800a39c:	3001      	adds	r0, #1
 800a39e:	d09d      	beq.n	800a2dc <_printf_i+0x15c>
 800a3a0:	3501      	adds	r5, #1
 800a3a2:	68e3      	ldr	r3, [r4, #12]
 800a3a4:	9903      	ldr	r1, [sp, #12]
 800a3a6:	1a5b      	subs	r3, r3, r1
 800a3a8:	42ab      	cmp	r3, r5
 800a3aa:	dcf2      	bgt.n	800a392 <_printf_i+0x212>
 800a3ac:	e7eb      	b.n	800a386 <_printf_i+0x206>
 800a3ae:	2500      	movs	r5, #0
 800a3b0:	f104 0619 	add.w	r6, r4, #25
 800a3b4:	e7f5      	b.n	800a3a2 <_printf_i+0x222>
 800a3b6:	bf00      	nop
 800a3b8:	0800a785 	.word	0x0800a785
 800a3bc:	0800a796 	.word	0x0800a796

0800a3c0 <__sflush_r>:
 800a3c0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a3c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a3c8:	0716      	lsls	r6, r2, #28
 800a3ca:	4605      	mov	r5, r0
 800a3cc:	460c      	mov	r4, r1
 800a3ce:	d454      	bmi.n	800a47a <__sflush_r+0xba>
 800a3d0:	684b      	ldr	r3, [r1, #4]
 800a3d2:	2b00      	cmp	r3, #0
 800a3d4:	dc02      	bgt.n	800a3dc <__sflush_r+0x1c>
 800a3d6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800a3d8:	2b00      	cmp	r3, #0
 800a3da:	dd48      	ble.n	800a46e <__sflush_r+0xae>
 800a3dc:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a3de:	2e00      	cmp	r6, #0
 800a3e0:	d045      	beq.n	800a46e <__sflush_r+0xae>
 800a3e2:	2300      	movs	r3, #0
 800a3e4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800a3e8:	682f      	ldr	r7, [r5, #0]
 800a3ea:	6a21      	ldr	r1, [r4, #32]
 800a3ec:	602b      	str	r3, [r5, #0]
 800a3ee:	d030      	beq.n	800a452 <__sflush_r+0x92>
 800a3f0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800a3f2:	89a3      	ldrh	r3, [r4, #12]
 800a3f4:	0759      	lsls	r1, r3, #29
 800a3f6:	d505      	bpl.n	800a404 <__sflush_r+0x44>
 800a3f8:	6863      	ldr	r3, [r4, #4]
 800a3fa:	1ad2      	subs	r2, r2, r3
 800a3fc:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800a3fe:	b10b      	cbz	r3, 800a404 <__sflush_r+0x44>
 800a400:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800a402:	1ad2      	subs	r2, r2, r3
 800a404:	2300      	movs	r3, #0
 800a406:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a408:	6a21      	ldr	r1, [r4, #32]
 800a40a:	4628      	mov	r0, r5
 800a40c:	47b0      	blx	r6
 800a40e:	1c43      	adds	r3, r0, #1
 800a410:	89a3      	ldrh	r3, [r4, #12]
 800a412:	d106      	bne.n	800a422 <__sflush_r+0x62>
 800a414:	6829      	ldr	r1, [r5, #0]
 800a416:	291d      	cmp	r1, #29
 800a418:	d82b      	bhi.n	800a472 <__sflush_r+0xb2>
 800a41a:	4a2a      	ldr	r2, [pc, #168]	@ (800a4c4 <__sflush_r+0x104>)
 800a41c:	410a      	asrs	r2, r1
 800a41e:	07d6      	lsls	r6, r2, #31
 800a420:	d427      	bmi.n	800a472 <__sflush_r+0xb2>
 800a422:	2200      	movs	r2, #0
 800a424:	6062      	str	r2, [r4, #4]
 800a426:	04d9      	lsls	r1, r3, #19
 800a428:	6922      	ldr	r2, [r4, #16]
 800a42a:	6022      	str	r2, [r4, #0]
 800a42c:	d504      	bpl.n	800a438 <__sflush_r+0x78>
 800a42e:	1c42      	adds	r2, r0, #1
 800a430:	d101      	bne.n	800a436 <__sflush_r+0x76>
 800a432:	682b      	ldr	r3, [r5, #0]
 800a434:	b903      	cbnz	r3, 800a438 <__sflush_r+0x78>
 800a436:	6560      	str	r0, [r4, #84]	@ 0x54
 800a438:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a43a:	602f      	str	r7, [r5, #0]
 800a43c:	b1b9      	cbz	r1, 800a46e <__sflush_r+0xae>
 800a43e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a442:	4299      	cmp	r1, r3
 800a444:	d002      	beq.n	800a44c <__sflush_r+0x8c>
 800a446:	4628      	mov	r0, r5
 800a448:	f7ff fbf2 	bl	8009c30 <_free_r>
 800a44c:	2300      	movs	r3, #0
 800a44e:	6363      	str	r3, [r4, #52]	@ 0x34
 800a450:	e00d      	b.n	800a46e <__sflush_r+0xae>
 800a452:	2301      	movs	r3, #1
 800a454:	4628      	mov	r0, r5
 800a456:	47b0      	blx	r6
 800a458:	4602      	mov	r2, r0
 800a45a:	1c50      	adds	r0, r2, #1
 800a45c:	d1c9      	bne.n	800a3f2 <__sflush_r+0x32>
 800a45e:	682b      	ldr	r3, [r5, #0]
 800a460:	2b00      	cmp	r3, #0
 800a462:	d0c6      	beq.n	800a3f2 <__sflush_r+0x32>
 800a464:	2b1d      	cmp	r3, #29
 800a466:	d001      	beq.n	800a46c <__sflush_r+0xac>
 800a468:	2b16      	cmp	r3, #22
 800a46a:	d11e      	bne.n	800a4aa <__sflush_r+0xea>
 800a46c:	602f      	str	r7, [r5, #0]
 800a46e:	2000      	movs	r0, #0
 800a470:	e022      	b.n	800a4b8 <__sflush_r+0xf8>
 800a472:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a476:	b21b      	sxth	r3, r3
 800a478:	e01b      	b.n	800a4b2 <__sflush_r+0xf2>
 800a47a:	690f      	ldr	r7, [r1, #16]
 800a47c:	2f00      	cmp	r7, #0
 800a47e:	d0f6      	beq.n	800a46e <__sflush_r+0xae>
 800a480:	0793      	lsls	r3, r2, #30
 800a482:	680e      	ldr	r6, [r1, #0]
 800a484:	bf08      	it	eq
 800a486:	694b      	ldreq	r3, [r1, #20]
 800a488:	600f      	str	r7, [r1, #0]
 800a48a:	bf18      	it	ne
 800a48c:	2300      	movne	r3, #0
 800a48e:	eba6 0807 	sub.w	r8, r6, r7
 800a492:	608b      	str	r3, [r1, #8]
 800a494:	f1b8 0f00 	cmp.w	r8, #0
 800a498:	dde9      	ble.n	800a46e <__sflush_r+0xae>
 800a49a:	6a21      	ldr	r1, [r4, #32]
 800a49c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800a49e:	4643      	mov	r3, r8
 800a4a0:	463a      	mov	r2, r7
 800a4a2:	4628      	mov	r0, r5
 800a4a4:	47b0      	blx	r6
 800a4a6:	2800      	cmp	r0, #0
 800a4a8:	dc08      	bgt.n	800a4bc <__sflush_r+0xfc>
 800a4aa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a4ae:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a4b2:	81a3      	strh	r3, [r4, #12]
 800a4b4:	f04f 30ff 	mov.w	r0, #4294967295
 800a4b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a4bc:	4407      	add	r7, r0
 800a4be:	eba8 0800 	sub.w	r8, r8, r0
 800a4c2:	e7e7      	b.n	800a494 <__sflush_r+0xd4>
 800a4c4:	dfbffffe 	.word	0xdfbffffe

0800a4c8 <_fflush_r>:
 800a4c8:	b538      	push	{r3, r4, r5, lr}
 800a4ca:	690b      	ldr	r3, [r1, #16]
 800a4cc:	4605      	mov	r5, r0
 800a4ce:	460c      	mov	r4, r1
 800a4d0:	b913      	cbnz	r3, 800a4d8 <_fflush_r+0x10>
 800a4d2:	2500      	movs	r5, #0
 800a4d4:	4628      	mov	r0, r5
 800a4d6:	bd38      	pop	{r3, r4, r5, pc}
 800a4d8:	b118      	cbz	r0, 800a4e2 <_fflush_r+0x1a>
 800a4da:	6a03      	ldr	r3, [r0, #32]
 800a4dc:	b90b      	cbnz	r3, 800a4e2 <_fflush_r+0x1a>
 800a4de:	f7ff f949 	bl	8009774 <__sinit>
 800a4e2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a4e6:	2b00      	cmp	r3, #0
 800a4e8:	d0f3      	beq.n	800a4d2 <_fflush_r+0xa>
 800a4ea:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800a4ec:	07d0      	lsls	r0, r2, #31
 800a4ee:	d404      	bmi.n	800a4fa <_fflush_r+0x32>
 800a4f0:	0599      	lsls	r1, r3, #22
 800a4f2:	d402      	bmi.n	800a4fa <_fflush_r+0x32>
 800a4f4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a4f6:	f7ff fb8a 	bl	8009c0e <__retarget_lock_acquire_recursive>
 800a4fa:	4628      	mov	r0, r5
 800a4fc:	4621      	mov	r1, r4
 800a4fe:	f7ff ff5f 	bl	800a3c0 <__sflush_r>
 800a502:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a504:	07da      	lsls	r2, r3, #31
 800a506:	4605      	mov	r5, r0
 800a508:	d4e4      	bmi.n	800a4d4 <_fflush_r+0xc>
 800a50a:	89a3      	ldrh	r3, [r4, #12]
 800a50c:	059b      	lsls	r3, r3, #22
 800a50e:	d4e1      	bmi.n	800a4d4 <_fflush_r+0xc>
 800a510:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a512:	f7ff fb7d 	bl	8009c10 <__retarget_lock_release_recursive>
 800a516:	e7dd      	b.n	800a4d4 <_fflush_r+0xc>

0800a518 <__swhatbuf_r>:
 800a518:	b570      	push	{r4, r5, r6, lr}
 800a51a:	460c      	mov	r4, r1
 800a51c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a520:	2900      	cmp	r1, #0
 800a522:	b096      	sub	sp, #88	@ 0x58
 800a524:	4615      	mov	r5, r2
 800a526:	461e      	mov	r6, r3
 800a528:	da0d      	bge.n	800a546 <__swhatbuf_r+0x2e>
 800a52a:	89a3      	ldrh	r3, [r4, #12]
 800a52c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800a530:	f04f 0100 	mov.w	r1, #0
 800a534:	bf14      	ite	ne
 800a536:	2340      	movne	r3, #64	@ 0x40
 800a538:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800a53c:	2000      	movs	r0, #0
 800a53e:	6031      	str	r1, [r6, #0]
 800a540:	602b      	str	r3, [r5, #0]
 800a542:	b016      	add	sp, #88	@ 0x58
 800a544:	bd70      	pop	{r4, r5, r6, pc}
 800a546:	466a      	mov	r2, sp
 800a548:	f000 f848 	bl	800a5dc <_fstat_r>
 800a54c:	2800      	cmp	r0, #0
 800a54e:	dbec      	blt.n	800a52a <__swhatbuf_r+0x12>
 800a550:	9901      	ldr	r1, [sp, #4]
 800a552:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800a556:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800a55a:	4259      	negs	r1, r3
 800a55c:	4159      	adcs	r1, r3
 800a55e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a562:	e7eb      	b.n	800a53c <__swhatbuf_r+0x24>

0800a564 <__smakebuf_r>:
 800a564:	898b      	ldrh	r3, [r1, #12]
 800a566:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a568:	079d      	lsls	r5, r3, #30
 800a56a:	4606      	mov	r6, r0
 800a56c:	460c      	mov	r4, r1
 800a56e:	d507      	bpl.n	800a580 <__smakebuf_r+0x1c>
 800a570:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800a574:	6023      	str	r3, [r4, #0]
 800a576:	6123      	str	r3, [r4, #16]
 800a578:	2301      	movs	r3, #1
 800a57a:	6163      	str	r3, [r4, #20]
 800a57c:	b003      	add	sp, #12
 800a57e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a580:	ab01      	add	r3, sp, #4
 800a582:	466a      	mov	r2, sp
 800a584:	f7ff ffc8 	bl	800a518 <__swhatbuf_r>
 800a588:	9f00      	ldr	r7, [sp, #0]
 800a58a:	4605      	mov	r5, r0
 800a58c:	4639      	mov	r1, r7
 800a58e:	4630      	mov	r0, r6
 800a590:	f7ff fbba 	bl	8009d08 <_malloc_r>
 800a594:	b948      	cbnz	r0, 800a5aa <__smakebuf_r+0x46>
 800a596:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a59a:	059a      	lsls	r2, r3, #22
 800a59c:	d4ee      	bmi.n	800a57c <__smakebuf_r+0x18>
 800a59e:	f023 0303 	bic.w	r3, r3, #3
 800a5a2:	f043 0302 	orr.w	r3, r3, #2
 800a5a6:	81a3      	strh	r3, [r4, #12]
 800a5a8:	e7e2      	b.n	800a570 <__smakebuf_r+0xc>
 800a5aa:	89a3      	ldrh	r3, [r4, #12]
 800a5ac:	6020      	str	r0, [r4, #0]
 800a5ae:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a5b2:	81a3      	strh	r3, [r4, #12]
 800a5b4:	9b01      	ldr	r3, [sp, #4]
 800a5b6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800a5ba:	b15b      	cbz	r3, 800a5d4 <__smakebuf_r+0x70>
 800a5bc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a5c0:	4630      	mov	r0, r6
 800a5c2:	f000 f81d 	bl	800a600 <_isatty_r>
 800a5c6:	b128      	cbz	r0, 800a5d4 <__smakebuf_r+0x70>
 800a5c8:	89a3      	ldrh	r3, [r4, #12]
 800a5ca:	f023 0303 	bic.w	r3, r3, #3
 800a5ce:	f043 0301 	orr.w	r3, r3, #1
 800a5d2:	81a3      	strh	r3, [r4, #12]
 800a5d4:	89a3      	ldrh	r3, [r4, #12]
 800a5d6:	431d      	orrs	r5, r3
 800a5d8:	81a5      	strh	r5, [r4, #12]
 800a5da:	e7cf      	b.n	800a57c <__smakebuf_r+0x18>

0800a5dc <_fstat_r>:
 800a5dc:	b538      	push	{r3, r4, r5, lr}
 800a5de:	4d07      	ldr	r5, [pc, #28]	@ (800a5fc <_fstat_r+0x20>)
 800a5e0:	2300      	movs	r3, #0
 800a5e2:	4604      	mov	r4, r0
 800a5e4:	4608      	mov	r0, r1
 800a5e6:	4611      	mov	r1, r2
 800a5e8:	602b      	str	r3, [r5, #0]
 800a5ea:	f7f6 fefe 	bl	80013ea <_fstat>
 800a5ee:	1c43      	adds	r3, r0, #1
 800a5f0:	d102      	bne.n	800a5f8 <_fstat_r+0x1c>
 800a5f2:	682b      	ldr	r3, [r5, #0]
 800a5f4:	b103      	cbz	r3, 800a5f8 <_fstat_r+0x1c>
 800a5f6:	6023      	str	r3, [r4, #0]
 800a5f8:	bd38      	pop	{r3, r4, r5, pc}
 800a5fa:	bf00      	nop
 800a5fc:	20005450 	.word	0x20005450

0800a600 <_isatty_r>:
 800a600:	b538      	push	{r3, r4, r5, lr}
 800a602:	4d06      	ldr	r5, [pc, #24]	@ (800a61c <_isatty_r+0x1c>)
 800a604:	2300      	movs	r3, #0
 800a606:	4604      	mov	r4, r0
 800a608:	4608      	mov	r0, r1
 800a60a:	602b      	str	r3, [r5, #0]
 800a60c:	f7f6 fefd 	bl	800140a <_isatty>
 800a610:	1c43      	adds	r3, r0, #1
 800a612:	d102      	bne.n	800a61a <_isatty_r+0x1a>
 800a614:	682b      	ldr	r3, [r5, #0]
 800a616:	b103      	cbz	r3, 800a61a <_isatty_r+0x1a>
 800a618:	6023      	str	r3, [r4, #0]
 800a61a:	bd38      	pop	{r3, r4, r5, pc}
 800a61c:	20005450 	.word	0x20005450

0800a620 <_sbrk_r>:
 800a620:	b538      	push	{r3, r4, r5, lr}
 800a622:	4d06      	ldr	r5, [pc, #24]	@ (800a63c <_sbrk_r+0x1c>)
 800a624:	2300      	movs	r3, #0
 800a626:	4604      	mov	r4, r0
 800a628:	4608      	mov	r0, r1
 800a62a:	602b      	str	r3, [r5, #0]
 800a62c:	f7f6 ff06 	bl	800143c <_sbrk>
 800a630:	1c43      	adds	r3, r0, #1
 800a632:	d102      	bne.n	800a63a <_sbrk_r+0x1a>
 800a634:	682b      	ldr	r3, [r5, #0]
 800a636:	b103      	cbz	r3, 800a63a <_sbrk_r+0x1a>
 800a638:	6023      	str	r3, [r4, #0]
 800a63a:	bd38      	pop	{r3, r4, r5, pc}
 800a63c:	20005450 	.word	0x20005450

0800a640 <_init>:
 800a640:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a642:	bf00      	nop
 800a644:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a646:	bc08      	pop	{r3}
 800a648:	469e      	mov	lr, r3
 800a64a:	4770      	bx	lr

0800a64c <_fini>:
 800a64c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a64e:	bf00      	nop
 800a650:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a652:	bc08      	pop	{r3}
 800a654:	469e      	mov	lr, r3
 800a656:	4770      	bx	lr
