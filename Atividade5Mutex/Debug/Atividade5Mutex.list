
Atividade5Mutex.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008728  08000200  08000200  00001200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001b4  08008928  08008928  00009928  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008adc  08008adc  0000a1ac  2**0
                  CONTENTS
  4 .ARM          00000008  08008adc  08008adc  00009adc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008ae4  08008ae4  0000a1ac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008ae4  08008ae4  00009ae4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008ae8  08008ae8  00009ae8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000006c  20000000  08008aec  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  2000006c  08008b58  0000a06c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  2000010c  08008bf8  0000a10c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          000051bc  200001ac  08008c98  0000a1ac  2**2
                  ALLOC
 12 ._user_heap_stack 00000600  20005368  08008c98  0000a368  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  0000a1ac  2**0
                  CONTENTS, READONLY
 14 .debug_info   0001d174  00000000  00000000  0000a1da  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00003c62  00000000  00000000  0002734e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001568  00000000  00000000  0002afb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00001078  00000000  00000000  0002c518  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00004ea5  00000000  00000000  0002d590  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00019b32  00000000  00000000  00032435  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    0010598f  00000000  00000000  0004bf67  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000043  00000000  00000000  001518f6  2**0
                  CONTENTS, READONLY
 22 .debug_frame  0000611c  00000000  00000000  0015193c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000057  00000000  00000000  00157a58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	@ (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	@ (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	@ (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	200001ac 	.word	0x200001ac
 800021c:	00000000 	.word	0x00000000
 8000220:	08008910 	.word	0x08008910

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	@ (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	@ (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	@ (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200001b0 	.word	0x200001b0
 800023c:	08008910 	.word	0x08008910

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295
 80002f4:	f000 b96a 	b.w	80005cc <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9d08      	ldr	r5, [sp, #32]
 8000316:	460c      	mov	r4, r1
 8000318:	2b00      	cmp	r3, #0
 800031a:	d14e      	bne.n	80003ba <__udivmoddi4+0xaa>
 800031c:	4694      	mov	ip, r2
 800031e:	458c      	cmp	ip, r1
 8000320:	4686      	mov	lr, r0
 8000322:	fab2 f282 	clz	r2, r2
 8000326:	d962      	bls.n	80003ee <__udivmoddi4+0xde>
 8000328:	b14a      	cbz	r2, 800033e <__udivmoddi4+0x2e>
 800032a:	f1c2 0320 	rsb	r3, r2, #32
 800032e:	4091      	lsls	r1, r2
 8000330:	fa20 f303 	lsr.w	r3, r0, r3
 8000334:	fa0c fc02 	lsl.w	ip, ip, r2
 8000338:	4319      	orrs	r1, r3
 800033a:	fa00 fe02 	lsl.w	lr, r0, r2
 800033e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000342:	fa1f f68c 	uxth.w	r6, ip
 8000346:	fbb1 f4f7 	udiv	r4, r1, r7
 800034a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800034e:	fb07 1114 	mls	r1, r7, r4, r1
 8000352:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000356:	fb04 f106 	mul.w	r1, r4, r6
 800035a:	4299      	cmp	r1, r3
 800035c:	d90a      	bls.n	8000374 <__udivmoddi4+0x64>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f104 30ff 	add.w	r0, r4, #4294967295
 8000366:	f080 8112 	bcs.w	800058e <__udivmoddi4+0x27e>
 800036a:	4299      	cmp	r1, r3
 800036c:	f240 810f 	bls.w	800058e <__udivmoddi4+0x27e>
 8000370:	3c02      	subs	r4, #2
 8000372:	4463      	add	r3, ip
 8000374:	1a59      	subs	r1, r3, r1
 8000376:	fa1f f38e 	uxth.w	r3, lr
 800037a:	fbb1 f0f7 	udiv	r0, r1, r7
 800037e:	fb07 1110 	mls	r1, r7, r0, r1
 8000382:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000386:	fb00 f606 	mul.w	r6, r0, r6
 800038a:	429e      	cmp	r6, r3
 800038c:	d90a      	bls.n	80003a4 <__udivmoddi4+0x94>
 800038e:	eb1c 0303 	adds.w	r3, ip, r3
 8000392:	f100 31ff 	add.w	r1, r0, #4294967295
 8000396:	f080 80fc 	bcs.w	8000592 <__udivmoddi4+0x282>
 800039a:	429e      	cmp	r6, r3
 800039c:	f240 80f9 	bls.w	8000592 <__udivmoddi4+0x282>
 80003a0:	4463      	add	r3, ip
 80003a2:	3802      	subs	r0, #2
 80003a4:	1b9b      	subs	r3, r3, r6
 80003a6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80003aa:	2100      	movs	r1, #0
 80003ac:	b11d      	cbz	r5, 80003b6 <__udivmoddi4+0xa6>
 80003ae:	40d3      	lsrs	r3, r2
 80003b0:	2200      	movs	r2, #0
 80003b2:	e9c5 3200 	strd	r3, r2, [r5]
 80003b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d905      	bls.n	80003ca <__udivmoddi4+0xba>
 80003be:	b10d      	cbz	r5, 80003c4 <__udivmoddi4+0xb4>
 80003c0:	e9c5 0100 	strd	r0, r1, [r5]
 80003c4:	2100      	movs	r1, #0
 80003c6:	4608      	mov	r0, r1
 80003c8:	e7f5      	b.n	80003b6 <__udivmoddi4+0xa6>
 80003ca:	fab3 f183 	clz	r1, r3
 80003ce:	2900      	cmp	r1, #0
 80003d0:	d146      	bne.n	8000460 <__udivmoddi4+0x150>
 80003d2:	42a3      	cmp	r3, r4
 80003d4:	d302      	bcc.n	80003dc <__udivmoddi4+0xcc>
 80003d6:	4290      	cmp	r0, r2
 80003d8:	f0c0 80f0 	bcc.w	80005bc <__udivmoddi4+0x2ac>
 80003dc:	1a86      	subs	r6, r0, r2
 80003de:	eb64 0303 	sbc.w	r3, r4, r3
 80003e2:	2001      	movs	r0, #1
 80003e4:	2d00      	cmp	r5, #0
 80003e6:	d0e6      	beq.n	80003b6 <__udivmoddi4+0xa6>
 80003e8:	e9c5 6300 	strd	r6, r3, [r5]
 80003ec:	e7e3      	b.n	80003b6 <__udivmoddi4+0xa6>
 80003ee:	2a00      	cmp	r2, #0
 80003f0:	f040 8090 	bne.w	8000514 <__udivmoddi4+0x204>
 80003f4:	eba1 040c 	sub.w	r4, r1, ip
 80003f8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003fc:	fa1f f78c 	uxth.w	r7, ip
 8000400:	2101      	movs	r1, #1
 8000402:	fbb4 f6f8 	udiv	r6, r4, r8
 8000406:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800040a:	fb08 4416 	mls	r4, r8, r6, r4
 800040e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000412:	fb07 f006 	mul.w	r0, r7, r6
 8000416:	4298      	cmp	r0, r3
 8000418:	d908      	bls.n	800042c <__udivmoddi4+0x11c>
 800041a:	eb1c 0303 	adds.w	r3, ip, r3
 800041e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x11a>
 8000424:	4298      	cmp	r0, r3
 8000426:	f200 80cd 	bhi.w	80005c4 <__udivmoddi4+0x2b4>
 800042a:	4626      	mov	r6, r4
 800042c:	1a1c      	subs	r4, r3, r0
 800042e:	fa1f f38e 	uxth.w	r3, lr
 8000432:	fbb4 f0f8 	udiv	r0, r4, r8
 8000436:	fb08 4410 	mls	r4, r8, r0, r4
 800043a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800043e:	fb00 f707 	mul.w	r7, r0, r7
 8000442:	429f      	cmp	r7, r3
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x148>
 8000446:	eb1c 0303 	adds.w	r3, ip, r3
 800044a:	f100 34ff 	add.w	r4, r0, #4294967295
 800044e:	d202      	bcs.n	8000456 <__udivmoddi4+0x146>
 8000450:	429f      	cmp	r7, r3
 8000452:	f200 80b0 	bhi.w	80005b6 <__udivmoddi4+0x2a6>
 8000456:	4620      	mov	r0, r4
 8000458:	1bdb      	subs	r3, r3, r7
 800045a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800045e:	e7a5      	b.n	80003ac <__udivmoddi4+0x9c>
 8000460:	f1c1 0620 	rsb	r6, r1, #32
 8000464:	408b      	lsls	r3, r1
 8000466:	fa22 f706 	lsr.w	r7, r2, r6
 800046a:	431f      	orrs	r7, r3
 800046c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000470:	fa04 f301 	lsl.w	r3, r4, r1
 8000474:	ea43 030c 	orr.w	r3, r3, ip
 8000478:	40f4      	lsrs	r4, r6
 800047a:	fa00 f801 	lsl.w	r8, r0, r1
 800047e:	0c38      	lsrs	r0, r7, #16
 8000480:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000484:	fbb4 fef0 	udiv	lr, r4, r0
 8000488:	fa1f fc87 	uxth.w	ip, r7
 800048c:	fb00 441e 	mls	r4, r0, lr, r4
 8000490:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000494:	fb0e f90c 	mul.w	r9, lr, ip
 8000498:	45a1      	cmp	r9, r4
 800049a:	fa02 f201 	lsl.w	r2, r2, r1
 800049e:	d90a      	bls.n	80004b6 <__udivmoddi4+0x1a6>
 80004a0:	193c      	adds	r4, r7, r4
 80004a2:	f10e 3aff 	add.w	sl, lr, #4294967295
 80004a6:	f080 8084 	bcs.w	80005b2 <__udivmoddi4+0x2a2>
 80004aa:	45a1      	cmp	r9, r4
 80004ac:	f240 8081 	bls.w	80005b2 <__udivmoddi4+0x2a2>
 80004b0:	f1ae 0e02 	sub.w	lr, lr, #2
 80004b4:	443c      	add	r4, r7
 80004b6:	eba4 0409 	sub.w	r4, r4, r9
 80004ba:	fa1f f983 	uxth.w	r9, r3
 80004be:	fbb4 f3f0 	udiv	r3, r4, r0
 80004c2:	fb00 4413 	mls	r4, r0, r3, r4
 80004c6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004ca:	fb03 fc0c 	mul.w	ip, r3, ip
 80004ce:	45a4      	cmp	ip, r4
 80004d0:	d907      	bls.n	80004e2 <__udivmoddi4+0x1d2>
 80004d2:	193c      	adds	r4, r7, r4
 80004d4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004d8:	d267      	bcs.n	80005aa <__udivmoddi4+0x29a>
 80004da:	45a4      	cmp	ip, r4
 80004dc:	d965      	bls.n	80005aa <__udivmoddi4+0x29a>
 80004de:	3b02      	subs	r3, #2
 80004e0:	443c      	add	r4, r7
 80004e2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004e6:	fba0 9302 	umull	r9, r3, r0, r2
 80004ea:	eba4 040c 	sub.w	r4, r4, ip
 80004ee:	429c      	cmp	r4, r3
 80004f0:	46ce      	mov	lr, r9
 80004f2:	469c      	mov	ip, r3
 80004f4:	d351      	bcc.n	800059a <__udivmoddi4+0x28a>
 80004f6:	d04e      	beq.n	8000596 <__udivmoddi4+0x286>
 80004f8:	b155      	cbz	r5, 8000510 <__udivmoddi4+0x200>
 80004fa:	ebb8 030e 	subs.w	r3, r8, lr
 80004fe:	eb64 040c 	sbc.w	r4, r4, ip
 8000502:	fa04 f606 	lsl.w	r6, r4, r6
 8000506:	40cb      	lsrs	r3, r1
 8000508:	431e      	orrs	r6, r3
 800050a:	40cc      	lsrs	r4, r1
 800050c:	e9c5 6400 	strd	r6, r4, [r5]
 8000510:	2100      	movs	r1, #0
 8000512:	e750      	b.n	80003b6 <__udivmoddi4+0xa6>
 8000514:	f1c2 0320 	rsb	r3, r2, #32
 8000518:	fa20 f103 	lsr.w	r1, r0, r3
 800051c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000520:	fa24 f303 	lsr.w	r3, r4, r3
 8000524:	4094      	lsls	r4, r2
 8000526:	430c      	orrs	r4, r1
 8000528:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800052c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000530:	fa1f f78c 	uxth.w	r7, ip
 8000534:	fbb3 f0f8 	udiv	r0, r3, r8
 8000538:	fb08 3110 	mls	r1, r8, r0, r3
 800053c:	0c23      	lsrs	r3, r4, #16
 800053e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000542:	fb00 f107 	mul.w	r1, r0, r7
 8000546:	4299      	cmp	r1, r3
 8000548:	d908      	bls.n	800055c <__udivmoddi4+0x24c>
 800054a:	eb1c 0303 	adds.w	r3, ip, r3
 800054e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000552:	d22c      	bcs.n	80005ae <__udivmoddi4+0x29e>
 8000554:	4299      	cmp	r1, r3
 8000556:	d92a      	bls.n	80005ae <__udivmoddi4+0x29e>
 8000558:	3802      	subs	r0, #2
 800055a:	4463      	add	r3, ip
 800055c:	1a5b      	subs	r3, r3, r1
 800055e:	b2a4      	uxth	r4, r4
 8000560:	fbb3 f1f8 	udiv	r1, r3, r8
 8000564:	fb08 3311 	mls	r3, r8, r1, r3
 8000568:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800056c:	fb01 f307 	mul.w	r3, r1, r7
 8000570:	42a3      	cmp	r3, r4
 8000572:	d908      	bls.n	8000586 <__udivmoddi4+0x276>
 8000574:	eb1c 0404 	adds.w	r4, ip, r4
 8000578:	f101 36ff 	add.w	r6, r1, #4294967295
 800057c:	d213      	bcs.n	80005a6 <__udivmoddi4+0x296>
 800057e:	42a3      	cmp	r3, r4
 8000580:	d911      	bls.n	80005a6 <__udivmoddi4+0x296>
 8000582:	3902      	subs	r1, #2
 8000584:	4464      	add	r4, ip
 8000586:	1ae4      	subs	r4, r4, r3
 8000588:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800058c:	e739      	b.n	8000402 <__udivmoddi4+0xf2>
 800058e:	4604      	mov	r4, r0
 8000590:	e6f0      	b.n	8000374 <__udivmoddi4+0x64>
 8000592:	4608      	mov	r0, r1
 8000594:	e706      	b.n	80003a4 <__udivmoddi4+0x94>
 8000596:	45c8      	cmp	r8, r9
 8000598:	d2ae      	bcs.n	80004f8 <__udivmoddi4+0x1e8>
 800059a:	ebb9 0e02 	subs.w	lr, r9, r2
 800059e:	eb63 0c07 	sbc.w	ip, r3, r7
 80005a2:	3801      	subs	r0, #1
 80005a4:	e7a8      	b.n	80004f8 <__udivmoddi4+0x1e8>
 80005a6:	4631      	mov	r1, r6
 80005a8:	e7ed      	b.n	8000586 <__udivmoddi4+0x276>
 80005aa:	4603      	mov	r3, r0
 80005ac:	e799      	b.n	80004e2 <__udivmoddi4+0x1d2>
 80005ae:	4630      	mov	r0, r6
 80005b0:	e7d4      	b.n	800055c <__udivmoddi4+0x24c>
 80005b2:	46d6      	mov	lr, sl
 80005b4:	e77f      	b.n	80004b6 <__udivmoddi4+0x1a6>
 80005b6:	4463      	add	r3, ip
 80005b8:	3802      	subs	r0, #2
 80005ba:	e74d      	b.n	8000458 <__udivmoddi4+0x148>
 80005bc:	4606      	mov	r6, r0
 80005be:	4623      	mov	r3, r4
 80005c0:	4608      	mov	r0, r1
 80005c2:	e70f      	b.n	80003e4 <__udivmoddi4+0xd4>
 80005c4:	3e02      	subs	r6, #2
 80005c6:	4463      	add	r3, ip
 80005c8:	e730      	b.n	800042c <__udivmoddi4+0x11c>
 80005ca:	bf00      	nop

080005cc <__aeabi_idiv0>:
 80005cc:	4770      	bx	lr
 80005ce:	bf00      	nop

080005d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005d4:	f000 fd6d 	bl	80010b2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005d8:	f000 f842 	bl	8000660 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005dc:	f000 f95e 	bl	800089c <MX_GPIO_Init>
  MX_ETH_Init();
 80005e0:	f000 f8b0 	bl	8000744 <MX_ETH_Init>
  MX_USART3_UART_Init();
 80005e4:	f000 f8fc 	bl	80007e0 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80005e8:	f000 f92a 	bl	8000840 <MX_USB_OTG_FS_PCD_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80005ec:	f003 fee2 	bl	80043b4 <osKernelInitialize>
  /* Create the mutex(es) */
  /* creation of MeuMutexHandle */
  MeuMutexHandleHandle = osMutexNew(&MeuMutexHandle_attributes);
 80005f0:	4810      	ldr	r0, [pc, #64]	@ (8000634 <main+0x64>)
 80005f2:	f004 f81d 	bl	8004630 <osMutexNew>
 80005f6:	4603      	mov	r3, r0
 80005f8:	4a0f      	ldr	r2, [pc, #60]	@ (8000638 <main+0x68>)
 80005fa:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of Tarefa3Handle */
  Tarefa3HandleHandle = osThreadNew(Tarefa3_Handle, NULL, &Tarefa3Handle_attributes);
 80005fc:	4a0f      	ldr	r2, [pc, #60]	@ (800063c <main+0x6c>)
 80005fe:	2100      	movs	r1, #0
 8000600:	480f      	ldr	r0, [pc, #60]	@ (8000640 <main+0x70>)
 8000602:	f003 ff41 	bl	8004488 <osThreadNew>
 8000606:	4603      	mov	r3, r0
 8000608:	4a0e      	ldr	r2, [pc, #56]	@ (8000644 <main+0x74>)
 800060a:	6013      	str	r3, [r2, #0]

  /* creation of Tarefa1Handle */
  Tarefa1HandleHandle = osThreadNew(Tarefa1_Handle, NULL, &Tarefa1Handle_attributes);
 800060c:	4a0e      	ldr	r2, [pc, #56]	@ (8000648 <main+0x78>)
 800060e:	2100      	movs	r1, #0
 8000610:	480e      	ldr	r0, [pc, #56]	@ (800064c <main+0x7c>)
 8000612:	f003 ff39 	bl	8004488 <osThreadNew>
 8000616:	4603      	mov	r3, r0
 8000618:	4a0d      	ldr	r2, [pc, #52]	@ (8000650 <main+0x80>)
 800061a:	6013      	str	r3, [r2, #0]

  /* creation of Tarefa2Handle */
  Tarefa2HandleHandle = osThreadNew(Tarefa2_Handle, NULL, &Tarefa2Handle_attributes);
 800061c:	4a0d      	ldr	r2, [pc, #52]	@ (8000654 <main+0x84>)
 800061e:	2100      	movs	r1, #0
 8000620:	480d      	ldr	r0, [pc, #52]	@ (8000658 <main+0x88>)
 8000622:	f003 ff31 	bl	8004488 <osThreadNew>
 8000626:	4603      	mov	r3, r0
 8000628:	4a0c      	ldr	r2, [pc, #48]	@ (800065c <main+0x8c>)
 800062a:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 800062c:	f003 fef6 	bl	800441c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000630:	bf00      	nop
 8000632:	e7fd      	b.n	8000630 <main+0x60>
 8000634:	08008a80 	.word	0x08008a80
 8000638:	20000824 	.word	0x20000824
 800063c:	08008a14 	.word	0x08008a14
 8000640:	08000a05 	.word	0x08000a05
 8000644:	20000818 	.word	0x20000818
 8000648:	08008a38 	.word	0x08008a38
 800064c:	08000a69 	.word	0x08000a69
 8000650:	2000081c 	.word	0x2000081c
 8000654:	08008a5c 	.word	0x08008a5c
 8000658:	08000ab1 	.word	0x08000ab1
 800065c:	20000820 	.word	0x20000820

08000660 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	b094      	sub	sp, #80	@ 0x50
 8000664:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000666:	f107 031c 	add.w	r3, r7, #28
 800066a:	2234      	movs	r2, #52	@ 0x34
 800066c:	2100      	movs	r1, #0
 800066e:	4618      	mov	r0, r3
 8000670:	f007 fb66 	bl	8007d40 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000674:	f107 0308 	add.w	r3, r7, #8
 8000678:	2200      	movs	r2, #0
 800067a:	601a      	str	r2, [r3, #0]
 800067c:	605a      	str	r2, [r3, #4]
 800067e:	609a      	str	r2, [r3, #8]
 8000680:	60da      	str	r2, [r3, #12]
 8000682:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000684:	f001 fce4 	bl	8002050 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000688:	4b2c      	ldr	r3, [pc, #176]	@ (800073c <SystemClock_Config+0xdc>)
 800068a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800068c:	4a2b      	ldr	r2, [pc, #172]	@ (800073c <SystemClock_Config+0xdc>)
 800068e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000692:	6413      	str	r3, [r2, #64]	@ 0x40
 8000694:	4b29      	ldr	r3, [pc, #164]	@ (800073c <SystemClock_Config+0xdc>)
 8000696:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000698:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800069c:	607b      	str	r3, [r7, #4]
 800069e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80006a0:	4b27      	ldr	r3, [pc, #156]	@ (8000740 <SystemClock_Config+0xe0>)
 80006a2:	681b      	ldr	r3, [r3, #0]
 80006a4:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80006a8:	4a25      	ldr	r2, [pc, #148]	@ (8000740 <SystemClock_Config+0xe0>)
 80006aa:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80006ae:	6013      	str	r3, [r2, #0]
 80006b0:	4b23      	ldr	r3, [pc, #140]	@ (8000740 <SystemClock_Config+0xe0>)
 80006b2:	681b      	ldr	r3, [r3, #0]
 80006b4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80006b8:	603b      	str	r3, [r7, #0]
 80006ba:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80006bc:	2301      	movs	r3, #1
 80006be:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80006c0:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 80006c4:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006c6:	2302      	movs	r3, #2
 80006c8:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006ca:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80006ce:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 80006d0:	2304      	movs	r3, #4
 80006d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 96;
 80006d4:	2360      	movs	r3, #96	@ 0x60
 80006d6:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006d8:	2302      	movs	r3, #2
 80006da:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80006dc:	2304      	movs	r3, #4
 80006de:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80006e0:	2302      	movs	r3, #2
 80006e2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006e4:	f107 031c 	add.w	r3, r7, #28
 80006e8:	4618      	mov	r0, r3
 80006ea:	f001 fd11 	bl	8002110 <HAL_RCC_OscConfig>
 80006ee:	4603      	mov	r3, r0
 80006f0:	2b00      	cmp	r3, #0
 80006f2:	d001      	beq.n	80006f8 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80006f4:	f000 fa16 	bl	8000b24 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80006f8:	f001 fcba 	bl	8002070 <HAL_PWREx_EnableOverDrive>
 80006fc:	4603      	mov	r3, r0
 80006fe:	2b00      	cmp	r3, #0
 8000700:	d001      	beq.n	8000706 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000702:	f000 fa0f 	bl	8000b24 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000706:	230f      	movs	r3, #15
 8000708:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800070a:	2302      	movs	r3, #2
 800070c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800070e:	2300      	movs	r3, #0
 8000710:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000712:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000716:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000718:	2300      	movs	r3, #0
 800071a:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800071c:	f107 0308 	add.w	r3, r7, #8
 8000720:	2103      	movs	r1, #3
 8000722:	4618      	mov	r0, r3
 8000724:	f001 ffa2 	bl	800266c <HAL_RCC_ClockConfig>
 8000728:	4603      	mov	r3, r0
 800072a:	2b00      	cmp	r3, #0
 800072c:	d001      	beq.n	8000732 <SystemClock_Config+0xd2>
  {
    Error_Handler();
 800072e:	f000 f9f9 	bl	8000b24 <Error_Handler>
  }
}
 8000732:	bf00      	nop
 8000734:	3750      	adds	r7, #80	@ 0x50
 8000736:	46bd      	mov	sp, r7
 8000738:	bd80      	pop	{r7, pc}
 800073a:	bf00      	nop
 800073c:	40023800 	.word	0x40023800
 8000740:	40007000 	.word	0x40007000

08000744 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000748:	4b1f      	ldr	r3, [pc, #124]	@ (80007c8 <MX_ETH_Init+0x84>)
 800074a:	4a20      	ldr	r2, [pc, #128]	@ (80007cc <MX_ETH_Init+0x88>)
 800074c:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 800074e:	4b20      	ldr	r3, [pc, #128]	@ (80007d0 <MX_ETH_Init+0x8c>)
 8000750:	2200      	movs	r2, #0
 8000752:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8000754:	4b1e      	ldr	r3, [pc, #120]	@ (80007d0 <MX_ETH_Init+0x8c>)
 8000756:	2280      	movs	r2, #128	@ 0x80
 8000758:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 800075a:	4b1d      	ldr	r3, [pc, #116]	@ (80007d0 <MX_ETH_Init+0x8c>)
 800075c:	22e1      	movs	r2, #225	@ 0xe1
 800075e:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000760:	4b1b      	ldr	r3, [pc, #108]	@ (80007d0 <MX_ETH_Init+0x8c>)
 8000762:	2200      	movs	r2, #0
 8000764:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8000766:	4b1a      	ldr	r3, [pc, #104]	@ (80007d0 <MX_ETH_Init+0x8c>)
 8000768:	2200      	movs	r2, #0
 800076a:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 800076c:	4b18      	ldr	r3, [pc, #96]	@ (80007d0 <MX_ETH_Init+0x8c>)
 800076e:	2200      	movs	r2, #0
 8000770:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8000772:	4b15      	ldr	r3, [pc, #84]	@ (80007c8 <MX_ETH_Init+0x84>)
 8000774:	4a16      	ldr	r2, [pc, #88]	@ (80007d0 <MX_ETH_Init+0x8c>)
 8000776:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000778:	4b13      	ldr	r3, [pc, #76]	@ (80007c8 <MX_ETH_Init+0x84>)
 800077a:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800077e:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000780:	4b11      	ldr	r3, [pc, #68]	@ (80007c8 <MX_ETH_Init+0x84>)
 8000782:	4a14      	ldr	r2, [pc, #80]	@ (80007d4 <MX_ETH_Init+0x90>)
 8000784:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8000786:	4b10      	ldr	r3, [pc, #64]	@ (80007c8 <MX_ETH_Init+0x84>)
 8000788:	4a13      	ldr	r2, [pc, #76]	@ (80007d8 <MX_ETH_Init+0x94>)
 800078a:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 800078c:	4b0e      	ldr	r3, [pc, #56]	@ (80007c8 <MX_ETH_Init+0x84>)
 800078e:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 8000792:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000794:	480c      	ldr	r0, [pc, #48]	@ (80007c8 <MX_ETH_Init+0x84>)
 8000796:	f000 fdf3 	bl	8001380 <HAL_ETH_Init>
 800079a:	4603      	mov	r3, r0
 800079c:	2b00      	cmp	r3, #0
 800079e:	d001      	beq.n	80007a4 <MX_ETH_Init+0x60>
  {
    Error_Handler();
 80007a0:	f000 f9c0 	bl	8000b24 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 80007a4:	2238      	movs	r2, #56	@ 0x38
 80007a6:	2100      	movs	r1, #0
 80007a8:	480c      	ldr	r0, [pc, #48]	@ (80007dc <MX_ETH_Init+0x98>)
 80007aa:	f007 fac9 	bl	8007d40 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 80007ae:	4b0b      	ldr	r3, [pc, #44]	@ (80007dc <MX_ETH_Init+0x98>)
 80007b0:	2221      	movs	r2, #33	@ 0x21
 80007b2:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 80007b4:	4b09      	ldr	r3, [pc, #36]	@ (80007dc <MX_ETH_Init+0x98>)
 80007b6:	f44f 0240 	mov.w	r2, #12582912	@ 0xc00000
 80007ba:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 80007bc:	4b07      	ldr	r3, [pc, #28]	@ (80007dc <MX_ETH_Init+0x98>)
 80007be:	2200      	movs	r2, #0
 80007c0:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 80007c2:	bf00      	nop
 80007c4:	bd80      	pop	{r7, pc}
 80007c6:	bf00      	nop
 80007c8:	20000200 	.word	0x20000200
 80007cc:	40028000 	.word	0x40028000
 80007d0:	2000082c 	.word	0x2000082c
 80007d4:	2000010c 	.word	0x2000010c
 80007d8:	2000006c 	.word	0x2000006c
 80007dc:	200001c8 	.word	0x200001c8

080007e0 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80007e4:	4b14      	ldr	r3, [pc, #80]	@ (8000838 <MX_USART3_UART_Init+0x58>)
 80007e6:	4a15      	ldr	r2, [pc, #84]	@ (800083c <MX_USART3_UART_Init+0x5c>)
 80007e8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80007ea:	4b13      	ldr	r3, [pc, #76]	@ (8000838 <MX_USART3_UART_Init+0x58>)
 80007ec:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80007f0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80007f2:	4b11      	ldr	r3, [pc, #68]	@ (8000838 <MX_USART3_UART_Init+0x58>)
 80007f4:	2200      	movs	r2, #0
 80007f6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80007f8:	4b0f      	ldr	r3, [pc, #60]	@ (8000838 <MX_USART3_UART_Init+0x58>)
 80007fa:	2200      	movs	r2, #0
 80007fc:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80007fe:	4b0e      	ldr	r3, [pc, #56]	@ (8000838 <MX_USART3_UART_Init+0x58>)
 8000800:	2200      	movs	r2, #0
 8000802:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000804:	4b0c      	ldr	r3, [pc, #48]	@ (8000838 <MX_USART3_UART_Init+0x58>)
 8000806:	220c      	movs	r2, #12
 8000808:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800080a:	4b0b      	ldr	r3, [pc, #44]	@ (8000838 <MX_USART3_UART_Init+0x58>)
 800080c:	2200      	movs	r2, #0
 800080e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000810:	4b09      	ldr	r3, [pc, #36]	@ (8000838 <MX_USART3_UART_Init+0x58>)
 8000812:	2200      	movs	r2, #0
 8000814:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000816:	4b08      	ldr	r3, [pc, #32]	@ (8000838 <MX_USART3_UART_Init+0x58>)
 8000818:	2200      	movs	r2, #0
 800081a:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800081c:	4b06      	ldr	r3, [pc, #24]	@ (8000838 <MX_USART3_UART_Init+0x58>)
 800081e:	2200      	movs	r2, #0
 8000820:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000822:	4805      	ldr	r0, [pc, #20]	@ (8000838 <MX_USART3_UART_Init+0x58>)
 8000824:	f002 fd70 	bl	8003308 <HAL_UART_Init>
 8000828:	4603      	mov	r3, r0
 800082a:	2b00      	cmp	r3, #0
 800082c:	d001      	beq.n	8000832 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 800082e:	f000 f979 	bl	8000b24 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000832:	bf00      	nop
 8000834:	bd80      	pop	{r7, pc}
 8000836:	bf00      	nop
 8000838:	200002b0 	.word	0x200002b0
 800083c:	40004800 	.word	0x40004800

08000840 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000844:	4b14      	ldr	r3, [pc, #80]	@ (8000898 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000846:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800084a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 800084c:	4b12      	ldr	r3, [pc, #72]	@ (8000898 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800084e:	2206      	movs	r2, #6
 8000850:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000852:	4b11      	ldr	r3, [pc, #68]	@ (8000898 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000854:	2202      	movs	r2, #2
 8000856:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000858:	4b0f      	ldr	r3, [pc, #60]	@ (8000898 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800085a:	2200      	movs	r2, #0
 800085c:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800085e:	4b0e      	ldr	r3, [pc, #56]	@ (8000898 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000860:	2202      	movs	r2, #2
 8000862:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000864:	4b0c      	ldr	r3, [pc, #48]	@ (8000898 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000866:	2201      	movs	r2, #1
 8000868:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800086a:	4b0b      	ldr	r3, [pc, #44]	@ (8000898 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800086c:	2200      	movs	r2, #0
 800086e:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000870:	4b09      	ldr	r3, [pc, #36]	@ (8000898 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000872:	2200      	movs	r2, #0
 8000874:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000876:	4b08      	ldr	r3, [pc, #32]	@ (8000898 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000878:	2201      	movs	r2, #1
 800087a:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800087c:	4b06      	ldr	r3, [pc, #24]	@ (8000898 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800087e:	2200      	movs	r2, #0
 8000880:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000882:	4805      	ldr	r0, [pc, #20]	@ (8000898 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000884:	f001 faa9 	bl	8001dda <HAL_PCD_Init>
 8000888:	4603      	mov	r3, r0
 800088a:	2b00      	cmp	r3, #0
 800088c:	d001      	beq.n	8000892 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 800088e:	f000 f949 	bl	8000b24 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000892:	bf00      	nop
 8000894:	bd80      	pop	{r7, pc}
 8000896:	bf00      	nop
 8000898:	20000338 	.word	0x20000338

0800089c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	b08c      	sub	sp, #48	@ 0x30
 80008a0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008a2:	f107 031c 	add.w	r3, r7, #28
 80008a6:	2200      	movs	r2, #0
 80008a8:	601a      	str	r2, [r3, #0]
 80008aa:	605a      	str	r2, [r3, #4]
 80008ac:	609a      	str	r2, [r3, #8]
 80008ae:	60da      	str	r2, [r3, #12]
 80008b0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008b2:	4b47      	ldr	r3, [pc, #284]	@ (80009d0 <MX_GPIO_Init+0x134>)
 80008b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008b6:	4a46      	ldr	r2, [pc, #280]	@ (80009d0 <MX_GPIO_Init+0x134>)
 80008b8:	f043 0304 	orr.w	r3, r3, #4
 80008bc:	6313      	str	r3, [r2, #48]	@ 0x30
 80008be:	4b44      	ldr	r3, [pc, #272]	@ (80009d0 <MX_GPIO_Init+0x134>)
 80008c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008c2:	f003 0304 	and.w	r3, r3, #4
 80008c6:	61bb      	str	r3, [r7, #24]
 80008c8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008ca:	4b41      	ldr	r3, [pc, #260]	@ (80009d0 <MX_GPIO_Init+0x134>)
 80008cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008ce:	4a40      	ldr	r2, [pc, #256]	@ (80009d0 <MX_GPIO_Init+0x134>)
 80008d0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80008d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80008d6:	4b3e      	ldr	r3, [pc, #248]	@ (80009d0 <MX_GPIO_Init+0x134>)
 80008d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008da:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80008de:	617b      	str	r3, [r7, #20]
 80008e0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008e2:	4b3b      	ldr	r3, [pc, #236]	@ (80009d0 <MX_GPIO_Init+0x134>)
 80008e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008e6:	4a3a      	ldr	r2, [pc, #232]	@ (80009d0 <MX_GPIO_Init+0x134>)
 80008e8:	f043 0301 	orr.w	r3, r3, #1
 80008ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80008ee:	4b38      	ldr	r3, [pc, #224]	@ (80009d0 <MX_GPIO_Init+0x134>)
 80008f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008f2:	f003 0301 	and.w	r3, r3, #1
 80008f6:	613b      	str	r3, [r7, #16]
 80008f8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008fa:	4b35      	ldr	r3, [pc, #212]	@ (80009d0 <MX_GPIO_Init+0x134>)
 80008fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008fe:	4a34      	ldr	r2, [pc, #208]	@ (80009d0 <MX_GPIO_Init+0x134>)
 8000900:	f043 0302 	orr.w	r3, r3, #2
 8000904:	6313      	str	r3, [r2, #48]	@ 0x30
 8000906:	4b32      	ldr	r3, [pc, #200]	@ (80009d0 <MX_GPIO_Init+0x134>)
 8000908:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800090a:	f003 0302 	and.w	r3, r3, #2
 800090e:	60fb      	str	r3, [r7, #12]
 8000910:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000912:	4b2f      	ldr	r3, [pc, #188]	@ (80009d0 <MX_GPIO_Init+0x134>)
 8000914:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000916:	4a2e      	ldr	r2, [pc, #184]	@ (80009d0 <MX_GPIO_Init+0x134>)
 8000918:	f043 0308 	orr.w	r3, r3, #8
 800091c:	6313      	str	r3, [r2, #48]	@ 0x30
 800091e:	4b2c      	ldr	r3, [pc, #176]	@ (80009d0 <MX_GPIO_Init+0x134>)
 8000920:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000922:	f003 0308 	and.w	r3, r3, #8
 8000926:	60bb      	str	r3, [r7, #8]
 8000928:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800092a:	4b29      	ldr	r3, [pc, #164]	@ (80009d0 <MX_GPIO_Init+0x134>)
 800092c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800092e:	4a28      	ldr	r2, [pc, #160]	@ (80009d0 <MX_GPIO_Init+0x134>)
 8000930:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000934:	6313      	str	r3, [r2, #48]	@ 0x30
 8000936:	4b26      	ldr	r3, [pc, #152]	@ (80009d0 <MX_GPIO_Init+0x134>)
 8000938:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800093a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800093e:	607b      	str	r3, [r7, #4]
 8000940:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000942:	2200      	movs	r2, #0
 8000944:	f244 0181 	movw	r1, #16513	@ 0x4081
 8000948:	4822      	ldr	r0, [pc, #136]	@ (80009d4 <MX_GPIO_Init+0x138>)
 800094a:	f001 fa13 	bl	8001d74 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 800094e:	2200      	movs	r2, #0
 8000950:	2140      	movs	r1, #64	@ 0x40
 8000952:	4821      	ldr	r0, [pc, #132]	@ (80009d8 <MX_GPIO_Init+0x13c>)
 8000954:	f001 fa0e 	bl	8001d74 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000958:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800095c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800095e:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000962:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000964:	2300      	movs	r3, #0
 8000966:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000968:	f107 031c 	add.w	r3, r7, #28
 800096c:	4619      	mov	r1, r3
 800096e:	481b      	ldr	r0, [pc, #108]	@ (80009dc <MX_GPIO_Init+0x140>)
 8000970:	f001 f854 	bl	8001a1c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000974:	f244 0381 	movw	r3, #16513	@ 0x4081
 8000978:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800097a:	2301      	movs	r3, #1
 800097c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800097e:	2300      	movs	r3, #0
 8000980:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000982:	2300      	movs	r3, #0
 8000984:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000986:	f107 031c 	add.w	r3, r7, #28
 800098a:	4619      	mov	r1, r3
 800098c:	4811      	ldr	r0, [pc, #68]	@ (80009d4 <MX_GPIO_Init+0x138>)
 800098e:	f001 f845 	bl	8001a1c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000992:	2340      	movs	r3, #64	@ 0x40
 8000994:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000996:	2301      	movs	r3, #1
 8000998:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800099a:	2300      	movs	r3, #0
 800099c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800099e:	2300      	movs	r3, #0
 80009a0:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80009a2:	f107 031c 	add.w	r3, r7, #28
 80009a6:	4619      	mov	r1, r3
 80009a8:	480b      	ldr	r0, [pc, #44]	@ (80009d8 <MX_GPIO_Init+0x13c>)
 80009aa:	f001 f837 	bl	8001a1c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80009ae:	2380      	movs	r3, #128	@ 0x80
 80009b0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009b2:	2300      	movs	r3, #0
 80009b4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b6:	2300      	movs	r3, #0
 80009b8:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80009ba:	f107 031c 	add.w	r3, r7, #28
 80009be:	4619      	mov	r1, r3
 80009c0:	4805      	ldr	r0, [pc, #20]	@ (80009d8 <MX_GPIO_Init+0x13c>)
 80009c2:	f001 f82b 	bl	8001a1c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80009c6:	bf00      	nop
 80009c8:	3730      	adds	r7, #48	@ 0x30
 80009ca:	46bd      	mov	sp, r7
 80009cc:	bd80      	pop	{r7, pc}
 80009ce:	bf00      	nop
 80009d0:	40023800 	.word	0x40023800
 80009d4:	40020400 	.word	0x40020400
 80009d8:	40021800 	.word	0x40021800
 80009dc:	40020800 	.word	0x40020800

080009e0 <__io_putchar>:

/* USER CODE BEGIN 4 */
int __io_putchar(int ch) {
 80009e0:	b580      	push	{r7, lr}
 80009e2:	b082      	sub	sp, #8
 80009e4:	af00      	add	r7, sp, #0
 80009e6:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart3, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 80009e8:	1d39      	adds	r1, r7, #4
 80009ea:	f04f 33ff 	mov.w	r3, #4294967295
 80009ee:	2201      	movs	r2, #1
 80009f0:	4803      	ldr	r0, [pc, #12]	@ (8000a00 <__io_putchar+0x20>)
 80009f2:	f002 fcd7 	bl	80033a4 <HAL_UART_Transmit>
    return ch;
 80009f6:	687b      	ldr	r3, [r7, #4]
}
 80009f8:	4618      	mov	r0, r3
 80009fa:	3708      	adds	r7, #8
 80009fc:	46bd      	mov	sp, r7
 80009fe:	bd80      	pop	{r7, pc}
 8000a00:	200002b0 	.word	0x200002b0

08000a04 <Tarefa3_Handle>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_Tarefa3_Handle */
void Tarefa3_Handle(void *argument)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	b082      	sub	sp, #8
 8000a08:	af00      	add	r7, sp, #0
 8000a0a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {

	if(osMutexAcquire(MeuMutexHandleHandle, 2000) != osOK){
 8000a0c:	4b12      	ldr	r3, [pc, #72]	@ (8000a58 <Tarefa3_Handle+0x54>)
 8000a0e:	681b      	ldr	r3, [r3, #0]
 8000a10:	f44f 61fa 	mov.w	r1, #2000	@ 0x7d0
 8000a14:	4618      	mov	r0, r3
 8000a16:	f003 fea5 	bl	8004764 <osMutexAcquire>
 8000a1a:	4603      	mov	r3, r0
 8000a1c:	2b00      	cmp	r3, #0
 8000a1e:	d008      	beq.n	8000a32 <Tarefa3_Handle+0x2e>
		printf("Tarefa 3: esperando mutex por tempo excessivo.\n");
 8000a20:	480e      	ldr	r0, [pc, #56]	@ (8000a5c <Tarefa3_Handle+0x58>)
 8000a22:	f007 f8ad 	bl	8007b80 <puts>
		HAL_GPIO_TogglePin(GPIOB, LD3_Pin);
 8000a26:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000a2a:	480d      	ldr	r0, [pc, #52]	@ (8000a60 <Tarefa3_Handle+0x5c>)
 8000a2c:	f001 f9bb 	bl	8001da6 <HAL_GPIO_TogglePin>
 8000a30:	e00c      	b.n	8000a4c <Tarefa3_Handle+0x48>
	}else{
		HAL_GPIO_TogglePin(GPIOB, LD3_Pin);
 8000a32:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000a36:	480a      	ldr	r0, [pc, #40]	@ (8000a60 <Tarefa3_Handle+0x5c>)
 8000a38:	f001 f9b5 	bl	8001da6 <HAL_GPIO_TogglePin>
		printf("Tarefa 3 Pegou o Mutex !\n");
 8000a3c:	4809      	ldr	r0, [pc, #36]	@ (8000a64 <Tarefa3_Handle+0x60>)
 8000a3e:	f007 f89f 	bl	8007b80 <puts>
		osMutexRelease(MeuMutexHandleHandle);
 8000a42:	4b05      	ldr	r3, [pc, #20]	@ (8000a58 <Tarefa3_Handle+0x54>)
 8000a44:	681b      	ldr	r3, [r3, #0]
 8000a46:	4618      	mov	r0, r3
 8000a48:	f003 feea 	bl	8004820 <osMutexRelease>
	}
    osDelay(1000);
 8000a4c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000a50:	f003 fdc0 	bl	80045d4 <osDelay>
	if(osMutexAcquire(MeuMutexHandleHandle, 2000) != osOK){
 8000a54:	e7da      	b.n	8000a0c <Tarefa3_Handle+0x8>
 8000a56:	bf00      	nop
 8000a58:	20000824 	.word	0x20000824
 8000a5c:	08008968 	.word	0x08008968
 8000a60:	40020400 	.word	0x40020400
 8000a64:	08008998 	.word	0x08008998

08000a68 <Tarefa1_Handle>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Tarefa1_Handle */
void Tarefa1_Handle(void *argument)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	b082      	sub	sp, #8
 8000a6c:	af00      	add	r7, sp, #0
 8000a6e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Tarefa1_Handle */
  /* Infinite loop */
  for(;;)
  {
	osMutexAcquire(MeuMutexHandleHandle, osWaitForever);
 8000a70:	4b0c      	ldr	r3, [pc, #48]	@ (8000aa4 <Tarefa1_Handle+0x3c>)
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	f04f 31ff 	mov.w	r1, #4294967295
 8000a78:	4618      	mov	r0, r3
 8000a7a:	f003 fe73 	bl	8004764 <osMutexAcquire>
	HAL_GPIO_TogglePin(GPIOB, LD1_Pin);
 8000a7e:	2101      	movs	r1, #1
 8000a80:	4809      	ldr	r0, [pc, #36]	@ (8000aa8 <Tarefa1_Handle+0x40>)
 8000a82:	f001 f990 	bl	8001da6 <HAL_GPIO_TogglePin>
	printf("Tarefa 1 Pegou o Mutex !\n");
 8000a86:	4809      	ldr	r0, [pc, #36]	@ (8000aac <Tarefa1_Handle+0x44>)
 8000a88:	f007 f87a 	bl	8007b80 <puts>
    osDelay(1000);
 8000a8c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000a90:	f003 fda0 	bl	80045d4 <osDelay>
    osMutexRelease(MeuMutexHandleHandle);
 8000a94:	4b03      	ldr	r3, [pc, #12]	@ (8000aa4 <Tarefa1_Handle+0x3c>)
 8000a96:	681b      	ldr	r3, [r3, #0]
 8000a98:	4618      	mov	r0, r3
 8000a9a:	f003 fec1 	bl	8004820 <osMutexRelease>
	osMutexAcquire(MeuMutexHandleHandle, osWaitForever);
 8000a9e:	bf00      	nop
 8000aa0:	e7e6      	b.n	8000a70 <Tarefa1_Handle+0x8>
 8000aa2:	bf00      	nop
 8000aa4:	20000824 	.word	0x20000824
 8000aa8:	40020400 	.word	0x40020400
 8000aac:	080089b4 	.word	0x080089b4

08000ab0 <Tarefa2_Handle>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Tarefa2_Handle */
void Tarefa2_Handle(void *argument)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	b084      	sub	sp, #16
 8000ab4:	af00      	add	r7, sp, #0
 8000ab6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Tarefa2_Handle */
  /* Infinite loop */
  for(;;)
  {

	osMutexAcquire(MeuMutexHandleHandle, osWaitForever);
 8000ab8:	4b16      	ldr	r3, [pc, #88]	@ (8000b14 <Tarefa2_Handle+0x64>)
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	f04f 31ff 	mov.w	r1, #4294967295
 8000ac0:	4618      	mov	r0, r3
 8000ac2:	f003 fe4f 	bl	8004764 <osMutexAcquire>
	for(int i = 0; i < 3; i++){
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	60fb      	str	r3, [r7, #12]
 8000aca:	e012      	b.n	8000af2 <Tarefa2_Handle+0x42>
		printf("Tarefa 2: Utilizando o Mutex Pela %iº vez\n",task2Cont);
 8000acc:	4b12      	ldr	r3, [pc, #72]	@ (8000b18 <Tarefa2_Handle+0x68>)
 8000ace:	781b      	ldrb	r3, [r3, #0]
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4812      	ldr	r0, [pc, #72]	@ (8000b1c <Tarefa2_Handle+0x6c>)
 8000ad4:	f006 ffec 	bl	8007ab0 <iprintf>
		HAL_GPIO_TogglePin(GPIOB, LD2_Pin);
 8000ad8:	2180      	movs	r1, #128	@ 0x80
 8000ada:	4811      	ldr	r0, [pc, #68]	@ (8000b20 <Tarefa2_Handle+0x70>)
 8000adc:	f001 f963 	bl	8001da6 <HAL_GPIO_TogglePin>
		task2Cont += 1;
 8000ae0:	4b0d      	ldr	r3, [pc, #52]	@ (8000b18 <Tarefa2_Handle+0x68>)
 8000ae2:	781b      	ldrb	r3, [r3, #0]
 8000ae4:	3301      	adds	r3, #1
 8000ae6:	b2da      	uxtb	r2, r3
 8000ae8:	4b0b      	ldr	r3, [pc, #44]	@ (8000b18 <Tarefa2_Handle+0x68>)
 8000aea:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < 3; i++){
 8000aec:	68fb      	ldr	r3, [r7, #12]
 8000aee:	3301      	adds	r3, #1
 8000af0:	60fb      	str	r3, [r7, #12]
 8000af2:	68fb      	ldr	r3, [r7, #12]
 8000af4:	2b02      	cmp	r3, #2
 8000af6:	dde9      	ble.n	8000acc <Tarefa2_Handle+0x1c>
	}

	if(task2Cont == 3){
 8000af8:	4b07      	ldr	r3, [pc, #28]	@ (8000b18 <Tarefa2_Handle+0x68>)
 8000afa:	781b      	ldrb	r3, [r3, #0]
 8000afc:	2b03      	cmp	r3, #3
 8000afe:	d104      	bne.n	8000b0a <Tarefa2_Handle+0x5a>
		osMutexRelease(MeuMutexHandleHandle);
 8000b00:	4b04      	ldr	r3, [pc, #16]	@ (8000b14 <Tarefa2_Handle+0x64>)
 8000b02:	681b      	ldr	r3, [r3, #0]
 8000b04:	4618      	mov	r0, r3
 8000b06:	f003 fe8b 	bl	8004820 <osMutexRelease>
	}
    osDelay(1000);
 8000b0a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000b0e:	f003 fd61 	bl	80045d4 <osDelay>
	osMutexAcquire(MeuMutexHandleHandle, osWaitForever);
 8000b12:	e7d1      	b.n	8000ab8 <Tarefa2_Handle+0x8>
 8000b14:	20000824 	.word	0x20000824
 8000b18:	20000828 	.word	0x20000828
 8000b1c:	080089d0 	.word	0x080089d0
 8000b20:	40020400 	.word	0x40020400

08000b24 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b24:	b480      	push	{r7}
 8000b26:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b28:	b672      	cpsid	i
}
 8000b2a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b2c:	bf00      	nop
 8000b2e:	e7fd      	b.n	8000b2c <Error_Handler+0x8>

08000b30 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	b082      	sub	sp, #8
 8000b34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000b36:	4b11      	ldr	r3, [pc, #68]	@ (8000b7c <HAL_MspInit+0x4c>)
 8000b38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b3a:	4a10      	ldr	r2, [pc, #64]	@ (8000b7c <HAL_MspInit+0x4c>)
 8000b3c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000b40:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b42:	4b0e      	ldr	r3, [pc, #56]	@ (8000b7c <HAL_MspInit+0x4c>)
 8000b44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b46:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000b4a:	607b      	str	r3, [r7, #4]
 8000b4c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b4e:	4b0b      	ldr	r3, [pc, #44]	@ (8000b7c <HAL_MspInit+0x4c>)
 8000b50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b52:	4a0a      	ldr	r2, [pc, #40]	@ (8000b7c <HAL_MspInit+0x4c>)
 8000b54:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000b58:	6453      	str	r3, [r2, #68]	@ 0x44
 8000b5a:	4b08      	ldr	r3, [pc, #32]	@ (8000b7c <HAL_MspInit+0x4c>)
 8000b5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b5e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000b62:	603b      	str	r3, [r7, #0]
 8000b64:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000b66:	2200      	movs	r2, #0
 8000b68:	210f      	movs	r1, #15
 8000b6a:	f06f 0001 	mvn.w	r0, #1
 8000b6e:	f000 fbde 	bl	800132e <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b72:	bf00      	nop
 8000b74:	3708      	adds	r7, #8
 8000b76:	46bd      	mov	sp, r7
 8000b78:	bd80      	pop	{r7, pc}
 8000b7a:	bf00      	nop
 8000b7c:	40023800 	.word	0x40023800

08000b80 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b08e      	sub	sp, #56	@ 0x38
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b88:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	601a      	str	r2, [r3, #0]
 8000b90:	605a      	str	r2, [r3, #4]
 8000b92:	609a      	str	r2, [r3, #8]
 8000b94:	60da      	str	r2, [r3, #12]
 8000b96:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	4a4e      	ldr	r2, [pc, #312]	@ (8000cd8 <HAL_ETH_MspInit+0x158>)
 8000b9e:	4293      	cmp	r3, r2
 8000ba0:	f040 8096 	bne.w	8000cd0 <HAL_ETH_MspInit+0x150>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8000ba4:	4b4d      	ldr	r3, [pc, #308]	@ (8000cdc <HAL_ETH_MspInit+0x15c>)
 8000ba6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ba8:	4a4c      	ldr	r2, [pc, #304]	@ (8000cdc <HAL_ETH_MspInit+0x15c>)
 8000baa:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000bae:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bb0:	4b4a      	ldr	r3, [pc, #296]	@ (8000cdc <HAL_ETH_MspInit+0x15c>)
 8000bb2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bb4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000bb8:	623b      	str	r3, [r7, #32]
 8000bba:	6a3b      	ldr	r3, [r7, #32]
 8000bbc:	4b47      	ldr	r3, [pc, #284]	@ (8000cdc <HAL_ETH_MspInit+0x15c>)
 8000bbe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bc0:	4a46      	ldr	r2, [pc, #280]	@ (8000cdc <HAL_ETH_MspInit+0x15c>)
 8000bc2:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8000bc6:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bc8:	4b44      	ldr	r3, [pc, #272]	@ (8000cdc <HAL_ETH_MspInit+0x15c>)
 8000bca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bcc:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8000bd0:	61fb      	str	r3, [r7, #28]
 8000bd2:	69fb      	ldr	r3, [r7, #28]
 8000bd4:	4b41      	ldr	r3, [pc, #260]	@ (8000cdc <HAL_ETH_MspInit+0x15c>)
 8000bd6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bd8:	4a40      	ldr	r2, [pc, #256]	@ (8000cdc <HAL_ETH_MspInit+0x15c>)
 8000bda:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8000bde:	6313      	str	r3, [r2, #48]	@ 0x30
 8000be0:	4b3e      	ldr	r3, [pc, #248]	@ (8000cdc <HAL_ETH_MspInit+0x15c>)
 8000be2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000be4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8000be8:	61bb      	str	r3, [r7, #24]
 8000bea:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bec:	4b3b      	ldr	r3, [pc, #236]	@ (8000cdc <HAL_ETH_MspInit+0x15c>)
 8000bee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bf0:	4a3a      	ldr	r2, [pc, #232]	@ (8000cdc <HAL_ETH_MspInit+0x15c>)
 8000bf2:	f043 0304 	orr.w	r3, r3, #4
 8000bf6:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bf8:	4b38      	ldr	r3, [pc, #224]	@ (8000cdc <HAL_ETH_MspInit+0x15c>)
 8000bfa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bfc:	f003 0304 	and.w	r3, r3, #4
 8000c00:	617b      	str	r3, [r7, #20]
 8000c02:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c04:	4b35      	ldr	r3, [pc, #212]	@ (8000cdc <HAL_ETH_MspInit+0x15c>)
 8000c06:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c08:	4a34      	ldr	r2, [pc, #208]	@ (8000cdc <HAL_ETH_MspInit+0x15c>)
 8000c0a:	f043 0301 	orr.w	r3, r3, #1
 8000c0e:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c10:	4b32      	ldr	r3, [pc, #200]	@ (8000cdc <HAL_ETH_MspInit+0x15c>)
 8000c12:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c14:	f003 0301 	and.w	r3, r3, #1
 8000c18:	613b      	str	r3, [r7, #16]
 8000c1a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c1c:	4b2f      	ldr	r3, [pc, #188]	@ (8000cdc <HAL_ETH_MspInit+0x15c>)
 8000c1e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c20:	4a2e      	ldr	r2, [pc, #184]	@ (8000cdc <HAL_ETH_MspInit+0x15c>)
 8000c22:	f043 0302 	orr.w	r3, r3, #2
 8000c26:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c28:	4b2c      	ldr	r3, [pc, #176]	@ (8000cdc <HAL_ETH_MspInit+0x15c>)
 8000c2a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c2c:	f003 0302 	and.w	r3, r3, #2
 8000c30:	60fb      	str	r3, [r7, #12]
 8000c32:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000c34:	4b29      	ldr	r3, [pc, #164]	@ (8000cdc <HAL_ETH_MspInit+0x15c>)
 8000c36:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c38:	4a28      	ldr	r2, [pc, #160]	@ (8000cdc <HAL_ETH_MspInit+0x15c>)
 8000c3a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000c3e:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c40:	4b26      	ldr	r3, [pc, #152]	@ (8000cdc <HAL_ETH_MspInit+0x15c>)
 8000c42:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c44:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000c48:	60bb      	str	r3, [r7, #8]
 8000c4a:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000c4c:	2332      	movs	r3, #50	@ 0x32
 8000c4e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c50:	2302      	movs	r3, #2
 8000c52:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c54:	2300      	movs	r3, #0
 8000c56:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c58:	2303      	movs	r3, #3
 8000c5a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000c5c:	230b      	movs	r3, #11
 8000c5e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c60:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c64:	4619      	mov	r1, r3
 8000c66:	481e      	ldr	r0, [pc, #120]	@ (8000ce0 <HAL_ETH_MspInit+0x160>)
 8000c68:	f000 fed8 	bl	8001a1c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000c6c:	2386      	movs	r3, #134	@ 0x86
 8000c6e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c70:	2302      	movs	r3, #2
 8000c72:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c74:	2300      	movs	r3, #0
 8000c76:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c78:	2303      	movs	r3, #3
 8000c7a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000c7c:	230b      	movs	r3, #11
 8000c7e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c80:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c84:	4619      	mov	r1, r3
 8000c86:	4817      	ldr	r0, [pc, #92]	@ (8000ce4 <HAL_ETH_MspInit+0x164>)
 8000c88:	f000 fec8 	bl	8001a1c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000c8c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000c90:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c92:	2302      	movs	r3, #2
 8000c94:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c96:	2300      	movs	r3, #0
 8000c98:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c9a:	2303      	movs	r3, #3
 8000c9c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000c9e:	230b      	movs	r3, #11
 8000ca0:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000ca2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ca6:	4619      	mov	r1, r3
 8000ca8:	480f      	ldr	r0, [pc, #60]	@ (8000ce8 <HAL_ETH_MspInit+0x168>)
 8000caa:	f000 feb7 	bl	8001a1c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000cae:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8000cb2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cb4:	2302      	movs	r3, #2
 8000cb6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cb8:	2300      	movs	r3, #0
 8000cba:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cbc:	2303      	movs	r3, #3
 8000cbe:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000cc0:	230b      	movs	r3, #11
 8000cc2:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000cc4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000cc8:	4619      	mov	r1, r3
 8000cca:	4808      	ldr	r0, [pc, #32]	@ (8000cec <HAL_ETH_MspInit+0x16c>)
 8000ccc:	f000 fea6 	bl	8001a1c <HAL_GPIO_Init>

  /* USER CODE END ETH_MspInit 1 */

  }

}
 8000cd0:	bf00      	nop
 8000cd2:	3738      	adds	r7, #56	@ 0x38
 8000cd4:	46bd      	mov	sp, r7
 8000cd6:	bd80      	pop	{r7, pc}
 8000cd8:	40028000 	.word	0x40028000
 8000cdc:	40023800 	.word	0x40023800
 8000ce0:	40020800 	.word	0x40020800
 8000ce4:	40020000 	.word	0x40020000
 8000ce8:	40020400 	.word	0x40020400
 8000cec:	40021800 	.word	0x40021800

08000cf0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	b0ae      	sub	sp, #184	@ 0xb8
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cf8:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	601a      	str	r2, [r3, #0]
 8000d00:	605a      	str	r2, [r3, #4]
 8000d02:	609a      	str	r2, [r3, #8]
 8000d04:	60da      	str	r2, [r3, #12]
 8000d06:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000d08:	f107 0314 	add.w	r3, r7, #20
 8000d0c:	2290      	movs	r2, #144	@ 0x90
 8000d0e:	2100      	movs	r1, #0
 8000d10:	4618      	mov	r0, r3
 8000d12:	f007 f815 	bl	8007d40 <memset>
  if(huart->Instance==USART3)
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	681b      	ldr	r3, [r3, #0]
 8000d1a:	4a22      	ldr	r2, [pc, #136]	@ (8000da4 <HAL_UART_MspInit+0xb4>)
 8000d1c:	4293      	cmp	r3, r2
 8000d1e:	d13c      	bne.n	8000d9a <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000d20:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000d24:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000d26:	2300      	movs	r3, #0
 8000d28:	663b      	str	r3, [r7, #96]	@ 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000d2a:	f107 0314 	add.w	r3, r7, #20
 8000d2e:	4618      	mov	r0, r3
 8000d30:	f001 fec2 	bl	8002ab8 <HAL_RCCEx_PeriphCLKConfig>
 8000d34:	4603      	mov	r3, r0
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d001      	beq.n	8000d3e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000d3a:	f7ff fef3 	bl	8000b24 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000d3e:	4b1a      	ldr	r3, [pc, #104]	@ (8000da8 <HAL_UART_MspInit+0xb8>)
 8000d40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d42:	4a19      	ldr	r2, [pc, #100]	@ (8000da8 <HAL_UART_MspInit+0xb8>)
 8000d44:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000d48:	6413      	str	r3, [r2, #64]	@ 0x40
 8000d4a:	4b17      	ldr	r3, [pc, #92]	@ (8000da8 <HAL_UART_MspInit+0xb8>)
 8000d4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d4e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000d52:	613b      	str	r3, [r7, #16]
 8000d54:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d56:	4b14      	ldr	r3, [pc, #80]	@ (8000da8 <HAL_UART_MspInit+0xb8>)
 8000d58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d5a:	4a13      	ldr	r2, [pc, #76]	@ (8000da8 <HAL_UART_MspInit+0xb8>)
 8000d5c:	f043 0308 	orr.w	r3, r3, #8
 8000d60:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d62:	4b11      	ldr	r3, [pc, #68]	@ (8000da8 <HAL_UART_MspInit+0xb8>)
 8000d64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d66:	f003 0308 	and.w	r3, r3, #8
 8000d6a:	60fb      	str	r3, [r7, #12]
 8000d6c:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000d6e:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000d72:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d76:	2302      	movs	r3, #2
 8000d78:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d82:	2303      	movs	r3, #3
 8000d84:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000d88:	2307      	movs	r3, #7
 8000d8a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d8e:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000d92:	4619      	mov	r1, r3
 8000d94:	4805      	ldr	r0, [pc, #20]	@ (8000dac <HAL_UART_MspInit+0xbc>)
 8000d96:	f000 fe41 	bl	8001a1c <HAL_GPIO_Init>

  /* USER CODE END USART3_MspInit 1 */

  }

}
 8000d9a:	bf00      	nop
 8000d9c:	37b8      	adds	r7, #184	@ 0xb8
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	bd80      	pop	{r7, pc}
 8000da2:	bf00      	nop
 8000da4:	40004800 	.word	0x40004800
 8000da8:	40023800 	.word	0x40023800
 8000dac:	40020c00 	.word	0x40020c00

08000db0 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	b0ae      	sub	sp, #184	@ 0xb8
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000db8:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	601a      	str	r2, [r3, #0]
 8000dc0:	605a      	str	r2, [r3, #4]
 8000dc2:	609a      	str	r2, [r3, #8]
 8000dc4:	60da      	str	r2, [r3, #12]
 8000dc6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000dc8:	f107 0314 	add.w	r3, r7, #20
 8000dcc:	2290      	movs	r2, #144	@ 0x90
 8000dce:	2100      	movs	r1, #0
 8000dd0:	4618      	mov	r0, r3
 8000dd2:	f006 ffb5 	bl	8007d40 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8000dde:	d159      	bne.n	8000e94 <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8000de0:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8000de4:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8000de6:	2300      	movs	r3, #0
 8000de8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000dec:	f107 0314 	add.w	r3, r7, #20
 8000df0:	4618      	mov	r0, r3
 8000df2:	f001 fe61 	bl	8002ab8 <HAL_RCCEx_PeriphCLKConfig>
 8000df6:	4603      	mov	r3, r0
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	d001      	beq.n	8000e00 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8000dfc:	f7ff fe92 	bl	8000b24 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e00:	4b26      	ldr	r3, [pc, #152]	@ (8000e9c <HAL_PCD_MspInit+0xec>)
 8000e02:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e04:	4a25      	ldr	r2, [pc, #148]	@ (8000e9c <HAL_PCD_MspInit+0xec>)
 8000e06:	f043 0301 	orr.w	r3, r3, #1
 8000e0a:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e0c:	4b23      	ldr	r3, [pc, #140]	@ (8000e9c <HAL_PCD_MspInit+0xec>)
 8000e0e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e10:	f003 0301 	and.w	r3, r3, #1
 8000e14:	613b      	str	r3, [r7, #16]
 8000e16:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000e18:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 8000e1c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e20:	2302      	movs	r3, #2
 8000e22:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e26:	2300      	movs	r3, #0
 8000e28:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e2c:	2303      	movs	r3, #3
 8000e2e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000e32:	230a      	movs	r3, #10
 8000e34:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e38:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000e3c:	4619      	mov	r1, r3
 8000e3e:	4818      	ldr	r0, [pc, #96]	@ (8000ea0 <HAL_PCD_MspInit+0xf0>)
 8000e40:	f000 fdec 	bl	8001a1c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000e44:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000e48:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e52:	2300      	movs	r3, #0
 8000e54:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000e58:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000e5c:	4619      	mov	r1, r3
 8000e5e:	4810      	ldr	r0, [pc, #64]	@ (8000ea0 <HAL_PCD_MspInit+0xf0>)
 8000e60:	f000 fddc 	bl	8001a1c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000e64:	4b0d      	ldr	r3, [pc, #52]	@ (8000e9c <HAL_PCD_MspInit+0xec>)
 8000e66:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000e68:	4a0c      	ldr	r2, [pc, #48]	@ (8000e9c <HAL_PCD_MspInit+0xec>)
 8000e6a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000e6e:	6353      	str	r3, [r2, #52]	@ 0x34
 8000e70:	4b0a      	ldr	r3, [pc, #40]	@ (8000e9c <HAL_PCD_MspInit+0xec>)
 8000e72:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000e74:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000e78:	60fb      	str	r3, [r7, #12]
 8000e7a:	68fb      	ldr	r3, [r7, #12]
 8000e7c:	4b07      	ldr	r3, [pc, #28]	@ (8000e9c <HAL_PCD_MspInit+0xec>)
 8000e7e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e80:	4a06      	ldr	r2, [pc, #24]	@ (8000e9c <HAL_PCD_MspInit+0xec>)
 8000e82:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000e86:	6453      	str	r3, [r2, #68]	@ 0x44
 8000e88:	4b04      	ldr	r3, [pc, #16]	@ (8000e9c <HAL_PCD_MspInit+0xec>)
 8000e8a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e8c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000e90:	60bb      	str	r3, [r7, #8]
 8000e92:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END USB_OTG_FS_MspInit 1 */

  }

}
 8000e94:	bf00      	nop
 8000e96:	37b8      	adds	r7, #184	@ 0xb8
 8000e98:	46bd      	mov	sp, r7
 8000e9a:	bd80      	pop	{r7, pc}
 8000e9c:	40023800 	.word	0x40023800
 8000ea0:	40020000 	.word	0x40020000

08000ea4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ea4:	b480      	push	{r7}
 8000ea6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000ea8:	bf00      	nop
 8000eaa:	e7fd      	b.n	8000ea8 <NMI_Handler+0x4>

08000eac <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000eac:	b480      	push	{r7}
 8000eae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000eb0:	bf00      	nop
 8000eb2:	e7fd      	b.n	8000eb0 <HardFault_Handler+0x4>

08000eb4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000eb4:	b480      	push	{r7}
 8000eb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000eb8:	bf00      	nop
 8000eba:	e7fd      	b.n	8000eb8 <MemManage_Handler+0x4>

08000ebc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ebc:	b480      	push	{r7}
 8000ebe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ec0:	bf00      	nop
 8000ec2:	e7fd      	b.n	8000ec0 <BusFault_Handler+0x4>

08000ec4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ec4:	b480      	push	{r7}
 8000ec6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ec8:	bf00      	nop
 8000eca:	e7fd      	b.n	8000ec8 <UsageFault_Handler+0x4>

08000ecc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ecc:	b480      	push	{r7}
 8000ece:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ed0:	bf00      	nop
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed8:	4770      	bx	lr

08000eda <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000eda:	b580      	push	{r7, lr}
 8000edc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ede:	f000 f925 	bl	800112c <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8000ee2:	f005 fba7 	bl	8006634 <xTaskGetSchedulerState>
 8000ee6:	4603      	mov	r3, r0
 8000ee8:	2b01      	cmp	r3, #1
 8000eea:	d001      	beq.n	8000ef0 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8000eec:	f006 fa9c 	bl	8007428 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ef0:	bf00      	nop
 8000ef2:	bd80      	pop	{r7, pc}

08000ef4 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b086      	sub	sp, #24
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	60f8      	str	r0, [r7, #12]
 8000efc:	60b9      	str	r1, [r7, #8]
 8000efe:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f00:	2300      	movs	r3, #0
 8000f02:	617b      	str	r3, [r7, #20]
 8000f04:	e00a      	b.n	8000f1c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000f06:	f3af 8000 	nop.w
 8000f0a:	4601      	mov	r1, r0
 8000f0c:	68bb      	ldr	r3, [r7, #8]
 8000f0e:	1c5a      	adds	r2, r3, #1
 8000f10:	60ba      	str	r2, [r7, #8]
 8000f12:	b2ca      	uxtb	r2, r1
 8000f14:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f16:	697b      	ldr	r3, [r7, #20]
 8000f18:	3301      	adds	r3, #1
 8000f1a:	617b      	str	r3, [r7, #20]
 8000f1c:	697a      	ldr	r2, [r7, #20]
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	429a      	cmp	r2, r3
 8000f22:	dbf0      	blt.n	8000f06 <_read+0x12>
  }

  return len;
 8000f24:	687b      	ldr	r3, [r7, #4]
}
 8000f26:	4618      	mov	r0, r3
 8000f28:	3718      	adds	r7, #24
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	bd80      	pop	{r7, pc}

08000f2e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000f2e:	b580      	push	{r7, lr}
 8000f30:	b086      	sub	sp, #24
 8000f32:	af00      	add	r7, sp, #0
 8000f34:	60f8      	str	r0, [r7, #12]
 8000f36:	60b9      	str	r1, [r7, #8]
 8000f38:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	617b      	str	r3, [r7, #20]
 8000f3e:	e009      	b.n	8000f54 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000f40:	68bb      	ldr	r3, [r7, #8]
 8000f42:	1c5a      	adds	r2, r3, #1
 8000f44:	60ba      	str	r2, [r7, #8]
 8000f46:	781b      	ldrb	r3, [r3, #0]
 8000f48:	4618      	mov	r0, r3
 8000f4a:	f7ff fd49 	bl	80009e0 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f4e:	697b      	ldr	r3, [r7, #20]
 8000f50:	3301      	adds	r3, #1
 8000f52:	617b      	str	r3, [r7, #20]
 8000f54:	697a      	ldr	r2, [r7, #20]
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	429a      	cmp	r2, r3
 8000f5a:	dbf1      	blt.n	8000f40 <_write+0x12>
  }
  return len;
 8000f5c:	687b      	ldr	r3, [r7, #4]
}
 8000f5e:	4618      	mov	r0, r3
 8000f60:	3718      	adds	r7, #24
 8000f62:	46bd      	mov	sp, r7
 8000f64:	bd80      	pop	{r7, pc}

08000f66 <_close>:

int _close(int file)
{
 8000f66:	b480      	push	{r7}
 8000f68:	b083      	sub	sp, #12
 8000f6a:	af00      	add	r7, sp, #0
 8000f6c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000f6e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000f72:	4618      	mov	r0, r3
 8000f74:	370c      	adds	r7, #12
 8000f76:	46bd      	mov	sp, r7
 8000f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7c:	4770      	bx	lr

08000f7e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000f7e:	b480      	push	{r7}
 8000f80:	b083      	sub	sp, #12
 8000f82:	af00      	add	r7, sp, #0
 8000f84:	6078      	str	r0, [r7, #4]
 8000f86:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000f88:	683b      	ldr	r3, [r7, #0]
 8000f8a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000f8e:	605a      	str	r2, [r3, #4]
  return 0;
 8000f90:	2300      	movs	r3, #0
}
 8000f92:	4618      	mov	r0, r3
 8000f94:	370c      	adds	r7, #12
 8000f96:	46bd      	mov	sp, r7
 8000f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9c:	4770      	bx	lr

08000f9e <_isatty>:

int _isatty(int file)
{
 8000f9e:	b480      	push	{r7}
 8000fa0:	b083      	sub	sp, #12
 8000fa2:	af00      	add	r7, sp, #0
 8000fa4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000fa6:	2301      	movs	r3, #1
}
 8000fa8:	4618      	mov	r0, r3
 8000faa:	370c      	adds	r7, #12
 8000fac:	46bd      	mov	sp, r7
 8000fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb2:	4770      	bx	lr

08000fb4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000fb4:	b480      	push	{r7}
 8000fb6:	b085      	sub	sp, #20
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	60f8      	str	r0, [r7, #12]
 8000fbc:	60b9      	str	r1, [r7, #8]
 8000fbe:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000fc0:	2300      	movs	r3, #0
}
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	3714      	adds	r7, #20
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fcc:	4770      	bx	lr
	...

08000fd0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b086      	sub	sp, #24
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000fd8:	4a14      	ldr	r2, [pc, #80]	@ (800102c <_sbrk+0x5c>)
 8000fda:	4b15      	ldr	r3, [pc, #84]	@ (8001030 <_sbrk+0x60>)
 8000fdc:	1ad3      	subs	r3, r2, r3
 8000fde:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000fe0:	697b      	ldr	r3, [r7, #20]
 8000fe2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000fe4:	4b13      	ldr	r3, [pc, #76]	@ (8001034 <_sbrk+0x64>)
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d102      	bne.n	8000ff2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000fec:	4b11      	ldr	r3, [pc, #68]	@ (8001034 <_sbrk+0x64>)
 8000fee:	4a12      	ldr	r2, [pc, #72]	@ (8001038 <_sbrk+0x68>)
 8000ff0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000ff2:	4b10      	ldr	r3, [pc, #64]	@ (8001034 <_sbrk+0x64>)
 8000ff4:	681a      	ldr	r2, [r3, #0]
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	4413      	add	r3, r2
 8000ffa:	693a      	ldr	r2, [r7, #16]
 8000ffc:	429a      	cmp	r2, r3
 8000ffe:	d207      	bcs.n	8001010 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001000:	f006 ff42 	bl	8007e88 <__errno>
 8001004:	4603      	mov	r3, r0
 8001006:	220c      	movs	r2, #12
 8001008:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800100a:	f04f 33ff 	mov.w	r3, #4294967295
 800100e:	e009      	b.n	8001024 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001010:	4b08      	ldr	r3, [pc, #32]	@ (8001034 <_sbrk+0x64>)
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001016:	4b07      	ldr	r3, [pc, #28]	@ (8001034 <_sbrk+0x64>)
 8001018:	681a      	ldr	r2, [r3, #0]
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	4413      	add	r3, r2
 800101e:	4a05      	ldr	r2, [pc, #20]	@ (8001034 <_sbrk+0x64>)
 8001020:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001022:	68fb      	ldr	r3, [r7, #12]
}
 8001024:	4618      	mov	r0, r3
 8001026:	3718      	adds	r7, #24
 8001028:	46bd      	mov	sp, r7
 800102a:	bd80      	pop	{r7, pc}
 800102c:	20080000 	.word	0x20080000
 8001030:	00000400 	.word	0x00000400
 8001034:	20000834 	.word	0x20000834
 8001038:	20005368 	.word	0x20005368

0800103c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800103c:	b480      	push	{r7}
 800103e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001040:	4b06      	ldr	r3, [pc, #24]	@ (800105c <SystemInit+0x20>)
 8001042:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001046:	4a05      	ldr	r2, [pc, #20]	@ (800105c <SystemInit+0x20>)
 8001048:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800104c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001050:	bf00      	nop
 8001052:	46bd      	mov	sp, r7
 8001054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001058:	4770      	bx	lr
 800105a:	bf00      	nop
 800105c:	e000ed00 	.word	0xe000ed00

08001060 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001060:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001098 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001064:	f7ff ffea 	bl	800103c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001068:	480c      	ldr	r0, [pc, #48]	@ (800109c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800106a:	490d      	ldr	r1, [pc, #52]	@ (80010a0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800106c:	4a0d      	ldr	r2, [pc, #52]	@ (80010a4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800106e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001070:	e002      	b.n	8001078 <LoopCopyDataInit>

08001072 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001072:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001074:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001076:	3304      	adds	r3, #4

08001078 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001078:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800107a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800107c:	d3f9      	bcc.n	8001072 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800107e:	4a0a      	ldr	r2, [pc, #40]	@ (80010a8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001080:	4c0a      	ldr	r4, [pc, #40]	@ (80010ac <LoopFillZerobss+0x22>)
  movs r3, #0
 8001082:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001084:	e001      	b.n	800108a <LoopFillZerobss>

08001086 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001086:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001088:	3204      	adds	r2, #4

0800108a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800108a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800108c:	d3fb      	bcc.n	8001086 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800108e:	f006 ff01 	bl	8007e94 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001092:	f7ff fa9d 	bl	80005d0 <main>
  bx  lr    
 8001096:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001098:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 800109c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80010a0:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 80010a4:	08008aec 	.word	0x08008aec
  ldr r2, =_sbss
 80010a8:	200001ac 	.word	0x200001ac
  ldr r4, =_ebss
 80010ac:	20005368 	.word	0x20005368

080010b0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80010b0:	e7fe      	b.n	80010b0 <ADC_IRQHandler>

080010b2 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010b2:	b580      	push	{r7, lr}
 80010b4:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010b6:	2003      	movs	r0, #3
 80010b8:	f000 f92e 	bl	8001318 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80010bc:	200f      	movs	r0, #15
 80010be:	f000 f805 	bl	80010cc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80010c2:	f7ff fd35 	bl	8000b30 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80010c6:	2300      	movs	r3, #0
}
 80010c8:	4618      	mov	r0, r3
 80010ca:	bd80      	pop	{r7, pc}

080010cc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b082      	sub	sp, #8
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80010d4:	4b12      	ldr	r3, [pc, #72]	@ (8001120 <HAL_InitTick+0x54>)
 80010d6:	681a      	ldr	r2, [r3, #0]
 80010d8:	4b12      	ldr	r3, [pc, #72]	@ (8001124 <HAL_InitTick+0x58>)
 80010da:	781b      	ldrb	r3, [r3, #0]
 80010dc:	4619      	mov	r1, r3
 80010de:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80010e2:	fbb3 f3f1 	udiv	r3, r3, r1
 80010e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80010ea:	4618      	mov	r0, r3
 80010ec:	f000 f93b 	bl	8001366 <HAL_SYSTICK_Config>
 80010f0:	4603      	mov	r3, r0
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d001      	beq.n	80010fa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80010f6:	2301      	movs	r3, #1
 80010f8:	e00e      	b.n	8001118 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	2b0f      	cmp	r3, #15
 80010fe:	d80a      	bhi.n	8001116 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001100:	2200      	movs	r2, #0
 8001102:	6879      	ldr	r1, [r7, #4]
 8001104:	f04f 30ff 	mov.w	r0, #4294967295
 8001108:	f000 f911 	bl	800132e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800110c:	4a06      	ldr	r2, [pc, #24]	@ (8001128 <HAL_InitTick+0x5c>)
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001112:	2300      	movs	r3, #0
 8001114:	e000      	b.n	8001118 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001116:	2301      	movs	r3, #1
}
 8001118:	4618      	mov	r0, r3
 800111a:	3708      	adds	r7, #8
 800111c:	46bd      	mov	sp, r7
 800111e:	bd80      	pop	{r7, pc}
 8001120:	20000000 	.word	0x20000000
 8001124:	20000008 	.word	0x20000008
 8001128:	20000004 	.word	0x20000004

0800112c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800112c:	b480      	push	{r7}
 800112e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001130:	4b06      	ldr	r3, [pc, #24]	@ (800114c <HAL_IncTick+0x20>)
 8001132:	781b      	ldrb	r3, [r3, #0]
 8001134:	461a      	mov	r2, r3
 8001136:	4b06      	ldr	r3, [pc, #24]	@ (8001150 <HAL_IncTick+0x24>)
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	4413      	add	r3, r2
 800113c:	4a04      	ldr	r2, [pc, #16]	@ (8001150 <HAL_IncTick+0x24>)
 800113e:	6013      	str	r3, [r2, #0]
}
 8001140:	bf00      	nop
 8001142:	46bd      	mov	sp, r7
 8001144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001148:	4770      	bx	lr
 800114a:	bf00      	nop
 800114c:	20000008 	.word	0x20000008
 8001150:	20000838 	.word	0x20000838

08001154 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001154:	b480      	push	{r7}
 8001156:	af00      	add	r7, sp, #0
  return uwTick;
 8001158:	4b03      	ldr	r3, [pc, #12]	@ (8001168 <HAL_GetTick+0x14>)
 800115a:	681b      	ldr	r3, [r3, #0]
}
 800115c:	4618      	mov	r0, r3
 800115e:	46bd      	mov	sp, r7
 8001160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001164:	4770      	bx	lr
 8001166:	bf00      	nop
 8001168:	20000838 	.word	0x20000838

0800116c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	b084      	sub	sp, #16
 8001170:	af00      	add	r7, sp, #0
 8001172:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001174:	f7ff ffee 	bl	8001154 <HAL_GetTick>
 8001178:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800117e:	68fb      	ldr	r3, [r7, #12]
 8001180:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001184:	d005      	beq.n	8001192 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001186:	4b0a      	ldr	r3, [pc, #40]	@ (80011b0 <HAL_Delay+0x44>)
 8001188:	781b      	ldrb	r3, [r3, #0]
 800118a:	461a      	mov	r2, r3
 800118c:	68fb      	ldr	r3, [r7, #12]
 800118e:	4413      	add	r3, r2
 8001190:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001192:	bf00      	nop
 8001194:	f7ff ffde 	bl	8001154 <HAL_GetTick>
 8001198:	4602      	mov	r2, r0
 800119a:	68bb      	ldr	r3, [r7, #8]
 800119c:	1ad3      	subs	r3, r2, r3
 800119e:	68fa      	ldr	r2, [r7, #12]
 80011a0:	429a      	cmp	r2, r3
 80011a2:	d8f7      	bhi.n	8001194 <HAL_Delay+0x28>
  {
  }
}
 80011a4:	bf00      	nop
 80011a6:	bf00      	nop
 80011a8:	3710      	adds	r7, #16
 80011aa:	46bd      	mov	sp, r7
 80011ac:	bd80      	pop	{r7, pc}
 80011ae:	bf00      	nop
 80011b0:	20000008 	.word	0x20000008

080011b4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011b4:	b480      	push	{r7}
 80011b6:	b085      	sub	sp, #20
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	f003 0307 	and.w	r3, r3, #7
 80011c2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80011c4:	4b0b      	ldr	r3, [pc, #44]	@ (80011f4 <__NVIC_SetPriorityGrouping+0x40>)
 80011c6:	68db      	ldr	r3, [r3, #12]
 80011c8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80011ca:	68ba      	ldr	r2, [r7, #8]
 80011cc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80011d0:	4013      	ands	r3, r2
 80011d2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80011d4:	68fb      	ldr	r3, [r7, #12]
 80011d6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80011d8:	68bb      	ldr	r3, [r7, #8]
 80011da:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80011dc:	4b06      	ldr	r3, [pc, #24]	@ (80011f8 <__NVIC_SetPriorityGrouping+0x44>)
 80011de:	4313      	orrs	r3, r2
 80011e0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80011e2:	4a04      	ldr	r2, [pc, #16]	@ (80011f4 <__NVIC_SetPriorityGrouping+0x40>)
 80011e4:	68bb      	ldr	r3, [r7, #8]
 80011e6:	60d3      	str	r3, [r2, #12]
}
 80011e8:	bf00      	nop
 80011ea:	3714      	adds	r7, #20
 80011ec:	46bd      	mov	sp, r7
 80011ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f2:	4770      	bx	lr
 80011f4:	e000ed00 	.word	0xe000ed00
 80011f8:	05fa0000 	.word	0x05fa0000

080011fc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80011fc:	b480      	push	{r7}
 80011fe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001200:	4b04      	ldr	r3, [pc, #16]	@ (8001214 <__NVIC_GetPriorityGrouping+0x18>)
 8001202:	68db      	ldr	r3, [r3, #12]
 8001204:	0a1b      	lsrs	r3, r3, #8
 8001206:	f003 0307 	and.w	r3, r3, #7
}
 800120a:	4618      	mov	r0, r3
 800120c:	46bd      	mov	sp, r7
 800120e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001212:	4770      	bx	lr
 8001214:	e000ed00 	.word	0xe000ed00

08001218 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001218:	b480      	push	{r7}
 800121a:	b083      	sub	sp, #12
 800121c:	af00      	add	r7, sp, #0
 800121e:	4603      	mov	r3, r0
 8001220:	6039      	str	r1, [r7, #0]
 8001222:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001224:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001228:	2b00      	cmp	r3, #0
 800122a:	db0a      	blt.n	8001242 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800122c:	683b      	ldr	r3, [r7, #0]
 800122e:	b2da      	uxtb	r2, r3
 8001230:	490c      	ldr	r1, [pc, #48]	@ (8001264 <__NVIC_SetPriority+0x4c>)
 8001232:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001236:	0112      	lsls	r2, r2, #4
 8001238:	b2d2      	uxtb	r2, r2
 800123a:	440b      	add	r3, r1
 800123c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001240:	e00a      	b.n	8001258 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001242:	683b      	ldr	r3, [r7, #0]
 8001244:	b2da      	uxtb	r2, r3
 8001246:	4908      	ldr	r1, [pc, #32]	@ (8001268 <__NVIC_SetPriority+0x50>)
 8001248:	79fb      	ldrb	r3, [r7, #7]
 800124a:	f003 030f 	and.w	r3, r3, #15
 800124e:	3b04      	subs	r3, #4
 8001250:	0112      	lsls	r2, r2, #4
 8001252:	b2d2      	uxtb	r2, r2
 8001254:	440b      	add	r3, r1
 8001256:	761a      	strb	r2, [r3, #24]
}
 8001258:	bf00      	nop
 800125a:	370c      	adds	r7, #12
 800125c:	46bd      	mov	sp, r7
 800125e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001262:	4770      	bx	lr
 8001264:	e000e100 	.word	0xe000e100
 8001268:	e000ed00 	.word	0xe000ed00

0800126c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800126c:	b480      	push	{r7}
 800126e:	b089      	sub	sp, #36	@ 0x24
 8001270:	af00      	add	r7, sp, #0
 8001272:	60f8      	str	r0, [r7, #12]
 8001274:	60b9      	str	r1, [r7, #8]
 8001276:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001278:	68fb      	ldr	r3, [r7, #12]
 800127a:	f003 0307 	and.w	r3, r3, #7
 800127e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001280:	69fb      	ldr	r3, [r7, #28]
 8001282:	f1c3 0307 	rsb	r3, r3, #7
 8001286:	2b04      	cmp	r3, #4
 8001288:	bf28      	it	cs
 800128a:	2304      	movcs	r3, #4
 800128c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800128e:	69fb      	ldr	r3, [r7, #28]
 8001290:	3304      	adds	r3, #4
 8001292:	2b06      	cmp	r3, #6
 8001294:	d902      	bls.n	800129c <NVIC_EncodePriority+0x30>
 8001296:	69fb      	ldr	r3, [r7, #28]
 8001298:	3b03      	subs	r3, #3
 800129a:	e000      	b.n	800129e <NVIC_EncodePriority+0x32>
 800129c:	2300      	movs	r3, #0
 800129e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012a0:	f04f 32ff 	mov.w	r2, #4294967295
 80012a4:	69bb      	ldr	r3, [r7, #24]
 80012a6:	fa02 f303 	lsl.w	r3, r2, r3
 80012aa:	43da      	mvns	r2, r3
 80012ac:	68bb      	ldr	r3, [r7, #8]
 80012ae:	401a      	ands	r2, r3
 80012b0:	697b      	ldr	r3, [r7, #20]
 80012b2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80012b4:	f04f 31ff 	mov.w	r1, #4294967295
 80012b8:	697b      	ldr	r3, [r7, #20]
 80012ba:	fa01 f303 	lsl.w	r3, r1, r3
 80012be:	43d9      	mvns	r1, r3
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012c4:	4313      	orrs	r3, r2
         );
}
 80012c6:	4618      	mov	r0, r3
 80012c8:	3724      	adds	r7, #36	@ 0x24
 80012ca:	46bd      	mov	sp, r7
 80012cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d0:	4770      	bx	lr
	...

080012d4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b082      	sub	sp, #8
 80012d8:	af00      	add	r7, sp, #0
 80012da:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	3b01      	subs	r3, #1
 80012e0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80012e4:	d301      	bcc.n	80012ea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80012e6:	2301      	movs	r3, #1
 80012e8:	e00f      	b.n	800130a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80012ea:	4a0a      	ldr	r2, [pc, #40]	@ (8001314 <SysTick_Config+0x40>)
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	3b01      	subs	r3, #1
 80012f0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80012f2:	210f      	movs	r1, #15
 80012f4:	f04f 30ff 	mov.w	r0, #4294967295
 80012f8:	f7ff ff8e 	bl	8001218 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80012fc:	4b05      	ldr	r3, [pc, #20]	@ (8001314 <SysTick_Config+0x40>)
 80012fe:	2200      	movs	r2, #0
 8001300:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001302:	4b04      	ldr	r3, [pc, #16]	@ (8001314 <SysTick_Config+0x40>)
 8001304:	2207      	movs	r2, #7
 8001306:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001308:	2300      	movs	r3, #0
}
 800130a:	4618      	mov	r0, r3
 800130c:	3708      	adds	r7, #8
 800130e:	46bd      	mov	sp, r7
 8001310:	bd80      	pop	{r7, pc}
 8001312:	bf00      	nop
 8001314:	e000e010 	.word	0xe000e010

08001318 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	b082      	sub	sp, #8
 800131c:	af00      	add	r7, sp, #0
 800131e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001320:	6878      	ldr	r0, [r7, #4]
 8001322:	f7ff ff47 	bl	80011b4 <__NVIC_SetPriorityGrouping>
}
 8001326:	bf00      	nop
 8001328:	3708      	adds	r7, #8
 800132a:	46bd      	mov	sp, r7
 800132c:	bd80      	pop	{r7, pc}

0800132e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800132e:	b580      	push	{r7, lr}
 8001330:	b086      	sub	sp, #24
 8001332:	af00      	add	r7, sp, #0
 8001334:	4603      	mov	r3, r0
 8001336:	60b9      	str	r1, [r7, #8]
 8001338:	607a      	str	r2, [r7, #4]
 800133a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800133c:	2300      	movs	r3, #0
 800133e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001340:	f7ff ff5c 	bl	80011fc <__NVIC_GetPriorityGrouping>
 8001344:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001346:	687a      	ldr	r2, [r7, #4]
 8001348:	68b9      	ldr	r1, [r7, #8]
 800134a:	6978      	ldr	r0, [r7, #20]
 800134c:	f7ff ff8e 	bl	800126c <NVIC_EncodePriority>
 8001350:	4602      	mov	r2, r0
 8001352:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001356:	4611      	mov	r1, r2
 8001358:	4618      	mov	r0, r3
 800135a:	f7ff ff5d 	bl	8001218 <__NVIC_SetPriority>
}
 800135e:	bf00      	nop
 8001360:	3718      	adds	r7, #24
 8001362:	46bd      	mov	sp, r7
 8001364:	bd80      	pop	{r7, pc}

08001366 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001366:	b580      	push	{r7, lr}
 8001368:	b082      	sub	sp, #8
 800136a:	af00      	add	r7, sp, #0
 800136c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800136e:	6878      	ldr	r0, [r7, #4]
 8001370:	f7ff ffb0 	bl	80012d4 <SysTick_Config>
 8001374:	4603      	mov	r3, r0
}
 8001376:	4618      	mov	r0, r3
 8001378:	3708      	adds	r7, #8
 800137a:	46bd      	mov	sp, r7
 800137c:	bd80      	pop	{r7, pc}
	...

08001380 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	b084      	sub	sp, #16
 8001384:	af00      	add	r7, sp, #0
 8001386:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	2b00      	cmp	r3, #0
 800138c:	d101      	bne.n	8001392 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 800138e:	2301      	movs	r3, #1
 8001390:	e086      	b.n	80014a0 <HAL_ETH_Init+0x120>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001398:	2b00      	cmp	r3, #0
 800139a:	d106      	bne.n	80013aa <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	2220      	movs	r2, #32
 80013a0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80013a4:	6878      	ldr	r0, [r7, #4]
 80013a6:	f7ff fbeb 	bl	8000b80 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013aa:	4b3f      	ldr	r3, [pc, #252]	@ (80014a8 <HAL_ETH_Init+0x128>)
 80013ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013ae:	4a3e      	ldr	r2, [pc, #248]	@ (80014a8 <HAL_ETH_Init+0x128>)
 80013b0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80013b4:	6453      	str	r3, [r2, #68]	@ 0x44
 80013b6:	4b3c      	ldr	r3, [pc, #240]	@ (80014a8 <HAL_ETH_Init+0x128>)
 80013b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013ba:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80013be:	60bb      	str	r3, [r7, #8]
 80013c0:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 80013c2:	4b3a      	ldr	r3, [pc, #232]	@ (80014ac <HAL_ETH_Init+0x12c>)
 80013c4:	685b      	ldr	r3, [r3, #4]
 80013c6:	4a39      	ldr	r2, [pc, #228]	@ (80014ac <HAL_ETH_Init+0x12c>)
 80013c8:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80013cc:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 80013ce:	4b37      	ldr	r3, [pc, #220]	@ (80014ac <HAL_ETH_Init+0x12c>)
 80013d0:	685a      	ldr	r2, [r3, #4]
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	689b      	ldr	r3, [r3, #8]
 80013d6:	4935      	ldr	r1, [pc, #212]	@ (80014ac <HAL_ETH_Init+0x12c>)
 80013d8:	4313      	orrs	r3, r2
 80013da:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 80013dc:	4b33      	ldr	r3, [pc, #204]	@ (80014ac <HAL_ETH_Init+0x12c>)
 80013de:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	687a      	ldr	r2, [r7, #4]
 80013ec:	6812      	ldr	r2, [r2, #0]
 80013ee:	f043 0301 	orr.w	r3, r3, #1
 80013f2:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80013f6:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80013f8:	f7ff feac 	bl	8001154 <HAL_GetTick>
 80013fc:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80013fe:	e011      	b.n	8001424 <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8001400:	f7ff fea8 	bl	8001154 <HAL_GetTick>
 8001404:	4602      	mov	r2, r0
 8001406:	68fb      	ldr	r3, [r7, #12]
 8001408:	1ad3      	subs	r3, r2, r3
 800140a:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 800140e:	d909      	bls.n	8001424 <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	2204      	movs	r2, #4
 8001414:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	22e0      	movs	r2, #224	@ 0xe0
 800141c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 8001420:	2301      	movs	r3, #1
 8001422:	e03d      	b.n	80014a0 <HAL_ETH_Init+0x120>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	f003 0301 	and.w	r3, r3, #1
 8001432:	2b00      	cmp	r3, #0
 8001434:	d1e4      	bne.n	8001400 <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8001436:	6878      	ldr	r0, [r7, #4]
 8001438:	f000 f97a 	bl	8001730 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 800143c:	6878      	ldr	r0, [r7, #4]
 800143e:	f000 fa25 	bl	800188c <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8001442:	6878      	ldr	r0, [r7, #4]
 8001444:	f000 fa7b 	bl	800193e <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	685b      	ldr	r3, [r3, #4]
 800144c:	461a      	mov	r2, r3
 800144e:	2100      	movs	r1, #0
 8001450:	6878      	ldr	r0, [r7, #4]
 8001452:	f000 f9e3 	bl	800181c <ETH_MACAddressConfig>

  /* Disable MMC Interrupts */
  SET_BIT(heth->Instance->MACIMR, ETH_MACIMR_TSTIM | ETH_MACIMR_PMTIM);
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	f442 7202 	orr.w	r2, r2, #520	@ 0x208
 8001464:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RGUFM | ETH_MMCRIMR_RFAEM | \
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	f8d3 110c 	ldr.w	r1, [r3, #268]	@ 0x10c
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	681a      	ldr	r2, [r3, #0]
 8001472:	4b0f      	ldr	r3, [pc, #60]	@ (80014b0 <HAL_ETH_Init+0x130>)
 8001474:	430b      	orrs	r3, r1
 8001476:	f8c2 310c 	str.w	r3, [r2, #268]	@ 0x10c
          ETH_MMCRIMR_RFCEM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TGFM | ETH_MMCTIMR_TGFMSCM | \
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	f8d3 2110 	ldr.w	r2, [r3, #272]	@ 0x110
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	f442 1203 	orr.w	r2, r2, #2146304	@ 0x20c000
 800148a:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
          ETH_MMCTIMR_TGFSCM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	2200      	movs	r2, #0
 8001492:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	2210      	movs	r2, #16
 800149a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800149e:	2300      	movs	r3, #0
}
 80014a0:	4618      	mov	r0, r3
 80014a2:	3710      	adds	r7, #16
 80014a4:	46bd      	mov	sp, r7
 80014a6:	bd80      	pop	{r7, pc}
 80014a8:	40023800 	.word	0x40023800
 80014ac:	40013800 	.word	0x40013800
 80014b0:	00020060 	.word	0x00020060

080014b4 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b084      	sub	sp, #16
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	6078      	str	r0, [r7, #4]
 80014bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	60fb      	str	r3, [r7, #12]
  /* Clear CSTF, WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 80014c6:	68fa      	ldr	r2, [r7, #12]
 80014c8:	4b53      	ldr	r3, [pc, #332]	@ (8001618 <ETH_SetMACConfig+0x164>)
 80014ca:	4013      	ands	r3, r2
 80014cc:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 80014ce:	683b      	ldr	r3, [r7, #0]
 80014d0:	7b9b      	ldrb	r3, [r3, #14]
 80014d2:	065b      	lsls	r3, r3, #25
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80014d4:	683a      	ldr	r2, [r7, #0]
 80014d6:	7c12      	ldrb	r2, [r2, #16]
 80014d8:	2a00      	cmp	r2, #0
 80014da:	d102      	bne.n	80014e2 <ETH_SetMACConfig+0x2e>
 80014dc:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80014e0:	e000      	b.n	80014e4 <ETH_SetMACConfig+0x30>
 80014e2:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 80014e4:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80014e6:	683a      	ldr	r2, [r7, #0]
 80014e8:	7c52      	ldrb	r2, [r2, #17]
 80014ea:	2a00      	cmp	r2, #0
 80014ec:	d102      	bne.n	80014f4 <ETH_SetMACConfig+0x40>
 80014ee:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 80014f2:	e000      	b.n	80014f6 <ETH_SetMACConfig+0x42>
 80014f4:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80014f6:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 80014f8:	683b      	ldr	r3, [r7, #0]
 80014fa:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80014fc:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80014fe:	683b      	ldr	r3, [r7, #0]
 8001500:	7fdb      	ldrb	r3, [r3, #31]
 8001502:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8001504:	431a      	orrs	r2, r3
                        macconf->Speed |
 8001506:	683b      	ldr	r3, [r7, #0]
 8001508:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 800150a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 800150c:	683a      	ldr	r2, [r7, #0]
 800150e:	7f92      	ldrb	r2, [r2, #30]
 8001510:	2a00      	cmp	r2, #0
 8001512:	d102      	bne.n	800151a <ETH_SetMACConfig+0x66>
 8001514:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001518:	e000      	b.n	800151c <ETH_SetMACConfig+0x68>
 800151a:	2200      	movs	r2, #0
                        macconf->Speed |
 800151c:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 800151e:	683b      	ldr	r3, [r7, #0]
 8001520:	7f1b      	ldrb	r3, [r3, #28]
 8001522:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8001524:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8001526:	683b      	ldr	r3, [r7, #0]
 8001528:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 800152a:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 800152c:	683b      	ldr	r3, [r7, #0]
 800152e:	791b      	ldrb	r3, [r3, #4]
 8001530:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8001532:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8001534:	683a      	ldr	r2, [r7, #0]
 8001536:	f892 2020 	ldrb.w	r2, [r2, #32]
 800153a:	2a00      	cmp	r2, #0
 800153c:	d102      	bne.n	8001544 <ETH_SetMACConfig+0x90>
 800153e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001542:	e000      	b.n	8001546 <ETH_SetMACConfig+0x92>
 8001544:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8001546:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8001548:	683b      	ldr	r3, [r7, #0]
 800154a:	7bdb      	ldrb	r3, [r3, #15]
 800154c:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 800154e:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8001550:	683b      	ldr	r3, [r7, #0]
 8001552:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8001554:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8001556:	683b      	ldr	r3, [r7, #0]
 8001558:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800155c:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 800155e:	4313      	orrs	r3, r2
 8001560:	68fa      	ldr	r2, [r7, #12]
 8001562:	4313      	orrs	r3, r2
 8001564:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	68fa      	ldr	r2, [r7, #12]
 800156c:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001576:	2001      	movs	r0, #1
 8001578:	f7ff fdf8 	bl	800116c <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	68fa      	ldr	r2, [r7, #12]
 8001582:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	699b      	ldr	r3, [r3, #24]
 800158a:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 800158c:	68fa      	ldr	r2, [r7, #12]
 800158e:	f64f 7341 	movw	r3, #65345	@ 0xff41
 8001592:	4013      	ands	r3, r2
 8001594:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001596:	683b      	ldr	r3, [r7, #0]
 8001598:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800159a:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 800159c:	683a      	ldr	r2, [r7, #0]
 800159e:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 80015a2:	2a00      	cmp	r2, #0
 80015a4:	d101      	bne.n	80015aa <ETH_SetMACConfig+0xf6>
 80015a6:	2280      	movs	r2, #128	@ 0x80
 80015a8:	e000      	b.n	80015ac <ETH_SetMACConfig+0xf8>
 80015aa:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80015ac:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 80015ae:	683b      	ldr	r3, [r7, #0]
 80015b0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 80015b2:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 80015b4:	683a      	ldr	r2, [r7, #0]
 80015b6:	f892 2055 	ldrb.w	r2, [r2, #85]	@ 0x55
 80015ba:	2a01      	cmp	r2, #1
 80015bc:	d101      	bne.n	80015c2 <ETH_SetMACConfig+0x10e>
 80015be:	2208      	movs	r2, #8
 80015c0:	e000      	b.n	80015c4 <ETH_SetMACConfig+0x110>
 80015c2:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 80015c4:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 80015c6:	683a      	ldr	r2, [r7, #0]
 80015c8:	f892 2056 	ldrb.w	r2, [r2, #86]	@ 0x56
 80015cc:	2a01      	cmp	r2, #1
 80015ce:	d101      	bne.n	80015d4 <ETH_SetMACConfig+0x120>
 80015d0:	2204      	movs	r2, #4
 80015d2:	e000      	b.n	80015d6 <ETH_SetMACConfig+0x122>
 80015d4:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 80015d6:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 80015d8:	683a      	ldr	r2, [r7, #0]
 80015da:	f892 2054 	ldrb.w	r2, [r2, #84]	@ 0x54
 80015de:	2a01      	cmp	r2, #1
 80015e0:	d101      	bne.n	80015e6 <ETH_SetMACConfig+0x132>
 80015e2:	2202      	movs	r2, #2
 80015e4:	e000      	b.n	80015e8 <ETH_SetMACConfig+0x134>
 80015e6:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80015e8:	4313      	orrs	r3, r2
 80015ea:	68fa      	ldr	r2, [r7, #12]
 80015ec:	4313      	orrs	r3, r2
 80015ee:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	68fa      	ldr	r2, [r7, #12]
 80015f6:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	699b      	ldr	r3, [r3, #24]
 80015fe:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001600:	2001      	movs	r0, #1
 8001602:	f7ff fdb3 	bl	800116c <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	68fa      	ldr	r2, [r7, #12]
 800160c:	619a      	str	r2, [r3, #24]
}
 800160e:	bf00      	nop
 8001610:	3710      	adds	r7, #16
 8001612:	46bd      	mov	sp, r7
 8001614:	bd80      	pop	{r7, pc}
 8001616:	bf00      	nop
 8001618:	fd20810f 	.word	0xfd20810f

0800161c <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	b084      	sub	sp, #16
 8001620:	af00      	add	r7, sp, #0
 8001622:	6078      	str	r0, [r7, #4]
 8001624:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800162e:	699b      	ldr	r3, [r3, #24]
 8001630:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8001632:	68fa      	ldr	r2, [r7, #12]
 8001634:	4b3d      	ldr	r3, [pc, #244]	@ (800172c <ETH_SetDMAConfig+0x110>)
 8001636:	4013      	ands	r3, r2
 8001638:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 800163a:	683b      	ldr	r3, [r7, #0]
 800163c:	7b1b      	ldrb	r3, [r3, #12]
 800163e:	2b00      	cmp	r3, #0
 8001640:	d102      	bne.n	8001648 <ETH_SetDMAConfig+0x2c>
 8001642:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8001646:	e000      	b.n	800164a <ETH_SetDMAConfig+0x2e>
 8001648:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 800164a:	683b      	ldr	r3, [r7, #0]
 800164c:	7b5b      	ldrb	r3, [r3, #13]
 800164e:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001650:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8001652:	683a      	ldr	r2, [r7, #0]
 8001654:	7f52      	ldrb	r2, [r2, #29]
 8001656:	2a00      	cmp	r2, #0
 8001658:	d102      	bne.n	8001660 <ETH_SetDMAConfig+0x44>
 800165a:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800165e:	e000      	b.n	8001662 <ETH_SetDMAConfig+0x46>
 8001660:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8001662:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8001664:	683b      	ldr	r3, [r7, #0]
 8001666:	7b9b      	ldrb	r3, [r3, #14]
 8001668:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 800166a:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 800166c:	683b      	ldr	r3, [r7, #0]
 800166e:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8001670:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8001672:	683b      	ldr	r3, [r7, #0]
 8001674:	7f1b      	ldrb	r3, [r3, #28]
 8001676:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8001678:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 800167a:	683b      	ldr	r3, [r7, #0]
 800167c:	7f9b      	ldrb	r3, [r3, #30]
 800167e:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8001680:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8001682:	683b      	ldr	r3, [r7, #0]
 8001684:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8001686:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8001688:	683b      	ldr	r3, [r7, #0]
 800168a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800168e:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001690:	4313      	orrs	r3, r2
 8001692:	68fa      	ldr	r2, [r7, #12]
 8001694:	4313      	orrs	r3, r2
 8001696:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80016a0:	461a      	mov	r2, r3
 80016a2:	68fb      	ldr	r3, [r7, #12]
 80016a4:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80016ae:	699b      	ldr	r3, [r3, #24]
 80016b0:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80016b2:	2001      	movs	r0, #1
 80016b4:	f7ff fd5a 	bl	800116c <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80016c0:	461a      	mov	r2, r3
 80016c2:	68fb      	ldr	r3, [r7, #12]
 80016c4:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80016c6:	683b      	ldr	r3, [r7, #0]
 80016c8:	791b      	ldrb	r3, [r3, #4]
 80016ca:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 80016cc:	683b      	ldr	r3, [r7, #0]
 80016ce:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80016d0:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80016d2:	683b      	ldr	r3, [r7, #0]
 80016d4:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 80016d6:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 80016d8:	683b      	ldr	r3, [r7, #0]
 80016da:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80016dc:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80016de:	683b      	ldr	r3, [r7, #0]
 80016e0:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80016e4:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 80016e6:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80016e8:	683b      	ldr	r3, [r7, #0]
 80016ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80016ec:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80016ee:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 80016f0:	683b      	ldr	r3, [r7, #0]
 80016f2:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80016f4:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80016f6:	687a      	ldr	r2, [r7, #4]
 80016f8:	6812      	ldr	r2, [r2, #0]
 80016fa:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80016fe:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001702:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001710:	2001      	movs	r0, #1
 8001712:	f7ff fd2b 	bl	800116c <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800171e:	461a      	mov	r2, r3
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	6013      	str	r3, [r2, #0]
}
 8001724:	bf00      	nop
 8001726:	3710      	adds	r7, #16
 8001728:	46bd      	mov	sp, r7
 800172a:	bd80      	pop	{r7, pc}
 800172c:	f8de3f23 	.word	0xf8de3f23

08001730 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	b0a6      	sub	sp, #152	@ 0x98
 8001734:	af00      	add	r7, sp, #0
 8001736:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8001738:	2301      	movs	r3, #1
 800173a:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
  macDefaultConf.Jabber = ENABLE;
 800173e:	2301      	movs	r3, #1
 8001740:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8001744:	2300      	movs	r3, #0
 8001746:	63fb      	str	r3, [r7, #60]	@ 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8001748:	2300      	movs	r3, #0
 800174a:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 800174e:	2301      	movs	r3, #1
 8001750:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8001754:	2300      	movs	r3, #0
 8001756:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
  macDefaultConf.CRCStripTypePacket = ENABLE;
 800175a:	2301      	movs	r3, #1
 800175c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  macDefaultConf.ChecksumOffload = ENABLE;
 8001760:	2301      	movs	r3, #1
 8001762:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8001766:	2300      	movs	r3, #0
 8001768:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 800176c:	2300      	movs	r3, #0
 800176e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8001772:	2300      	movs	r3, #0
 8001774:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8001776:	2300      	movs	r3, #0
 8001778:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.PauseTime = 0x0U;
 800177c:	2300      	movs	r3, #0
 800177e:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8001780:	2300      	movs	r3, #0
 8001782:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8001786:	2300      	movs	r3, #0
 8001788:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 800178c:	2300      	movs	r3, #0
 800178e:	f887 308a 	strb.w	r3, [r7, #138]	@ 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8001792:	2300      	movs	r3, #0
 8001794:	f887 3088 	strb.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8001798:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800179c:	64bb      	str	r3, [r7, #72]	@ 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 800179e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80017a2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 80017a4:	2300      	movs	r3, #0
 80017a6:	f887 3089 	strb.w	r3, [r7, #137]	@ 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 80017aa:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80017ae:	4619      	mov	r1, r3
 80017b0:	6878      	ldr	r0, [r7, #4]
 80017b2:	f7ff fe7f 	bl	80014b4 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 80017b6:	2301      	movs	r3, #1
 80017b8:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 80017ba:	2301      	movs	r3, #1
 80017bc:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 80017be:	2301      	movs	r3, #1
 80017c0:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 80017c4:	2301      	movs	r3, #1
 80017c6:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 80017c8:	2300      	movs	r3, #0
 80017ca:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 80017cc:	2300      	movs	r3, #0
 80017ce:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 80017d2:	2300      	movs	r3, #0
 80017d4:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 80017d8:	2300      	movs	r3, #0
 80017da:	62bb      	str	r3, [r7, #40]	@ 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 80017dc:	2301      	movs	r3, #1
 80017de:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 80017e2:	2301      	movs	r3, #1
 80017e4:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 80017e6:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80017ea:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80017ec:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80017f0:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80017f2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80017f6:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 80017f8:	2301      	movs	r3, #1
 80017fa:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 80017fe:	2300      	movs	r3, #0
 8001800:	633b      	str	r3, [r7, #48]	@ 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8001802:	2300      	movs	r3, #0
 8001804:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8001806:	f107 0308 	add.w	r3, r7, #8
 800180a:	4619      	mov	r1, r3
 800180c:	6878      	ldr	r0, [r7, #4]
 800180e:	f7ff ff05 	bl	800161c <ETH_SetDMAConfig>
}
 8001812:	bf00      	nop
 8001814:	3798      	adds	r7, #152	@ 0x98
 8001816:	46bd      	mov	sp, r7
 8001818:	bd80      	pop	{r7, pc}
	...

0800181c <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 800181c:	b480      	push	{r7}
 800181e:	b087      	sub	sp, #28
 8001820:	af00      	add	r7, sp, #0
 8001822:	60f8      	str	r0, [r7, #12]
 8001824:	60b9      	str	r1, [r7, #8]
 8001826:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	3305      	adds	r3, #5
 800182c:	781b      	ldrb	r3, [r3, #0]
 800182e:	021b      	lsls	r3, r3, #8
 8001830:	687a      	ldr	r2, [r7, #4]
 8001832:	3204      	adds	r2, #4
 8001834:	7812      	ldrb	r2, [r2, #0]
 8001836:	4313      	orrs	r3, r2
 8001838:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 800183a:	68ba      	ldr	r2, [r7, #8]
 800183c:	4b11      	ldr	r3, [pc, #68]	@ (8001884 <ETH_MACAddressConfig+0x68>)
 800183e:	4413      	add	r3, r2
 8001840:	461a      	mov	r2, r3
 8001842:	697b      	ldr	r3, [r7, #20]
 8001844:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	3303      	adds	r3, #3
 800184a:	781b      	ldrb	r3, [r3, #0]
 800184c:	061a      	lsls	r2, r3, #24
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	3302      	adds	r3, #2
 8001852:	781b      	ldrb	r3, [r3, #0]
 8001854:	041b      	lsls	r3, r3, #16
 8001856:	431a      	orrs	r2, r3
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	3301      	adds	r3, #1
 800185c:	781b      	ldrb	r3, [r3, #0]
 800185e:	021b      	lsls	r3, r3, #8
 8001860:	4313      	orrs	r3, r2
 8001862:	687a      	ldr	r2, [r7, #4]
 8001864:	7812      	ldrb	r2, [r2, #0]
 8001866:	4313      	orrs	r3, r2
 8001868:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 800186a:	68ba      	ldr	r2, [r7, #8]
 800186c:	4b06      	ldr	r3, [pc, #24]	@ (8001888 <ETH_MACAddressConfig+0x6c>)
 800186e:	4413      	add	r3, r2
 8001870:	461a      	mov	r2, r3
 8001872:	697b      	ldr	r3, [r7, #20]
 8001874:	6013      	str	r3, [r2, #0]
}
 8001876:	bf00      	nop
 8001878:	371c      	adds	r7, #28
 800187a:	46bd      	mov	sp, r7
 800187c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001880:	4770      	bx	lr
 8001882:	bf00      	nop
 8001884:	40028040 	.word	0x40028040
 8001888:	40028044 	.word	0x40028044

0800188c <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 800188c:	b480      	push	{r7}
 800188e:	b085      	sub	sp, #20
 8001890:	af00      	add	r7, sp, #0
 8001892:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001894:	2300      	movs	r3, #0
 8001896:	60fb      	str	r3, [r7, #12]
 8001898:	e03e      	b.n	8001918 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	68d9      	ldr	r1, [r3, #12]
 800189e:	68fa      	ldr	r2, [r7, #12]
 80018a0:	4613      	mov	r3, r2
 80018a2:	009b      	lsls	r3, r3, #2
 80018a4:	4413      	add	r3, r2
 80018a6:	00db      	lsls	r3, r3, #3
 80018a8:	440b      	add	r3, r1
 80018aa:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 80018ac:	68bb      	ldr	r3, [r7, #8]
 80018ae:	2200      	movs	r2, #0
 80018b0:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 80018b2:	68bb      	ldr	r3, [r7, #8]
 80018b4:	2200      	movs	r2, #0
 80018b6:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 80018b8:	68bb      	ldr	r3, [r7, #8]
 80018ba:	2200      	movs	r2, #0
 80018bc:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 80018be:	68bb      	ldr	r3, [r7, #8]
 80018c0:	2200      	movs	r2, #0
 80018c2:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 80018c4:	68b9      	ldr	r1, [r7, #8]
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	68fa      	ldr	r2, [r7, #12]
 80018ca:	3206      	adds	r2, #6
 80018cc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 80018d0:	68bb      	ldr	r3, [r7, #8]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80018d8:	68bb      	ldr	r3, [r7, #8]
 80018da:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	2b02      	cmp	r3, #2
 80018e0:	d80c      	bhi.n	80018fc <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	68d9      	ldr	r1, [r3, #12]
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	1c5a      	adds	r2, r3, #1
 80018ea:	4613      	mov	r3, r2
 80018ec:	009b      	lsls	r3, r3, #2
 80018ee:	4413      	add	r3, r2
 80018f0:	00db      	lsls	r3, r3, #3
 80018f2:	440b      	add	r3, r1
 80018f4:	461a      	mov	r2, r3
 80018f6:	68bb      	ldr	r3, [r7, #8]
 80018f8:	60da      	str	r2, [r3, #12]
 80018fa:	e004      	b.n	8001906 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	68db      	ldr	r3, [r3, #12]
 8001900:	461a      	mov	r2, r3
 8001902:	68bb      	ldr	r3, [r7, #8]
 8001904:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8001906:	68bb      	ldr	r3, [r7, #8]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	f443 0240 	orr.w	r2, r3, #12582912	@ 0xc00000
 800190e:	68bb      	ldr	r3, [r7, #8]
 8001910:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	3301      	adds	r3, #1
 8001916:	60fb      	str	r3, [r7, #12]
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	2b03      	cmp	r3, #3
 800191c:	d9bd      	bls.n	800189a <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	2200      	movs	r2, #0
 8001922:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	68da      	ldr	r2, [r3, #12]
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001930:	611a      	str	r2, [r3, #16]
}
 8001932:	bf00      	nop
 8001934:	3714      	adds	r7, #20
 8001936:	46bd      	mov	sp, r7
 8001938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193c:	4770      	bx	lr

0800193e <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 800193e:	b480      	push	{r7}
 8001940:	b085      	sub	sp, #20
 8001942:	af00      	add	r7, sp, #0
 8001944:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001946:	2300      	movs	r3, #0
 8001948:	60fb      	str	r3, [r7, #12]
 800194a:	e048      	b.n	80019de <ETH_DMARxDescListInit+0xa0>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	6919      	ldr	r1, [r3, #16]
 8001950:	68fa      	ldr	r2, [r7, #12]
 8001952:	4613      	mov	r3, r2
 8001954:	009b      	lsls	r3, r3, #2
 8001956:	4413      	add	r3, r2
 8001958:	00db      	lsls	r3, r3, #3
 800195a:	440b      	add	r3, r1
 800195c:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 800195e:	68bb      	ldr	r3, [r7, #8]
 8001960:	2200      	movs	r2, #0
 8001962:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 8001964:	68bb      	ldr	r3, [r7, #8]
 8001966:	2200      	movs	r2, #0
 8001968:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 800196a:	68bb      	ldr	r3, [r7, #8]
 800196c:	2200      	movs	r2, #0
 800196e:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 8001970:	68bb      	ldr	r3, [r7, #8]
 8001972:	2200      	movs	r2, #0
 8001974:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 8001976:	68bb      	ldr	r3, [r7, #8]
 8001978:	2200      	movs	r2, #0
 800197a:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 800197c:	68bb      	ldr	r3, [r7, #8]
 800197e:	2200      	movs	r2, #0
 8001980:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8001982:	68bb      	ldr	r3, [r7, #8]
 8001984:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8001988:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = heth->Init.RxBuffLen | ETH_DMARXDESC_RCH;
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	695b      	ldr	r3, [r3, #20]
 800198e:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8001992:	68bb      	ldr	r3, [r7, #8]
 8001994:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8001996:	68bb      	ldr	r3, [r7, #8]
 8001998:	685b      	ldr	r3, [r3, #4]
 800199a:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800199e:	68bb      	ldr	r3, [r7, #8]
 80019a0:	605a      	str	r2, [r3, #4]
    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 80019a2:	68b9      	ldr	r1, [r7, #8]
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	68fa      	ldr	r2, [r7, #12]
 80019a8:	3212      	adds	r2, #18
 80019aa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	2b02      	cmp	r3, #2
 80019b2:	d80c      	bhi.n	80019ce <ETH_DMARxDescListInit+0x90>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	6919      	ldr	r1, [r3, #16]
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	1c5a      	adds	r2, r3, #1
 80019bc:	4613      	mov	r3, r2
 80019be:	009b      	lsls	r3, r3, #2
 80019c0:	4413      	add	r3, r2
 80019c2:	00db      	lsls	r3, r3, #3
 80019c4:	440b      	add	r3, r1
 80019c6:	461a      	mov	r2, r3
 80019c8:	68bb      	ldr	r3, [r7, #8]
 80019ca:	60da      	str	r2, [r3, #12]
 80019cc:	e004      	b.n	80019d8 <ETH_DMARxDescListInit+0x9a>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	691b      	ldr	r3, [r3, #16]
 80019d2:	461a      	mov	r2, r3
 80019d4:	68bb      	ldr	r3, [r7, #8]
 80019d6:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	3301      	adds	r3, #1
 80019dc:	60fb      	str	r3, [r7, #12]
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	2b03      	cmp	r3, #3
 80019e2:	d9b3      	bls.n	800194c <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	2200      	movs	r2, #0
 80019e8:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	2200      	movs	r2, #0
 80019ee:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	2200      	movs	r2, #0
 80019f4:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	2200      	movs	r2, #0
 80019fa:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	2200      	movs	r2, #0
 8001a00:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	691a      	ldr	r2, [r3, #16]
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001a0e:	60da      	str	r2, [r3, #12]
}
 8001a10:	bf00      	nop
 8001a12:	3714      	adds	r7, #20
 8001a14:	46bd      	mov	sp, r7
 8001a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1a:	4770      	bx	lr

08001a1c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a1c:	b480      	push	{r7}
 8001a1e:	b089      	sub	sp, #36	@ 0x24
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	6078      	str	r0, [r7, #4]
 8001a24:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001a26:	2300      	movs	r3, #0
 8001a28:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001a2e:	2300      	movs	r3, #0
 8001a30:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8001a32:	2300      	movs	r3, #0
 8001a34:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 8001a36:	2300      	movs	r3, #0
 8001a38:	61fb      	str	r3, [r7, #28]
 8001a3a:	e175      	b.n	8001d28 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001a3c:	2201      	movs	r2, #1
 8001a3e:	69fb      	ldr	r3, [r7, #28]
 8001a40:	fa02 f303 	lsl.w	r3, r2, r3
 8001a44:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001a46:	683b      	ldr	r3, [r7, #0]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	697a      	ldr	r2, [r7, #20]
 8001a4c:	4013      	ands	r3, r2
 8001a4e:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 8001a50:	693a      	ldr	r2, [r7, #16]
 8001a52:	697b      	ldr	r3, [r7, #20]
 8001a54:	429a      	cmp	r2, r3
 8001a56:	f040 8164 	bne.w	8001d22 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001a5a:	683b      	ldr	r3, [r7, #0]
 8001a5c:	685b      	ldr	r3, [r3, #4]
 8001a5e:	f003 0303 	and.w	r3, r3, #3
 8001a62:	2b01      	cmp	r3, #1
 8001a64:	d005      	beq.n	8001a72 <HAL_GPIO_Init+0x56>
 8001a66:	683b      	ldr	r3, [r7, #0]
 8001a68:	685b      	ldr	r3, [r3, #4]
 8001a6a:	f003 0303 	and.w	r3, r3, #3
 8001a6e:	2b02      	cmp	r3, #2
 8001a70:	d130      	bne.n	8001ad4 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	689b      	ldr	r3, [r3, #8]
 8001a76:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001a78:	69fb      	ldr	r3, [r7, #28]
 8001a7a:	005b      	lsls	r3, r3, #1
 8001a7c:	2203      	movs	r2, #3
 8001a7e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a82:	43db      	mvns	r3, r3
 8001a84:	69ba      	ldr	r2, [r7, #24]
 8001a86:	4013      	ands	r3, r2
 8001a88:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8001a8a:	683b      	ldr	r3, [r7, #0]
 8001a8c:	68da      	ldr	r2, [r3, #12]
 8001a8e:	69fb      	ldr	r3, [r7, #28]
 8001a90:	005b      	lsls	r3, r3, #1
 8001a92:	fa02 f303 	lsl.w	r3, r2, r3
 8001a96:	69ba      	ldr	r2, [r7, #24]
 8001a98:	4313      	orrs	r3, r2
 8001a9a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	69ba      	ldr	r2, [r7, #24]
 8001aa0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	685b      	ldr	r3, [r3, #4]
 8001aa6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001aa8:	2201      	movs	r2, #1
 8001aaa:	69fb      	ldr	r3, [r7, #28]
 8001aac:	fa02 f303 	lsl.w	r3, r2, r3
 8001ab0:	43db      	mvns	r3, r3
 8001ab2:	69ba      	ldr	r2, [r7, #24]
 8001ab4:	4013      	ands	r3, r2
 8001ab6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001ab8:	683b      	ldr	r3, [r7, #0]
 8001aba:	685b      	ldr	r3, [r3, #4]
 8001abc:	091b      	lsrs	r3, r3, #4
 8001abe:	f003 0201 	and.w	r2, r3, #1
 8001ac2:	69fb      	ldr	r3, [r7, #28]
 8001ac4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ac8:	69ba      	ldr	r2, [r7, #24]
 8001aca:	4313      	orrs	r3, r2
 8001acc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	69ba      	ldr	r2, [r7, #24]
 8001ad2:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001ad4:	683b      	ldr	r3, [r7, #0]
 8001ad6:	685b      	ldr	r3, [r3, #4]
 8001ad8:	f003 0303 	and.w	r3, r3, #3
 8001adc:	2b03      	cmp	r3, #3
 8001ade:	d017      	beq.n	8001b10 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	68db      	ldr	r3, [r3, #12]
 8001ae4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001ae6:	69fb      	ldr	r3, [r7, #28]
 8001ae8:	005b      	lsls	r3, r3, #1
 8001aea:	2203      	movs	r2, #3
 8001aec:	fa02 f303 	lsl.w	r3, r2, r3
 8001af0:	43db      	mvns	r3, r3
 8001af2:	69ba      	ldr	r2, [r7, #24]
 8001af4:	4013      	ands	r3, r2
 8001af6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8001af8:	683b      	ldr	r3, [r7, #0]
 8001afa:	689a      	ldr	r2, [r3, #8]
 8001afc:	69fb      	ldr	r3, [r7, #28]
 8001afe:	005b      	lsls	r3, r3, #1
 8001b00:	fa02 f303 	lsl.w	r3, r2, r3
 8001b04:	69ba      	ldr	r2, [r7, #24]
 8001b06:	4313      	orrs	r3, r2
 8001b08:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	69ba      	ldr	r2, [r7, #24]
 8001b0e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b10:	683b      	ldr	r3, [r7, #0]
 8001b12:	685b      	ldr	r3, [r3, #4]
 8001b14:	f003 0303 	and.w	r3, r3, #3
 8001b18:	2b02      	cmp	r3, #2
 8001b1a:	d123      	bne.n	8001b64 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001b1c:	69fb      	ldr	r3, [r7, #28]
 8001b1e:	08da      	lsrs	r2, r3, #3
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	3208      	adds	r2, #8
 8001b24:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b28:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001b2a:	69fb      	ldr	r3, [r7, #28]
 8001b2c:	f003 0307 	and.w	r3, r3, #7
 8001b30:	009b      	lsls	r3, r3, #2
 8001b32:	220f      	movs	r2, #15
 8001b34:	fa02 f303 	lsl.w	r3, r2, r3
 8001b38:	43db      	mvns	r3, r3
 8001b3a:	69ba      	ldr	r2, [r7, #24]
 8001b3c:	4013      	ands	r3, r2
 8001b3e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001b40:	683b      	ldr	r3, [r7, #0]
 8001b42:	691a      	ldr	r2, [r3, #16]
 8001b44:	69fb      	ldr	r3, [r7, #28]
 8001b46:	f003 0307 	and.w	r3, r3, #7
 8001b4a:	009b      	lsls	r3, r3, #2
 8001b4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b50:	69ba      	ldr	r2, [r7, #24]
 8001b52:	4313      	orrs	r3, r2
 8001b54:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8001b56:	69fb      	ldr	r3, [r7, #28]
 8001b58:	08da      	lsrs	r2, r3, #3
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	3208      	adds	r2, #8
 8001b5e:	69b9      	ldr	r1, [r7, #24]
 8001b60:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001b6a:	69fb      	ldr	r3, [r7, #28]
 8001b6c:	005b      	lsls	r3, r3, #1
 8001b6e:	2203      	movs	r2, #3
 8001b70:	fa02 f303 	lsl.w	r3, r2, r3
 8001b74:	43db      	mvns	r3, r3
 8001b76:	69ba      	ldr	r2, [r7, #24]
 8001b78:	4013      	ands	r3, r2
 8001b7a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001b7c:	683b      	ldr	r3, [r7, #0]
 8001b7e:	685b      	ldr	r3, [r3, #4]
 8001b80:	f003 0203 	and.w	r2, r3, #3
 8001b84:	69fb      	ldr	r3, [r7, #28]
 8001b86:	005b      	lsls	r3, r3, #1
 8001b88:	fa02 f303 	lsl.w	r3, r2, r3
 8001b8c:	69ba      	ldr	r2, [r7, #24]
 8001b8e:	4313      	orrs	r3, r2
 8001b90:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	69ba      	ldr	r2, [r7, #24]
 8001b96:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001b98:	683b      	ldr	r3, [r7, #0]
 8001b9a:	685b      	ldr	r3, [r3, #4]
 8001b9c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	f000 80be 	beq.w	8001d22 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ba6:	4b66      	ldr	r3, [pc, #408]	@ (8001d40 <HAL_GPIO_Init+0x324>)
 8001ba8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001baa:	4a65      	ldr	r2, [pc, #404]	@ (8001d40 <HAL_GPIO_Init+0x324>)
 8001bac:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001bb0:	6453      	str	r3, [r2, #68]	@ 0x44
 8001bb2:	4b63      	ldr	r3, [pc, #396]	@ (8001d40 <HAL_GPIO_Init+0x324>)
 8001bb4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001bb6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001bba:	60fb      	str	r3, [r7, #12]
 8001bbc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8001bbe:	4a61      	ldr	r2, [pc, #388]	@ (8001d44 <HAL_GPIO_Init+0x328>)
 8001bc0:	69fb      	ldr	r3, [r7, #28]
 8001bc2:	089b      	lsrs	r3, r3, #2
 8001bc4:	3302      	adds	r3, #2
 8001bc6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001bca:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001bcc:	69fb      	ldr	r3, [r7, #28]
 8001bce:	f003 0303 	and.w	r3, r3, #3
 8001bd2:	009b      	lsls	r3, r3, #2
 8001bd4:	220f      	movs	r2, #15
 8001bd6:	fa02 f303 	lsl.w	r3, r2, r3
 8001bda:	43db      	mvns	r3, r3
 8001bdc:	69ba      	ldr	r2, [r7, #24]
 8001bde:	4013      	ands	r3, r2
 8001be0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	4a58      	ldr	r2, [pc, #352]	@ (8001d48 <HAL_GPIO_Init+0x32c>)
 8001be6:	4293      	cmp	r3, r2
 8001be8:	d037      	beq.n	8001c5a <HAL_GPIO_Init+0x23e>
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	4a57      	ldr	r2, [pc, #348]	@ (8001d4c <HAL_GPIO_Init+0x330>)
 8001bee:	4293      	cmp	r3, r2
 8001bf0:	d031      	beq.n	8001c56 <HAL_GPIO_Init+0x23a>
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	4a56      	ldr	r2, [pc, #344]	@ (8001d50 <HAL_GPIO_Init+0x334>)
 8001bf6:	4293      	cmp	r3, r2
 8001bf8:	d02b      	beq.n	8001c52 <HAL_GPIO_Init+0x236>
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	4a55      	ldr	r2, [pc, #340]	@ (8001d54 <HAL_GPIO_Init+0x338>)
 8001bfe:	4293      	cmp	r3, r2
 8001c00:	d025      	beq.n	8001c4e <HAL_GPIO_Init+0x232>
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	4a54      	ldr	r2, [pc, #336]	@ (8001d58 <HAL_GPIO_Init+0x33c>)
 8001c06:	4293      	cmp	r3, r2
 8001c08:	d01f      	beq.n	8001c4a <HAL_GPIO_Init+0x22e>
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	4a53      	ldr	r2, [pc, #332]	@ (8001d5c <HAL_GPIO_Init+0x340>)
 8001c0e:	4293      	cmp	r3, r2
 8001c10:	d019      	beq.n	8001c46 <HAL_GPIO_Init+0x22a>
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	4a52      	ldr	r2, [pc, #328]	@ (8001d60 <HAL_GPIO_Init+0x344>)
 8001c16:	4293      	cmp	r3, r2
 8001c18:	d013      	beq.n	8001c42 <HAL_GPIO_Init+0x226>
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	4a51      	ldr	r2, [pc, #324]	@ (8001d64 <HAL_GPIO_Init+0x348>)
 8001c1e:	4293      	cmp	r3, r2
 8001c20:	d00d      	beq.n	8001c3e <HAL_GPIO_Init+0x222>
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	4a50      	ldr	r2, [pc, #320]	@ (8001d68 <HAL_GPIO_Init+0x34c>)
 8001c26:	4293      	cmp	r3, r2
 8001c28:	d007      	beq.n	8001c3a <HAL_GPIO_Init+0x21e>
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	4a4f      	ldr	r2, [pc, #316]	@ (8001d6c <HAL_GPIO_Init+0x350>)
 8001c2e:	4293      	cmp	r3, r2
 8001c30:	d101      	bne.n	8001c36 <HAL_GPIO_Init+0x21a>
 8001c32:	2309      	movs	r3, #9
 8001c34:	e012      	b.n	8001c5c <HAL_GPIO_Init+0x240>
 8001c36:	230a      	movs	r3, #10
 8001c38:	e010      	b.n	8001c5c <HAL_GPIO_Init+0x240>
 8001c3a:	2308      	movs	r3, #8
 8001c3c:	e00e      	b.n	8001c5c <HAL_GPIO_Init+0x240>
 8001c3e:	2307      	movs	r3, #7
 8001c40:	e00c      	b.n	8001c5c <HAL_GPIO_Init+0x240>
 8001c42:	2306      	movs	r3, #6
 8001c44:	e00a      	b.n	8001c5c <HAL_GPIO_Init+0x240>
 8001c46:	2305      	movs	r3, #5
 8001c48:	e008      	b.n	8001c5c <HAL_GPIO_Init+0x240>
 8001c4a:	2304      	movs	r3, #4
 8001c4c:	e006      	b.n	8001c5c <HAL_GPIO_Init+0x240>
 8001c4e:	2303      	movs	r3, #3
 8001c50:	e004      	b.n	8001c5c <HAL_GPIO_Init+0x240>
 8001c52:	2302      	movs	r3, #2
 8001c54:	e002      	b.n	8001c5c <HAL_GPIO_Init+0x240>
 8001c56:	2301      	movs	r3, #1
 8001c58:	e000      	b.n	8001c5c <HAL_GPIO_Init+0x240>
 8001c5a:	2300      	movs	r3, #0
 8001c5c:	69fa      	ldr	r2, [r7, #28]
 8001c5e:	f002 0203 	and.w	r2, r2, #3
 8001c62:	0092      	lsls	r2, r2, #2
 8001c64:	4093      	lsls	r3, r2
 8001c66:	69ba      	ldr	r2, [r7, #24]
 8001c68:	4313      	orrs	r3, r2
 8001c6a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001c6c:	4935      	ldr	r1, [pc, #212]	@ (8001d44 <HAL_GPIO_Init+0x328>)
 8001c6e:	69fb      	ldr	r3, [r7, #28]
 8001c70:	089b      	lsrs	r3, r3, #2
 8001c72:	3302      	adds	r3, #2
 8001c74:	69ba      	ldr	r2, [r7, #24]
 8001c76:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001c7a:	4b3d      	ldr	r3, [pc, #244]	@ (8001d70 <HAL_GPIO_Init+0x354>)
 8001c7c:	689b      	ldr	r3, [r3, #8]
 8001c7e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c80:	693b      	ldr	r3, [r7, #16]
 8001c82:	43db      	mvns	r3, r3
 8001c84:	69ba      	ldr	r2, [r7, #24]
 8001c86:	4013      	ands	r3, r2
 8001c88:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001c8a:	683b      	ldr	r3, [r7, #0]
 8001c8c:	685b      	ldr	r3, [r3, #4]
 8001c8e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d003      	beq.n	8001c9e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001c96:	69ba      	ldr	r2, [r7, #24]
 8001c98:	693b      	ldr	r3, [r7, #16]
 8001c9a:	4313      	orrs	r3, r2
 8001c9c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001c9e:	4a34      	ldr	r2, [pc, #208]	@ (8001d70 <HAL_GPIO_Init+0x354>)
 8001ca0:	69bb      	ldr	r3, [r7, #24]
 8001ca2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001ca4:	4b32      	ldr	r3, [pc, #200]	@ (8001d70 <HAL_GPIO_Init+0x354>)
 8001ca6:	68db      	ldr	r3, [r3, #12]
 8001ca8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001caa:	693b      	ldr	r3, [r7, #16]
 8001cac:	43db      	mvns	r3, r3
 8001cae:	69ba      	ldr	r2, [r7, #24]
 8001cb0:	4013      	ands	r3, r2
 8001cb2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001cb4:	683b      	ldr	r3, [r7, #0]
 8001cb6:	685b      	ldr	r3, [r3, #4]
 8001cb8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d003      	beq.n	8001cc8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001cc0:	69ba      	ldr	r2, [r7, #24]
 8001cc2:	693b      	ldr	r3, [r7, #16]
 8001cc4:	4313      	orrs	r3, r2
 8001cc6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001cc8:	4a29      	ldr	r2, [pc, #164]	@ (8001d70 <HAL_GPIO_Init+0x354>)
 8001cca:	69bb      	ldr	r3, [r7, #24]
 8001ccc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001cce:	4b28      	ldr	r3, [pc, #160]	@ (8001d70 <HAL_GPIO_Init+0x354>)
 8001cd0:	685b      	ldr	r3, [r3, #4]
 8001cd2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cd4:	693b      	ldr	r3, [r7, #16]
 8001cd6:	43db      	mvns	r3, r3
 8001cd8:	69ba      	ldr	r2, [r7, #24]
 8001cda:	4013      	ands	r3, r2
 8001cdc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001cde:	683b      	ldr	r3, [r7, #0]
 8001ce0:	685b      	ldr	r3, [r3, #4]
 8001ce2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d003      	beq.n	8001cf2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001cea:	69ba      	ldr	r2, [r7, #24]
 8001cec:	693b      	ldr	r3, [r7, #16]
 8001cee:	4313      	orrs	r3, r2
 8001cf0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001cf2:	4a1f      	ldr	r2, [pc, #124]	@ (8001d70 <HAL_GPIO_Init+0x354>)
 8001cf4:	69bb      	ldr	r3, [r7, #24]
 8001cf6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001cf8:	4b1d      	ldr	r3, [pc, #116]	@ (8001d70 <HAL_GPIO_Init+0x354>)
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cfe:	693b      	ldr	r3, [r7, #16]
 8001d00:	43db      	mvns	r3, r3
 8001d02:	69ba      	ldr	r2, [r7, #24]
 8001d04:	4013      	ands	r3, r2
 8001d06:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001d08:	683b      	ldr	r3, [r7, #0]
 8001d0a:	685b      	ldr	r3, [r3, #4]
 8001d0c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d003      	beq.n	8001d1c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001d14:	69ba      	ldr	r2, [r7, #24]
 8001d16:	693b      	ldr	r3, [r7, #16]
 8001d18:	4313      	orrs	r3, r2
 8001d1a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001d1c:	4a14      	ldr	r2, [pc, #80]	@ (8001d70 <HAL_GPIO_Init+0x354>)
 8001d1e:	69bb      	ldr	r3, [r7, #24]
 8001d20:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 8001d22:	69fb      	ldr	r3, [r7, #28]
 8001d24:	3301      	adds	r3, #1
 8001d26:	61fb      	str	r3, [r7, #28]
 8001d28:	69fb      	ldr	r3, [r7, #28]
 8001d2a:	2b0f      	cmp	r3, #15
 8001d2c:	f67f ae86 	bls.w	8001a3c <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001d30:	bf00      	nop
 8001d32:	bf00      	nop
 8001d34:	3724      	adds	r7, #36	@ 0x24
 8001d36:	46bd      	mov	sp, r7
 8001d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3c:	4770      	bx	lr
 8001d3e:	bf00      	nop
 8001d40:	40023800 	.word	0x40023800
 8001d44:	40013800 	.word	0x40013800
 8001d48:	40020000 	.word	0x40020000
 8001d4c:	40020400 	.word	0x40020400
 8001d50:	40020800 	.word	0x40020800
 8001d54:	40020c00 	.word	0x40020c00
 8001d58:	40021000 	.word	0x40021000
 8001d5c:	40021400 	.word	0x40021400
 8001d60:	40021800 	.word	0x40021800
 8001d64:	40021c00 	.word	0x40021c00
 8001d68:	40022000 	.word	0x40022000
 8001d6c:	40022400 	.word	0x40022400
 8001d70:	40013c00 	.word	0x40013c00

08001d74 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d74:	b480      	push	{r7}
 8001d76:	b083      	sub	sp, #12
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	6078      	str	r0, [r7, #4]
 8001d7c:	460b      	mov	r3, r1
 8001d7e:	807b      	strh	r3, [r7, #2]
 8001d80:	4613      	mov	r3, r2
 8001d82:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001d84:	787b      	ldrb	r3, [r7, #1]
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d003      	beq.n	8001d92 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001d8a:	887a      	ldrh	r2, [r7, #2]
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8001d90:	e003      	b.n	8001d9a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8001d92:	887b      	ldrh	r3, [r7, #2]
 8001d94:	041a      	lsls	r2, r3, #16
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	619a      	str	r2, [r3, #24]
}
 8001d9a:	bf00      	nop
 8001d9c:	370c      	adds	r7, #12
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da4:	4770      	bx	lr

08001da6 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin Specifies the pins to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001da6:	b480      	push	{r7}
 8001da8:	b085      	sub	sp, #20
 8001daa:	af00      	add	r7, sp, #0
 8001dac:	6078      	str	r0, [r7, #4]
 8001dae:	460b      	mov	r3, r1
 8001db0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	695b      	ldr	r3, [r3, #20]
 8001db6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001db8:	887a      	ldrh	r2, [r7, #2]
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	4013      	ands	r3, r2
 8001dbe:	041a      	lsls	r2, r3, #16
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	43d9      	mvns	r1, r3
 8001dc4:	887b      	ldrh	r3, [r7, #2]
 8001dc6:	400b      	ands	r3, r1
 8001dc8:	431a      	orrs	r2, r3
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	619a      	str	r2, [r3, #24]
}
 8001dce:	bf00      	nop
 8001dd0:	3714      	adds	r7, #20
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd8:	4770      	bx	lr

08001dda <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001dda:	b580      	push	{r7, lr}
 8001ddc:	b086      	sub	sp, #24
 8001dde:	af02      	add	r7, sp, #8
 8001de0:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d101      	bne.n	8001dec <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001de8:	2301      	movs	r3, #1
 8001dea:	e108      	b.n	8001ffe <HAL_PCD_Init+0x224>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8001df8:	b2db      	uxtb	r3, r3
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d106      	bne.n	8001e0c <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	2200      	movs	r2, #0
 8001e02:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001e06:	6878      	ldr	r0, [r7, #4]
 8001e08:	f7fe ffd2 	bl	8000db0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	2203      	movs	r2, #3
 8001e10:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8001e14:	68bb      	ldr	r3, [r7, #8]
 8001e16:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001e1a:	d102      	bne.n	8001e22 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	2200      	movs	r2, #0
 8001e20:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	4618      	mov	r0, r3
 8001e28:	f002 f820 	bl	8003e6c <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	6818      	ldr	r0, [r3, #0]
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	7c1a      	ldrb	r2, [r3, #16]
 8001e34:	f88d 2000 	strb.w	r2, [sp]
 8001e38:	3304      	adds	r3, #4
 8001e3a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001e3c:	f001 ffbc 	bl	8003db8 <USB_CoreInit>
 8001e40:	4603      	mov	r3, r0
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d005      	beq.n	8001e52 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	2202      	movs	r2, #2
 8001e4a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8001e4e:	2301      	movs	r3, #1
 8001e50:	e0d5      	b.n	8001ffe <HAL_PCD_Init+0x224>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	2100      	movs	r1, #0
 8001e58:	4618      	mov	r0, r3
 8001e5a:	f002 f818 	bl	8003e8e <USB_SetCurrentMode>
 8001e5e:	4603      	mov	r3, r0
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d005      	beq.n	8001e70 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	2202      	movs	r2, #2
 8001e68:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8001e6c:	2301      	movs	r3, #1
 8001e6e:	e0c6      	b.n	8001ffe <HAL_PCD_Init+0x224>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001e70:	2300      	movs	r3, #0
 8001e72:	73fb      	strb	r3, [r7, #15]
 8001e74:	e04a      	b.n	8001f0c <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001e76:	7bfa      	ldrb	r2, [r7, #15]
 8001e78:	6879      	ldr	r1, [r7, #4]
 8001e7a:	4613      	mov	r3, r2
 8001e7c:	00db      	lsls	r3, r3, #3
 8001e7e:	4413      	add	r3, r2
 8001e80:	009b      	lsls	r3, r3, #2
 8001e82:	440b      	add	r3, r1
 8001e84:	3315      	adds	r3, #21
 8001e86:	2201      	movs	r2, #1
 8001e88:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001e8a:	7bfa      	ldrb	r2, [r7, #15]
 8001e8c:	6879      	ldr	r1, [r7, #4]
 8001e8e:	4613      	mov	r3, r2
 8001e90:	00db      	lsls	r3, r3, #3
 8001e92:	4413      	add	r3, r2
 8001e94:	009b      	lsls	r3, r3, #2
 8001e96:	440b      	add	r3, r1
 8001e98:	3314      	adds	r3, #20
 8001e9a:	7bfa      	ldrb	r2, [r7, #15]
 8001e9c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001e9e:	7bfa      	ldrb	r2, [r7, #15]
 8001ea0:	7bfb      	ldrb	r3, [r7, #15]
 8001ea2:	b298      	uxth	r0, r3
 8001ea4:	6879      	ldr	r1, [r7, #4]
 8001ea6:	4613      	mov	r3, r2
 8001ea8:	00db      	lsls	r3, r3, #3
 8001eaa:	4413      	add	r3, r2
 8001eac:	009b      	lsls	r3, r3, #2
 8001eae:	440b      	add	r3, r1
 8001eb0:	332e      	adds	r3, #46	@ 0x2e
 8001eb2:	4602      	mov	r2, r0
 8001eb4:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001eb6:	7bfa      	ldrb	r2, [r7, #15]
 8001eb8:	6879      	ldr	r1, [r7, #4]
 8001eba:	4613      	mov	r3, r2
 8001ebc:	00db      	lsls	r3, r3, #3
 8001ebe:	4413      	add	r3, r2
 8001ec0:	009b      	lsls	r3, r3, #2
 8001ec2:	440b      	add	r3, r1
 8001ec4:	3318      	adds	r3, #24
 8001ec6:	2200      	movs	r2, #0
 8001ec8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001eca:	7bfa      	ldrb	r2, [r7, #15]
 8001ecc:	6879      	ldr	r1, [r7, #4]
 8001ece:	4613      	mov	r3, r2
 8001ed0:	00db      	lsls	r3, r3, #3
 8001ed2:	4413      	add	r3, r2
 8001ed4:	009b      	lsls	r3, r3, #2
 8001ed6:	440b      	add	r3, r1
 8001ed8:	331c      	adds	r3, #28
 8001eda:	2200      	movs	r2, #0
 8001edc:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001ede:	7bfa      	ldrb	r2, [r7, #15]
 8001ee0:	6879      	ldr	r1, [r7, #4]
 8001ee2:	4613      	mov	r3, r2
 8001ee4:	00db      	lsls	r3, r3, #3
 8001ee6:	4413      	add	r3, r2
 8001ee8:	009b      	lsls	r3, r3, #2
 8001eea:	440b      	add	r3, r1
 8001eec:	3320      	adds	r3, #32
 8001eee:	2200      	movs	r2, #0
 8001ef0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001ef2:	7bfa      	ldrb	r2, [r7, #15]
 8001ef4:	6879      	ldr	r1, [r7, #4]
 8001ef6:	4613      	mov	r3, r2
 8001ef8:	00db      	lsls	r3, r3, #3
 8001efa:	4413      	add	r3, r2
 8001efc:	009b      	lsls	r3, r3, #2
 8001efe:	440b      	add	r3, r1
 8001f00:	3324      	adds	r3, #36	@ 0x24
 8001f02:	2200      	movs	r2, #0
 8001f04:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001f06:	7bfb      	ldrb	r3, [r7, #15]
 8001f08:	3301      	adds	r3, #1
 8001f0a:	73fb      	strb	r3, [r7, #15]
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	791b      	ldrb	r3, [r3, #4]
 8001f10:	7bfa      	ldrb	r2, [r7, #15]
 8001f12:	429a      	cmp	r2, r3
 8001f14:	d3af      	bcc.n	8001e76 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001f16:	2300      	movs	r3, #0
 8001f18:	73fb      	strb	r3, [r7, #15]
 8001f1a:	e044      	b.n	8001fa6 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001f1c:	7bfa      	ldrb	r2, [r7, #15]
 8001f1e:	6879      	ldr	r1, [r7, #4]
 8001f20:	4613      	mov	r3, r2
 8001f22:	00db      	lsls	r3, r3, #3
 8001f24:	4413      	add	r3, r2
 8001f26:	009b      	lsls	r3, r3, #2
 8001f28:	440b      	add	r3, r1
 8001f2a:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8001f2e:	2200      	movs	r2, #0
 8001f30:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001f32:	7bfa      	ldrb	r2, [r7, #15]
 8001f34:	6879      	ldr	r1, [r7, #4]
 8001f36:	4613      	mov	r3, r2
 8001f38:	00db      	lsls	r3, r3, #3
 8001f3a:	4413      	add	r3, r2
 8001f3c:	009b      	lsls	r3, r3, #2
 8001f3e:	440b      	add	r3, r1
 8001f40:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8001f44:	7bfa      	ldrb	r2, [r7, #15]
 8001f46:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001f48:	7bfa      	ldrb	r2, [r7, #15]
 8001f4a:	6879      	ldr	r1, [r7, #4]
 8001f4c:	4613      	mov	r3, r2
 8001f4e:	00db      	lsls	r3, r3, #3
 8001f50:	4413      	add	r3, r2
 8001f52:	009b      	lsls	r3, r3, #2
 8001f54:	440b      	add	r3, r1
 8001f56:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8001f5a:	2200      	movs	r2, #0
 8001f5c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001f5e:	7bfa      	ldrb	r2, [r7, #15]
 8001f60:	6879      	ldr	r1, [r7, #4]
 8001f62:	4613      	mov	r3, r2
 8001f64:	00db      	lsls	r3, r3, #3
 8001f66:	4413      	add	r3, r2
 8001f68:	009b      	lsls	r3, r3, #2
 8001f6a:	440b      	add	r3, r1
 8001f6c:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8001f70:	2200      	movs	r2, #0
 8001f72:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001f74:	7bfa      	ldrb	r2, [r7, #15]
 8001f76:	6879      	ldr	r1, [r7, #4]
 8001f78:	4613      	mov	r3, r2
 8001f7a:	00db      	lsls	r3, r3, #3
 8001f7c:	4413      	add	r3, r2
 8001f7e:	009b      	lsls	r3, r3, #2
 8001f80:	440b      	add	r3, r1
 8001f82:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8001f86:	2200      	movs	r2, #0
 8001f88:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001f8a:	7bfa      	ldrb	r2, [r7, #15]
 8001f8c:	6879      	ldr	r1, [r7, #4]
 8001f8e:	4613      	mov	r3, r2
 8001f90:	00db      	lsls	r3, r3, #3
 8001f92:	4413      	add	r3, r2
 8001f94:	009b      	lsls	r3, r3, #2
 8001f96:	440b      	add	r3, r1
 8001f98:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001fa0:	7bfb      	ldrb	r3, [r7, #15]
 8001fa2:	3301      	adds	r3, #1
 8001fa4:	73fb      	strb	r3, [r7, #15]
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	791b      	ldrb	r3, [r3, #4]
 8001faa:	7bfa      	ldrb	r2, [r7, #15]
 8001fac:	429a      	cmp	r2, r3
 8001fae:	d3b5      	bcc.n	8001f1c <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	6818      	ldr	r0, [r3, #0]
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	7c1a      	ldrb	r2, [r3, #16]
 8001fb8:	f88d 2000 	strb.w	r2, [sp]
 8001fbc:	3304      	adds	r3, #4
 8001fbe:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001fc0:	f001 ffb2 	bl	8003f28 <USB_DevInit>
 8001fc4:	4603      	mov	r3, r0
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d005      	beq.n	8001fd6 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	2202      	movs	r2, #2
 8001fce:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8001fd2:	2301      	movs	r3, #1
 8001fd4:	e013      	b.n	8001ffe <HAL_PCD_Init+0x224>
  }

  hpcd->USB_Address = 0U;
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	2200      	movs	r2, #0
 8001fda:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	2201      	movs	r2, #1
 8001fe0:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	7b1b      	ldrb	r3, [r3, #12]
 8001fe8:	2b01      	cmp	r3, #1
 8001fea:	d102      	bne.n	8001ff2 <HAL_PCD_Init+0x218>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8001fec:	6878      	ldr	r0, [r7, #4]
 8001fee:	f000 f80b 	bl	8002008 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	4618      	mov	r0, r3
 8001ff8:	f002 f96d 	bl	80042d6 <USB_DevDisconnect>

  return HAL_OK;
 8001ffc:	2300      	movs	r3, #0
}
 8001ffe:	4618      	mov	r0, r3
 8002000:	3710      	adds	r7, #16
 8002002:	46bd      	mov	sp, r7
 8002004:	bd80      	pop	{r7, pc}
	...

08002008 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002008:	b480      	push	{r7}
 800200a:	b085      	sub	sp, #20
 800200c:	af00      	add	r7, sp, #0
 800200e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	2201      	movs	r2, #1
 800201a:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	2200      	movs	r2, #0
 8002022:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	699b      	ldr	r3, [r3, #24]
 800202a:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8002036:	4b05      	ldr	r3, [pc, #20]	@ (800204c <HAL_PCDEx_ActivateLPM+0x44>)
 8002038:	4313      	orrs	r3, r2
 800203a:	68fa      	ldr	r2, [r7, #12]
 800203c:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 800203e:	2300      	movs	r3, #0
}
 8002040:	4618      	mov	r0, r3
 8002042:	3714      	adds	r7, #20
 8002044:	46bd      	mov	sp, r7
 8002046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204a:	4770      	bx	lr
 800204c:	10000003 	.word	0x10000003

08002050 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002050:	b480      	push	{r7}
 8002052:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002054:	4b05      	ldr	r3, [pc, #20]	@ (800206c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	4a04      	ldr	r2, [pc, #16]	@ (800206c <HAL_PWR_EnableBkUpAccess+0x1c>)
 800205a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800205e:	6013      	str	r3, [r2, #0]
}
 8002060:	bf00      	nop
 8002062:	46bd      	mov	sp, r7
 8002064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002068:	4770      	bx	lr
 800206a:	bf00      	nop
 800206c:	40007000 	.word	0x40007000

08002070 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002070:	b580      	push	{r7, lr}
 8002072:	b082      	sub	sp, #8
 8002074:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8002076:	2300      	movs	r3, #0
 8002078:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800207a:	4b23      	ldr	r3, [pc, #140]	@ (8002108 <HAL_PWREx_EnableOverDrive+0x98>)
 800207c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800207e:	4a22      	ldr	r2, [pc, #136]	@ (8002108 <HAL_PWREx_EnableOverDrive+0x98>)
 8002080:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002084:	6413      	str	r3, [r2, #64]	@ 0x40
 8002086:	4b20      	ldr	r3, [pc, #128]	@ (8002108 <HAL_PWREx_EnableOverDrive+0x98>)
 8002088:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800208a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800208e:	603b      	str	r3, [r7, #0]
 8002090:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002092:	4b1e      	ldr	r3, [pc, #120]	@ (800210c <HAL_PWREx_EnableOverDrive+0x9c>)
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	4a1d      	ldr	r2, [pc, #116]	@ (800210c <HAL_PWREx_EnableOverDrive+0x9c>)
 8002098:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800209c:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800209e:	f7ff f859 	bl	8001154 <HAL_GetTick>
 80020a2:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80020a4:	e009      	b.n	80020ba <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80020a6:	f7ff f855 	bl	8001154 <HAL_GetTick>
 80020aa:	4602      	mov	r2, r0
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	1ad3      	subs	r3, r2, r3
 80020b0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80020b4:	d901      	bls.n	80020ba <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 80020b6:	2303      	movs	r3, #3
 80020b8:	e022      	b.n	8002100 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80020ba:	4b14      	ldr	r3, [pc, #80]	@ (800210c <HAL_PWREx_EnableOverDrive+0x9c>)
 80020bc:	685b      	ldr	r3, [r3, #4]
 80020be:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80020c2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80020c6:	d1ee      	bne.n	80020a6 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80020c8:	4b10      	ldr	r3, [pc, #64]	@ (800210c <HAL_PWREx_EnableOverDrive+0x9c>)
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	4a0f      	ldr	r2, [pc, #60]	@ (800210c <HAL_PWREx_EnableOverDrive+0x9c>)
 80020ce:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80020d2:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80020d4:	f7ff f83e 	bl	8001154 <HAL_GetTick>
 80020d8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80020da:	e009      	b.n	80020f0 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80020dc:	f7ff f83a 	bl	8001154 <HAL_GetTick>
 80020e0:	4602      	mov	r2, r0
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	1ad3      	subs	r3, r2, r3
 80020e6:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80020ea:	d901      	bls.n	80020f0 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80020ec:	2303      	movs	r3, #3
 80020ee:	e007      	b.n	8002100 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80020f0:	4b06      	ldr	r3, [pc, #24]	@ (800210c <HAL_PWREx_EnableOverDrive+0x9c>)
 80020f2:	685b      	ldr	r3, [r3, #4]
 80020f4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80020f8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80020fc:	d1ee      	bne.n	80020dc <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80020fe:	2300      	movs	r3, #0
}
 8002100:	4618      	mov	r0, r3
 8002102:	3708      	adds	r7, #8
 8002104:	46bd      	mov	sp, r7
 8002106:	bd80      	pop	{r7, pc}
 8002108:	40023800 	.word	0x40023800
 800210c:	40007000 	.word	0x40007000

08002110 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002110:	b580      	push	{r7, lr}
 8002112:	b086      	sub	sp, #24
 8002114:	af00      	add	r7, sp, #0
 8002116:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8002118:	2300      	movs	r3, #0
 800211a:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	2b00      	cmp	r3, #0
 8002120:	d101      	bne.n	8002126 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8002122:	2301      	movs	r3, #1
 8002124:	e29b      	b.n	800265e <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	f003 0301 	and.w	r3, r3, #1
 800212e:	2b00      	cmp	r3, #0
 8002130:	f000 8087 	beq.w	8002242 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002134:	4b96      	ldr	r3, [pc, #600]	@ (8002390 <HAL_RCC_OscConfig+0x280>)
 8002136:	689b      	ldr	r3, [r3, #8]
 8002138:	f003 030c 	and.w	r3, r3, #12
 800213c:	2b04      	cmp	r3, #4
 800213e:	d00c      	beq.n	800215a <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002140:	4b93      	ldr	r3, [pc, #588]	@ (8002390 <HAL_RCC_OscConfig+0x280>)
 8002142:	689b      	ldr	r3, [r3, #8]
 8002144:	f003 030c 	and.w	r3, r3, #12
 8002148:	2b08      	cmp	r3, #8
 800214a:	d112      	bne.n	8002172 <HAL_RCC_OscConfig+0x62>
 800214c:	4b90      	ldr	r3, [pc, #576]	@ (8002390 <HAL_RCC_OscConfig+0x280>)
 800214e:	685b      	ldr	r3, [r3, #4]
 8002150:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002154:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002158:	d10b      	bne.n	8002172 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800215a:	4b8d      	ldr	r3, [pc, #564]	@ (8002390 <HAL_RCC_OscConfig+0x280>)
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002162:	2b00      	cmp	r3, #0
 8002164:	d06c      	beq.n	8002240 <HAL_RCC_OscConfig+0x130>
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	685b      	ldr	r3, [r3, #4]
 800216a:	2b00      	cmp	r3, #0
 800216c:	d168      	bne.n	8002240 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800216e:	2301      	movs	r3, #1
 8002170:	e275      	b.n	800265e <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	685b      	ldr	r3, [r3, #4]
 8002176:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800217a:	d106      	bne.n	800218a <HAL_RCC_OscConfig+0x7a>
 800217c:	4b84      	ldr	r3, [pc, #528]	@ (8002390 <HAL_RCC_OscConfig+0x280>)
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	4a83      	ldr	r2, [pc, #524]	@ (8002390 <HAL_RCC_OscConfig+0x280>)
 8002182:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002186:	6013      	str	r3, [r2, #0]
 8002188:	e02e      	b.n	80021e8 <HAL_RCC_OscConfig+0xd8>
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	685b      	ldr	r3, [r3, #4]
 800218e:	2b00      	cmp	r3, #0
 8002190:	d10c      	bne.n	80021ac <HAL_RCC_OscConfig+0x9c>
 8002192:	4b7f      	ldr	r3, [pc, #508]	@ (8002390 <HAL_RCC_OscConfig+0x280>)
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	4a7e      	ldr	r2, [pc, #504]	@ (8002390 <HAL_RCC_OscConfig+0x280>)
 8002198:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800219c:	6013      	str	r3, [r2, #0]
 800219e:	4b7c      	ldr	r3, [pc, #496]	@ (8002390 <HAL_RCC_OscConfig+0x280>)
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	4a7b      	ldr	r2, [pc, #492]	@ (8002390 <HAL_RCC_OscConfig+0x280>)
 80021a4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80021a8:	6013      	str	r3, [r2, #0]
 80021aa:	e01d      	b.n	80021e8 <HAL_RCC_OscConfig+0xd8>
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	685b      	ldr	r3, [r3, #4]
 80021b0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80021b4:	d10c      	bne.n	80021d0 <HAL_RCC_OscConfig+0xc0>
 80021b6:	4b76      	ldr	r3, [pc, #472]	@ (8002390 <HAL_RCC_OscConfig+0x280>)
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	4a75      	ldr	r2, [pc, #468]	@ (8002390 <HAL_RCC_OscConfig+0x280>)
 80021bc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80021c0:	6013      	str	r3, [r2, #0]
 80021c2:	4b73      	ldr	r3, [pc, #460]	@ (8002390 <HAL_RCC_OscConfig+0x280>)
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	4a72      	ldr	r2, [pc, #456]	@ (8002390 <HAL_RCC_OscConfig+0x280>)
 80021c8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80021cc:	6013      	str	r3, [r2, #0]
 80021ce:	e00b      	b.n	80021e8 <HAL_RCC_OscConfig+0xd8>
 80021d0:	4b6f      	ldr	r3, [pc, #444]	@ (8002390 <HAL_RCC_OscConfig+0x280>)
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	4a6e      	ldr	r2, [pc, #440]	@ (8002390 <HAL_RCC_OscConfig+0x280>)
 80021d6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80021da:	6013      	str	r3, [r2, #0]
 80021dc:	4b6c      	ldr	r3, [pc, #432]	@ (8002390 <HAL_RCC_OscConfig+0x280>)
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	4a6b      	ldr	r2, [pc, #428]	@ (8002390 <HAL_RCC_OscConfig+0x280>)
 80021e2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80021e6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	685b      	ldr	r3, [r3, #4]
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d013      	beq.n	8002218 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021f0:	f7fe ffb0 	bl	8001154 <HAL_GetTick>
 80021f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021f6:	e008      	b.n	800220a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80021f8:	f7fe ffac 	bl	8001154 <HAL_GetTick>
 80021fc:	4602      	mov	r2, r0
 80021fe:	693b      	ldr	r3, [r7, #16]
 8002200:	1ad3      	subs	r3, r2, r3
 8002202:	2b64      	cmp	r3, #100	@ 0x64
 8002204:	d901      	bls.n	800220a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002206:	2303      	movs	r3, #3
 8002208:	e229      	b.n	800265e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800220a:	4b61      	ldr	r3, [pc, #388]	@ (8002390 <HAL_RCC_OscConfig+0x280>)
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002212:	2b00      	cmp	r3, #0
 8002214:	d0f0      	beq.n	80021f8 <HAL_RCC_OscConfig+0xe8>
 8002216:	e014      	b.n	8002242 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002218:	f7fe ff9c 	bl	8001154 <HAL_GetTick>
 800221c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800221e:	e008      	b.n	8002232 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002220:	f7fe ff98 	bl	8001154 <HAL_GetTick>
 8002224:	4602      	mov	r2, r0
 8002226:	693b      	ldr	r3, [r7, #16]
 8002228:	1ad3      	subs	r3, r2, r3
 800222a:	2b64      	cmp	r3, #100	@ 0x64
 800222c:	d901      	bls.n	8002232 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800222e:	2303      	movs	r3, #3
 8002230:	e215      	b.n	800265e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002232:	4b57      	ldr	r3, [pc, #348]	@ (8002390 <HAL_RCC_OscConfig+0x280>)
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800223a:	2b00      	cmp	r3, #0
 800223c:	d1f0      	bne.n	8002220 <HAL_RCC_OscConfig+0x110>
 800223e:	e000      	b.n	8002242 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002240:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	f003 0302 	and.w	r3, r3, #2
 800224a:	2b00      	cmp	r3, #0
 800224c:	d069      	beq.n	8002322 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800224e:	4b50      	ldr	r3, [pc, #320]	@ (8002390 <HAL_RCC_OscConfig+0x280>)
 8002250:	689b      	ldr	r3, [r3, #8]
 8002252:	f003 030c 	and.w	r3, r3, #12
 8002256:	2b00      	cmp	r3, #0
 8002258:	d00b      	beq.n	8002272 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800225a:	4b4d      	ldr	r3, [pc, #308]	@ (8002390 <HAL_RCC_OscConfig+0x280>)
 800225c:	689b      	ldr	r3, [r3, #8]
 800225e:	f003 030c 	and.w	r3, r3, #12
 8002262:	2b08      	cmp	r3, #8
 8002264:	d11c      	bne.n	80022a0 <HAL_RCC_OscConfig+0x190>
 8002266:	4b4a      	ldr	r3, [pc, #296]	@ (8002390 <HAL_RCC_OscConfig+0x280>)
 8002268:	685b      	ldr	r3, [r3, #4]
 800226a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800226e:	2b00      	cmp	r3, #0
 8002270:	d116      	bne.n	80022a0 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002272:	4b47      	ldr	r3, [pc, #284]	@ (8002390 <HAL_RCC_OscConfig+0x280>)
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	f003 0302 	and.w	r3, r3, #2
 800227a:	2b00      	cmp	r3, #0
 800227c:	d005      	beq.n	800228a <HAL_RCC_OscConfig+0x17a>
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	68db      	ldr	r3, [r3, #12]
 8002282:	2b01      	cmp	r3, #1
 8002284:	d001      	beq.n	800228a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002286:	2301      	movs	r3, #1
 8002288:	e1e9      	b.n	800265e <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800228a:	4b41      	ldr	r3, [pc, #260]	@ (8002390 <HAL_RCC_OscConfig+0x280>)
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	691b      	ldr	r3, [r3, #16]
 8002296:	00db      	lsls	r3, r3, #3
 8002298:	493d      	ldr	r1, [pc, #244]	@ (8002390 <HAL_RCC_OscConfig+0x280>)
 800229a:	4313      	orrs	r3, r2
 800229c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800229e:	e040      	b.n	8002322 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	68db      	ldr	r3, [r3, #12]
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d023      	beq.n	80022f0 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80022a8:	4b39      	ldr	r3, [pc, #228]	@ (8002390 <HAL_RCC_OscConfig+0x280>)
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	4a38      	ldr	r2, [pc, #224]	@ (8002390 <HAL_RCC_OscConfig+0x280>)
 80022ae:	f043 0301 	orr.w	r3, r3, #1
 80022b2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022b4:	f7fe ff4e 	bl	8001154 <HAL_GetTick>
 80022b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022ba:	e008      	b.n	80022ce <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80022bc:	f7fe ff4a 	bl	8001154 <HAL_GetTick>
 80022c0:	4602      	mov	r2, r0
 80022c2:	693b      	ldr	r3, [r7, #16]
 80022c4:	1ad3      	subs	r3, r2, r3
 80022c6:	2b02      	cmp	r3, #2
 80022c8:	d901      	bls.n	80022ce <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80022ca:	2303      	movs	r3, #3
 80022cc:	e1c7      	b.n	800265e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022ce:	4b30      	ldr	r3, [pc, #192]	@ (8002390 <HAL_RCC_OscConfig+0x280>)
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	f003 0302 	and.w	r3, r3, #2
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d0f0      	beq.n	80022bc <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022da:	4b2d      	ldr	r3, [pc, #180]	@ (8002390 <HAL_RCC_OscConfig+0x280>)
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	691b      	ldr	r3, [r3, #16]
 80022e6:	00db      	lsls	r3, r3, #3
 80022e8:	4929      	ldr	r1, [pc, #164]	@ (8002390 <HAL_RCC_OscConfig+0x280>)
 80022ea:	4313      	orrs	r3, r2
 80022ec:	600b      	str	r3, [r1, #0]
 80022ee:	e018      	b.n	8002322 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80022f0:	4b27      	ldr	r3, [pc, #156]	@ (8002390 <HAL_RCC_OscConfig+0x280>)
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	4a26      	ldr	r2, [pc, #152]	@ (8002390 <HAL_RCC_OscConfig+0x280>)
 80022f6:	f023 0301 	bic.w	r3, r3, #1
 80022fa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022fc:	f7fe ff2a 	bl	8001154 <HAL_GetTick>
 8002300:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002302:	e008      	b.n	8002316 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002304:	f7fe ff26 	bl	8001154 <HAL_GetTick>
 8002308:	4602      	mov	r2, r0
 800230a:	693b      	ldr	r3, [r7, #16]
 800230c:	1ad3      	subs	r3, r2, r3
 800230e:	2b02      	cmp	r3, #2
 8002310:	d901      	bls.n	8002316 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002312:	2303      	movs	r3, #3
 8002314:	e1a3      	b.n	800265e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002316:	4b1e      	ldr	r3, [pc, #120]	@ (8002390 <HAL_RCC_OscConfig+0x280>)
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f003 0302 	and.w	r3, r3, #2
 800231e:	2b00      	cmp	r3, #0
 8002320:	d1f0      	bne.n	8002304 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f003 0308 	and.w	r3, r3, #8
 800232a:	2b00      	cmp	r3, #0
 800232c:	d038      	beq.n	80023a0 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	695b      	ldr	r3, [r3, #20]
 8002332:	2b00      	cmp	r3, #0
 8002334:	d019      	beq.n	800236a <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002336:	4b16      	ldr	r3, [pc, #88]	@ (8002390 <HAL_RCC_OscConfig+0x280>)
 8002338:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800233a:	4a15      	ldr	r2, [pc, #84]	@ (8002390 <HAL_RCC_OscConfig+0x280>)
 800233c:	f043 0301 	orr.w	r3, r3, #1
 8002340:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002342:	f7fe ff07 	bl	8001154 <HAL_GetTick>
 8002346:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002348:	e008      	b.n	800235c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800234a:	f7fe ff03 	bl	8001154 <HAL_GetTick>
 800234e:	4602      	mov	r2, r0
 8002350:	693b      	ldr	r3, [r7, #16]
 8002352:	1ad3      	subs	r3, r2, r3
 8002354:	2b02      	cmp	r3, #2
 8002356:	d901      	bls.n	800235c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002358:	2303      	movs	r3, #3
 800235a:	e180      	b.n	800265e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800235c:	4b0c      	ldr	r3, [pc, #48]	@ (8002390 <HAL_RCC_OscConfig+0x280>)
 800235e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002360:	f003 0302 	and.w	r3, r3, #2
 8002364:	2b00      	cmp	r3, #0
 8002366:	d0f0      	beq.n	800234a <HAL_RCC_OscConfig+0x23a>
 8002368:	e01a      	b.n	80023a0 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800236a:	4b09      	ldr	r3, [pc, #36]	@ (8002390 <HAL_RCC_OscConfig+0x280>)
 800236c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800236e:	4a08      	ldr	r2, [pc, #32]	@ (8002390 <HAL_RCC_OscConfig+0x280>)
 8002370:	f023 0301 	bic.w	r3, r3, #1
 8002374:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002376:	f7fe feed 	bl	8001154 <HAL_GetTick>
 800237a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800237c:	e00a      	b.n	8002394 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800237e:	f7fe fee9 	bl	8001154 <HAL_GetTick>
 8002382:	4602      	mov	r2, r0
 8002384:	693b      	ldr	r3, [r7, #16]
 8002386:	1ad3      	subs	r3, r2, r3
 8002388:	2b02      	cmp	r3, #2
 800238a:	d903      	bls.n	8002394 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800238c:	2303      	movs	r3, #3
 800238e:	e166      	b.n	800265e <HAL_RCC_OscConfig+0x54e>
 8002390:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002394:	4b92      	ldr	r3, [pc, #584]	@ (80025e0 <HAL_RCC_OscConfig+0x4d0>)
 8002396:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002398:	f003 0302 	and.w	r3, r3, #2
 800239c:	2b00      	cmp	r3, #0
 800239e:	d1ee      	bne.n	800237e <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	f003 0304 	and.w	r3, r3, #4
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	f000 80a4 	beq.w	80024f6 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80023ae:	4b8c      	ldr	r3, [pc, #560]	@ (80025e0 <HAL_RCC_OscConfig+0x4d0>)
 80023b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023b2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d10d      	bne.n	80023d6 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80023ba:	4b89      	ldr	r3, [pc, #548]	@ (80025e0 <HAL_RCC_OscConfig+0x4d0>)
 80023bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023be:	4a88      	ldr	r2, [pc, #544]	@ (80025e0 <HAL_RCC_OscConfig+0x4d0>)
 80023c0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80023c4:	6413      	str	r3, [r2, #64]	@ 0x40
 80023c6:	4b86      	ldr	r3, [pc, #536]	@ (80025e0 <HAL_RCC_OscConfig+0x4d0>)
 80023c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023ca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80023ce:	60bb      	str	r3, [r7, #8]
 80023d0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80023d2:	2301      	movs	r3, #1
 80023d4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80023d6:	4b83      	ldr	r3, [pc, #524]	@ (80025e4 <HAL_RCC_OscConfig+0x4d4>)
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d118      	bne.n	8002414 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80023e2:	4b80      	ldr	r3, [pc, #512]	@ (80025e4 <HAL_RCC_OscConfig+0x4d4>)
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	4a7f      	ldr	r2, [pc, #508]	@ (80025e4 <HAL_RCC_OscConfig+0x4d4>)
 80023e8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80023ec:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80023ee:	f7fe feb1 	bl	8001154 <HAL_GetTick>
 80023f2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80023f4:	e008      	b.n	8002408 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80023f6:	f7fe fead 	bl	8001154 <HAL_GetTick>
 80023fa:	4602      	mov	r2, r0
 80023fc:	693b      	ldr	r3, [r7, #16]
 80023fe:	1ad3      	subs	r3, r2, r3
 8002400:	2b64      	cmp	r3, #100	@ 0x64
 8002402:	d901      	bls.n	8002408 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002404:	2303      	movs	r3, #3
 8002406:	e12a      	b.n	800265e <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002408:	4b76      	ldr	r3, [pc, #472]	@ (80025e4 <HAL_RCC_OscConfig+0x4d4>)
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002410:	2b00      	cmp	r3, #0
 8002412:	d0f0      	beq.n	80023f6 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	689b      	ldr	r3, [r3, #8]
 8002418:	2b01      	cmp	r3, #1
 800241a:	d106      	bne.n	800242a <HAL_RCC_OscConfig+0x31a>
 800241c:	4b70      	ldr	r3, [pc, #448]	@ (80025e0 <HAL_RCC_OscConfig+0x4d0>)
 800241e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002420:	4a6f      	ldr	r2, [pc, #444]	@ (80025e0 <HAL_RCC_OscConfig+0x4d0>)
 8002422:	f043 0301 	orr.w	r3, r3, #1
 8002426:	6713      	str	r3, [r2, #112]	@ 0x70
 8002428:	e02d      	b.n	8002486 <HAL_RCC_OscConfig+0x376>
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	689b      	ldr	r3, [r3, #8]
 800242e:	2b00      	cmp	r3, #0
 8002430:	d10c      	bne.n	800244c <HAL_RCC_OscConfig+0x33c>
 8002432:	4b6b      	ldr	r3, [pc, #428]	@ (80025e0 <HAL_RCC_OscConfig+0x4d0>)
 8002434:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002436:	4a6a      	ldr	r2, [pc, #424]	@ (80025e0 <HAL_RCC_OscConfig+0x4d0>)
 8002438:	f023 0301 	bic.w	r3, r3, #1
 800243c:	6713      	str	r3, [r2, #112]	@ 0x70
 800243e:	4b68      	ldr	r3, [pc, #416]	@ (80025e0 <HAL_RCC_OscConfig+0x4d0>)
 8002440:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002442:	4a67      	ldr	r2, [pc, #412]	@ (80025e0 <HAL_RCC_OscConfig+0x4d0>)
 8002444:	f023 0304 	bic.w	r3, r3, #4
 8002448:	6713      	str	r3, [r2, #112]	@ 0x70
 800244a:	e01c      	b.n	8002486 <HAL_RCC_OscConfig+0x376>
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	689b      	ldr	r3, [r3, #8]
 8002450:	2b05      	cmp	r3, #5
 8002452:	d10c      	bne.n	800246e <HAL_RCC_OscConfig+0x35e>
 8002454:	4b62      	ldr	r3, [pc, #392]	@ (80025e0 <HAL_RCC_OscConfig+0x4d0>)
 8002456:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002458:	4a61      	ldr	r2, [pc, #388]	@ (80025e0 <HAL_RCC_OscConfig+0x4d0>)
 800245a:	f043 0304 	orr.w	r3, r3, #4
 800245e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002460:	4b5f      	ldr	r3, [pc, #380]	@ (80025e0 <HAL_RCC_OscConfig+0x4d0>)
 8002462:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002464:	4a5e      	ldr	r2, [pc, #376]	@ (80025e0 <HAL_RCC_OscConfig+0x4d0>)
 8002466:	f043 0301 	orr.w	r3, r3, #1
 800246a:	6713      	str	r3, [r2, #112]	@ 0x70
 800246c:	e00b      	b.n	8002486 <HAL_RCC_OscConfig+0x376>
 800246e:	4b5c      	ldr	r3, [pc, #368]	@ (80025e0 <HAL_RCC_OscConfig+0x4d0>)
 8002470:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002472:	4a5b      	ldr	r2, [pc, #364]	@ (80025e0 <HAL_RCC_OscConfig+0x4d0>)
 8002474:	f023 0301 	bic.w	r3, r3, #1
 8002478:	6713      	str	r3, [r2, #112]	@ 0x70
 800247a:	4b59      	ldr	r3, [pc, #356]	@ (80025e0 <HAL_RCC_OscConfig+0x4d0>)
 800247c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800247e:	4a58      	ldr	r2, [pc, #352]	@ (80025e0 <HAL_RCC_OscConfig+0x4d0>)
 8002480:	f023 0304 	bic.w	r3, r3, #4
 8002484:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	689b      	ldr	r3, [r3, #8]
 800248a:	2b00      	cmp	r3, #0
 800248c:	d015      	beq.n	80024ba <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800248e:	f7fe fe61 	bl	8001154 <HAL_GetTick>
 8002492:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002494:	e00a      	b.n	80024ac <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002496:	f7fe fe5d 	bl	8001154 <HAL_GetTick>
 800249a:	4602      	mov	r2, r0
 800249c:	693b      	ldr	r3, [r7, #16]
 800249e:	1ad3      	subs	r3, r2, r3
 80024a0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80024a4:	4293      	cmp	r3, r2
 80024a6:	d901      	bls.n	80024ac <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80024a8:	2303      	movs	r3, #3
 80024aa:	e0d8      	b.n	800265e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024ac:	4b4c      	ldr	r3, [pc, #304]	@ (80025e0 <HAL_RCC_OscConfig+0x4d0>)
 80024ae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80024b0:	f003 0302 	and.w	r3, r3, #2
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d0ee      	beq.n	8002496 <HAL_RCC_OscConfig+0x386>
 80024b8:	e014      	b.n	80024e4 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024ba:	f7fe fe4b 	bl	8001154 <HAL_GetTick>
 80024be:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80024c0:	e00a      	b.n	80024d8 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80024c2:	f7fe fe47 	bl	8001154 <HAL_GetTick>
 80024c6:	4602      	mov	r2, r0
 80024c8:	693b      	ldr	r3, [r7, #16]
 80024ca:	1ad3      	subs	r3, r2, r3
 80024cc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80024d0:	4293      	cmp	r3, r2
 80024d2:	d901      	bls.n	80024d8 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80024d4:	2303      	movs	r3, #3
 80024d6:	e0c2      	b.n	800265e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80024d8:	4b41      	ldr	r3, [pc, #260]	@ (80025e0 <HAL_RCC_OscConfig+0x4d0>)
 80024da:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80024dc:	f003 0302 	and.w	r3, r3, #2
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d1ee      	bne.n	80024c2 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80024e4:	7dfb      	ldrb	r3, [r7, #23]
 80024e6:	2b01      	cmp	r3, #1
 80024e8:	d105      	bne.n	80024f6 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80024ea:	4b3d      	ldr	r3, [pc, #244]	@ (80025e0 <HAL_RCC_OscConfig+0x4d0>)
 80024ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024ee:	4a3c      	ldr	r2, [pc, #240]	@ (80025e0 <HAL_RCC_OscConfig+0x4d0>)
 80024f0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80024f4:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	699b      	ldr	r3, [r3, #24]
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	f000 80ae 	beq.w	800265c <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002500:	4b37      	ldr	r3, [pc, #220]	@ (80025e0 <HAL_RCC_OscConfig+0x4d0>)
 8002502:	689b      	ldr	r3, [r3, #8]
 8002504:	f003 030c 	and.w	r3, r3, #12
 8002508:	2b08      	cmp	r3, #8
 800250a:	d06d      	beq.n	80025e8 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	699b      	ldr	r3, [r3, #24]
 8002510:	2b02      	cmp	r3, #2
 8002512:	d14b      	bne.n	80025ac <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002514:	4b32      	ldr	r3, [pc, #200]	@ (80025e0 <HAL_RCC_OscConfig+0x4d0>)
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	4a31      	ldr	r2, [pc, #196]	@ (80025e0 <HAL_RCC_OscConfig+0x4d0>)
 800251a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800251e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002520:	f7fe fe18 	bl	8001154 <HAL_GetTick>
 8002524:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002526:	e008      	b.n	800253a <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002528:	f7fe fe14 	bl	8001154 <HAL_GetTick>
 800252c:	4602      	mov	r2, r0
 800252e:	693b      	ldr	r3, [r7, #16]
 8002530:	1ad3      	subs	r3, r2, r3
 8002532:	2b02      	cmp	r3, #2
 8002534:	d901      	bls.n	800253a <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8002536:	2303      	movs	r3, #3
 8002538:	e091      	b.n	800265e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800253a:	4b29      	ldr	r3, [pc, #164]	@ (80025e0 <HAL_RCC_OscConfig+0x4d0>)
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002542:	2b00      	cmp	r3, #0
 8002544:	d1f0      	bne.n	8002528 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	69da      	ldr	r2, [r3, #28]
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	6a1b      	ldr	r3, [r3, #32]
 800254e:	431a      	orrs	r2, r3
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002554:	019b      	lsls	r3, r3, #6
 8002556:	431a      	orrs	r2, r3
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800255c:	085b      	lsrs	r3, r3, #1
 800255e:	3b01      	subs	r3, #1
 8002560:	041b      	lsls	r3, r3, #16
 8002562:	431a      	orrs	r2, r3
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002568:	061b      	lsls	r3, r3, #24
 800256a:	431a      	orrs	r2, r3
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002570:	071b      	lsls	r3, r3, #28
 8002572:	491b      	ldr	r1, [pc, #108]	@ (80025e0 <HAL_RCC_OscConfig+0x4d0>)
 8002574:	4313      	orrs	r3, r2
 8002576:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002578:	4b19      	ldr	r3, [pc, #100]	@ (80025e0 <HAL_RCC_OscConfig+0x4d0>)
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	4a18      	ldr	r2, [pc, #96]	@ (80025e0 <HAL_RCC_OscConfig+0x4d0>)
 800257e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002582:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002584:	f7fe fde6 	bl	8001154 <HAL_GetTick>
 8002588:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800258a:	e008      	b.n	800259e <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800258c:	f7fe fde2 	bl	8001154 <HAL_GetTick>
 8002590:	4602      	mov	r2, r0
 8002592:	693b      	ldr	r3, [r7, #16]
 8002594:	1ad3      	subs	r3, r2, r3
 8002596:	2b02      	cmp	r3, #2
 8002598:	d901      	bls.n	800259e <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 800259a:	2303      	movs	r3, #3
 800259c:	e05f      	b.n	800265e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800259e:	4b10      	ldr	r3, [pc, #64]	@ (80025e0 <HAL_RCC_OscConfig+0x4d0>)
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d0f0      	beq.n	800258c <HAL_RCC_OscConfig+0x47c>
 80025aa:	e057      	b.n	800265c <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80025ac:	4b0c      	ldr	r3, [pc, #48]	@ (80025e0 <HAL_RCC_OscConfig+0x4d0>)
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	4a0b      	ldr	r2, [pc, #44]	@ (80025e0 <HAL_RCC_OscConfig+0x4d0>)
 80025b2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80025b6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025b8:	f7fe fdcc 	bl	8001154 <HAL_GetTick>
 80025bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80025be:	e008      	b.n	80025d2 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025c0:	f7fe fdc8 	bl	8001154 <HAL_GetTick>
 80025c4:	4602      	mov	r2, r0
 80025c6:	693b      	ldr	r3, [r7, #16]
 80025c8:	1ad3      	subs	r3, r2, r3
 80025ca:	2b02      	cmp	r3, #2
 80025cc:	d901      	bls.n	80025d2 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 80025ce:	2303      	movs	r3, #3
 80025d0:	e045      	b.n	800265e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80025d2:	4b03      	ldr	r3, [pc, #12]	@ (80025e0 <HAL_RCC_OscConfig+0x4d0>)
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d1f0      	bne.n	80025c0 <HAL_RCC_OscConfig+0x4b0>
 80025de:	e03d      	b.n	800265c <HAL_RCC_OscConfig+0x54c>
 80025e0:	40023800 	.word	0x40023800
 80025e4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80025e8:	4b1f      	ldr	r3, [pc, #124]	@ (8002668 <HAL_RCC_OscConfig+0x558>)
 80025ea:	685b      	ldr	r3, [r3, #4]
 80025ec:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	699b      	ldr	r3, [r3, #24]
 80025f2:	2b01      	cmp	r3, #1
 80025f4:	d030      	beq.n	8002658 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002600:	429a      	cmp	r2, r3
 8002602:	d129      	bne.n	8002658 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800260e:	429a      	cmp	r2, r3
 8002610:	d122      	bne.n	8002658 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002612:	68fa      	ldr	r2, [r7, #12]
 8002614:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002618:	4013      	ands	r3, r2
 800261a:	687a      	ldr	r2, [r7, #4]
 800261c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800261e:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002620:	4293      	cmp	r3, r2
 8002622:	d119      	bne.n	8002658 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800262e:	085b      	lsrs	r3, r3, #1
 8002630:	3b01      	subs	r3, #1
 8002632:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002634:	429a      	cmp	r2, r3
 8002636:	d10f      	bne.n	8002658 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002642:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002644:	429a      	cmp	r2, r3
 8002646:	d107      	bne.n	8002658 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002652:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002654:	429a      	cmp	r2, r3
 8002656:	d001      	beq.n	800265c <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8002658:	2301      	movs	r3, #1
 800265a:	e000      	b.n	800265e <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 800265c:	2300      	movs	r3, #0
}
 800265e:	4618      	mov	r0, r3
 8002660:	3718      	adds	r7, #24
 8002662:	46bd      	mov	sp, r7
 8002664:	bd80      	pop	{r7, pc}
 8002666:	bf00      	nop
 8002668:	40023800 	.word	0x40023800

0800266c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800266c:	b580      	push	{r7, lr}
 800266e:	b084      	sub	sp, #16
 8002670:	af00      	add	r7, sp, #0
 8002672:	6078      	str	r0, [r7, #4]
 8002674:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8002676:	2300      	movs	r3, #0
 8002678:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	2b00      	cmp	r3, #0
 800267e:	d101      	bne.n	8002684 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002680:	2301      	movs	r3, #1
 8002682:	e0d0      	b.n	8002826 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002684:	4b6a      	ldr	r3, [pc, #424]	@ (8002830 <HAL_RCC_ClockConfig+0x1c4>)
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	f003 030f 	and.w	r3, r3, #15
 800268c:	683a      	ldr	r2, [r7, #0]
 800268e:	429a      	cmp	r2, r3
 8002690:	d910      	bls.n	80026b4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002692:	4b67      	ldr	r3, [pc, #412]	@ (8002830 <HAL_RCC_ClockConfig+0x1c4>)
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f023 020f 	bic.w	r2, r3, #15
 800269a:	4965      	ldr	r1, [pc, #404]	@ (8002830 <HAL_RCC_ClockConfig+0x1c4>)
 800269c:	683b      	ldr	r3, [r7, #0]
 800269e:	4313      	orrs	r3, r2
 80026a0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80026a2:	4b63      	ldr	r3, [pc, #396]	@ (8002830 <HAL_RCC_ClockConfig+0x1c4>)
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	f003 030f 	and.w	r3, r3, #15
 80026aa:	683a      	ldr	r2, [r7, #0]
 80026ac:	429a      	cmp	r2, r3
 80026ae:	d001      	beq.n	80026b4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80026b0:	2301      	movs	r3, #1
 80026b2:	e0b8      	b.n	8002826 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	f003 0302 	and.w	r3, r3, #2
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d020      	beq.n	8002702 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	f003 0304 	and.w	r3, r3, #4
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d005      	beq.n	80026d8 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80026cc:	4b59      	ldr	r3, [pc, #356]	@ (8002834 <HAL_RCC_ClockConfig+0x1c8>)
 80026ce:	689b      	ldr	r3, [r3, #8]
 80026d0:	4a58      	ldr	r2, [pc, #352]	@ (8002834 <HAL_RCC_ClockConfig+0x1c8>)
 80026d2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80026d6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	f003 0308 	and.w	r3, r3, #8
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d005      	beq.n	80026f0 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80026e4:	4b53      	ldr	r3, [pc, #332]	@ (8002834 <HAL_RCC_ClockConfig+0x1c8>)
 80026e6:	689b      	ldr	r3, [r3, #8]
 80026e8:	4a52      	ldr	r2, [pc, #328]	@ (8002834 <HAL_RCC_ClockConfig+0x1c8>)
 80026ea:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80026ee:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80026f0:	4b50      	ldr	r3, [pc, #320]	@ (8002834 <HAL_RCC_ClockConfig+0x1c8>)
 80026f2:	689b      	ldr	r3, [r3, #8]
 80026f4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	689b      	ldr	r3, [r3, #8]
 80026fc:	494d      	ldr	r1, [pc, #308]	@ (8002834 <HAL_RCC_ClockConfig+0x1c8>)
 80026fe:	4313      	orrs	r3, r2
 8002700:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f003 0301 	and.w	r3, r3, #1
 800270a:	2b00      	cmp	r3, #0
 800270c:	d040      	beq.n	8002790 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	685b      	ldr	r3, [r3, #4]
 8002712:	2b01      	cmp	r3, #1
 8002714:	d107      	bne.n	8002726 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002716:	4b47      	ldr	r3, [pc, #284]	@ (8002834 <HAL_RCC_ClockConfig+0x1c8>)
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800271e:	2b00      	cmp	r3, #0
 8002720:	d115      	bne.n	800274e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002722:	2301      	movs	r3, #1
 8002724:	e07f      	b.n	8002826 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	685b      	ldr	r3, [r3, #4]
 800272a:	2b02      	cmp	r3, #2
 800272c:	d107      	bne.n	800273e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800272e:	4b41      	ldr	r3, [pc, #260]	@ (8002834 <HAL_RCC_ClockConfig+0x1c8>)
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002736:	2b00      	cmp	r3, #0
 8002738:	d109      	bne.n	800274e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800273a:	2301      	movs	r3, #1
 800273c:	e073      	b.n	8002826 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800273e:	4b3d      	ldr	r3, [pc, #244]	@ (8002834 <HAL_RCC_ClockConfig+0x1c8>)
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	f003 0302 	and.w	r3, r3, #2
 8002746:	2b00      	cmp	r3, #0
 8002748:	d101      	bne.n	800274e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800274a:	2301      	movs	r3, #1
 800274c:	e06b      	b.n	8002826 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800274e:	4b39      	ldr	r3, [pc, #228]	@ (8002834 <HAL_RCC_ClockConfig+0x1c8>)
 8002750:	689b      	ldr	r3, [r3, #8]
 8002752:	f023 0203 	bic.w	r2, r3, #3
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	685b      	ldr	r3, [r3, #4]
 800275a:	4936      	ldr	r1, [pc, #216]	@ (8002834 <HAL_RCC_ClockConfig+0x1c8>)
 800275c:	4313      	orrs	r3, r2
 800275e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002760:	f7fe fcf8 	bl	8001154 <HAL_GetTick>
 8002764:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002766:	e00a      	b.n	800277e <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002768:	f7fe fcf4 	bl	8001154 <HAL_GetTick>
 800276c:	4602      	mov	r2, r0
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	1ad3      	subs	r3, r2, r3
 8002772:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002776:	4293      	cmp	r3, r2
 8002778:	d901      	bls.n	800277e <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800277a:	2303      	movs	r3, #3
 800277c:	e053      	b.n	8002826 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800277e:	4b2d      	ldr	r3, [pc, #180]	@ (8002834 <HAL_RCC_ClockConfig+0x1c8>)
 8002780:	689b      	ldr	r3, [r3, #8]
 8002782:	f003 020c 	and.w	r2, r3, #12
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	685b      	ldr	r3, [r3, #4]
 800278a:	009b      	lsls	r3, r3, #2
 800278c:	429a      	cmp	r2, r3
 800278e:	d1eb      	bne.n	8002768 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002790:	4b27      	ldr	r3, [pc, #156]	@ (8002830 <HAL_RCC_ClockConfig+0x1c4>)
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	f003 030f 	and.w	r3, r3, #15
 8002798:	683a      	ldr	r2, [r7, #0]
 800279a:	429a      	cmp	r2, r3
 800279c:	d210      	bcs.n	80027c0 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800279e:	4b24      	ldr	r3, [pc, #144]	@ (8002830 <HAL_RCC_ClockConfig+0x1c4>)
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f023 020f 	bic.w	r2, r3, #15
 80027a6:	4922      	ldr	r1, [pc, #136]	@ (8002830 <HAL_RCC_ClockConfig+0x1c4>)
 80027a8:	683b      	ldr	r3, [r7, #0]
 80027aa:	4313      	orrs	r3, r2
 80027ac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80027ae:	4b20      	ldr	r3, [pc, #128]	@ (8002830 <HAL_RCC_ClockConfig+0x1c4>)
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f003 030f 	and.w	r3, r3, #15
 80027b6:	683a      	ldr	r2, [r7, #0]
 80027b8:	429a      	cmp	r2, r3
 80027ba:	d001      	beq.n	80027c0 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80027bc:	2301      	movs	r3, #1
 80027be:	e032      	b.n	8002826 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	f003 0304 	and.w	r3, r3, #4
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d008      	beq.n	80027de <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80027cc:	4b19      	ldr	r3, [pc, #100]	@ (8002834 <HAL_RCC_ClockConfig+0x1c8>)
 80027ce:	689b      	ldr	r3, [r3, #8]
 80027d0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	68db      	ldr	r3, [r3, #12]
 80027d8:	4916      	ldr	r1, [pc, #88]	@ (8002834 <HAL_RCC_ClockConfig+0x1c8>)
 80027da:	4313      	orrs	r3, r2
 80027dc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	f003 0308 	and.w	r3, r3, #8
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d009      	beq.n	80027fe <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80027ea:	4b12      	ldr	r3, [pc, #72]	@ (8002834 <HAL_RCC_ClockConfig+0x1c8>)
 80027ec:	689b      	ldr	r3, [r3, #8]
 80027ee:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	691b      	ldr	r3, [r3, #16]
 80027f6:	00db      	lsls	r3, r3, #3
 80027f8:	490e      	ldr	r1, [pc, #56]	@ (8002834 <HAL_RCC_ClockConfig+0x1c8>)
 80027fa:	4313      	orrs	r3, r2
 80027fc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80027fe:	f000 f821 	bl	8002844 <HAL_RCC_GetSysClockFreq>
 8002802:	4602      	mov	r2, r0
 8002804:	4b0b      	ldr	r3, [pc, #44]	@ (8002834 <HAL_RCC_ClockConfig+0x1c8>)
 8002806:	689b      	ldr	r3, [r3, #8]
 8002808:	091b      	lsrs	r3, r3, #4
 800280a:	f003 030f 	and.w	r3, r3, #15
 800280e:	490a      	ldr	r1, [pc, #40]	@ (8002838 <HAL_RCC_ClockConfig+0x1cc>)
 8002810:	5ccb      	ldrb	r3, [r1, r3]
 8002812:	fa22 f303 	lsr.w	r3, r2, r3
 8002816:	4a09      	ldr	r2, [pc, #36]	@ (800283c <HAL_RCC_ClockConfig+0x1d0>)
 8002818:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800281a:	4b09      	ldr	r3, [pc, #36]	@ (8002840 <HAL_RCC_ClockConfig+0x1d4>)
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	4618      	mov	r0, r3
 8002820:	f7fe fc54 	bl	80010cc <HAL_InitTick>

  return HAL_OK;
 8002824:	2300      	movs	r3, #0
}
 8002826:	4618      	mov	r0, r3
 8002828:	3710      	adds	r7, #16
 800282a:	46bd      	mov	sp, r7
 800282c:	bd80      	pop	{r7, pc}
 800282e:	bf00      	nop
 8002830:	40023c00 	.word	0x40023c00
 8002834:	40023800 	.word	0x40023800
 8002838:	08008a90 	.word	0x08008a90
 800283c:	20000000 	.word	0x20000000
 8002840:	20000004 	.word	0x20000004

08002844 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002844:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002848:	b094      	sub	sp, #80	@ 0x50
 800284a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800284c:	2300      	movs	r3, #0
 800284e:	647b      	str	r3, [r7, #68]	@ 0x44
 8002850:	2300      	movs	r3, #0
 8002852:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002854:	2300      	movs	r3, #0
 8002856:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0;
 8002858:	2300      	movs	r3, #0
 800285a:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800285c:	4b79      	ldr	r3, [pc, #484]	@ (8002a44 <HAL_RCC_GetSysClockFreq+0x200>)
 800285e:	689b      	ldr	r3, [r3, #8]
 8002860:	f003 030c 	and.w	r3, r3, #12
 8002864:	2b08      	cmp	r3, #8
 8002866:	d00d      	beq.n	8002884 <HAL_RCC_GetSysClockFreq+0x40>
 8002868:	2b08      	cmp	r3, #8
 800286a:	f200 80e1 	bhi.w	8002a30 <HAL_RCC_GetSysClockFreq+0x1ec>
 800286e:	2b00      	cmp	r3, #0
 8002870:	d002      	beq.n	8002878 <HAL_RCC_GetSysClockFreq+0x34>
 8002872:	2b04      	cmp	r3, #4
 8002874:	d003      	beq.n	800287e <HAL_RCC_GetSysClockFreq+0x3a>
 8002876:	e0db      	b.n	8002a30 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002878:	4b73      	ldr	r3, [pc, #460]	@ (8002a48 <HAL_RCC_GetSysClockFreq+0x204>)
 800287a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800287c:	e0db      	b.n	8002a36 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800287e:	4b73      	ldr	r3, [pc, #460]	@ (8002a4c <HAL_RCC_GetSysClockFreq+0x208>)
 8002880:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002882:	e0d8      	b.n	8002a36 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002884:	4b6f      	ldr	r3, [pc, #444]	@ (8002a44 <HAL_RCC_GetSysClockFreq+0x200>)
 8002886:	685b      	ldr	r3, [r3, #4]
 8002888:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800288c:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800288e:	4b6d      	ldr	r3, [pc, #436]	@ (8002a44 <HAL_RCC_GetSysClockFreq+0x200>)
 8002890:	685b      	ldr	r3, [r3, #4]
 8002892:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002896:	2b00      	cmp	r3, #0
 8002898:	d063      	beq.n	8002962 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800289a:	4b6a      	ldr	r3, [pc, #424]	@ (8002a44 <HAL_RCC_GetSysClockFreq+0x200>)
 800289c:	685b      	ldr	r3, [r3, #4]
 800289e:	099b      	lsrs	r3, r3, #6
 80028a0:	2200      	movs	r2, #0
 80028a2:	63bb      	str	r3, [r7, #56]	@ 0x38
 80028a4:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80028a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80028a8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80028ac:	633b      	str	r3, [r7, #48]	@ 0x30
 80028ae:	2300      	movs	r3, #0
 80028b0:	637b      	str	r3, [r7, #52]	@ 0x34
 80028b2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80028b6:	4622      	mov	r2, r4
 80028b8:	462b      	mov	r3, r5
 80028ba:	f04f 0000 	mov.w	r0, #0
 80028be:	f04f 0100 	mov.w	r1, #0
 80028c2:	0159      	lsls	r1, r3, #5
 80028c4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80028c8:	0150      	lsls	r0, r2, #5
 80028ca:	4602      	mov	r2, r0
 80028cc:	460b      	mov	r3, r1
 80028ce:	4621      	mov	r1, r4
 80028d0:	1a51      	subs	r1, r2, r1
 80028d2:	6139      	str	r1, [r7, #16]
 80028d4:	4629      	mov	r1, r5
 80028d6:	eb63 0301 	sbc.w	r3, r3, r1
 80028da:	617b      	str	r3, [r7, #20]
 80028dc:	f04f 0200 	mov.w	r2, #0
 80028e0:	f04f 0300 	mov.w	r3, #0
 80028e4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80028e8:	4659      	mov	r1, fp
 80028ea:	018b      	lsls	r3, r1, #6
 80028ec:	4651      	mov	r1, sl
 80028ee:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80028f2:	4651      	mov	r1, sl
 80028f4:	018a      	lsls	r2, r1, #6
 80028f6:	4651      	mov	r1, sl
 80028f8:	ebb2 0801 	subs.w	r8, r2, r1
 80028fc:	4659      	mov	r1, fp
 80028fe:	eb63 0901 	sbc.w	r9, r3, r1
 8002902:	f04f 0200 	mov.w	r2, #0
 8002906:	f04f 0300 	mov.w	r3, #0
 800290a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800290e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002912:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002916:	4690      	mov	r8, r2
 8002918:	4699      	mov	r9, r3
 800291a:	4623      	mov	r3, r4
 800291c:	eb18 0303 	adds.w	r3, r8, r3
 8002920:	60bb      	str	r3, [r7, #8]
 8002922:	462b      	mov	r3, r5
 8002924:	eb49 0303 	adc.w	r3, r9, r3
 8002928:	60fb      	str	r3, [r7, #12]
 800292a:	f04f 0200 	mov.w	r2, #0
 800292e:	f04f 0300 	mov.w	r3, #0
 8002932:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002936:	4629      	mov	r1, r5
 8002938:	024b      	lsls	r3, r1, #9
 800293a:	4621      	mov	r1, r4
 800293c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002940:	4621      	mov	r1, r4
 8002942:	024a      	lsls	r2, r1, #9
 8002944:	4610      	mov	r0, r2
 8002946:	4619      	mov	r1, r3
 8002948:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800294a:	2200      	movs	r2, #0
 800294c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800294e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002950:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002954:	f7fd fcc4 	bl	80002e0 <__aeabi_uldivmod>
 8002958:	4602      	mov	r2, r0
 800295a:	460b      	mov	r3, r1
 800295c:	4613      	mov	r3, r2
 800295e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002960:	e058      	b.n	8002a14 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002962:	4b38      	ldr	r3, [pc, #224]	@ (8002a44 <HAL_RCC_GetSysClockFreq+0x200>)
 8002964:	685b      	ldr	r3, [r3, #4]
 8002966:	099b      	lsrs	r3, r3, #6
 8002968:	2200      	movs	r2, #0
 800296a:	4618      	mov	r0, r3
 800296c:	4611      	mov	r1, r2
 800296e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002972:	623b      	str	r3, [r7, #32]
 8002974:	2300      	movs	r3, #0
 8002976:	627b      	str	r3, [r7, #36]	@ 0x24
 8002978:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800297c:	4642      	mov	r2, r8
 800297e:	464b      	mov	r3, r9
 8002980:	f04f 0000 	mov.w	r0, #0
 8002984:	f04f 0100 	mov.w	r1, #0
 8002988:	0159      	lsls	r1, r3, #5
 800298a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800298e:	0150      	lsls	r0, r2, #5
 8002990:	4602      	mov	r2, r0
 8002992:	460b      	mov	r3, r1
 8002994:	4641      	mov	r1, r8
 8002996:	ebb2 0a01 	subs.w	sl, r2, r1
 800299a:	4649      	mov	r1, r9
 800299c:	eb63 0b01 	sbc.w	fp, r3, r1
 80029a0:	f04f 0200 	mov.w	r2, #0
 80029a4:	f04f 0300 	mov.w	r3, #0
 80029a8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80029ac:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80029b0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80029b4:	ebb2 040a 	subs.w	r4, r2, sl
 80029b8:	eb63 050b 	sbc.w	r5, r3, fp
 80029bc:	f04f 0200 	mov.w	r2, #0
 80029c0:	f04f 0300 	mov.w	r3, #0
 80029c4:	00eb      	lsls	r3, r5, #3
 80029c6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80029ca:	00e2      	lsls	r2, r4, #3
 80029cc:	4614      	mov	r4, r2
 80029ce:	461d      	mov	r5, r3
 80029d0:	4643      	mov	r3, r8
 80029d2:	18e3      	adds	r3, r4, r3
 80029d4:	603b      	str	r3, [r7, #0]
 80029d6:	464b      	mov	r3, r9
 80029d8:	eb45 0303 	adc.w	r3, r5, r3
 80029dc:	607b      	str	r3, [r7, #4]
 80029de:	f04f 0200 	mov.w	r2, #0
 80029e2:	f04f 0300 	mov.w	r3, #0
 80029e6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80029ea:	4629      	mov	r1, r5
 80029ec:	028b      	lsls	r3, r1, #10
 80029ee:	4621      	mov	r1, r4
 80029f0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80029f4:	4621      	mov	r1, r4
 80029f6:	028a      	lsls	r2, r1, #10
 80029f8:	4610      	mov	r0, r2
 80029fa:	4619      	mov	r1, r3
 80029fc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80029fe:	2200      	movs	r2, #0
 8002a00:	61bb      	str	r3, [r7, #24]
 8002a02:	61fa      	str	r2, [r7, #28]
 8002a04:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002a08:	f7fd fc6a 	bl	80002e0 <__aeabi_uldivmod>
 8002a0c:	4602      	mov	r2, r0
 8002a0e:	460b      	mov	r3, r1
 8002a10:	4613      	mov	r3, r2
 8002a12:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8002a14:	4b0b      	ldr	r3, [pc, #44]	@ (8002a44 <HAL_RCC_GetSysClockFreq+0x200>)
 8002a16:	685b      	ldr	r3, [r3, #4]
 8002a18:	0c1b      	lsrs	r3, r3, #16
 8002a1a:	f003 0303 	and.w	r3, r3, #3
 8002a1e:	3301      	adds	r3, #1
 8002a20:	005b      	lsls	r3, r3, #1
 8002a22:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8002a24:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002a26:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002a28:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a2c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002a2e:	e002      	b.n	8002a36 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002a30:	4b05      	ldr	r3, [pc, #20]	@ (8002a48 <HAL_RCC_GetSysClockFreq+0x204>)
 8002a32:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002a34:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002a36:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8002a38:	4618      	mov	r0, r3
 8002a3a:	3750      	adds	r7, #80	@ 0x50
 8002a3c:	46bd      	mov	sp, r7
 8002a3e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002a42:	bf00      	nop
 8002a44:	40023800 	.word	0x40023800
 8002a48:	00f42400 	.word	0x00f42400
 8002a4c:	007a1200 	.word	0x007a1200

08002a50 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002a50:	b480      	push	{r7}
 8002a52:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002a54:	4b03      	ldr	r3, [pc, #12]	@ (8002a64 <HAL_RCC_GetHCLKFreq+0x14>)
 8002a56:	681b      	ldr	r3, [r3, #0]
}
 8002a58:	4618      	mov	r0, r3
 8002a5a:	46bd      	mov	sp, r7
 8002a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a60:	4770      	bx	lr
 8002a62:	bf00      	nop
 8002a64:	20000000 	.word	0x20000000

08002a68 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002a68:	b580      	push	{r7, lr}
 8002a6a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002a6c:	f7ff fff0 	bl	8002a50 <HAL_RCC_GetHCLKFreq>
 8002a70:	4602      	mov	r2, r0
 8002a72:	4b05      	ldr	r3, [pc, #20]	@ (8002a88 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002a74:	689b      	ldr	r3, [r3, #8]
 8002a76:	0a9b      	lsrs	r3, r3, #10
 8002a78:	f003 0307 	and.w	r3, r3, #7
 8002a7c:	4903      	ldr	r1, [pc, #12]	@ (8002a8c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002a7e:	5ccb      	ldrb	r3, [r1, r3]
 8002a80:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002a84:	4618      	mov	r0, r3
 8002a86:	bd80      	pop	{r7, pc}
 8002a88:	40023800 	.word	0x40023800
 8002a8c:	08008aa0 	.word	0x08008aa0

08002a90 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002a90:	b580      	push	{r7, lr}
 8002a92:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002a94:	f7ff ffdc 	bl	8002a50 <HAL_RCC_GetHCLKFreq>
 8002a98:	4602      	mov	r2, r0
 8002a9a:	4b05      	ldr	r3, [pc, #20]	@ (8002ab0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002a9c:	689b      	ldr	r3, [r3, #8]
 8002a9e:	0b5b      	lsrs	r3, r3, #13
 8002aa0:	f003 0307 	and.w	r3, r3, #7
 8002aa4:	4903      	ldr	r1, [pc, #12]	@ (8002ab4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002aa6:	5ccb      	ldrb	r3, [r1, r3]
 8002aa8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002aac:	4618      	mov	r0, r3
 8002aae:	bd80      	pop	{r7, pc}
 8002ab0:	40023800 	.word	0x40023800
 8002ab4:	08008aa0 	.word	0x08008aa0

08002ab8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002ab8:	b580      	push	{r7, lr}
 8002aba:	b088      	sub	sp, #32
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8002ac0:	2300      	movs	r3, #0
 8002ac2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8002ac4:	2300      	movs	r3, #0
 8002ac6:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8002ac8:	2300      	movs	r3, #0
 8002aca:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8002acc:	2300      	movs	r3, #0
 8002ace:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8002ad0:	2300      	movs	r3, #0
 8002ad2:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f003 0301 	and.w	r3, r3, #1
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d012      	beq.n	8002b06 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002ae0:	4b69      	ldr	r3, [pc, #420]	@ (8002c88 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ae2:	689b      	ldr	r3, [r3, #8]
 8002ae4:	4a68      	ldr	r2, [pc, #416]	@ (8002c88 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ae6:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8002aea:	6093      	str	r3, [r2, #8]
 8002aec:	4b66      	ldr	r3, [pc, #408]	@ (8002c88 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002aee:	689a      	ldr	r2, [r3, #8]
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002af4:	4964      	ldr	r1, [pc, #400]	@ (8002c88 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002af6:	4313      	orrs	r3, r2
 8002af8:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d101      	bne.n	8002b06 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8002b02:	2301      	movs	r3, #1
 8002b04:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d017      	beq.n	8002b42 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002b12:	4b5d      	ldr	r3, [pc, #372]	@ (8002c88 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b14:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002b18:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b20:	4959      	ldr	r1, [pc, #356]	@ (8002c88 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b22:	4313      	orrs	r3, r2
 8002b24:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b2c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002b30:	d101      	bne.n	8002b36 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8002b32:	2301      	movs	r3, #1
 8002b34:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d101      	bne.n	8002b42 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8002b3e:	2301      	movs	r3, #1
 8002b40:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d017      	beq.n	8002b7e <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002b4e:	4b4e      	ldr	r3, [pc, #312]	@ (8002c88 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b50:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002b54:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b5c:	494a      	ldr	r1, [pc, #296]	@ (8002c88 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b5e:	4313      	orrs	r3, r2
 8002b60:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b68:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002b6c:	d101      	bne.n	8002b72 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8002b6e:	2301      	movs	r3, #1
 8002b70:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d101      	bne.n	8002b7e <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8002b7a:	2301      	movs	r3, #1
 8002b7c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d001      	beq.n	8002b8e <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8002b8a:	2301      	movs	r3, #1
 8002b8c:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	f003 0320 	and.w	r3, r3, #32
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	f000 808b 	beq.w	8002cb2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002b9c:	4b3a      	ldr	r3, [pc, #232]	@ (8002c88 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ba0:	4a39      	ldr	r2, [pc, #228]	@ (8002c88 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ba2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002ba6:	6413      	str	r3, [r2, #64]	@ 0x40
 8002ba8:	4b37      	ldr	r3, [pc, #220]	@ (8002c88 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002baa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bac:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002bb0:	60bb      	str	r3, [r7, #8]
 8002bb2:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002bb4:	4b35      	ldr	r3, [pc, #212]	@ (8002c8c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	4a34      	ldr	r2, [pc, #208]	@ (8002c8c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002bba:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002bbe:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002bc0:	f7fe fac8 	bl	8001154 <HAL_GetTick>
 8002bc4:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002bc6:	e008      	b.n	8002bda <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002bc8:	f7fe fac4 	bl	8001154 <HAL_GetTick>
 8002bcc:	4602      	mov	r2, r0
 8002bce:	697b      	ldr	r3, [r7, #20]
 8002bd0:	1ad3      	subs	r3, r2, r3
 8002bd2:	2b64      	cmp	r3, #100	@ 0x64
 8002bd4:	d901      	bls.n	8002bda <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8002bd6:	2303      	movs	r3, #3
 8002bd8:	e38f      	b.n	80032fa <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002bda:	4b2c      	ldr	r3, [pc, #176]	@ (8002c8c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d0f0      	beq.n	8002bc8 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002be6:	4b28      	ldr	r3, [pc, #160]	@ (8002c88 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002be8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002bea:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002bee:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002bf0:	693b      	ldr	r3, [r7, #16]
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d035      	beq.n	8002c62 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bfa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002bfe:	693a      	ldr	r2, [r7, #16]
 8002c00:	429a      	cmp	r2, r3
 8002c02:	d02e      	beq.n	8002c62 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002c04:	4b20      	ldr	r3, [pc, #128]	@ (8002c88 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c06:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c08:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002c0c:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002c0e:	4b1e      	ldr	r3, [pc, #120]	@ (8002c88 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c10:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c12:	4a1d      	ldr	r2, [pc, #116]	@ (8002c88 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c14:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002c18:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002c1a:	4b1b      	ldr	r3, [pc, #108]	@ (8002c88 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c1c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c1e:	4a1a      	ldr	r2, [pc, #104]	@ (8002c88 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c20:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002c24:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8002c26:	4a18      	ldr	r2, [pc, #96]	@ (8002c88 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c28:	693b      	ldr	r3, [r7, #16]
 8002c2a:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002c2c:	4b16      	ldr	r3, [pc, #88]	@ (8002c88 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c2e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c30:	f003 0301 	and.w	r3, r3, #1
 8002c34:	2b01      	cmp	r3, #1
 8002c36:	d114      	bne.n	8002c62 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c38:	f7fe fa8c 	bl	8001154 <HAL_GetTick>
 8002c3c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c3e:	e00a      	b.n	8002c56 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002c40:	f7fe fa88 	bl	8001154 <HAL_GetTick>
 8002c44:	4602      	mov	r2, r0
 8002c46:	697b      	ldr	r3, [r7, #20]
 8002c48:	1ad3      	subs	r3, r2, r3
 8002c4a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002c4e:	4293      	cmp	r3, r2
 8002c50:	d901      	bls.n	8002c56 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8002c52:	2303      	movs	r3, #3
 8002c54:	e351      	b.n	80032fa <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c56:	4b0c      	ldr	r3, [pc, #48]	@ (8002c88 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c58:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c5a:	f003 0302 	and.w	r3, r3, #2
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d0ee      	beq.n	8002c40 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c66:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002c6a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002c6e:	d111      	bne.n	8002c94 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8002c70:	4b05      	ldr	r3, [pc, #20]	@ (8002c88 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c72:	689b      	ldr	r3, [r3, #8]
 8002c74:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002c7c:	4b04      	ldr	r3, [pc, #16]	@ (8002c90 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002c7e:	400b      	ands	r3, r1
 8002c80:	4901      	ldr	r1, [pc, #4]	@ (8002c88 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c82:	4313      	orrs	r3, r2
 8002c84:	608b      	str	r3, [r1, #8]
 8002c86:	e00b      	b.n	8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8002c88:	40023800 	.word	0x40023800
 8002c8c:	40007000 	.word	0x40007000
 8002c90:	0ffffcff 	.word	0x0ffffcff
 8002c94:	4bac      	ldr	r3, [pc, #688]	@ (8002f48 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c96:	689b      	ldr	r3, [r3, #8]
 8002c98:	4aab      	ldr	r2, [pc, #684]	@ (8002f48 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c9a:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8002c9e:	6093      	str	r3, [r2, #8]
 8002ca0:	4ba9      	ldr	r3, [pc, #676]	@ (8002f48 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002ca2:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ca8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002cac:	49a6      	ldr	r1, [pc, #664]	@ (8002f48 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002cae:	4313      	orrs	r3, r2
 8002cb0:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f003 0310 	and.w	r3, r3, #16
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d010      	beq.n	8002ce0 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002cbe:	4ba2      	ldr	r3, [pc, #648]	@ (8002f48 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002cc0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002cc4:	4aa0      	ldr	r2, [pc, #640]	@ (8002f48 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002cc6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002cca:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002cce:	4b9e      	ldr	r3, [pc, #632]	@ (8002f48 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002cd0:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002cd8:	499b      	ldr	r1, [pc, #620]	@ (8002f48 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002cda:	4313      	orrs	r3, r2
 8002cdc:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d00a      	beq.n	8002d02 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002cec:	4b96      	ldr	r3, [pc, #600]	@ (8002f48 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002cee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002cf2:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002cfa:	4993      	ldr	r1, [pc, #588]	@ (8002f48 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002cfc:	4313      	orrs	r3, r2
 8002cfe:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d00a      	beq.n	8002d24 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002d0e:	4b8e      	ldr	r3, [pc, #568]	@ (8002f48 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d10:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002d14:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002d1c:	498a      	ldr	r1, [pc, #552]	@ (8002f48 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d1e:	4313      	orrs	r3, r2
 8002d20:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d00a      	beq.n	8002d46 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002d30:	4b85      	ldr	r3, [pc, #532]	@ (8002f48 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d32:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002d36:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002d3e:	4982      	ldr	r1, [pc, #520]	@ (8002f48 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d40:	4313      	orrs	r3, r2
 8002d42:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d00a      	beq.n	8002d68 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002d52:	4b7d      	ldr	r3, [pc, #500]	@ (8002f48 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d54:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002d58:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d60:	4979      	ldr	r1, [pc, #484]	@ (8002f48 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d62:	4313      	orrs	r3, r2
 8002d64:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d00a      	beq.n	8002d8a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002d74:	4b74      	ldr	r3, [pc, #464]	@ (8002f48 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d76:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002d7a:	f023 0203 	bic.w	r2, r3, #3
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d82:	4971      	ldr	r1, [pc, #452]	@ (8002f48 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d84:	4313      	orrs	r3, r2
 8002d86:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d00a      	beq.n	8002dac <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002d96:	4b6c      	ldr	r3, [pc, #432]	@ (8002f48 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d98:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002d9c:	f023 020c 	bic.w	r2, r3, #12
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002da4:	4968      	ldr	r1, [pc, #416]	@ (8002f48 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002da6:	4313      	orrs	r3, r2
 8002da8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d00a      	beq.n	8002dce <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002db8:	4b63      	ldr	r3, [pc, #396]	@ (8002f48 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002dba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002dbe:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002dc6:	4960      	ldr	r1, [pc, #384]	@ (8002f48 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002dc8:	4313      	orrs	r3, r2
 8002dca:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d00a      	beq.n	8002df0 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002dda:	4b5b      	ldr	r3, [pc, #364]	@ (8002f48 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002ddc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002de0:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002de8:	4957      	ldr	r1, [pc, #348]	@ (8002f48 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002dea:	4313      	orrs	r3, r2
 8002dec:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d00a      	beq.n	8002e12 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002dfc:	4b52      	ldr	r3, [pc, #328]	@ (8002f48 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002dfe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002e02:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e0a:	494f      	ldr	r1, [pc, #316]	@ (8002f48 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e0c:	4313      	orrs	r3, r2
 8002e0e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d00a      	beq.n	8002e34 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8002e1e:	4b4a      	ldr	r3, [pc, #296]	@ (8002f48 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e20:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002e24:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e2c:	4946      	ldr	r1, [pc, #280]	@ (8002f48 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e2e:	4313      	orrs	r3, r2
 8002e30:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d00a      	beq.n	8002e56 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8002e40:	4b41      	ldr	r3, [pc, #260]	@ (8002f48 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e42:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002e46:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e4e:	493e      	ldr	r1, [pc, #248]	@ (8002f48 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e50:	4313      	orrs	r3, r2
 8002e52:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d00a      	beq.n	8002e78 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8002e62:	4b39      	ldr	r3, [pc, #228]	@ (8002f48 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e64:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002e68:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002e70:	4935      	ldr	r1, [pc, #212]	@ (8002f48 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e72:	4313      	orrs	r3, r2
 8002e74:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d00a      	beq.n	8002e9a <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002e84:	4b30      	ldr	r3, [pc, #192]	@ (8002f48 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e86:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002e8a:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002e92:	492d      	ldr	r1, [pc, #180]	@ (8002f48 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e94:	4313      	orrs	r3, r2
 8002e96:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d011      	beq.n	8002eca <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002ea6:	4b28      	ldr	r3, [pc, #160]	@ (8002f48 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002ea8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002eac:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002eb4:	4924      	ldr	r1, [pc, #144]	@ (8002f48 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002eb6:	4313      	orrs	r3, r2
 8002eb8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002ec0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002ec4:	d101      	bne.n	8002eca <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8002ec6:	2301      	movs	r3, #1
 8002ec8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	f003 0308 	and.w	r3, r3, #8
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d001      	beq.n	8002eda <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8002ed6:	2301      	movs	r3, #1
 8002ed8:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d00a      	beq.n	8002efc <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002ee6:	4b18      	ldr	r3, [pc, #96]	@ (8002f48 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002ee8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002eec:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002ef4:	4914      	ldr	r1, [pc, #80]	@ (8002f48 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002ef6:	4313      	orrs	r3, r2
 8002ef8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d00b      	beq.n	8002f20 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002f08:	4b0f      	ldr	r3, [pc, #60]	@ (8002f48 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002f0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002f0e:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002f18:	490b      	ldr	r1, [pc, #44]	@ (8002f48 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002f1a:	4313      	orrs	r3, r2
 8002f1c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d00f      	beq.n	8002f4c <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8002f2c:	4b06      	ldr	r3, [pc, #24]	@ (8002f48 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002f2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002f32:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002f3c:	4902      	ldr	r1, [pc, #8]	@ (8002f48 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002f3e:	4313      	orrs	r3, r2
 8002f40:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8002f44:	e002      	b.n	8002f4c <HAL_RCCEx_PeriphCLKConfig+0x494>
 8002f46:	bf00      	nop
 8002f48:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d00b      	beq.n	8002f70 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002f58:	4b8a      	ldr	r3, [pc, #552]	@ (8003184 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002f5a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002f5e:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f68:	4986      	ldr	r1, [pc, #536]	@ (8003184 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002f6a:	4313      	orrs	r3, r2
 8002f6c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d00b      	beq.n	8002f94 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8002f7c:	4b81      	ldr	r3, [pc, #516]	@ (8003184 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002f7e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002f82:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002f8c:	497d      	ldr	r1, [pc, #500]	@ (8003184 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002f8e:	4313      	orrs	r3, r2
 8002f90:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002f94:	69fb      	ldr	r3, [r7, #28]
 8002f96:	2b01      	cmp	r3, #1
 8002f98:	d006      	beq.n	8002fa8 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	f000 80d6 	beq.w	8003154 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002fa8:	4b76      	ldr	r3, [pc, #472]	@ (8003184 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	4a75      	ldr	r2, [pc, #468]	@ (8003184 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002fae:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8002fb2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002fb4:	f7fe f8ce 	bl	8001154 <HAL_GetTick>
 8002fb8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002fba:	e008      	b.n	8002fce <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002fbc:	f7fe f8ca 	bl	8001154 <HAL_GetTick>
 8002fc0:	4602      	mov	r2, r0
 8002fc2:	697b      	ldr	r3, [r7, #20]
 8002fc4:	1ad3      	subs	r3, r2, r3
 8002fc6:	2b64      	cmp	r3, #100	@ 0x64
 8002fc8:	d901      	bls.n	8002fce <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002fca:	2303      	movs	r3, #3
 8002fcc:	e195      	b.n	80032fa <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002fce:	4b6d      	ldr	r3, [pc, #436]	@ (8003184 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d1f0      	bne.n	8002fbc <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	f003 0301 	and.w	r3, r3, #1
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d021      	beq.n	800302a <HAL_RCCEx_PeriphCLKConfig+0x572>
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d11d      	bne.n	800302a <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002fee:	4b65      	ldr	r3, [pc, #404]	@ (8003184 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002ff0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002ff4:	0c1b      	lsrs	r3, r3, #16
 8002ff6:	f003 0303 	and.w	r3, r3, #3
 8002ffa:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002ffc:	4b61      	ldr	r3, [pc, #388]	@ (8003184 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002ffe:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003002:	0e1b      	lsrs	r3, r3, #24
 8003004:	f003 030f 	and.w	r3, r3, #15
 8003008:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	685b      	ldr	r3, [r3, #4]
 800300e:	019a      	lsls	r2, r3, #6
 8003010:	693b      	ldr	r3, [r7, #16]
 8003012:	041b      	lsls	r3, r3, #16
 8003014:	431a      	orrs	r2, r3
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	061b      	lsls	r3, r3, #24
 800301a:	431a      	orrs	r2, r3
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	689b      	ldr	r3, [r3, #8]
 8003020:	071b      	lsls	r3, r3, #28
 8003022:	4958      	ldr	r1, [pc, #352]	@ (8003184 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003024:	4313      	orrs	r3, r2
 8003026:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003032:	2b00      	cmp	r3, #0
 8003034:	d004      	beq.n	8003040 <HAL_RCCEx_PeriphCLKConfig+0x588>
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800303a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800303e:	d00a      	beq.n	8003056 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003048:	2b00      	cmp	r3, #0
 800304a:	d02e      	beq.n	80030aa <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003050:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003054:	d129      	bne.n	80030aa <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003056:	4b4b      	ldr	r3, [pc, #300]	@ (8003184 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003058:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800305c:	0c1b      	lsrs	r3, r3, #16
 800305e:	f003 0303 	and.w	r3, r3, #3
 8003062:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003064:	4b47      	ldr	r3, [pc, #284]	@ (8003184 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003066:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800306a:	0f1b      	lsrs	r3, r3, #28
 800306c:	f003 0307 	and.w	r3, r3, #7
 8003070:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	685b      	ldr	r3, [r3, #4]
 8003076:	019a      	lsls	r2, r3, #6
 8003078:	693b      	ldr	r3, [r7, #16]
 800307a:	041b      	lsls	r3, r3, #16
 800307c:	431a      	orrs	r2, r3
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	68db      	ldr	r3, [r3, #12]
 8003082:	061b      	lsls	r3, r3, #24
 8003084:	431a      	orrs	r2, r3
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	071b      	lsls	r3, r3, #28
 800308a:	493e      	ldr	r1, [pc, #248]	@ (8003184 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800308c:	4313      	orrs	r3, r2
 800308e:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003092:	4b3c      	ldr	r3, [pc, #240]	@ (8003184 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003094:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003098:	f023 021f 	bic.w	r2, r3, #31
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030a0:	3b01      	subs	r3, #1
 80030a2:	4938      	ldr	r1, [pc, #224]	@ (8003184 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80030a4:	4313      	orrs	r3, r2
 80030a6:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d01d      	beq.n	80030f2 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80030b6:	4b33      	ldr	r3, [pc, #204]	@ (8003184 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80030b8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80030bc:	0e1b      	lsrs	r3, r3, #24
 80030be:	f003 030f 	and.w	r3, r3, #15
 80030c2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80030c4:	4b2f      	ldr	r3, [pc, #188]	@ (8003184 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80030c6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80030ca:	0f1b      	lsrs	r3, r3, #28
 80030cc:	f003 0307 	and.w	r3, r3, #7
 80030d0:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	685b      	ldr	r3, [r3, #4]
 80030d6:	019a      	lsls	r2, r3, #6
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	691b      	ldr	r3, [r3, #16]
 80030dc:	041b      	lsls	r3, r3, #16
 80030de:	431a      	orrs	r2, r3
 80030e0:	693b      	ldr	r3, [r7, #16]
 80030e2:	061b      	lsls	r3, r3, #24
 80030e4:	431a      	orrs	r2, r3
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	071b      	lsls	r3, r3, #28
 80030ea:	4926      	ldr	r1, [pc, #152]	@ (8003184 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80030ec:	4313      	orrs	r3, r2
 80030ee:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d011      	beq.n	8003122 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	685b      	ldr	r3, [r3, #4]
 8003102:	019a      	lsls	r2, r3, #6
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	691b      	ldr	r3, [r3, #16]
 8003108:	041b      	lsls	r3, r3, #16
 800310a:	431a      	orrs	r2, r3
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	68db      	ldr	r3, [r3, #12]
 8003110:	061b      	lsls	r3, r3, #24
 8003112:	431a      	orrs	r2, r3
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	689b      	ldr	r3, [r3, #8]
 8003118:	071b      	lsls	r3, r3, #28
 800311a:	491a      	ldr	r1, [pc, #104]	@ (8003184 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800311c:	4313      	orrs	r3, r2
 800311e:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003122:	4b18      	ldr	r3, [pc, #96]	@ (8003184 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	4a17      	ldr	r2, [pc, #92]	@ (8003184 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003128:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800312c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800312e:	f7fe f811 	bl	8001154 <HAL_GetTick>
 8003132:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003134:	e008      	b.n	8003148 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003136:	f7fe f80d 	bl	8001154 <HAL_GetTick>
 800313a:	4602      	mov	r2, r0
 800313c:	697b      	ldr	r3, [r7, #20]
 800313e:	1ad3      	subs	r3, r2, r3
 8003140:	2b64      	cmp	r3, #100	@ 0x64
 8003142:	d901      	bls.n	8003148 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003144:	2303      	movs	r3, #3
 8003146:	e0d8      	b.n	80032fa <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003148:	4b0e      	ldr	r3, [pc, #56]	@ (8003184 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003150:	2b00      	cmp	r3, #0
 8003152:	d0f0      	beq.n	8003136 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8003154:	69bb      	ldr	r3, [r7, #24]
 8003156:	2b01      	cmp	r3, #1
 8003158:	f040 80ce 	bne.w	80032f8 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800315c:	4b09      	ldr	r3, [pc, #36]	@ (8003184 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	4a08      	ldr	r2, [pc, #32]	@ (8003184 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003162:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003166:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003168:	f7fd fff4 	bl	8001154 <HAL_GetTick>
 800316c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800316e:	e00b      	b.n	8003188 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003170:	f7fd fff0 	bl	8001154 <HAL_GetTick>
 8003174:	4602      	mov	r2, r0
 8003176:	697b      	ldr	r3, [r7, #20]
 8003178:	1ad3      	subs	r3, r2, r3
 800317a:	2b64      	cmp	r3, #100	@ 0x64
 800317c:	d904      	bls.n	8003188 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800317e:	2303      	movs	r3, #3
 8003180:	e0bb      	b.n	80032fa <HAL_RCCEx_PeriphCLKConfig+0x842>
 8003182:	bf00      	nop
 8003184:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003188:	4b5e      	ldr	r3, [pc, #376]	@ (8003304 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003190:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003194:	d0ec      	beq.n	8003170 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d003      	beq.n	80031aa <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d009      	beq.n	80031be <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d02e      	beq.n	8003214 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d12a      	bne.n	8003214 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80031be:	4b51      	ldr	r3, [pc, #324]	@ (8003304 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80031c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80031c4:	0c1b      	lsrs	r3, r3, #16
 80031c6:	f003 0303 	and.w	r3, r3, #3
 80031ca:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80031cc:	4b4d      	ldr	r3, [pc, #308]	@ (8003304 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80031ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80031d2:	0f1b      	lsrs	r3, r3, #28
 80031d4:	f003 0307 	and.w	r3, r3, #7
 80031d8:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	695b      	ldr	r3, [r3, #20]
 80031de:	019a      	lsls	r2, r3, #6
 80031e0:	693b      	ldr	r3, [r7, #16]
 80031e2:	041b      	lsls	r3, r3, #16
 80031e4:	431a      	orrs	r2, r3
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	699b      	ldr	r3, [r3, #24]
 80031ea:	061b      	lsls	r3, r3, #24
 80031ec:	431a      	orrs	r2, r3
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	071b      	lsls	r3, r3, #28
 80031f2:	4944      	ldr	r1, [pc, #272]	@ (8003304 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80031f4:	4313      	orrs	r3, r2
 80031f6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80031fa:	4b42      	ldr	r3, [pc, #264]	@ (8003304 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80031fc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003200:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003208:	3b01      	subs	r3, #1
 800320a:	021b      	lsls	r3, r3, #8
 800320c:	493d      	ldr	r1, [pc, #244]	@ (8003304 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800320e:	4313      	orrs	r3, r2
 8003210:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800321c:	2b00      	cmp	r3, #0
 800321e:	d022      	beq.n	8003266 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003224:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003228:	d11d      	bne.n	8003266 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800322a:	4b36      	ldr	r3, [pc, #216]	@ (8003304 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800322c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003230:	0e1b      	lsrs	r3, r3, #24
 8003232:	f003 030f 	and.w	r3, r3, #15
 8003236:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003238:	4b32      	ldr	r3, [pc, #200]	@ (8003304 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800323a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800323e:	0f1b      	lsrs	r3, r3, #28
 8003240:	f003 0307 	and.w	r3, r3, #7
 8003244:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	695b      	ldr	r3, [r3, #20]
 800324a:	019a      	lsls	r2, r3, #6
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	6a1b      	ldr	r3, [r3, #32]
 8003250:	041b      	lsls	r3, r3, #16
 8003252:	431a      	orrs	r2, r3
 8003254:	693b      	ldr	r3, [r7, #16]
 8003256:	061b      	lsls	r3, r3, #24
 8003258:	431a      	orrs	r2, r3
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	071b      	lsls	r3, r3, #28
 800325e:	4929      	ldr	r1, [pc, #164]	@ (8003304 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003260:	4313      	orrs	r3, r2
 8003262:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	f003 0308 	and.w	r3, r3, #8
 800326e:	2b00      	cmp	r3, #0
 8003270:	d028      	beq.n	80032c4 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003272:	4b24      	ldr	r3, [pc, #144]	@ (8003304 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003274:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003278:	0e1b      	lsrs	r3, r3, #24
 800327a:	f003 030f 	and.w	r3, r3, #15
 800327e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003280:	4b20      	ldr	r3, [pc, #128]	@ (8003304 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003282:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003286:	0c1b      	lsrs	r3, r3, #16
 8003288:	f003 0303 	and.w	r3, r3, #3
 800328c:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	695b      	ldr	r3, [r3, #20]
 8003292:	019a      	lsls	r2, r3, #6
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	041b      	lsls	r3, r3, #16
 8003298:	431a      	orrs	r2, r3
 800329a:	693b      	ldr	r3, [r7, #16]
 800329c:	061b      	lsls	r3, r3, #24
 800329e:	431a      	orrs	r2, r3
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	69db      	ldr	r3, [r3, #28]
 80032a4:	071b      	lsls	r3, r3, #28
 80032a6:	4917      	ldr	r1, [pc, #92]	@ (8003304 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80032a8:	4313      	orrs	r3, r2
 80032aa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80032ae:	4b15      	ldr	r3, [pc, #84]	@ (8003304 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80032b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80032b4:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032bc:	4911      	ldr	r1, [pc, #68]	@ (8003304 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80032be:	4313      	orrs	r3, r2
 80032c0:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80032c4:	4b0f      	ldr	r3, [pc, #60]	@ (8003304 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	4a0e      	ldr	r2, [pc, #56]	@ (8003304 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80032ca:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80032ce:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80032d0:	f7fd ff40 	bl	8001154 <HAL_GetTick>
 80032d4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80032d6:	e008      	b.n	80032ea <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80032d8:	f7fd ff3c 	bl	8001154 <HAL_GetTick>
 80032dc:	4602      	mov	r2, r0
 80032de:	697b      	ldr	r3, [r7, #20]
 80032e0:	1ad3      	subs	r3, r2, r3
 80032e2:	2b64      	cmp	r3, #100	@ 0x64
 80032e4:	d901      	bls.n	80032ea <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80032e6:	2303      	movs	r3, #3
 80032e8:	e007      	b.n	80032fa <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80032ea:	4b06      	ldr	r3, [pc, #24]	@ (8003304 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80032f2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80032f6:	d1ef      	bne.n	80032d8 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 80032f8:	2300      	movs	r3, #0
}
 80032fa:	4618      	mov	r0, r3
 80032fc:	3720      	adds	r7, #32
 80032fe:	46bd      	mov	sp, r7
 8003300:	bd80      	pop	{r7, pc}
 8003302:	bf00      	nop
 8003304:	40023800 	.word	0x40023800

08003308 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003308:	b580      	push	{r7, lr}
 800330a:	b082      	sub	sp, #8
 800330c:	af00      	add	r7, sp, #0
 800330e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	2b00      	cmp	r3, #0
 8003314:	d101      	bne.n	800331a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003316:	2301      	movs	r3, #1
 8003318:	e040      	b.n	800339c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800331e:	2b00      	cmp	r3, #0
 8003320:	d106      	bne.n	8003330 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	2200      	movs	r2, #0
 8003326:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800332a:	6878      	ldr	r0, [r7, #4]
 800332c:	f7fd fce0 	bl	8000cf0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	2224      	movs	r2, #36	@ 0x24
 8003334:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	681a      	ldr	r2, [r3, #0]
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	f022 0201 	bic.w	r2, r2, #1
 8003344:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800334a:	2b00      	cmp	r3, #0
 800334c:	d002      	beq.n	8003354 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800334e:	6878      	ldr	r0, [r7, #4]
 8003350:	f000 fb16 	bl	8003980 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003354:	6878      	ldr	r0, [r7, #4]
 8003356:	f000 f8af 	bl	80034b8 <UART_SetConfig>
 800335a:	4603      	mov	r3, r0
 800335c:	2b01      	cmp	r3, #1
 800335e:	d101      	bne.n	8003364 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8003360:	2301      	movs	r3, #1
 8003362:	e01b      	b.n	800339c <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	685a      	ldr	r2, [r3, #4]
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003372:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	689a      	ldr	r2, [r3, #8]
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003382:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	681a      	ldr	r2, [r3, #0]
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	f042 0201 	orr.w	r2, r2, #1
 8003392:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003394:	6878      	ldr	r0, [r7, #4]
 8003396:	f000 fb95 	bl	8003ac4 <UART_CheckIdleState>
 800339a:	4603      	mov	r3, r0
}
 800339c:	4618      	mov	r0, r3
 800339e:	3708      	adds	r7, #8
 80033a0:	46bd      	mov	sp, r7
 80033a2:	bd80      	pop	{r7, pc}

080033a4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80033a4:	b580      	push	{r7, lr}
 80033a6:	b08a      	sub	sp, #40	@ 0x28
 80033a8:	af02      	add	r7, sp, #8
 80033aa:	60f8      	str	r0, [r7, #12]
 80033ac:	60b9      	str	r1, [r7, #8]
 80033ae:	603b      	str	r3, [r7, #0]
 80033b0:	4613      	mov	r3, r2
 80033b2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80033b8:	2b20      	cmp	r3, #32
 80033ba:	d177      	bne.n	80034ac <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 80033bc:	68bb      	ldr	r3, [r7, #8]
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d002      	beq.n	80033c8 <HAL_UART_Transmit+0x24>
 80033c2:	88fb      	ldrh	r3, [r7, #6]
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d101      	bne.n	80033cc <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80033c8:	2301      	movs	r3, #1
 80033ca:	e070      	b.n	80034ae <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	2200      	movs	r2, #0
 80033d0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	2221      	movs	r2, #33	@ 0x21
 80033d8:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80033da:	f7fd febb 	bl	8001154 <HAL_GetTick>
 80033de:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	88fa      	ldrh	r2, [r7, #6]
 80033e4:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	88fa      	ldrh	r2, [r7, #6]
 80033ec:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	689b      	ldr	r3, [r3, #8]
 80033f4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80033f8:	d108      	bne.n	800340c <HAL_UART_Transmit+0x68>
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	691b      	ldr	r3, [r3, #16]
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d104      	bne.n	800340c <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8003402:	2300      	movs	r3, #0
 8003404:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003406:	68bb      	ldr	r3, [r7, #8]
 8003408:	61bb      	str	r3, [r7, #24]
 800340a:	e003      	b.n	8003414 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 800340c:	68bb      	ldr	r3, [r7, #8]
 800340e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003410:	2300      	movs	r3, #0
 8003412:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003414:	e02f      	b.n	8003476 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003416:	683b      	ldr	r3, [r7, #0]
 8003418:	9300      	str	r3, [sp, #0]
 800341a:	697b      	ldr	r3, [r7, #20]
 800341c:	2200      	movs	r2, #0
 800341e:	2180      	movs	r1, #128	@ 0x80
 8003420:	68f8      	ldr	r0, [r7, #12]
 8003422:	f000 fbf7 	bl	8003c14 <UART_WaitOnFlagUntilTimeout>
 8003426:	4603      	mov	r3, r0
 8003428:	2b00      	cmp	r3, #0
 800342a:	d004      	beq.n	8003436 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	2220      	movs	r2, #32
 8003430:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8003432:	2303      	movs	r3, #3
 8003434:	e03b      	b.n	80034ae <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8003436:	69fb      	ldr	r3, [r7, #28]
 8003438:	2b00      	cmp	r3, #0
 800343a:	d10b      	bne.n	8003454 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800343c:	69bb      	ldr	r3, [r7, #24]
 800343e:	881b      	ldrh	r3, [r3, #0]
 8003440:	461a      	mov	r2, r3
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800344a:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800344c:	69bb      	ldr	r3, [r7, #24]
 800344e:	3302      	adds	r3, #2
 8003450:	61bb      	str	r3, [r7, #24]
 8003452:	e007      	b.n	8003464 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003454:	69fb      	ldr	r3, [r7, #28]
 8003456:	781a      	ldrb	r2, [r3, #0]
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800345e:	69fb      	ldr	r3, [r7, #28]
 8003460:	3301      	adds	r3, #1
 8003462:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800346a:	b29b      	uxth	r3, r3
 800346c:	3b01      	subs	r3, #1
 800346e:	b29a      	uxth	r2, r3
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800347c:	b29b      	uxth	r3, r3
 800347e:	2b00      	cmp	r3, #0
 8003480:	d1c9      	bne.n	8003416 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003482:	683b      	ldr	r3, [r7, #0]
 8003484:	9300      	str	r3, [sp, #0]
 8003486:	697b      	ldr	r3, [r7, #20]
 8003488:	2200      	movs	r2, #0
 800348a:	2140      	movs	r1, #64	@ 0x40
 800348c:	68f8      	ldr	r0, [r7, #12]
 800348e:	f000 fbc1 	bl	8003c14 <UART_WaitOnFlagUntilTimeout>
 8003492:	4603      	mov	r3, r0
 8003494:	2b00      	cmp	r3, #0
 8003496:	d004      	beq.n	80034a2 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	2220      	movs	r2, #32
 800349c:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 800349e:	2303      	movs	r3, #3
 80034a0:	e005      	b.n	80034ae <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	2220      	movs	r2, #32
 80034a6:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 80034a8:	2300      	movs	r3, #0
 80034aa:	e000      	b.n	80034ae <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 80034ac:	2302      	movs	r3, #2
  }
}
 80034ae:	4618      	mov	r0, r3
 80034b0:	3720      	adds	r7, #32
 80034b2:	46bd      	mov	sp, r7
 80034b4:	bd80      	pop	{r7, pc}
	...

080034b8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80034b8:	b580      	push	{r7, lr}
 80034ba:	b088      	sub	sp, #32
 80034bc:	af00      	add	r7, sp, #0
 80034be:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80034c0:	2300      	movs	r3, #0
 80034c2:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	689a      	ldr	r2, [r3, #8]
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	691b      	ldr	r3, [r3, #16]
 80034cc:	431a      	orrs	r2, r3
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	695b      	ldr	r3, [r3, #20]
 80034d2:	431a      	orrs	r2, r3
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	69db      	ldr	r3, [r3, #28]
 80034d8:	4313      	orrs	r3, r2
 80034da:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	681a      	ldr	r2, [r3, #0]
 80034e2:	4ba6      	ldr	r3, [pc, #664]	@ (800377c <UART_SetConfig+0x2c4>)
 80034e4:	4013      	ands	r3, r2
 80034e6:	687a      	ldr	r2, [r7, #4]
 80034e8:	6812      	ldr	r2, [r2, #0]
 80034ea:	6979      	ldr	r1, [r7, #20]
 80034ec:	430b      	orrs	r3, r1
 80034ee:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	685b      	ldr	r3, [r3, #4]
 80034f6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	68da      	ldr	r2, [r3, #12]
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	430a      	orrs	r2, r1
 8003504:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	699b      	ldr	r3, [r3, #24]
 800350a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	6a1b      	ldr	r3, [r3, #32]
 8003510:	697a      	ldr	r2, [r7, #20]
 8003512:	4313      	orrs	r3, r2
 8003514:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	689b      	ldr	r3, [r3, #8]
 800351c:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	697a      	ldr	r2, [r7, #20]
 8003526:	430a      	orrs	r2, r1
 8003528:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	4a94      	ldr	r2, [pc, #592]	@ (8003780 <UART_SetConfig+0x2c8>)
 8003530:	4293      	cmp	r3, r2
 8003532:	d120      	bne.n	8003576 <UART_SetConfig+0xbe>
 8003534:	4b93      	ldr	r3, [pc, #588]	@ (8003784 <UART_SetConfig+0x2cc>)
 8003536:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800353a:	f003 0303 	and.w	r3, r3, #3
 800353e:	2b03      	cmp	r3, #3
 8003540:	d816      	bhi.n	8003570 <UART_SetConfig+0xb8>
 8003542:	a201      	add	r2, pc, #4	@ (adr r2, 8003548 <UART_SetConfig+0x90>)
 8003544:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003548:	08003559 	.word	0x08003559
 800354c:	08003565 	.word	0x08003565
 8003550:	0800355f 	.word	0x0800355f
 8003554:	0800356b 	.word	0x0800356b
 8003558:	2301      	movs	r3, #1
 800355a:	77fb      	strb	r3, [r7, #31]
 800355c:	e150      	b.n	8003800 <UART_SetConfig+0x348>
 800355e:	2302      	movs	r3, #2
 8003560:	77fb      	strb	r3, [r7, #31]
 8003562:	e14d      	b.n	8003800 <UART_SetConfig+0x348>
 8003564:	2304      	movs	r3, #4
 8003566:	77fb      	strb	r3, [r7, #31]
 8003568:	e14a      	b.n	8003800 <UART_SetConfig+0x348>
 800356a:	2308      	movs	r3, #8
 800356c:	77fb      	strb	r3, [r7, #31]
 800356e:	e147      	b.n	8003800 <UART_SetConfig+0x348>
 8003570:	2310      	movs	r3, #16
 8003572:	77fb      	strb	r3, [r7, #31]
 8003574:	e144      	b.n	8003800 <UART_SetConfig+0x348>
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	4a83      	ldr	r2, [pc, #524]	@ (8003788 <UART_SetConfig+0x2d0>)
 800357c:	4293      	cmp	r3, r2
 800357e:	d132      	bne.n	80035e6 <UART_SetConfig+0x12e>
 8003580:	4b80      	ldr	r3, [pc, #512]	@ (8003784 <UART_SetConfig+0x2cc>)
 8003582:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003586:	f003 030c 	and.w	r3, r3, #12
 800358a:	2b0c      	cmp	r3, #12
 800358c:	d828      	bhi.n	80035e0 <UART_SetConfig+0x128>
 800358e:	a201      	add	r2, pc, #4	@ (adr r2, 8003594 <UART_SetConfig+0xdc>)
 8003590:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003594:	080035c9 	.word	0x080035c9
 8003598:	080035e1 	.word	0x080035e1
 800359c:	080035e1 	.word	0x080035e1
 80035a0:	080035e1 	.word	0x080035e1
 80035a4:	080035d5 	.word	0x080035d5
 80035a8:	080035e1 	.word	0x080035e1
 80035ac:	080035e1 	.word	0x080035e1
 80035b0:	080035e1 	.word	0x080035e1
 80035b4:	080035cf 	.word	0x080035cf
 80035b8:	080035e1 	.word	0x080035e1
 80035bc:	080035e1 	.word	0x080035e1
 80035c0:	080035e1 	.word	0x080035e1
 80035c4:	080035db 	.word	0x080035db
 80035c8:	2300      	movs	r3, #0
 80035ca:	77fb      	strb	r3, [r7, #31]
 80035cc:	e118      	b.n	8003800 <UART_SetConfig+0x348>
 80035ce:	2302      	movs	r3, #2
 80035d0:	77fb      	strb	r3, [r7, #31]
 80035d2:	e115      	b.n	8003800 <UART_SetConfig+0x348>
 80035d4:	2304      	movs	r3, #4
 80035d6:	77fb      	strb	r3, [r7, #31]
 80035d8:	e112      	b.n	8003800 <UART_SetConfig+0x348>
 80035da:	2308      	movs	r3, #8
 80035dc:	77fb      	strb	r3, [r7, #31]
 80035de:	e10f      	b.n	8003800 <UART_SetConfig+0x348>
 80035e0:	2310      	movs	r3, #16
 80035e2:	77fb      	strb	r3, [r7, #31]
 80035e4:	e10c      	b.n	8003800 <UART_SetConfig+0x348>
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	4a68      	ldr	r2, [pc, #416]	@ (800378c <UART_SetConfig+0x2d4>)
 80035ec:	4293      	cmp	r3, r2
 80035ee:	d120      	bne.n	8003632 <UART_SetConfig+0x17a>
 80035f0:	4b64      	ldr	r3, [pc, #400]	@ (8003784 <UART_SetConfig+0x2cc>)
 80035f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80035f6:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80035fa:	2b30      	cmp	r3, #48	@ 0x30
 80035fc:	d013      	beq.n	8003626 <UART_SetConfig+0x16e>
 80035fe:	2b30      	cmp	r3, #48	@ 0x30
 8003600:	d814      	bhi.n	800362c <UART_SetConfig+0x174>
 8003602:	2b20      	cmp	r3, #32
 8003604:	d009      	beq.n	800361a <UART_SetConfig+0x162>
 8003606:	2b20      	cmp	r3, #32
 8003608:	d810      	bhi.n	800362c <UART_SetConfig+0x174>
 800360a:	2b00      	cmp	r3, #0
 800360c:	d002      	beq.n	8003614 <UART_SetConfig+0x15c>
 800360e:	2b10      	cmp	r3, #16
 8003610:	d006      	beq.n	8003620 <UART_SetConfig+0x168>
 8003612:	e00b      	b.n	800362c <UART_SetConfig+0x174>
 8003614:	2300      	movs	r3, #0
 8003616:	77fb      	strb	r3, [r7, #31]
 8003618:	e0f2      	b.n	8003800 <UART_SetConfig+0x348>
 800361a:	2302      	movs	r3, #2
 800361c:	77fb      	strb	r3, [r7, #31]
 800361e:	e0ef      	b.n	8003800 <UART_SetConfig+0x348>
 8003620:	2304      	movs	r3, #4
 8003622:	77fb      	strb	r3, [r7, #31]
 8003624:	e0ec      	b.n	8003800 <UART_SetConfig+0x348>
 8003626:	2308      	movs	r3, #8
 8003628:	77fb      	strb	r3, [r7, #31]
 800362a:	e0e9      	b.n	8003800 <UART_SetConfig+0x348>
 800362c:	2310      	movs	r3, #16
 800362e:	77fb      	strb	r3, [r7, #31]
 8003630:	e0e6      	b.n	8003800 <UART_SetConfig+0x348>
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	4a56      	ldr	r2, [pc, #344]	@ (8003790 <UART_SetConfig+0x2d8>)
 8003638:	4293      	cmp	r3, r2
 800363a:	d120      	bne.n	800367e <UART_SetConfig+0x1c6>
 800363c:	4b51      	ldr	r3, [pc, #324]	@ (8003784 <UART_SetConfig+0x2cc>)
 800363e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003642:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8003646:	2bc0      	cmp	r3, #192	@ 0xc0
 8003648:	d013      	beq.n	8003672 <UART_SetConfig+0x1ba>
 800364a:	2bc0      	cmp	r3, #192	@ 0xc0
 800364c:	d814      	bhi.n	8003678 <UART_SetConfig+0x1c0>
 800364e:	2b80      	cmp	r3, #128	@ 0x80
 8003650:	d009      	beq.n	8003666 <UART_SetConfig+0x1ae>
 8003652:	2b80      	cmp	r3, #128	@ 0x80
 8003654:	d810      	bhi.n	8003678 <UART_SetConfig+0x1c0>
 8003656:	2b00      	cmp	r3, #0
 8003658:	d002      	beq.n	8003660 <UART_SetConfig+0x1a8>
 800365a:	2b40      	cmp	r3, #64	@ 0x40
 800365c:	d006      	beq.n	800366c <UART_SetConfig+0x1b4>
 800365e:	e00b      	b.n	8003678 <UART_SetConfig+0x1c0>
 8003660:	2300      	movs	r3, #0
 8003662:	77fb      	strb	r3, [r7, #31]
 8003664:	e0cc      	b.n	8003800 <UART_SetConfig+0x348>
 8003666:	2302      	movs	r3, #2
 8003668:	77fb      	strb	r3, [r7, #31]
 800366a:	e0c9      	b.n	8003800 <UART_SetConfig+0x348>
 800366c:	2304      	movs	r3, #4
 800366e:	77fb      	strb	r3, [r7, #31]
 8003670:	e0c6      	b.n	8003800 <UART_SetConfig+0x348>
 8003672:	2308      	movs	r3, #8
 8003674:	77fb      	strb	r3, [r7, #31]
 8003676:	e0c3      	b.n	8003800 <UART_SetConfig+0x348>
 8003678:	2310      	movs	r3, #16
 800367a:	77fb      	strb	r3, [r7, #31]
 800367c:	e0c0      	b.n	8003800 <UART_SetConfig+0x348>
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	4a44      	ldr	r2, [pc, #272]	@ (8003794 <UART_SetConfig+0x2dc>)
 8003684:	4293      	cmp	r3, r2
 8003686:	d125      	bne.n	80036d4 <UART_SetConfig+0x21c>
 8003688:	4b3e      	ldr	r3, [pc, #248]	@ (8003784 <UART_SetConfig+0x2cc>)
 800368a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800368e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003692:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003696:	d017      	beq.n	80036c8 <UART_SetConfig+0x210>
 8003698:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800369c:	d817      	bhi.n	80036ce <UART_SetConfig+0x216>
 800369e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80036a2:	d00b      	beq.n	80036bc <UART_SetConfig+0x204>
 80036a4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80036a8:	d811      	bhi.n	80036ce <UART_SetConfig+0x216>
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d003      	beq.n	80036b6 <UART_SetConfig+0x1fe>
 80036ae:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80036b2:	d006      	beq.n	80036c2 <UART_SetConfig+0x20a>
 80036b4:	e00b      	b.n	80036ce <UART_SetConfig+0x216>
 80036b6:	2300      	movs	r3, #0
 80036b8:	77fb      	strb	r3, [r7, #31]
 80036ba:	e0a1      	b.n	8003800 <UART_SetConfig+0x348>
 80036bc:	2302      	movs	r3, #2
 80036be:	77fb      	strb	r3, [r7, #31]
 80036c0:	e09e      	b.n	8003800 <UART_SetConfig+0x348>
 80036c2:	2304      	movs	r3, #4
 80036c4:	77fb      	strb	r3, [r7, #31]
 80036c6:	e09b      	b.n	8003800 <UART_SetConfig+0x348>
 80036c8:	2308      	movs	r3, #8
 80036ca:	77fb      	strb	r3, [r7, #31]
 80036cc:	e098      	b.n	8003800 <UART_SetConfig+0x348>
 80036ce:	2310      	movs	r3, #16
 80036d0:	77fb      	strb	r3, [r7, #31]
 80036d2:	e095      	b.n	8003800 <UART_SetConfig+0x348>
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	4a2f      	ldr	r2, [pc, #188]	@ (8003798 <UART_SetConfig+0x2e0>)
 80036da:	4293      	cmp	r3, r2
 80036dc:	d125      	bne.n	800372a <UART_SetConfig+0x272>
 80036de:	4b29      	ldr	r3, [pc, #164]	@ (8003784 <UART_SetConfig+0x2cc>)
 80036e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80036e4:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80036e8:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80036ec:	d017      	beq.n	800371e <UART_SetConfig+0x266>
 80036ee:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80036f2:	d817      	bhi.n	8003724 <UART_SetConfig+0x26c>
 80036f4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80036f8:	d00b      	beq.n	8003712 <UART_SetConfig+0x25a>
 80036fa:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80036fe:	d811      	bhi.n	8003724 <UART_SetConfig+0x26c>
 8003700:	2b00      	cmp	r3, #0
 8003702:	d003      	beq.n	800370c <UART_SetConfig+0x254>
 8003704:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003708:	d006      	beq.n	8003718 <UART_SetConfig+0x260>
 800370a:	e00b      	b.n	8003724 <UART_SetConfig+0x26c>
 800370c:	2301      	movs	r3, #1
 800370e:	77fb      	strb	r3, [r7, #31]
 8003710:	e076      	b.n	8003800 <UART_SetConfig+0x348>
 8003712:	2302      	movs	r3, #2
 8003714:	77fb      	strb	r3, [r7, #31]
 8003716:	e073      	b.n	8003800 <UART_SetConfig+0x348>
 8003718:	2304      	movs	r3, #4
 800371a:	77fb      	strb	r3, [r7, #31]
 800371c:	e070      	b.n	8003800 <UART_SetConfig+0x348>
 800371e:	2308      	movs	r3, #8
 8003720:	77fb      	strb	r3, [r7, #31]
 8003722:	e06d      	b.n	8003800 <UART_SetConfig+0x348>
 8003724:	2310      	movs	r3, #16
 8003726:	77fb      	strb	r3, [r7, #31]
 8003728:	e06a      	b.n	8003800 <UART_SetConfig+0x348>
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	4a1b      	ldr	r2, [pc, #108]	@ (800379c <UART_SetConfig+0x2e4>)
 8003730:	4293      	cmp	r3, r2
 8003732:	d138      	bne.n	80037a6 <UART_SetConfig+0x2ee>
 8003734:	4b13      	ldr	r3, [pc, #76]	@ (8003784 <UART_SetConfig+0x2cc>)
 8003736:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800373a:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 800373e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003742:	d017      	beq.n	8003774 <UART_SetConfig+0x2bc>
 8003744:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003748:	d82a      	bhi.n	80037a0 <UART_SetConfig+0x2e8>
 800374a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800374e:	d00b      	beq.n	8003768 <UART_SetConfig+0x2b0>
 8003750:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003754:	d824      	bhi.n	80037a0 <UART_SetConfig+0x2e8>
 8003756:	2b00      	cmp	r3, #0
 8003758:	d003      	beq.n	8003762 <UART_SetConfig+0x2aa>
 800375a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800375e:	d006      	beq.n	800376e <UART_SetConfig+0x2b6>
 8003760:	e01e      	b.n	80037a0 <UART_SetConfig+0x2e8>
 8003762:	2300      	movs	r3, #0
 8003764:	77fb      	strb	r3, [r7, #31]
 8003766:	e04b      	b.n	8003800 <UART_SetConfig+0x348>
 8003768:	2302      	movs	r3, #2
 800376a:	77fb      	strb	r3, [r7, #31]
 800376c:	e048      	b.n	8003800 <UART_SetConfig+0x348>
 800376e:	2304      	movs	r3, #4
 8003770:	77fb      	strb	r3, [r7, #31]
 8003772:	e045      	b.n	8003800 <UART_SetConfig+0x348>
 8003774:	2308      	movs	r3, #8
 8003776:	77fb      	strb	r3, [r7, #31]
 8003778:	e042      	b.n	8003800 <UART_SetConfig+0x348>
 800377a:	bf00      	nop
 800377c:	efff69f3 	.word	0xefff69f3
 8003780:	40011000 	.word	0x40011000
 8003784:	40023800 	.word	0x40023800
 8003788:	40004400 	.word	0x40004400
 800378c:	40004800 	.word	0x40004800
 8003790:	40004c00 	.word	0x40004c00
 8003794:	40005000 	.word	0x40005000
 8003798:	40011400 	.word	0x40011400
 800379c:	40007800 	.word	0x40007800
 80037a0:	2310      	movs	r3, #16
 80037a2:	77fb      	strb	r3, [r7, #31]
 80037a4:	e02c      	b.n	8003800 <UART_SetConfig+0x348>
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	4a72      	ldr	r2, [pc, #456]	@ (8003974 <UART_SetConfig+0x4bc>)
 80037ac:	4293      	cmp	r3, r2
 80037ae:	d125      	bne.n	80037fc <UART_SetConfig+0x344>
 80037b0:	4b71      	ldr	r3, [pc, #452]	@ (8003978 <UART_SetConfig+0x4c0>)
 80037b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80037b6:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80037ba:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 80037be:	d017      	beq.n	80037f0 <UART_SetConfig+0x338>
 80037c0:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 80037c4:	d817      	bhi.n	80037f6 <UART_SetConfig+0x33e>
 80037c6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80037ca:	d00b      	beq.n	80037e4 <UART_SetConfig+0x32c>
 80037cc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80037d0:	d811      	bhi.n	80037f6 <UART_SetConfig+0x33e>
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d003      	beq.n	80037de <UART_SetConfig+0x326>
 80037d6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80037da:	d006      	beq.n	80037ea <UART_SetConfig+0x332>
 80037dc:	e00b      	b.n	80037f6 <UART_SetConfig+0x33e>
 80037de:	2300      	movs	r3, #0
 80037e0:	77fb      	strb	r3, [r7, #31]
 80037e2:	e00d      	b.n	8003800 <UART_SetConfig+0x348>
 80037e4:	2302      	movs	r3, #2
 80037e6:	77fb      	strb	r3, [r7, #31]
 80037e8:	e00a      	b.n	8003800 <UART_SetConfig+0x348>
 80037ea:	2304      	movs	r3, #4
 80037ec:	77fb      	strb	r3, [r7, #31]
 80037ee:	e007      	b.n	8003800 <UART_SetConfig+0x348>
 80037f0:	2308      	movs	r3, #8
 80037f2:	77fb      	strb	r3, [r7, #31]
 80037f4:	e004      	b.n	8003800 <UART_SetConfig+0x348>
 80037f6:	2310      	movs	r3, #16
 80037f8:	77fb      	strb	r3, [r7, #31]
 80037fa:	e001      	b.n	8003800 <UART_SetConfig+0x348>
 80037fc:	2310      	movs	r3, #16
 80037fe:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	69db      	ldr	r3, [r3, #28]
 8003804:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003808:	d15b      	bne.n	80038c2 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 800380a:	7ffb      	ldrb	r3, [r7, #31]
 800380c:	2b08      	cmp	r3, #8
 800380e:	d828      	bhi.n	8003862 <UART_SetConfig+0x3aa>
 8003810:	a201      	add	r2, pc, #4	@ (adr r2, 8003818 <UART_SetConfig+0x360>)
 8003812:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003816:	bf00      	nop
 8003818:	0800383d 	.word	0x0800383d
 800381c:	08003845 	.word	0x08003845
 8003820:	0800384d 	.word	0x0800384d
 8003824:	08003863 	.word	0x08003863
 8003828:	08003853 	.word	0x08003853
 800382c:	08003863 	.word	0x08003863
 8003830:	08003863 	.word	0x08003863
 8003834:	08003863 	.word	0x08003863
 8003838:	0800385b 	.word	0x0800385b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800383c:	f7ff f914 	bl	8002a68 <HAL_RCC_GetPCLK1Freq>
 8003840:	61b8      	str	r0, [r7, #24]
        break;
 8003842:	e013      	b.n	800386c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003844:	f7ff f924 	bl	8002a90 <HAL_RCC_GetPCLK2Freq>
 8003848:	61b8      	str	r0, [r7, #24]
        break;
 800384a:	e00f      	b.n	800386c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800384c:	4b4b      	ldr	r3, [pc, #300]	@ (800397c <UART_SetConfig+0x4c4>)
 800384e:	61bb      	str	r3, [r7, #24]
        break;
 8003850:	e00c      	b.n	800386c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003852:	f7fe fff7 	bl	8002844 <HAL_RCC_GetSysClockFreq>
 8003856:	61b8      	str	r0, [r7, #24]
        break;
 8003858:	e008      	b.n	800386c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800385a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800385e:	61bb      	str	r3, [r7, #24]
        break;
 8003860:	e004      	b.n	800386c <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8003862:	2300      	movs	r3, #0
 8003864:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003866:	2301      	movs	r3, #1
 8003868:	77bb      	strb	r3, [r7, #30]
        break;
 800386a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800386c:	69bb      	ldr	r3, [r7, #24]
 800386e:	2b00      	cmp	r3, #0
 8003870:	d074      	beq.n	800395c <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003872:	69bb      	ldr	r3, [r7, #24]
 8003874:	005a      	lsls	r2, r3, #1
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	685b      	ldr	r3, [r3, #4]
 800387a:	085b      	lsrs	r3, r3, #1
 800387c:	441a      	add	r2, r3
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	685b      	ldr	r3, [r3, #4]
 8003882:	fbb2 f3f3 	udiv	r3, r2, r3
 8003886:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003888:	693b      	ldr	r3, [r7, #16]
 800388a:	2b0f      	cmp	r3, #15
 800388c:	d916      	bls.n	80038bc <UART_SetConfig+0x404>
 800388e:	693b      	ldr	r3, [r7, #16]
 8003890:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003894:	d212      	bcs.n	80038bc <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003896:	693b      	ldr	r3, [r7, #16]
 8003898:	b29b      	uxth	r3, r3
 800389a:	f023 030f 	bic.w	r3, r3, #15
 800389e:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80038a0:	693b      	ldr	r3, [r7, #16]
 80038a2:	085b      	lsrs	r3, r3, #1
 80038a4:	b29b      	uxth	r3, r3
 80038a6:	f003 0307 	and.w	r3, r3, #7
 80038aa:	b29a      	uxth	r2, r3
 80038ac:	89fb      	ldrh	r3, [r7, #14]
 80038ae:	4313      	orrs	r3, r2
 80038b0:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	89fa      	ldrh	r2, [r7, #14]
 80038b8:	60da      	str	r2, [r3, #12]
 80038ba:	e04f      	b.n	800395c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80038bc:	2301      	movs	r3, #1
 80038be:	77bb      	strb	r3, [r7, #30]
 80038c0:	e04c      	b.n	800395c <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 80038c2:	7ffb      	ldrb	r3, [r7, #31]
 80038c4:	2b08      	cmp	r3, #8
 80038c6:	d828      	bhi.n	800391a <UART_SetConfig+0x462>
 80038c8:	a201      	add	r2, pc, #4	@ (adr r2, 80038d0 <UART_SetConfig+0x418>)
 80038ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038ce:	bf00      	nop
 80038d0:	080038f5 	.word	0x080038f5
 80038d4:	080038fd 	.word	0x080038fd
 80038d8:	08003905 	.word	0x08003905
 80038dc:	0800391b 	.word	0x0800391b
 80038e0:	0800390b 	.word	0x0800390b
 80038e4:	0800391b 	.word	0x0800391b
 80038e8:	0800391b 	.word	0x0800391b
 80038ec:	0800391b 	.word	0x0800391b
 80038f0:	08003913 	.word	0x08003913
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80038f4:	f7ff f8b8 	bl	8002a68 <HAL_RCC_GetPCLK1Freq>
 80038f8:	61b8      	str	r0, [r7, #24]
        break;
 80038fa:	e013      	b.n	8003924 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80038fc:	f7ff f8c8 	bl	8002a90 <HAL_RCC_GetPCLK2Freq>
 8003900:	61b8      	str	r0, [r7, #24]
        break;
 8003902:	e00f      	b.n	8003924 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003904:	4b1d      	ldr	r3, [pc, #116]	@ (800397c <UART_SetConfig+0x4c4>)
 8003906:	61bb      	str	r3, [r7, #24]
        break;
 8003908:	e00c      	b.n	8003924 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800390a:	f7fe ff9b 	bl	8002844 <HAL_RCC_GetSysClockFreq>
 800390e:	61b8      	str	r0, [r7, #24]
        break;
 8003910:	e008      	b.n	8003924 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003912:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003916:	61bb      	str	r3, [r7, #24]
        break;
 8003918:	e004      	b.n	8003924 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 800391a:	2300      	movs	r3, #0
 800391c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800391e:	2301      	movs	r3, #1
 8003920:	77bb      	strb	r3, [r7, #30]
        break;
 8003922:	bf00      	nop
    }

    if (pclk != 0U)
 8003924:	69bb      	ldr	r3, [r7, #24]
 8003926:	2b00      	cmp	r3, #0
 8003928:	d018      	beq.n	800395c <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	685b      	ldr	r3, [r3, #4]
 800392e:	085a      	lsrs	r2, r3, #1
 8003930:	69bb      	ldr	r3, [r7, #24]
 8003932:	441a      	add	r2, r3
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	685b      	ldr	r3, [r3, #4]
 8003938:	fbb2 f3f3 	udiv	r3, r2, r3
 800393c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800393e:	693b      	ldr	r3, [r7, #16]
 8003940:	2b0f      	cmp	r3, #15
 8003942:	d909      	bls.n	8003958 <UART_SetConfig+0x4a0>
 8003944:	693b      	ldr	r3, [r7, #16]
 8003946:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800394a:	d205      	bcs.n	8003958 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800394c:	693b      	ldr	r3, [r7, #16]
 800394e:	b29a      	uxth	r2, r3
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	60da      	str	r2, [r3, #12]
 8003956:	e001      	b.n	800395c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8003958:	2301      	movs	r3, #1
 800395a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	2200      	movs	r2, #0
 8003960:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	2200      	movs	r2, #0
 8003966:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8003968:	7fbb      	ldrb	r3, [r7, #30]
}
 800396a:	4618      	mov	r0, r3
 800396c:	3720      	adds	r7, #32
 800396e:	46bd      	mov	sp, r7
 8003970:	bd80      	pop	{r7, pc}
 8003972:	bf00      	nop
 8003974:	40007c00 	.word	0x40007c00
 8003978:	40023800 	.word	0x40023800
 800397c:	00f42400 	.word	0x00f42400

08003980 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003980:	b480      	push	{r7}
 8003982:	b083      	sub	sp, #12
 8003984:	af00      	add	r7, sp, #0
 8003986:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800398c:	f003 0308 	and.w	r3, r3, #8
 8003990:	2b00      	cmp	r3, #0
 8003992:	d00a      	beq.n	80039aa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	685b      	ldr	r3, [r3, #4]
 800399a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	430a      	orrs	r2, r1
 80039a8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039ae:	f003 0301 	and.w	r3, r3, #1
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d00a      	beq.n	80039cc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	685b      	ldr	r3, [r3, #4]
 80039bc:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	430a      	orrs	r2, r1
 80039ca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039d0:	f003 0302 	and.w	r3, r3, #2
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d00a      	beq.n	80039ee <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	685b      	ldr	r3, [r3, #4]
 80039de:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	430a      	orrs	r2, r1
 80039ec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039f2:	f003 0304 	and.w	r3, r3, #4
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d00a      	beq.n	8003a10 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	685b      	ldr	r3, [r3, #4]
 8003a00:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	430a      	orrs	r2, r1
 8003a0e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a14:	f003 0310 	and.w	r3, r3, #16
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d00a      	beq.n	8003a32 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	689b      	ldr	r3, [r3, #8]
 8003a22:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	430a      	orrs	r2, r1
 8003a30:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a36:	f003 0320 	and.w	r3, r3, #32
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d00a      	beq.n	8003a54 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	689b      	ldr	r3, [r3, #8]
 8003a44:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	430a      	orrs	r2, r1
 8003a52:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a58:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d01a      	beq.n	8003a96 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	685b      	ldr	r3, [r3, #4]
 8003a66:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	430a      	orrs	r2, r1
 8003a74:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a7a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003a7e:	d10a      	bne.n	8003a96 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	685b      	ldr	r3, [r3, #4]
 8003a86:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	430a      	orrs	r2, r1
 8003a94:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a9a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d00a      	beq.n	8003ab8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	685b      	ldr	r3, [r3, #4]
 8003aa8:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	430a      	orrs	r2, r1
 8003ab6:	605a      	str	r2, [r3, #4]
  }
}
 8003ab8:	bf00      	nop
 8003aba:	370c      	adds	r7, #12
 8003abc:	46bd      	mov	sp, r7
 8003abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac2:	4770      	bx	lr

08003ac4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003ac4:	b580      	push	{r7, lr}
 8003ac6:	b098      	sub	sp, #96	@ 0x60
 8003ac8:	af02      	add	r7, sp, #8
 8003aca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	2200      	movs	r2, #0
 8003ad0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003ad4:	f7fd fb3e 	bl	8001154 <HAL_GetTick>
 8003ad8:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	f003 0308 	and.w	r3, r3, #8
 8003ae4:	2b08      	cmp	r3, #8
 8003ae6:	d12e      	bne.n	8003b46 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003ae8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003aec:	9300      	str	r3, [sp, #0]
 8003aee:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003af0:	2200      	movs	r2, #0
 8003af2:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8003af6:	6878      	ldr	r0, [r7, #4]
 8003af8:	f000 f88c 	bl	8003c14 <UART_WaitOnFlagUntilTimeout>
 8003afc:	4603      	mov	r3, r0
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d021      	beq.n	8003b46 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b08:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003b0a:	e853 3f00 	ldrex	r3, [r3]
 8003b0e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003b10:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003b12:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003b16:	653b      	str	r3, [r7, #80]	@ 0x50
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	461a      	mov	r2, r3
 8003b1e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003b20:	647b      	str	r3, [r7, #68]	@ 0x44
 8003b22:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b24:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003b26:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003b28:	e841 2300 	strex	r3, r2, [r1]
 8003b2c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003b2e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d1e6      	bne.n	8003b02 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	2220      	movs	r2, #32
 8003b38:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	2200      	movs	r2, #0
 8003b3e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003b42:	2303      	movs	r3, #3
 8003b44:	e062      	b.n	8003c0c <UART_CheckIdleState+0x148>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	f003 0304 	and.w	r3, r3, #4
 8003b50:	2b04      	cmp	r3, #4
 8003b52:	d149      	bne.n	8003be8 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003b54:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003b58:	9300      	str	r3, [sp, #0]
 8003b5a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003b5c:	2200      	movs	r2, #0
 8003b5e:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8003b62:	6878      	ldr	r0, [r7, #4]
 8003b64:	f000 f856 	bl	8003c14 <UART_WaitOnFlagUntilTimeout>
 8003b68:	4603      	mov	r3, r0
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d03c      	beq.n	8003be8 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b76:	e853 3f00 	ldrex	r3, [r3]
 8003b7a:	623b      	str	r3, [r7, #32]
   return(result);
 8003b7c:	6a3b      	ldr	r3, [r7, #32]
 8003b7e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003b82:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	461a      	mov	r2, r3
 8003b8a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003b8c:	633b      	str	r3, [r7, #48]	@ 0x30
 8003b8e:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b90:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003b92:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003b94:	e841 2300 	strex	r3, r2, [r1]
 8003b98:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003b9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d1e6      	bne.n	8003b6e <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	3308      	adds	r3, #8
 8003ba6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ba8:	693b      	ldr	r3, [r7, #16]
 8003baa:	e853 3f00 	ldrex	r3, [r3]
 8003bae:	60fb      	str	r3, [r7, #12]
   return(result);
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	f023 0301 	bic.w	r3, r3, #1
 8003bb6:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	3308      	adds	r3, #8
 8003bbe:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003bc0:	61fa      	str	r2, [r7, #28]
 8003bc2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bc4:	69b9      	ldr	r1, [r7, #24]
 8003bc6:	69fa      	ldr	r2, [r7, #28]
 8003bc8:	e841 2300 	strex	r3, r2, [r1]
 8003bcc:	617b      	str	r3, [r7, #20]
   return(result);
 8003bce:	697b      	ldr	r3, [r7, #20]
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d1e5      	bne.n	8003ba0 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	2220      	movs	r2, #32
 8003bd8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	2200      	movs	r2, #0
 8003be0:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003be4:	2303      	movs	r3, #3
 8003be6:	e011      	b.n	8003c0c <UART_CheckIdleState+0x148>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	2220      	movs	r2, #32
 8003bec:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	2220      	movs	r2, #32
 8003bf2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	2200      	movs	r2, #0
 8003bfa:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	2200      	movs	r2, #0
 8003c00:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	2200      	movs	r2, #0
 8003c06:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8003c0a:	2300      	movs	r3, #0
}
 8003c0c:	4618      	mov	r0, r3
 8003c0e:	3758      	adds	r7, #88	@ 0x58
 8003c10:	46bd      	mov	sp, r7
 8003c12:	bd80      	pop	{r7, pc}

08003c14 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003c14:	b580      	push	{r7, lr}
 8003c16:	b084      	sub	sp, #16
 8003c18:	af00      	add	r7, sp, #0
 8003c1a:	60f8      	str	r0, [r7, #12]
 8003c1c:	60b9      	str	r1, [r7, #8]
 8003c1e:	603b      	str	r3, [r7, #0]
 8003c20:	4613      	mov	r3, r2
 8003c22:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003c24:	e04f      	b.n	8003cc6 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003c26:	69bb      	ldr	r3, [r7, #24]
 8003c28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c2c:	d04b      	beq.n	8003cc6 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c2e:	f7fd fa91 	bl	8001154 <HAL_GetTick>
 8003c32:	4602      	mov	r2, r0
 8003c34:	683b      	ldr	r3, [r7, #0]
 8003c36:	1ad3      	subs	r3, r2, r3
 8003c38:	69ba      	ldr	r2, [r7, #24]
 8003c3a:	429a      	cmp	r2, r3
 8003c3c:	d302      	bcc.n	8003c44 <UART_WaitOnFlagUntilTimeout+0x30>
 8003c3e:	69bb      	ldr	r3, [r7, #24]
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d101      	bne.n	8003c48 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003c44:	2303      	movs	r3, #3
 8003c46:	e04e      	b.n	8003ce6 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	f003 0304 	and.w	r3, r3, #4
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d037      	beq.n	8003cc6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8003c56:	68bb      	ldr	r3, [r7, #8]
 8003c58:	2b80      	cmp	r3, #128	@ 0x80
 8003c5a:	d034      	beq.n	8003cc6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8003c5c:	68bb      	ldr	r3, [r7, #8]
 8003c5e:	2b40      	cmp	r3, #64	@ 0x40
 8003c60:	d031      	beq.n	8003cc6 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	69db      	ldr	r3, [r3, #28]
 8003c68:	f003 0308 	and.w	r3, r3, #8
 8003c6c:	2b08      	cmp	r3, #8
 8003c6e:	d110      	bne.n	8003c92 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	2208      	movs	r2, #8
 8003c76:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003c78:	68f8      	ldr	r0, [r7, #12]
 8003c7a:	f000 f838 	bl	8003cee <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	2208      	movs	r2, #8
 8003c82:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	2200      	movs	r2, #0
 8003c8a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8003c8e:	2301      	movs	r3, #1
 8003c90:	e029      	b.n	8003ce6 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	69db      	ldr	r3, [r3, #28]
 8003c98:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003c9c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003ca0:	d111      	bne.n	8003cc6 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003caa:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003cac:	68f8      	ldr	r0, [r7, #12]
 8003cae:	f000 f81e 	bl	8003cee <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	2220      	movs	r2, #32
 8003cb6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	2200      	movs	r2, #0
 8003cbe:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8003cc2:	2303      	movs	r3, #3
 8003cc4:	e00f      	b.n	8003ce6 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	69da      	ldr	r2, [r3, #28]
 8003ccc:	68bb      	ldr	r3, [r7, #8]
 8003cce:	4013      	ands	r3, r2
 8003cd0:	68ba      	ldr	r2, [r7, #8]
 8003cd2:	429a      	cmp	r2, r3
 8003cd4:	bf0c      	ite	eq
 8003cd6:	2301      	moveq	r3, #1
 8003cd8:	2300      	movne	r3, #0
 8003cda:	b2db      	uxtb	r3, r3
 8003cdc:	461a      	mov	r2, r3
 8003cde:	79fb      	ldrb	r3, [r7, #7]
 8003ce0:	429a      	cmp	r2, r3
 8003ce2:	d0a0      	beq.n	8003c26 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003ce4:	2300      	movs	r3, #0
}
 8003ce6:	4618      	mov	r0, r3
 8003ce8:	3710      	adds	r7, #16
 8003cea:	46bd      	mov	sp, r7
 8003cec:	bd80      	pop	{r7, pc}

08003cee <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003cee:	b480      	push	{r7}
 8003cf0:	b095      	sub	sp, #84	@ 0x54
 8003cf2:	af00      	add	r7, sp, #0
 8003cf4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cfc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003cfe:	e853 3f00 	ldrex	r3, [r3]
 8003d02:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003d04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d06:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003d0a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	461a      	mov	r2, r3
 8003d12:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003d14:	643b      	str	r3, [r7, #64]	@ 0x40
 8003d16:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d18:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003d1a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003d1c:	e841 2300 	strex	r3, r2, [r1]
 8003d20:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003d22:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d1e6      	bne.n	8003cf6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	3308      	adds	r3, #8
 8003d2e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d30:	6a3b      	ldr	r3, [r7, #32]
 8003d32:	e853 3f00 	ldrex	r3, [r3]
 8003d36:	61fb      	str	r3, [r7, #28]
   return(result);
 8003d38:	69fb      	ldr	r3, [r7, #28]
 8003d3a:	f023 0301 	bic.w	r3, r3, #1
 8003d3e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	3308      	adds	r3, #8
 8003d46:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003d48:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003d4a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d4c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003d4e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003d50:	e841 2300 	strex	r3, r2, [r1]
 8003d54:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003d56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d1e5      	bne.n	8003d28 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003d60:	2b01      	cmp	r3, #1
 8003d62:	d118      	bne.n	8003d96 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	e853 3f00 	ldrex	r3, [r3]
 8003d70:	60bb      	str	r3, [r7, #8]
   return(result);
 8003d72:	68bb      	ldr	r3, [r7, #8]
 8003d74:	f023 0310 	bic.w	r3, r3, #16
 8003d78:	647b      	str	r3, [r7, #68]	@ 0x44
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	461a      	mov	r2, r3
 8003d80:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003d82:	61bb      	str	r3, [r7, #24]
 8003d84:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d86:	6979      	ldr	r1, [r7, #20]
 8003d88:	69ba      	ldr	r2, [r7, #24]
 8003d8a:	e841 2300 	strex	r3, r2, [r1]
 8003d8e:	613b      	str	r3, [r7, #16]
   return(result);
 8003d90:	693b      	ldr	r3, [r7, #16]
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d1e6      	bne.n	8003d64 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	2220      	movs	r2, #32
 8003d9a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	2200      	movs	r2, #0
 8003da2:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	2200      	movs	r2, #0
 8003da8:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8003daa:	bf00      	nop
 8003dac:	3754      	adds	r7, #84	@ 0x54
 8003dae:	46bd      	mov	sp, r7
 8003db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db4:	4770      	bx	lr
	...

08003db8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003db8:	b084      	sub	sp, #16
 8003dba:	b580      	push	{r7, lr}
 8003dbc:	b084      	sub	sp, #16
 8003dbe:	af00      	add	r7, sp, #0
 8003dc0:	6078      	str	r0, [r7, #4]
 8003dc2:	f107 001c 	add.w	r0, r7, #28
 8003dc6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003dca:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8003dce:	2b01      	cmp	r3, #1
 8003dd0:	d121      	bne.n	8003e16 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003dd6:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	68da      	ldr	r2, [r3, #12]
 8003de2:	4b21      	ldr	r3, [pc, #132]	@ (8003e68 <USB_CoreInit+0xb0>)
 8003de4:	4013      	ands	r3, r2
 8003de6:	687a      	ldr	r2, [r7, #4]
 8003de8:	60d3      	str	r3, [r2, #12]
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	68db      	ldr	r3, [r3, #12]
 8003dee:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8003df6:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8003dfa:	2b01      	cmp	r3, #1
 8003dfc:	d105      	bne.n	8003e0a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	68db      	ldr	r3, [r3, #12]
 8003e02:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003e0a:	6878      	ldr	r0, [r7, #4]
 8003e0c:	f000 fa92 	bl	8004334 <USB_CoreReset>
 8003e10:	4603      	mov	r3, r0
 8003e12:	73fb      	strb	r3, [r7, #15]
 8003e14:	e010      	b.n	8003e38 <USB_CoreInit+0x80>
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	68db      	ldr	r3, [r3, #12]
 8003e1a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003e22:	6878      	ldr	r0, [r7, #4]
 8003e24:	f000 fa86 	bl	8004334 <USB_CoreReset>
 8003e28:	4603      	mov	r3, r0
 8003e2a:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e30:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if (cfg.dma_enable == 1U)
 8003e38:	7fbb      	ldrb	r3, [r7, #30]
 8003e3a:	2b01      	cmp	r3, #1
 8003e3c:	d10b      	bne.n	8003e56 <USB_CoreInit+0x9e>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	689b      	ldr	r3, [r3, #8]
 8003e42:	f043 0206 	orr.w	r2, r3, #6
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	689b      	ldr	r3, [r3, #8]
 8003e4e:	f043 0220 	orr.w	r2, r3, #32
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8003e56:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e58:	4618      	mov	r0, r3
 8003e5a:	3710      	adds	r7, #16
 8003e5c:	46bd      	mov	sp, r7
 8003e5e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003e62:	b004      	add	sp, #16
 8003e64:	4770      	bx	lr
 8003e66:	bf00      	nop
 8003e68:	ffbdffbf 	.word	0xffbdffbf

08003e6c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003e6c:	b480      	push	{r7}
 8003e6e:	b083      	sub	sp, #12
 8003e70:	af00      	add	r7, sp, #0
 8003e72:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	689b      	ldr	r3, [r3, #8]
 8003e78:	f023 0201 	bic.w	r2, r3, #1
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003e80:	2300      	movs	r3, #0
}
 8003e82:	4618      	mov	r0, r3
 8003e84:	370c      	adds	r7, #12
 8003e86:	46bd      	mov	sp, r7
 8003e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e8c:	4770      	bx	lr

08003e8e <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8003e8e:	b580      	push	{r7, lr}
 8003e90:	b084      	sub	sp, #16
 8003e92:	af00      	add	r7, sp, #0
 8003e94:	6078      	str	r0, [r7, #4]
 8003e96:	460b      	mov	r3, r1
 8003e98:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8003e9a:	2300      	movs	r3, #0
 8003e9c:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	68db      	ldr	r3, [r3, #12]
 8003ea2:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8003eaa:	78fb      	ldrb	r3, [r7, #3]
 8003eac:	2b01      	cmp	r3, #1
 8003eae:	d115      	bne.n	8003edc <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	68db      	ldr	r3, [r3, #12]
 8003eb4:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8003ebc:	200a      	movs	r0, #10
 8003ebe:	f7fd f955 	bl	800116c <HAL_Delay>
      ms += 10U;
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	330a      	adds	r3, #10
 8003ec6:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8003ec8:	6878      	ldr	r0, [r7, #4]
 8003eca:	f000 fa25 	bl	8004318 <USB_GetMode>
 8003ece:	4603      	mov	r3, r0
 8003ed0:	2b01      	cmp	r3, #1
 8003ed2:	d01e      	beq.n	8003f12 <USB_SetCurrentMode+0x84>
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	2bc7      	cmp	r3, #199	@ 0xc7
 8003ed8:	d9f0      	bls.n	8003ebc <USB_SetCurrentMode+0x2e>
 8003eda:	e01a      	b.n	8003f12 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8003edc:	78fb      	ldrb	r3, [r7, #3]
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d115      	bne.n	8003f0e <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	68db      	ldr	r3, [r3, #12]
 8003ee6:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8003eee:	200a      	movs	r0, #10
 8003ef0:	f7fd f93c 	bl	800116c <HAL_Delay>
      ms += 10U;
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	330a      	adds	r3, #10
 8003ef8:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8003efa:	6878      	ldr	r0, [r7, #4]
 8003efc:	f000 fa0c 	bl	8004318 <USB_GetMode>
 8003f00:	4603      	mov	r3, r0
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d005      	beq.n	8003f12 <USB_SetCurrentMode+0x84>
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	2bc7      	cmp	r3, #199	@ 0xc7
 8003f0a:	d9f0      	bls.n	8003eee <USB_SetCurrentMode+0x60>
 8003f0c:	e001      	b.n	8003f12 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8003f0e:	2301      	movs	r3, #1
 8003f10:	e005      	b.n	8003f1e <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	2bc8      	cmp	r3, #200	@ 0xc8
 8003f16:	d101      	bne.n	8003f1c <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8003f18:	2301      	movs	r3, #1
 8003f1a:	e000      	b.n	8003f1e <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8003f1c:	2300      	movs	r3, #0
}
 8003f1e:	4618      	mov	r0, r3
 8003f20:	3710      	adds	r7, #16
 8003f22:	46bd      	mov	sp, r7
 8003f24:	bd80      	pop	{r7, pc}
	...

08003f28 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003f28:	b084      	sub	sp, #16
 8003f2a:	b580      	push	{r7, lr}
 8003f2c:	b086      	sub	sp, #24
 8003f2e:	af00      	add	r7, sp, #0
 8003f30:	6078      	str	r0, [r7, #4]
 8003f32:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8003f36:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8003f3a:	2300      	movs	r3, #0
 8003f3c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8003f42:	2300      	movs	r3, #0
 8003f44:	613b      	str	r3, [r7, #16]
 8003f46:	e009      	b.n	8003f5c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8003f48:	687a      	ldr	r2, [r7, #4]
 8003f4a:	693b      	ldr	r3, [r7, #16]
 8003f4c:	3340      	adds	r3, #64	@ 0x40
 8003f4e:	009b      	lsls	r3, r3, #2
 8003f50:	4413      	add	r3, r2
 8003f52:	2200      	movs	r2, #0
 8003f54:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8003f56:	693b      	ldr	r3, [r7, #16]
 8003f58:	3301      	adds	r3, #1
 8003f5a:	613b      	str	r3, [r7, #16]
 8003f5c:	693b      	ldr	r3, [r7, #16]
 8003f5e:	2b0e      	cmp	r3, #14
 8003f60:	d9f2      	bls.n	8003f48 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8003f62:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d11c      	bne.n	8003fa4 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003f70:	685b      	ldr	r3, [r3, #4]
 8003f72:	68fa      	ldr	r2, [r7, #12]
 8003f74:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003f78:	f043 0302 	orr.w	r3, r3, #2
 8003f7c:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f82:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	601a      	str	r2, [r3, #0]
 8003fa2:	e005      	b.n	8003fb0 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003fa8:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8003fb6:	461a      	mov	r2, r3
 8003fb8:	2300      	movs	r3, #0
 8003fba:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003fbc:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8003fc0:	2b01      	cmp	r3, #1
 8003fc2:	d10d      	bne.n	8003fe0 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8003fc4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d104      	bne.n	8003fd6 <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8003fcc:	2100      	movs	r1, #0
 8003fce:	6878      	ldr	r0, [r7, #4]
 8003fd0:	f000 f968 	bl	80042a4 <USB_SetDevSpeed>
 8003fd4:	e008      	b.n	8003fe8 <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8003fd6:	2101      	movs	r1, #1
 8003fd8:	6878      	ldr	r0, [r7, #4]
 8003fda:	f000 f963 	bl	80042a4 <USB_SetDevSpeed>
 8003fde:	e003      	b.n	8003fe8 <USB_DevInit+0xc0>
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8003fe0:	2103      	movs	r1, #3
 8003fe2:	6878      	ldr	r0, [r7, #4]
 8003fe4:	f000 f95e 	bl	80042a4 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8003fe8:	2110      	movs	r1, #16
 8003fea:	6878      	ldr	r0, [r7, #4]
 8003fec:	f000 f8fa 	bl	80041e4 <USB_FlushTxFifo>
 8003ff0:	4603      	mov	r3, r0
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d001      	beq.n	8003ffa <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 8003ff6:	2301      	movs	r3, #1
 8003ff8:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8003ffa:	6878      	ldr	r0, [r7, #4]
 8003ffc:	f000 f924 	bl	8004248 <USB_FlushRxFifo>
 8004000:	4603      	mov	r3, r0
 8004002:	2b00      	cmp	r3, #0
 8004004:	d001      	beq.n	800400a <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 8004006:	2301      	movs	r3, #1
 8004008:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004010:	461a      	mov	r2, r3
 8004012:	2300      	movs	r3, #0
 8004014:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800401c:	461a      	mov	r2, r3
 800401e:	2300      	movs	r3, #0
 8004020:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004028:	461a      	mov	r2, r3
 800402a:	2300      	movs	r3, #0
 800402c:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800402e:	2300      	movs	r3, #0
 8004030:	613b      	str	r3, [r7, #16]
 8004032:	e043      	b.n	80040bc <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004034:	693b      	ldr	r3, [r7, #16]
 8004036:	015a      	lsls	r2, r3, #5
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	4413      	add	r3, r2
 800403c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004046:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800404a:	d118      	bne.n	800407e <USB_DevInit+0x156>
    {
      if (i == 0U)
 800404c:	693b      	ldr	r3, [r7, #16]
 800404e:	2b00      	cmp	r3, #0
 8004050:	d10a      	bne.n	8004068 <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004052:	693b      	ldr	r3, [r7, #16]
 8004054:	015a      	lsls	r2, r3, #5
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	4413      	add	r3, r2
 800405a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800405e:	461a      	mov	r2, r3
 8004060:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8004064:	6013      	str	r3, [r2, #0]
 8004066:	e013      	b.n	8004090 <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004068:	693b      	ldr	r3, [r7, #16]
 800406a:	015a      	lsls	r2, r3, #5
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	4413      	add	r3, r2
 8004070:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004074:	461a      	mov	r2, r3
 8004076:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800407a:	6013      	str	r3, [r2, #0]
 800407c:	e008      	b.n	8004090 <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800407e:	693b      	ldr	r3, [r7, #16]
 8004080:	015a      	lsls	r2, r3, #5
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	4413      	add	r3, r2
 8004086:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800408a:	461a      	mov	r2, r3
 800408c:	2300      	movs	r3, #0
 800408e:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004090:	693b      	ldr	r3, [r7, #16]
 8004092:	015a      	lsls	r2, r3, #5
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	4413      	add	r3, r2
 8004098:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800409c:	461a      	mov	r2, r3
 800409e:	2300      	movs	r3, #0
 80040a0:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80040a2:	693b      	ldr	r3, [r7, #16]
 80040a4:	015a      	lsls	r2, r3, #5
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	4413      	add	r3, r2
 80040aa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80040ae:	461a      	mov	r2, r3
 80040b0:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80040b4:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80040b6:	693b      	ldr	r3, [r7, #16]
 80040b8:	3301      	adds	r3, #1
 80040ba:	613b      	str	r3, [r7, #16]
 80040bc:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80040c0:	461a      	mov	r2, r3
 80040c2:	693b      	ldr	r3, [r7, #16]
 80040c4:	4293      	cmp	r3, r2
 80040c6:	d3b5      	bcc.n	8004034 <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80040c8:	2300      	movs	r3, #0
 80040ca:	613b      	str	r3, [r7, #16]
 80040cc:	e043      	b.n	8004156 <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80040ce:	693b      	ldr	r3, [r7, #16]
 80040d0:	015a      	lsls	r2, r3, #5
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	4413      	add	r3, r2
 80040d6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80040e0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80040e4:	d118      	bne.n	8004118 <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 80040e6:	693b      	ldr	r3, [r7, #16]
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d10a      	bne.n	8004102 <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80040ec:	693b      	ldr	r3, [r7, #16]
 80040ee:	015a      	lsls	r2, r3, #5
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	4413      	add	r3, r2
 80040f4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80040f8:	461a      	mov	r2, r3
 80040fa:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80040fe:	6013      	str	r3, [r2, #0]
 8004100:	e013      	b.n	800412a <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004102:	693b      	ldr	r3, [r7, #16]
 8004104:	015a      	lsls	r2, r3, #5
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	4413      	add	r3, r2
 800410a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800410e:	461a      	mov	r2, r3
 8004110:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8004114:	6013      	str	r3, [r2, #0]
 8004116:	e008      	b.n	800412a <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004118:	693b      	ldr	r3, [r7, #16]
 800411a:	015a      	lsls	r2, r3, #5
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	4413      	add	r3, r2
 8004120:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004124:	461a      	mov	r2, r3
 8004126:	2300      	movs	r3, #0
 8004128:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800412a:	693b      	ldr	r3, [r7, #16]
 800412c:	015a      	lsls	r2, r3, #5
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	4413      	add	r3, r2
 8004132:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004136:	461a      	mov	r2, r3
 8004138:	2300      	movs	r3, #0
 800413a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800413c:	693b      	ldr	r3, [r7, #16]
 800413e:	015a      	lsls	r2, r3, #5
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	4413      	add	r3, r2
 8004144:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004148:	461a      	mov	r2, r3
 800414a:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800414e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004150:	693b      	ldr	r3, [r7, #16]
 8004152:	3301      	adds	r3, #1
 8004154:	613b      	str	r3, [r7, #16]
 8004156:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800415a:	461a      	mov	r2, r3
 800415c:	693b      	ldr	r3, [r7, #16]
 800415e:	4293      	cmp	r3, r2
 8004160:	d3b5      	bcc.n	80040ce <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004168:	691b      	ldr	r3, [r3, #16]
 800416a:	68fa      	ldr	r2, [r7, #12]
 800416c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004170:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004174:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	2200      	movs	r2, #0
 800417a:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8004182:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004184:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8004188:	2b00      	cmp	r3, #0
 800418a:	d105      	bne.n	8004198 <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	699b      	ldr	r3, [r3, #24]
 8004190:	f043 0210 	orr.w	r2, r3, #16
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	699a      	ldr	r2, [r3, #24]
 800419c:	4b0f      	ldr	r3, [pc, #60]	@ (80041dc <USB_DevInit+0x2b4>)
 800419e:	4313      	orrs	r3, r2
 80041a0:	687a      	ldr	r2, [r7, #4]
 80041a2:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80041a4:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d005      	beq.n	80041b8 <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	699b      	ldr	r3, [r3, #24]
 80041b0:	f043 0208 	orr.w	r2, r3, #8
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80041b8:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80041bc:	2b01      	cmp	r3, #1
 80041be:	d105      	bne.n	80041cc <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	699a      	ldr	r2, [r3, #24]
 80041c4:	4b06      	ldr	r3, [pc, #24]	@ (80041e0 <USB_DevInit+0x2b8>)
 80041c6:	4313      	orrs	r3, r2
 80041c8:	687a      	ldr	r2, [r7, #4]
 80041ca:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80041cc:	7dfb      	ldrb	r3, [r7, #23]
}
 80041ce:	4618      	mov	r0, r3
 80041d0:	3718      	adds	r7, #24
 80041d2:	46bd      	mov	sp, r7
 80041d4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80041d8:	b004      	add	sp, #16
 80041da:	4770      	bx	lr
 80041dc:	803c3800 	.word	0x803c3800
 80041e0:	40000004 	.word	0x40000004

080041e4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80041e4:	b480      	push	{r7}
 80041e6:	b085      	sub	sp, #20
 80041e8:	af00      	add	r7, sp, #0
 80041ea:	6078      	str	r0, [r7, #4]
 80041ec:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80041ee:	2300      	movs	r3, #0
 80041f0:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	3301      	adds	r3, #1
 80041f6:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80041fe:	d901      	bls.n	8004204 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8004200:	2303      	movs	r3, #3
 8004202:	e01b      	b.n	800423c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	691b      	ldr	r3, [r3, #16]
 8004208:	2b00      	cmp	r3, #0
 800420a:	daf2      	bge.n	80041f2 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800420c:	2300      	movs	r3, #0
 800420e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004210:	683b      	ldr	r3, [r7, #0]
 8004212:	019b      	lsls	r3, r3, #6
 8004214:	f043 0220 	orr.w	r2, r3, #32
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	3301      	adds	r3, #1
 8004220:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004228:	d901      	bls.n	800422e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800422a:	2303      	movs	r3, #3
 800422c:	e006      	b.n	800423c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	691b      	ldr	r3, [r3, #16]
 8004232:	f003 0320 	and.w	r3, r3, #32
 8004236:	2b20      	cmp	r3, #32
 8004238:	d0f0      	beq.n	800421c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800423a:	2300      	movs	r3, #0
}
 800423c:	4618      	mov	r0, r3
 800423e:	3714      	adds	r7, #20
 8004240:	46bd      	mov	sp, r7
 8004242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004246:	4770      	bx	lr

08004248 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004248:	b480      	push	{r7}
 800424a:	b085      	sub	sp, #20
 800424c:	af00      	add	r7, sp, #0
 800424e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004250:	2300      	movs	r3, #0
 8004252:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	3301      	adds	r3, #1
 8004258:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004260:	d901      	bls.n	8004266 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8004262:	2303      	movs	r3, #3
 8004264:	e018      	b.n	8004298 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	691b      	ldr	r3, [r3, #16]
 800426a:	2b00      	cmp	r3, #0
 800426c:	daf2      	bge.n	8004254 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800426e:	2300      	movs	r3, #0
 8004270:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	2210      	movs	r2, #16
 8004276:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	3301      	adds	r3, #1
 800427c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004284:	d901      	bls.n	800428a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8004286:	2303      	movs	r3, #3
 8004288:	e006      	b.n	8004298 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	691b      	ldr	r3, [r3, #16]
 800428e:	f003 0310 	and.w	r3, r3, #16
 8004292:	2b10      	cmp	r3, #16
 8004294:	d0f0      	beq.n	8004278 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8004296:	2300      	movs	r3, #0
}
 8004298:	4618      	mov	r0, r3
 800429a:	3714      	adds	r7, #20
 800429c:	46bd      	mov	sp, r7
 800429e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a2:	4770      	bx	lr

080042a4 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80042a4:	b480      	push	{r7}
 80042a6:	b085      	sub	sp, #20
 80042a8:	af00      	add	r7, sp, #0
 80042aa:	6078      	str	r0, [r7, #4]
 80042ac:	460b      	mov	r3, r1
 80042ae:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80042ba:	681a      	ldr	r2, [r3, #0]
 80042bc:	78fb      	ldrb	r3, [r7, #3]
 80042be:	68f9      	ldr	r1, [r7, #12]
 80042c0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80042c4:	4313      	orrs	r3, r2
 80042c6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80042c8:	2300      	movs	r3, #0
}
 80042ca:	4618      	mov	r0, r3
 80042cc:	3714      	adds	r7, #20
 80042ce:	46bd      	mov	sp, r7
 80042d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d4:	4770      	bx	lr

080042d6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 80042d6:	b480      	push	{r7}
 80042d8:	b085      	sub	sp, #20
 80042da:	af00      	add	r7, sp, #0
 80042dc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	68fa      	ldr	r2, [r7, #12]
 80042ec:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80042f0:	f023 0303 	bic.w	r3, r3, #3
 80042f4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80042fc:	685b      	ldr	r3, [r3, #4]
 80042fe:	68fa      	ldr	r2, [r7, #12]
 8004300:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004304:	f043 0302 	orr.w	r3, r3, #2
 8004308:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800430a:	2300      	movs	r3, #0
}
 800430c:	4618      	mov	r0, r3
 800430e:	3714      	adds	r7, #20
 8004310:	46bd      	mov	sp, r7
 8004312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004316:	4770      	bx	lr

08004318 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8004318:	b480      	push	{r7}
 800431a:	b083      	sub	sp, #12
 800431c:	af00      	add	r7, sp, #0
 800431e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	695b      	ldr	r3, [r3, #20]
 8004324:	f003 0301 	and.w	r3, r3, #1
}
 8004328:	4618      	mov	r0, r3
 800432a:	370c      	adds	r7, #12
 800432c:	46bd      	mov	sp, r7
 800432e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004332:	4770      	bx	lr

08004334 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004334:	b480      	push	{r7}
 8004336:	b085      	sub	sp, #20
 8004338:	af00      	add	r7, sp, #0
 800433a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800433c:	2300      	movs	r3, #0
 800433e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	3301      	adds	r3, #1
 8004344:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800434c:	d901      	bls.n	8004352 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800434e:	2303      	movs	r3, #3
 8004350:	e022      	b.n	8004398 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	691b      	ldr	r3, [r3, #16]
 8004356:	2b00      	cmp	r3, #0
 8004358:	daf2      	bge.n	8004340 <USB_CoreReset+0xc>

  count = 10U;
 800435a:	230a      	movs	r3, #10
 800435c:	60fb      	str	r3, [r7, #12]

  /* few cycles before setting core reset */
  while (count > 0U)
 800435e:	e002      	b.n	8004366 <USB_CoreReset+0x32>
  {
    count--;
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	3b01      	subs	r3, #1
 8004364:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	2b00      	cmp	r3, #0
 800436a:	d1f9      	bne.n	8004360 <USB_CoreReset+0x2c>
  }

  /* Core Soft Reset */
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	691b      	ldr	r3, [r3, #16]
 8004370:	f043 0201 	orr.w	r2, r3, #1
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	3301      	adds	r3, #1
 800437c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004384:	d901      	bls.n	800438a <USB_CoreReset+0x56>
    {
      return HAL_TIMEOUT;
 8004386:	2303      	movs	r3, #3
 8004388:	e006      	b.n	8004398 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	691b      	ldr	r3, [r3, #16]
 800438e:	f003 0301 	and.w	r3, r3, #1
 8004392:	2b01      	cmp	r3, #1
 8004394:	d0f0      	beq.n	8004378 <USB_CoreReset+0x44>

  return HAL_OK;
 8004396:	2300      	movs	r3, #0
}
 8004398:	4618      	mov	r0, r3
 800439a:	3714      	adds	r7, #20
 800439c:	46bd      	mov	sp, r7
 800439e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a2:	4770      	bx	lr

080043a4 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80043a4:	b480      	push	{r7}
 80043a6:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 80043a8:	bf00      	nop
 80043aa:	46bd      	mov	sp, r7
 80043ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b0:	4770      	bx	lr
	...

080043b4 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80043b4:	b480      	push	{r7}
 80043b6:	b085      	sub	sp, #20
 80043b8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80043ba:	f3ef 8305 	mrs	r3, IPSR
 80043be:	60bb      	str	r3, [r7, #8]
  return(result);
 80043c0:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d10f      	bne.n	80043e6 <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80043c6:	f3ef 8310 	mrs	r3, PRIMASK
 80043ca:	607b      	str	r3, [r7, #4]
  return(result);
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d105      	bne.n	80043de <osKernelInitialize+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80043d2:	f3ef 8311 	mrs	r3, BASEPRI
 80043d6:	603b      	str	r3, [r7, #0]
  return(result);
 80043d8:	683b      	ldr	r3, [r7, #0]
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d007      	beq.n	80043ee <osKernelInitialize+0x3a>
 80043de:	4b0e      	ldr	r3, [pc, #56]	@ (8004418 <osKernelInitialize+0x64>)
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	2b02      	cmp	r3, #2
 80043e4:	d103      	bne.n	80043ee <osKernelInitialize+0x3a>
    stat = osErrorISR;
 80043e6:	f06f 0305 	mvn.w	r3, #5
 80043ea:	60fb      	str	r3, [r7, #12]
 80043ec:	e00c      	b.n	8004408 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 80043ee:	4b0a      	ldr	r3, [pc, #40]	@ (8004418 <osKernelInitialize+0x64>)
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d105      	bne.n	8004402 <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80043f6:	4b08      	ldr	r3, [pc, #32]	@ (8004418 <osKernelInitialize+0x64>)
 80043f8:	2201      	movs	r2, #1
 80043fa:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80043fc:	2300      	movs	r3, #0
 80043fe:	60fb      	str	r3, [r7, #12]
 8004400:	e002      	b.n	8004408 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8004402:	f04f 33ff 	mov.w	r3, #4294967295
 8004406:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8004408:	68fb      	ldr	r3, [r7, #12]
}
 800440a:	4618      	mov	r0, r3
 800440c:	3714      	adds	r7, #20
 800440e:	46bd      	mov	sp, r7
 8004410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004414:	4770      	bx	lr
 8004416:	bf00      	nop
 8004418:	2000083c 	.word	0x2000083c

0800441c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800441c:	b580      	push	{r7, lr}
 800441e:	b084      	sub	sp, #16
 8004420:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004422:	f3ef 8305 	mrs	r3, IPSR
 8004426:	60bb      	str	r3, [r7, #8]
  return(result);
 8004428:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800442a:	2b00      	cmp	r3, #0
 800442c:	d10f      	bne.n	800444e <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800442e:	f3ef 8310 	mrs	r3, PRIMASK
 8004432:	607b      	str	r3, [r7, #4]
  return(result);
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	2b00      	cmp	r3, #0
 8004438:	d105      	bne.n	8004446 <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800443a:	f3ef 8311 	mrs	r3, BASEPRI
 800443e:	603b      	str	r3, [r7, #0]
  return(result);
 8004440:	683b      	ldr	r3, [r7, #0]
 8004442:	2b00      	cmp	r3, #0
 8004444:	d007      	beq.n	8004456 <osKernelStart+0x3a>
 8004446:	4b0f      	ldr	r3, [pc, #60]	@ (8004484 <osKernelStart+0x68>)
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	2b02      	cmp	r3, #2
 800444c:	d103      	bne.n	8004456 <osKernelStart+0x3a>
    stat = osErrorISR;
 800444e:	f06f 0305 	mvn.w	r3, #5
 8004452:	60fb      	str	r3, [r7, #12]
 8004454:	e010      	b.n	8004478 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 8004456:	4b0b      	ldr	r3, [pc, #44]	@ (8004484 <osKernelStart+0x68>)
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	2b01      	cmp	r3, #1
 800445c:	d109      	bne.n	8004472 <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800445e:	f7ff ffa1 	bl	80043a4 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8004462:	4b08      	ldr	r3, [pc, #32]	@ (8004484 <osKernelStart+0x68>)
 8004464:	2202      	movs	r2, #2
 8004466:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8004468:	f001 fc5a 	bl	8005d20 <vTaskStartScheduler>
      stat = osOK;
 800446c:	2300      	movs	r3, #0
 800446e:	60fb      	str	r3, [r7, #12]
 8004470:	e002      	b.n	8004478 <osKernelStart+0x5c>
    } else {
      stat = osError;
 8004472:	f04f 33ff 	mov.w	r3, #4294967295
 8004476:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8004478:	68fb      	ldr	r3, [r7, #12]
}
 800447a:	4618      	mov	r0, r3
 800447c:	3710      	adds	r7, #16
 800447e:	46bd      	mov	sp, r7
 8004480:	bd80      	pop	{r7, pc}
 8004482:	bf00      	nop
 8004484:	2000083c 	.word	0x2000083c

08004488 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8004488:	b580      	push	{r7, lr}
 800448a:	b090      	sub	sp, #64	@ 0x40
 800448c:	af04      	add	r7, sp, #16
 800448e:	60f8      	str	r0, [r7, #12]
 8004490:	60b9      	str	r1, [r7, #8]
 8004492:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8004494:	2300      	movs	r3, #0
 8004496:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004498:	f3ef 8305 	mrs	r3, IPSR
 800449c:	61fb      	str	r3, [r7, #28]
  return(result);
 800449e:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	f040 808f 	bne.w	80045c4 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80044a6:	f3ef 8310 	mrs	r3, PRIMASK
 80044aa:	61bb      	str	r3, [r7, #24]
  return(result);
 80044ac:	69bb      	ldr	r3, [r7, #24]
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d105      	bne.n	80044be <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80044b2:	f3ef 8311 	mrs	r3, BASEPRI
 80044b6:	617b      	str	r3, [r7, #20]
  return(result);
 80044b8:	697b      	ldr	r3, [r7, #20]
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d003      	beq.n	80044c6 <osThreadNew+0x3e>
 80044be:	4b44      	ldr	r3, [pc, #272]	@ (80045d0 <osThreadNew+0x148>)
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	2b02      	cmp	r3, #2
 80044c4:	d07e      	beq.n	80045c4 <osThreadNew+0x13c>
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d07b      	beq.n	80045c4 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 80044cc:	2380      	movs	r3, #128	@ 0x80
 80044ce:	62bb      	str	r3, [r7, #40]	@ 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 80044d0:	2318      	movs	r3, #24
 80044d2:	627b      	str	r3, [r7, #36]	@ 0x24

    name = NULL;
 80044d4:	2300      	movs	r3, #0
 80044d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    mem  = -1;
 80044d8:	f04f 33ff 	mov.w	r3, #4294967295
 80044dc:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d045      	beq.n	8004570 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d002      	beq.n	80044f2 <osThreadNew+0x6a>
        name = attr->name;
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if (attr->priority != osPriorityNone) {
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	699b      	ldr	r3, [r3, #24]
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d002      	beq.n	8004500 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	699b      	ldr	r3, [r3, #24]
 80044fe:	627b      	str	r3, [r7, #36]	@ 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8004500:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004502:	2b00      	cmp	r3, #0
 8004504:	d008      	beq.n	8004518 <osThreadNew+0x90>
 8004506:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004508:	2b38      	cmp	r3, #56	@ 0x38
 800450a:	d805      	bhi.n	8004518 <osThreadNew+0x90>
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	685b      	ldr	r3, [r3, #4]
 8004510:	f003 0301 	and.w	r3, r3, #1
 8004514:	2b00      	cmp	r3, #0
 8004516:	d001      	beq.n	800451c <osThreadNew+0x94>
        return (NULL);
 8004518:	2300      	movs	r3, #0
 800451a:	e054      	b.n	80045c6 <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	695b      	ldr	r3, [r3, #20]
 8004520:	2b00      	cmp	r3, #0
 8004522:	d003      	beq.n	800452c <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	695b      	ldr	r3, [r3, #20]
 8004528:	089b      	lsrs	r3, r3, #2
 800452a:	62bb      	str	r3, [r7, #40]	@ 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	689b      	ldr	r3, [r3, #8]
 8004530:	2b00      	cmp	r3, #0
 8004532:	d00e      	beq.n	8004552 <osThreadNew+0xca>
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	68db      	ldr	r3, [r3, #12]
 8004538:	2ba7      	cmp	r3, #167	@ 0xa7
 800453a:	d90a      	bls.n	8004552 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004540:	2b00      	cmp	r3, #0
 8004542:	d006      	beq.n	8004552 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	695b      	ldr	r3, [r3, #20]
 8004548:	2b00      	cmp	r3, #0
 800454a:	d002      	beq.n	8004552 <osThreadNew+0xca>
        mem = 1;
 800454c:	2301      	movs	r3, #1
 800454e:	623b      	str	r3, [r7, #32]
 8004550:	e010      	b.n	8004574 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	689b      	ldr	r3, [r3, #8]
 8004556:	2b00      	cmp	r3, #0
 8004558:	d10c      	bne.n	8004574 <osThreadNew+0xec>
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	68db      	ldr	r3, [r3, #12]
 800455e:	2b00      	cmp	r3, #0
 8004560:	d108      	bne.n	8004574 <osThreadNew+0xec>
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	691b      	ldr	r3, [r3, #16]
 8004566:	2b00      	cmp	r3, #0
 8004568:	d104      	bne.n	8004574 <osThreadNew+0xec>
          mem = 0;
 800456a:	2300      	movs	r3, #0
 800456c:	623b      	str	r3, [r7, #32]
 800456e:	e001      	b.n	8004574 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 8004570:	2300      	movs	r3, #0
 8004572:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8004574:	6a3b      	ldr	r3, [r7, #32]
 8004576:	2b01      	cmp	r3, #1
 8004578:	d110      	bne.n	800459c <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 800457e:	687a      	ldr	r2, [r7, #4]
 8004580:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004582:	9202      	str	r2, [sp, #8]
 8004584:	9301      	str	r3, [sp, #4]
 8004586:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004588:	9300      	str	r3, [sp, #0]
 800458a:	68bb      	ldr	r3, [r7, #8]
 800458c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800458e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004590:	68f8      	ldr	r0, [r7, #12]
 8004592:	f001 f9c7 	bl	8005924 <xTaskCreateStatic>
 8004596:	4603      	mov	r3, r0
 8004598:	613b      	str	r3, [r7, #16]
 800459a:	e013      	b.n	80045c4 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 800459c:	6a3b      	ldr	r3, [r7, #32]
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d110      	bne.n	80045c4 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80045a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80045a4:	b29a      	uxth	r2, r3
 80045a6:	f107 0310 	add.w	r3, r7, #16
 80045aa:	9301      	str	r3, [sp, #4]
 80045ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045ae:	9300      	str	r3, [sp, #0]
 80045b0:	68bb      	ldr	r3, [r7, #8]
 80045b2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80045b4:	68f8      	ldr	r0, [r7, #12]
 80045b6:	f001 fa1b 	bl	80059f0 <xTaskCreate>
 80045ba:	4603      	mov	r3, r0
 80045bc:	2b01      	cmp	r3, #1
 80045be:	d001      	beq.n	80045c4 <osThreadNew+0x13c>
          hTask = NULL;
 80045c0:	2300      	movs	r3, #0
 80045c2:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 80045c4:	693b      	ldr	r3, [r7, #16]
}
 80045c6:	4618      	mov	r0, r3
 80045c8:	3730      	adds	r7, #48	@ 0x30
 80045ca:	46bd      	mov	sp, r7
 80045cc:	bd80      	pop	{r7, pc}
 80045ce:	bf00      	nop
 80045d0:	2000083c 	.word	0x2000083c

080045d4 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 80045d4:	b580      	push	{r7, lr}
 80045d6:	b086      	sub	sp, #24
 80045d8:	af00      	add	r7, sp, #0
 80045da:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80045dc:	f3ef 8305 	mrs	r3, IPSR
 80045e0:	613b      	str	r3, [r7, #16]
  return(result);
 80045e2:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d10f      	bne.n	8004608 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80045e8:	f3ef 8310 	mrs	r3, PRIMASK
 80045ec:	60fb      	str	r3, [r7, #12]
  return(result);
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d105      	bne.n	8004600 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80045f4:	f3ef 8311 	mrs	r3, BASEPRI
 80045f8:	60bb      	str	r3, [r7, #8]
  return(result);
 80045fa:	68bb      	ldr	r3, [r7, #8]
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d007      	beq.n	8004610 <osDelay+0x3c>
 8004600:	4b0a      	ldr	r3, [pc, #40]	@ (800462c <osDelay+0x58>)
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	2b02      	cmp	r3, #2
 8004606:	d103      	bne.n	8004610 <osDelay+0x3c>
    stat = osErrorISR;
 8004608:	f06f 0305 	mvn.w	r3, #5
 800460c:	617b      	str	r3, [r7, #20]
 800460e:	e007      	b.n	8004620 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8004610:	2300      	movs	r3, #0
 8004612:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	2b00      	cmp	r3, #0
 8004618:	d002      	beq.n	8004620 <osDelay+0x4c>
      vTaskDelay(ticks);
 800461a:	6878      	ldr	r0, [r7, #4]
 800461c:	f001 fb48 	bl	8005cb0 <vTaskDelay>
    }
  }

  return (stat);
 8004620:	697b      	ldr	r3, [r7, #20]
}
 8004622:	4618      	mov	r0, r3
 8004624:	3718      	adds	r7, #24
 8004626:	46bd      	mov	sp, r7
 8004628:	bd80      	pop	{r7, pc}
 800462a:	bf00      	nop
 800462c:	2000083c 	.word	0x2000083c

08004630 <osMutexNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 8004630:	b580      	push	{r7, lr}
 8004632:	b08a      	sub	sp, #40	@ 0x28
 8004634:	af00      	add	r7, sp, #0
 8004636:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 8004638:	2300      	movs	r3, #0
 800463a:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800463c:	f3ef 8305 	mrs	r3, IPSR
 8004640:	613b      	str	r3, [r7, #16]
  return(result);
 8004642:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ()) {
 8004644:	2b00      	cmp	r3, #0
 8004646:	f040 8085 	bne.w	8004754 <osMutexNew+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800464a:	f3ef 8310 	mrs	r3, PRIMASK
 800464e:	60fb      	str	r3, [r7, #12]
  return(result);
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	2b00      	cmp	r3, #0
 8004654:	d105      	bne.n	8004662 <osMutexNew+0x32>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004656:	f3ef 8311 	mrs	r3, BASEPRI
 800465a:	60bb      	str	r3, [r7, #8]
  return(result);
 800465c:	68bb      	ldr	r3, [r7, #8]
 800465e:	2b00      	cmp	r3, #0
 8004660:	d003      	beq.n	800466a <osMutexNew+0x3a>
 8004662:	4b3f      	ldr	r3, [pc, #252]	@ (8004760 <osMutexNew+0x130>)
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	2b02      	cmp	r3, #2
 8004668:	d074      	beq.n	8004754 <osMutexNew+0x124>
    if (attr != NULL) {
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	2b00      	cmp	r3, #0
 800466e:	d003      	beq.n	8004678 <osMutexNew+0x48>
      type = attr->attr_bits;
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	685b      	ldr	r3, [r3, #4]
 8004674:	623b      	str	r3, [r7, #32]
 8004676:	e001      	b.n	800467c <osMutexNew+0x4c>
    } else {
      type = 0U;
 8004678:	2300      	movs	r3, #0
 800467a:	623b      	str	r3, [r7, #32]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 800467c:	6a3b      	ldr	r3, [r7, #32]
 800467e:	f003 0301 	and.w	r3, r3, #1
 8004682:	2b00      	cmp	r3, #0
 8004684:	d002      	beq.n	800468c <osMutexNew+0x5c>
      rmtx = 1U;
 8004686:	2301      	movs	r3, #1
 8004688:	61fb      	str	r3, [r7, #28]
 800468a:	e001      	b.n	8004690 <osMutexNew+0x60>
    } else {
      rmtx = 0U;
 800468c:	2300      	movs	r3, #0
 800468e:	61fb      	str	r3, [r7, #28]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 8004690:	6a3b      	ldr	r3, [r7, #32]
 8004692:	f003 0308 	and.w	r3, r3, #8
 8004696:	2b00      	cmp	r3, #0
 8004698:	d15c      	bne.n	8004754 <osMutexNew+0x124>
      mem = -1;
 800469a:	f04f 33ff 	mov.w	r3, #4294967295
 800469e:	61bb      	str	r3, [r7, #24]

      if (attr != NULL) {
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d015      	beq.n	80046d2 <osMutexNew+0xa2>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	689b      	ldr	r3, [r3, #8]
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d006      	beq.n	80046bc <osMutexNew+0x8c>
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	68db      	ldr	r3, [r3, #12]
 80046b2:	2b4f      	cmp	r3, #79	@ 0x4f
 80046b4:	d902      	bls.n	80046bc <osMutexNew+0x8c>
          mem = 1;
 80046b6:	2301      	movs	r3, #1
 80046b8:	61bb      	str	r3, [r7, #24]
 80046ba:	e00c      	b.n	80046d6 <osMutexNew+0xa6>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	689b      	ldr	r3, [r3, #8]
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d108      	bne.n	80046d6 <osMutexNew+0xa6>
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	68db      	ldr	r3, [r3, #12]
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d104      	bne.n	80046d6 <osMutexNew+0xa6>
            mem = 0;
 80046cc:	2300      	movs	r3, #0
 80046ce:	61bb      	str	r3, [r7, #24]
 80046d0:	e001      	b.n	80046d6 <osMutexNew+0xa6>
          }
        }
      }
      else {
        mem = 0;
 80046d2:	2300      	movs	r3, #0
 80046d4:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 80046d6:	69bb      	ldr	r3, [r7, #24]
 80046d8:	2b01      	cmp	r3, #1
 80046da:	d112      	bne.n	8004702 <osMutexNew+0xd2>
        if (rmtx != 0U) {
 80046dc:	69fb      	ldr	r3, [r7, #28]
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d007      	beq.n	80046f2 <osMutexNew+0xc2>
          hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	689b      	ldr	r3, [r3, #8]
 80046e6:	4619      	mov	r1, r3
 80046e8:	2004      	movs	r0, #4
 80046ea:	f000 fb5c 	bl	8004da6 <xQueueCreateMutexStatic>
 80046ee:	6278      	str	r0, [r7, #36]	@ 0x24
 80046f0:	e016      	b.n	8004720 <osMutexNew+0xf0>
        }
        else {
          hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	689b      	ldr	r3, [r3, #8]
 80046f6:	4619      	mov	r1, r3
 80046f8:	2001      	movs	r0, #1
 80046fa:	f000 fb54 	bl	8004da6 <xQueueCreateMutexStatic>
 80046fe:	6278      	str	r0, [r7, #36]	@ 0x24
 8004700:	e00e      	b.n	8004720 <osMutexNew+0xf0>
        }
      }
      else {
        if (mem == 0) {
 8004702:	69bb      	ldr	r3, [r7, #24]
 8004704:	2b00      	cmp	r3, #0
 8004706:	d10b      	bne.n	8004720 <osMutexNew+0xf0>
          if (rmtx != 0U) {
 8004708:	69fb      	ldr	r3, [r7, #28]
 800470a:	2b00      	cmp	r3, #0
 800470c:	d004      	beq.n	8004718 <osMutexNew+0xe8>
            hMutex = xSemaphoreCreateRecursiveMutex ();
 800470e:	2004      	movs	r0, #4
 8004710:	f000 fb31 	bl	8004d76 <xQueueCreateMutex>
 8004714:	6278      	str	r0, [r7, #36]	@ 0x24
 8004716:	e003      	b.n	8004720 <osMutexNew+0xf0>
          } else {
            hMutex = xSemaphoreCreateMutex ();
 8004718:	2001      	movs	r0, #1
 800471a:	f000 fb2c 	bl	8004d76 <xQueueCreateMutex>
 800471e:	6278      	str	r0, [r7, #36]	@ 0x24
          }
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 8004720:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004722:	2b00      	cmp	r3, #0
 8004724:	d00c      	beq.n	8004740 <osMutexNew+0x110>
        if (attr != NULL) {
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	2b00      	cmp	r3, #0
 800472a:	d003      	beq.n	8004734 <osMutexNew+0x104>
          name = attr->name;
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	617b      	str	r3, [r7, #20]
 8004732:	e001      	b.n	8004738 <osMutexNew+0x108>
        } else {
          name = NULL;
 8004734:	2300      	movs	r3, #0
 8004736:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hMutex, name);
 8004738:	6979      	ldr	r1, [r7, #20]
 800473a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800473c:	f001 f894 	bl	8005868 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 8004740:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004742:	2b00      	cmp	r3, #0
 8004744:	d006      	beq.n	8004754 <osMutexNew+0x124>
 8004746:	69fb      	ldr	r3, [r7, #28]
 8004748:	2b00      	cmp	r3, #0
 800474a:	d003      	beq.n	8004754 <osMutexNew+0x124>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 800474c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800474e:	f043 0301 	orr.w	r3, r3, #1
 8004752:	627b      	str	r3, [r7, #36]	@ 0x24
      }
    }
  }

  return ((osMutexId_t)hMutex);
 8004754:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8004756:	4618      	mov	r0, r3
 8004758:	3728      	adds	r7, #40	@ 0x28
 800475a:	46bd      	mov	sp, r7
 800475c:	bd80      	pop	{r7, pc}
 800475e:	bf00      	nop
 8004760:	2000083c 	.word	0x2000083c

08004764 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 8004764:	b580      	push	{r7, lr}
 8004766:	b088      	sub	sp, #32
 8004768:	af00      	add	r7, sp, #0
 800476a:	6078      	str	r0, [r7, #4]
 800476c:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	f023 0301 	bic.w	r3, r3, #1
 8004774:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	f003 0301 	and.w	r3, r3, #1
 800477c:	617b      	str	r3, [r7, #20]

  stat = osOK;
 800477e:	2300      	movs	r3, #0
 8004780:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004782:	f3ef 8305 	mrs	r3, IPSR
 8004786:	613b      	str	r3, [r7, #16]
  return(result);
 8004788:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 800478a:	2b00      	cmp	r3, #0
 800478c:	d10f      	bne.n	80047ae <osMutexAcquire+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800478e:	f3ef 8310 	mrs	r3, PRIMASK
 8004792:	60fb      	str	r3, [r7, #12]
  return(result);
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	2b00      	cmp	r3, #0
 8004798:	d105      	bne.n	80047a6 <osMutexAcquire+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800479a:	f3ef 8311 	mrs	r3, BASEPRI
 800479e:	60bb      	str	r3, [r7, #8]
  return(result);
 80047a0:	68bb      	ldr	r3, [r7, #8]
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d007      	beq.n	80047b6 <osMutexAcquire+0x52>
 80047a6:	4b1d      	ldr	r3, [pc, #116]	@ (800481c <osMutexAcquire+0xb8>)
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	2b02      	cmp	r3, #2
 80047ac:	d103      	bne.n	80047b6 <osMutexAcquire+0x52>
    stat = osErrorISR;
 80047ae:	f06f 0305 	mvn.w	r3, #5
 80047b2:	61fb      	str	r3, [r7, #28]
 80047b4:	e02c      	b.n	8004810 <osMutexAcquire+0xac>
  }
  else if (hMutex == NULL) {
 80047b6:	69bb      	ldr	r3, [r7, #24]
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d103      	bne.n	80047c4 <osMutexAcquire+0x60>
    stat = osErrorParameter;
 80047bc:	f06f 0303 	mvn.w	r3, #3
 80047c0:	61fb      	str	r3, [r7, #28]
 80047c2:	e025      	b.n	8004810 <osMutexAcquire+0xac>
  }
  else {
    if (rmtx != 0U) {
 80047c4:	697b      	ldr	r3, [r7, #20]
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d011      	beq.n	80047ee <osMutexAcquire+0x8a>
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 80047ca:	6839      	ldr	r1, [r7, #0]
 80047cc:	69b8      	ldr	r0, [r7, #24]
 80047ce:	f000 fb3c 	bl	8004e4a <xQueueTakeMutexRecursive>
 80047d2:	4603      	mov	r3, r0
 80047d4:	2b01      	cmp	r3, #1
 80047d6:	d01b      	beq.n	8004810 <osMutexAcquire+0xac>
        if (timeout != 0U) {
 80047d8:	683b      	ldr	r3, [r7, #0]
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d003      	beq.n	80047e6 <osMutexAcquire+0x82>
          stat = osErrorTimeout;
 80047de:	f06f 0301 	mvn.w	r3, #1
 80047e2:	61fb      	str	r3, [r7, #28]
 80047e4:	e014      	b.n	8004810 <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 80047e6:	f06f 0302 	mvn.w	r3, #2
 80047ea:	61fb      	str	r3, [r7, #28]
 80047ec:	e010      	b.n	8004810 <osMutexAcquire+0xac>
        }
      }
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 80047ee:	6839      	ldr	r1, [r7, #0]
 80047f0:	69b8      	ldr	r0, [r7, #24]
 80047f2:	f000 fdf9 	bl	80053e8 <xQueueSemaphoreTake>
 80047f6:	4603      	mov	r3, r0
 80047f8:	2b01      	cmp	r3, #1
 80047fa:	d009      	beq.n	8004810 <osMutexAcquire+0xac>
        if (timeout != 0U) {
 80047fc:	683b      	ldr	r3, [r7, #0]
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d003      	beq.n	800480a <osMutexAcquire+0xa6>
          stat = osErrorTimeout;
 8004802:	f06f 0301 	mvn.w	r3, #1
 8004806:	61fb      	str	r3, [r7, #28]
 8004808:	e002      	b.n	8004810 <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 800480a:	f06f 0302 	mvn.w	r3, #2
 800480e:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8004810:	69fb      	ldr	r3, [r7, #28]
}
 8004812:	4618      	mov	r0, r3
 8004814:	3720      	adds	r7, #32
 8004816:	46bd      	mov	sp, r7
 8004818:	bd80      	pop	{r7, pc}
 800481a:	bf00      	nop
 800481c:	2000083c 	.word	0x2000083c

08004820 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 8004820:	b580      	push	{r7, lr}
 8004822:	b088      	sub	sp, #32
 8004824:	af00      	add	r7, sp, #0
 8004826:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	f023 0301 	bic.w	r3, r3, #1
 800482e:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	f003 0301 	and.w	r3, r3, #1
 8004836:	617b      	str	r3, [r7, #20]

  stat = osOK;
 8004838:	2300      	movs	r3, #0
 800483a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800483c:	f3ef 8305 	mrs	r3, IPSR
 8004840:	613b      	str	r3, [r7, #16]
  return(result);
 8004842:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 8004844:	2b00      	cmp	r3, #0
 8004846:	d10f      	bne.n	8004868 <osMutexRelease+0x48>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004848:	f3ef 8310 	mrs	r3, PRIMASK
 800484c:	60fb      	str	r3, [r7, #12]
  return(result);
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	2b00      	cmp	r3, #0
 8004852:	d105      	bne.n	8004860 <osMutexRelease+0x40>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004854:	f3ef 8311 	mrs	r3, BASEPRI
 8004858:	60bb      	str	r3, [r7, #8]
  return(result);
 800485a:	68bb      	ldr	r3, [r7, #8]
 800485c:	2b00      	cmp	r3, #0
 800485e:	d007      	beq.n	8004870 <osMutexRelease+0x50>
 8004860:	4b16      	ldr	r3, [pc, #88]	@ (80048bc <osMutexRelease+0x9c>)
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	2b02      	cmp	r3, #2
 8004866:	d103      	bne.n	8004870 <osMutexRelease+0x50>
    stat = osErrorISR;
 8004868:	f06f 0305 	mvn.w	r3, #5
 800486c:	61fb      	str	r3, [r7, #28]
 800486e:	e01f      	b.n	80048b0 <osMutexRelease+0x90>
  }
  else if (hMutex == NULL) {
 8004870:	69bb      	ldr	r3, [r7, #24]
 8004872:	2b00      	cmp	r3, #0
 8004874:	d103      	bne.n	800487e <osMutexRelease+0x5e>
    stat = osErrorParameter;
 8004876:	f06f 0303 	mvn.w	r3, #3
 800487a:	61fb      	str	r3, [r7, #28]
 800487c:	e018      	b.n	80048b0 <osMutexRelease+0x90>
  }
  else {
    if (rmtx != 0U) {
 800487e:	697b      	ldr	r3, [r7, #20]
 8004880:	2b00      	cmp	r3, #0
 8004882:	d009      	beq.n	8004898 <osMutexRelease+0x78>
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 8004884:	69b8      	ldr	r0, [r7, #24]
 8004886:	f000 faa9 	bl	8004ddc <xQueueGiveMutexRecursive>
 800488a:	4603      	mov	r3, r0
 800488c:	2b01      	cmp	r3, #1
 800488e:	d00f      	beq.n	80048b0 <osMutexRelease+0x90>
        stat = osErrorResource;
 8004890:	f06f 0302 	mvn.w	r3, #2
 8004894:	61fb      	str	r3, [r7, #28]
 8004896:	e00b      	b.n	80048b0 <osMutexRelease+0x90>
      }
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 8004898:	2300      	movs	r3, #0
 800489a:	2200      	movs	r2, #0
 800489c:	2100      	movs	r1, #0
 800489e:	69b8      	ldr	r0, [r7, #24]
 80048a0:	f000 fb0c 	bl	8004ebc <xQueueGenericSend>
 80048a4:	4603      	mov	r3, r0
 80048a6:	2b01      	cmp	r3, #1
 80048a8:	d002      	beq.n	80048b0 <osMutexRelease+0x90>
        stat = osErrorResource;
 80048aa:	f06f 0302 	mvn.w	r3, #2
 80048ae:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return (stat);
 80048b0:	69fb      	ldr	r3, [r7, #28]
}
 80048b2:	4618      	mov	r0, r3
 80048b4:	3720      	adds	r7, #32
 80048b6:	46bd      	mov	sp, r7
 80048b8:	bd80      	pop	{r7, pc}
 80048ba:	bf00      	nop
 80048bc:	2000083c 	.word	0x2000083c

080048c0 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80048c0:	b480      	push	{r7}
 80048c2:	b085      	sub	sp, #20
 80048c4:	af00      	add	r7, sp, #0
 80048c6:	60f8      	str	r0, [r7, #12]
 80048c8:	60b9      	str	r1, [r7, #8]
 80048ca:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	4a07      	ldr	r2, [pc, #28]	@ (80048ec <vApplicationGetIdleTaskMemory+0x2c>)
 80048d0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80048d2:	68bb      	ldr	r3, [r7, #8]
 80048d4:	4a06      	ldr	r2, [pc, #24]	@ (80048f0 <vApplicationGetIdleTaskMemory+0x30>)
 80048d6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	2280      	movs	r2, #128	@ 0x80
 80048dc:	601a      	str	r2, [r3, #0]
}
 80048de:	bf00      	nop
 80048e0:	3714      	adds	r7, #20
 80048e2:	46bd      	mov	sp, r7
 80048e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e8:	4770      	bx	lr
 80048ea:	bf00      	nop
 80048ec:	20000840 	.word	0x20000840
 80048f0:	200008e8 	.word	0x200008e8

080048f4 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80048f4:	b480      	push	{r7}
 80048f6:	b085      	sub	sp, #20
 80048f8:	af00      	add	r7, sp, #0
 80048fa:	60f8      	str	r0, [r7, #12]
 80048fc:	60b9      	str	r1, [r7, #8]
 80048fe:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	4a07      	ldr	r2, [pc, #28]	@ (8004920 <vApplicationGetTimerTaskMemory+0x2c>)
 8004904:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8004906:	68bb      	ldr	r3, [r7, #8]
 8004908:	4a06      	ldr	r2, [pc, #24]	@ (8004924 <vApplicationGetTimerTaskMemory+0x30>)
 800490a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004912:	601a      	str	r2, [r3, #0]
}
 8004914:	bf00      	nop
 8004916:	3714      	adds	r7, #20
 8004918:	46bd      	mov	sp, r7
 800491a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800491e:	4770      	bx	lr
 8004920:	20000ae8 	.word	0x20000ae8
 8004924:	20000b90 	.word	0x20000b90

08004928 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004928:	b480      	push	{r7}
 800492a:	b083      	sub	sp, #12
 800492c:	af00      	add	r7, sp, #0
 800492e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	f103 0208 	add.w	r2, r3, #8
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	f04f 32ff 	mov.w	r2, #4294967295
 8004940:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	f103 0208 	add.w	r2, r3, #8
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	f103 0208 	add.w	r2, r3, #8
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	2200      	movs	r2, #0
 800495a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800495c:	bf00      	nop
 800495e:	370c      	adds	r7, #12
 8004960:	46bd      	mov	sp, r7
 8004962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004966:	4770      	bx	lr

08004968 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004968:	b480      	push	{r7}
 800496a:	b083      	sub	sp, #12
 800496c:	af00      	add	r7, sp, #0
 800496e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	2200      	movs	r2, #0
 8004974:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004976:	bf00      	nop
 8004978:	370c      	adds	r7, #12
 800497a:	46bd      	mov	sp, r7
 800497c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004980:	4770      	bx	lr

08004982 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004982:	b480      	push	{r7}
 8004984:	b085      	sub	sp, #20
 8004986:	af00      	add	r7, sp, #0
 8004988:	6078      	str	r0, [r7, #4]
 800498a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	685b      	ldr	r3, [r3, #4]
 8004990:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004992:	683b      	ldr	r3, [r7, #0]
 8004994:	68fa      	ldr	r2, [r7, #12]
 8004996:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	689a      	ldr	r2, [r3, #8]
 800499c:	683b      	ldr	r3, [r7, #0]
 800499e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	689b      	ldr	r3, [r3, #8]
 80049a4:	683a      	ldr	r2, [r7, #0]
 80049a6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	683a      	ldr	r2, [r7, #0]
 80049ac:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80049ae:	683b      	ldr	r3, [r7, #0]
 80049b0:	687a      	ldr	r2, [r7, #4]
 80049b2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	1c5a      	adds	r2, r3, #1
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	601a      	str	r2, [r3, #0]
}
 80049be:	bf00      	nop
 80049c0:	3714      	adds	r7, #20
 80049c2:	46bd      	mov	sp, r7
 80049c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c8:	4770      	bx	lr

080049ca <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80049ca:	b480      	push	{r7}
 80049cc:	b085      	sub	sp, #20
 80049ce:	af00      	add	r7, sp, #0
 80049d0:	6078      	str	r0, [r7, #4]
 80049d2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80049d4:	683b      	ldr	r3, [r7, #0]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80049da:	68bb      	ldr	r3, [r7, #8]
 80049dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049e0:	d103      	bne.n	80049ea <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	691b      	ldr	r3, [r3, #16]
 80049e6:	60fb      	str	r3, [r7, #12]
 80049e8:	e00c      	b.n	8004a04 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	3308      	adds	r3, #8
 80049ee:	60fb      	str	r3, [r7, #12]
 80049f0:	e002      	b.n	80049f8 <vListInsert+0x2e>
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	685b      	ldr	r3, [r3, #4]
 80049f6:	60fb      	str	r3, [r7, #12]
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	685b      	ldr	r3, [r3, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	68ba      	ldr	r2, [r7, #8]
 8004a00:	429a      	cmp	r2, r3
 8004a02:	d2f6      	bcs.n	80049f2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	685a      	ldr	r2, [r3, #4]
 8004a08:	683b      	ldr	r3, [r7, #0]
 8004a0a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004a0c:	683b      	ldr	r3, [r7, #0]
 8004a0e:	685b      	ldr	r3, [r3, #4]
 8004a10:	683a      	ldr	r2, [r7, #0]
 8004a12:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004a14:	683b      	ldr	r3, [r7, #0]
 8004a16:	68fa      	ldr	r2, [r7, #12]
 8004a18:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	683a      	ldr	r2, [r7, #0]
 8004a1e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8004a20:	683b      	ldr	r3, [r7, #0]
 8004a22:	687a      	ldr	r2, [r7, #4]
 8004a24:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	1c5a      	adds	r2, r3, #1
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	601a      	str	r2, [r3, #0]
}
 8004a30:	bf00      	nop
 8004a32:	3714      	adds	r7, #20
 8004a34:	46bd      	mov	sp, r7
 8004a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a3a:	4770      	bx	lr

08004a3c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004a3c:	b480      	push	{r7}
 8004a3e:	b085      	sub	sp, #20
 8004a40:	af00      	add	r7, sp, #0
 8004a42:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	691b      	ldr	r3, [r3, #16]
 8004a48:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	685b      	ldr	r3, [r3, #4]
 8004a4e:	687a      	ldr	r2, [r7, #4]
 8004a50:	6892      	ldr	r2, [r2, #8]
 8004a52:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	689b      	ldr	r3, [r3, #8]
 8004a58:	687a      	ldr	r2, [r7, #4]
 8004a5a:	6852      	ldr	r2, [r2, #4]
 8004a5c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	685b      	ldr	r3, [r3, #4]
 8004a62:	687a      	ldr	r2, [r7, #4]
 8004a64:	429a      	cmp	r2, r3
 8004a66:	d103      	bne.n	8004a70 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	689a      	ldr	r2, [r3, #8]
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	2200      	movs	r2, #0
 8004a74:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	1e5a      	subs	r2, r3, #1
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	681b      	ldr	r3, [r3, #0]
}
 8004a84:	4618      	mov	r0, r3
 8004a86:	3714      	adds	r7, #20
 8004a88:	46bd      	mov	sp, r7
 8004a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a8e:	4770      	bx	lr

08004a90 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004a90:	b580      	push	{r7, lr}
 8004a92:	b084      	sub	sp, #16
 8004a94:	af00      	add	r7, sp, #0
 8004a96:	6078      	str	r0, [r7, #4]
 8004a98:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d10d      	bne.n	8004ac0 <xQueueGenericReset+0x30>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004aa4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004aa8:	b672      	cpsid	i
 8004aaa:	f383 8811 	msr	BASEPRI, r3
 8004aae:	f3bf 8f6f 	isb	sy
 8004ab2:	f3bf 8f4f 	dsb	sy
 8004ab6:	b662      	cpsie	i
 8004ab8:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8004aba:	bf00      	nop
 8004abc:	bf00      	nop
 8004abe:	e7fd      	b.n	8004abc <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 8004ac0:	f002 fc1c 	bl	80072fc <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	681a      	ldr	r2, [r3, #0]
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004acc:	68f9      	ldr	r1, [r7, #12]
 8004ace:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8004ad0:	fb01 f303 	mul.w	r3, r1, r3
 8004ad4:	441a      	add	r2, r3
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	2200      	movs	r2, #0
 8004ade:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	681a      	ldr	r2, [r3, #0]
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	681a      	ldr	r2, [r3, #0]
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004af0:	3b01      	subs	r3, #1
 8004af2:	68f9      	ldr	r1, [r7, #12]
 8004af4:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8004af6:	fb01 f303 	mul.w	r3, r1, r3
 8004afa:	441a      	add	r2, r3
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	22ff      	movs	r2, #255	@ 0xff
 8004b04:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	22ff      	movs	r2, #255	@ 0xff
 8004b0c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8004b10:	683b      	ldr	r3, [r7, #0]
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d114      	bne.n	8004b40 <xQueueGenericReset+0xb0>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	691b      	ldr	r3, [r3, #16]
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d01a      	beq.n	8004b54 <xQueueGenericReset+0xc4>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	3310      	adds	r3, #16
 8004b22:	4618      	mov	r0, r3
 8004b24:	f001 fba8 	bl	8006278 <xTaskRemoveFromEventList>
 8004b28:	4603      	mov	r3, r0
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d012      	beq.n	8004b54 <xQueueGenericReset+0xc4>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8004b2e:	4b0d      	ldr	r3, [pc, #52]	@ (8004b64 <xQueueGenericReset+0xd4>)
 8004b30:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004b34:	601a      	str	r2, [r3, #0]
 8004b36:	f3bf 8f4f 	dsb	sy
 8004b3a:	f3bf 8f6f 	isb	sy
 8004b3e:	e009      	b.n	8004b54 <xQueueGenericReset+0xc4>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	3310      	adds	r3, #16
 8004b44:	4618      	mov	r0, r3
 8004b46:	f7ff feef 	bl	8004928 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	3324      	adds	r3, #36	@ 0x24
 8004b4e:	4618      	mov	r0, r3
 8004b50:	f7ff feea 	bl	8004928 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8004b54:	f002 fc08 	bl	8007368 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8004b58:	2301      	movs	r3, #1
}
 8004b5a:	4618      	mov	r0, r3
 8004b5c:	3710      	adds	r7, #16
 8004b5e:	46bd      	mov	sp, r7
 8004b60:	bd80      	pop	{r7, pc}
 8004b62:	bf00      	nop
 8004b64:	e000ed04 	.word	0xe000ed04

08004b68 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8004b68:	b580      	push	{r7, lr}
 8004b6a:	b08e      	sub	sp, #56	@ 0x38
 8004b6c:	af02      	add	r7, sp, #8
 8004b6e:	60f8      	str	r0, [r7, #12]
 8004b70:	60b9      	str	r1, [r7, #8]
 8004b72:	607a      	str	r2, [r7, #4]
 8004b74:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d10d      	bne.n	8004b98 <xQueueGenericCreateStatic+0x30>
	__asm volatile
 8004b7c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b80:	b672      	cpsid	i
 8004b82:	f383 8811 	msr	BASEPRI, r3
 8004b86:	f3bf 8f6f 	isb	sy
 8004b8a:	f3bf 8f4f 	dsb	sy
 8004b8e:	b662      	cpsie	i
 8004b90:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8004b92:	bf00      	nop
 8004b94:	bf00      	nop
 8004b96:	e7fd      	b.n	8004b94 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8004b98:	683b      	ldr	r3, [r7, #0]
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d10d      	bne.n	8004bba <xQueueGenericCreateStatic+0x52>
	__asm volatile
 8004b9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ba2:	b672      	cpsid	i
 8004ba4:	f383 8811 	msr	BASEPRI, r3
 8004ba8:	f3bf 8f6f 	isb	sy
 8004bac:	f3bf 8f4f 	dsb	sy
 8004bb0:	b662      	cpsie	i
 8004bb2:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8004bb4:	bf00      	nop
 8004bb6:	bf00      	nop
 8004bb8:	e7fd      	b.n	8004bb6 <xQueueGenericCreateStatic+0x4e>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d002      	beq.n	8004bc6 <xQueueGenericCreateStatic+0x5e>
 8004bc0:	68bb      	ldr	r3, [r7, #8]
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d001      	beq.n	8004bca <xQueueGenericCreateStatic+0x62>
 8004bc6:	2301      	movs	r3, #1
 8004bc8:	e000      	b.n	8004bcc <xQueueGenericCreateStatic+0x64>
 8004bca:	2300      	movs	r3, #0
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d10d      	bne.n	8004bec <xQueueGenericCreateStatic+0x84>
	__asm volatile
 8004bd0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004bd4:	b672      	cpsid	i
 8004bd6:	f383 8811 	msr	BASEPRI, r3
 8004bda:	f3bf 8f6f 	isb	sy
 8004bde:	f3bf 8f4f 	dsb	sy
 8004be2:	b662      	cpsie	i
 8004be4:	623b      	str	r3, [r7, #32]
}
 8004be6:	bf00      	nop
 8004be8:	bf00      	nop
 8004bea:	e7fd      	b.n	8004be8 <xQueueGenericCreateStatic+0x80>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d102      	bne.n	8004bf8 <xQueueGenericCreateStatic+0x90>
 8004bf2:	68bb      	ldr	r3, [r7, #8]
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d101      	bne.n	8004bfc <xQueueGenericCreateStatic+0x94>
 8004bf8:	2301      	movs	r3, #1
 8004bfa:	e000      	b.n	8004bfe <xQueueGenericCreateStatic+0x96>
 8004bfc:	2300      	movs	r3, #0
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d10d      	bne.n	8004c1e <xQueueGenericCreateStatic+0xb6>
	__asm volatile
 8004c02:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c06:	b672      	cpsid	i
 8004c08:	f383 8811 	msr	BASEPRI, r3
 8004c0c:	f3bf 8f6f 	isb	sy
 8004c10:	f3bf 8f4f 	dsb	sy
 8004c14:	b662      	cpsie	i
 8004c16:	61fb      	str	r3, [r7, #28]
}
 8004c18:	bf00      	nop
 8004c1a:	bf00      	nop
 8004c1c:	e7fd      	b.n	8004c1a <xQueueGenericCreateStatic+0xb2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8004c1e:	2350      	movs	r3, #80	@ 0x50
 8004c20:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8004c22:	697b      	ldr	r3, [r7, #20]
 8004c24:	2b50      	cmp	r3, #80	@ 0x50
 8004c26:	d00d      	beq.n	8004c44 <xQueueGenericCreateStatic+0xdc>
	__asm volatile
 8004c28:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c2c:	b672      	cpsid	i
 8004c2e:	f383 8811 	msr	BASEPRI, r3
 8004c32:	f3bf 8f6f 	isb	sy
 8004c36:	f3bf 8f4f 	dsb	sy
 8004c3a:	b662      	cpsie	i
 8004c3c:	61bb      	str	r3, [r7, #24]
}
 8004c3e:	bf00      	nop
 8004c40:	bf00      	nop
 8004c42:	e7fd      	b.n	8004c40 <xQueueGenericCreateStatic+0xd8>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8004c44:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004c46:	683b      	ldr	r3, [r7, #0]
 8004c48:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8004c4a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d00d      	beq.n	8004c6c <xQueueGenericCreateStatic+0x104>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8004c50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004c52:	2201      	movs	r2, #1
 8004c54:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004c58:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8004c5c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004c5e:	9300      	str	r3, [sp, #0]
 8004c60:	4613      	mov	r3, r2
 8004c62:	687a      	ldr	r2, [r7, #4]
 8004c64:	68b9      	ldr	r1, [r7, #8]
 8004c66:	68f8      	ldr	r0, [r7, #12]
 8004c68:	f000 f848 	bl	8004cfc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004c6c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8004c6e:	4618      	mov	r0, r3
 8004c70:	3730      	adds	r7, #48	@ 0x30
 8004c72:	46bd      	mov	sp, r7
 8004c74:	bd80      	pop	{r7, pc}

08004c76 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8004c76:	b580      	push	{r7, lr}
 8004c78:	b08a      	sub	sp, #40	@ 0x28
 8004c7a:	af02      	add	r7, sp, #8
 8004c7c:	60f8      	str	r0, [r7, #12]
 8004c7e:	60b9      	str	r1, [r7, #8]
 8004c80:	4613      	mov	r3, r2
 8004c82:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d10d      	bne.n	8004ca6 <xQueueGenericCreate+0x30>
	__asm volatile
 8004c8a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c8e:	b672      	cpsid	i
 8004c90:	f383 8811 	msr	BASEPRI, r3
 8004c94:	f3bf 8f6f 	isb	sy
 8004c98:	f3bf 8f4f 	dsb	sy
 8004c9c:	b662      	cpsie	i
 8004c9e:	613b      	str	r3, [r7, #16]
}
 8004ca0:	bf00      	nop
 8004ca2:	bf00      	nop
 8004ca4:	e7fd      	b.n	8004ca2 <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8004ca6:	68bb      	ldr	r3, [r7, #8]
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d102      	bne.n	8004cb2 <xQueueGenericCreate+0x3c>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8004cac:	2300      	movs	r3, #0
 8004cae:	61fb      	str	r3, [r7, #28]
 8004cb0:	e004      	b.n	8004cbc <xQueueGenericCreate+0x46>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	68ba      	ldr	r2, [r7, #8]
 8004cb6:	fb02 f303 	mul.w	r3, r2, r3
 8004cba:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8004cbc:	69fb      	ldr	r3, [r7, #28]
 8004cbe:	3350      	adds	r3, #80	@ 0x50
 8004cc0:	4618      	mov	r0, r3
 8004cc2:	f002 fc49 	bl	8007558 <pvPortMalloc>
 8004cc6:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8004cc8:	69bb      	ldr	r3, [r7, #24]
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d011      	beq.n	8004cf2 <xQueueGenericCreate+0x7c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8004cce:	69bb      	ldr	r3, [r7, #24]
 8004cd0:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004cd2:	697b      	ldr	r3, [r7, #20]
 8004cd4:	3350      	adds	r3, #80	@ 0x50
 8004cd6:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8004cd8:	69bb      	ldr	r3, [r7, #24]
 8004cda:	2200      	movs	r2, #0
 8004cdc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004ce0:	79fa      	ldrb	r2, [r7, #7]
 8004ce2:	69bb      	ldr	r3, [r7, #24]
 8004ce4:	9300      	str	r3, [sp, #0]
 8004ce6:	4613      	mov	r3, r2
 8004ce8:	697a      	ldr	r2, [r7, #20]
 8004cea:	68b9      	ldr	r1, [r7, #8]
 8004cec:	68f8      	ldr	r0, [r7, #12]
 8004cee:	f000 f805 	bl	8004cfc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004cf2:	69bb      	ldr	r3, [r7, #24]
	}
 8004cf4:	4618      	mov	r0, r3
 8004cf6:	3720      	adds	r7, #32
 8004cf8:	46bd      	mov	sp, r7
 8004cfa:	bd80      	pop	{r7, pc}

08004cfc <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004cfc:	b580      	push	{r7, lr}
 8004cfe:	b084      	sub	sp, #16
 8004d00:	af00      	add	r7, sp, #0
 8004d02:	60f8      	str	r0, [r7, #12]
 8004d04:	60b9      	str	r1, [r7, #8]
 8004d06:	607a      	str	r2, [r7, #4]
 8004d08:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8004d0a:	68bb      	ldr	r3, [r7, #8]
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d103      	bne.n	8004d18 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004d10:	69bb      	ldr	r3, [r7, #24]
 8004d12:	69ba      	ldr	r2, [r7, #24]
 8004d14:	601a      	str	r2, [r3, #0]
 8004d16:	e002      	b.n	8004d1e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004d18:	69bb      	ldr	r3, [r7, #24]
 8004d1a:	687a      	ldr	r2, [r7, #4]
 8004d1c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8004d1e:	69bb      	ldr	r3, [r7, #24]
 8004d20:	68fa      	ldr	r2, [r7, #12]
 8004d22:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004d24:	69bb      	ldr	r3, [r7, #24]
 8004d26:	68ba      	ldr	r2, [r7, #8]
 8004d28:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004d2a:	2101      	movs	r1, #1
 8004d2c:	69b8      	ldr	r0, [r7, #24]
 8004d2e:	f7ff feaf 	bl	8004a90 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8004d32:	69bb      	ldr	r3, [r7, #24]
 8004d34:	78fa      	ldrb	r2, [r7, #3]
 8004d36:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8004d3a:	bf00      	nop
 8004d3c:	3710      	adds	r7, #16
 8004d3e:	46bd      	mov	sp, r7
 8004d40:	bd80      	pop	{r7, pc}

08004d42 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8004d42:	b580      	push	{r7, lr}
 8004d44:	b082      	sub	sp, #8
 8004d46:	af00      	add	r7, sp, #0
 8004d48:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d00e      	beq.n	8004d6e <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	2200      	movs	r2, #0
 8004d54:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	2200      	movs	r2, #0
 8004d5a:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	2200      	movs	r2, #0
 8004d60:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8004d62:	2300      	movs	r3, #0
 8004d64:	2200      	movs	r2, #0
 8004d66:	2100      	movs	r1, #0
 8004d68:	6878      	ldr	r0, [r7, #4]
 8004d6a:	f000 f8a7 	bl	8004ebc <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8004d6e:	bf00      	nop
 8004d70:	3708      	adds	r7, #8
 8004d72:	46bd      	mov	sp, r7
 8004d74:	bd80      	pop	{r7, pc}

08004d76 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8004d76:	b580      	push	{r7, lr}
 8004d78:	b086      	sub	sp, #24
 8004d7a:	af00      	add	r7, sp, #0
 8004d7c:	4603      	mov	r3, r0
 8004d7e:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8004d80:	2301      	movs	r3, #1
 8004d82:	617b      	str	r3, [r7, #20]
 8004d84:	2300      	movs	r3, #0
 8004d86:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8004d88:	79fb      	ldrb	r3, [r7, #7]
 8004d8a:	461a      	mov	r2, r3
 8004d8c:	6939      	ldr	r1, [r7, #16]
 8004d8e:	6978      	ldr	r0, [r7, #20]
 8004d90:	f7ff ff71 	bl	8004c76 <xQueueGenericCreate>
 8004d94:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8004d96:	68f8      	ldr	r0, [r7, #12]
 8004d98:	f7ff ffd3 	bl	8004d42 <prvInitialiseMutex>

		return xNewQueue;
 8004d9c:	68fb      	ldr	r3, [r7, #12]
	}
 8004d9e:	4618      	mov	r0, r3
 8004da0:	3718      	adds	r7, #24
 8004da2:	46bd      	mov	sp, r7
 8004da4:	bd80      	pop	{r7, pc}

08004da6 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8004da6:	b580      	push	{r7, lr}
 8004da8:	b088      	sub	sp, #32
 8004daa:	af02      	add	r7, sp, #8
 8004dac:	4603      	mov	r3, r0
 8004dae:	6039      	str	r1, [r7, #0]
 8004db0:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8004db2:	2301      	movs	r3, #1
 8004db4:	617b      	str	r3, [r7, #20]
 8004db6:	2300      	movs	r3, #0
 8004db8:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8004dba:	79fb      	ldrb	r3, [r7, #7]
 8004dbc:	9300      	str	r3, [sp, #0]
 8004dbe:	683b      	ldr	r3, [r7, #0]
 8004dc0:	2200      	movs	r2, #0
 8004dc2:	6939      	ldr	r1, [r7, #16]
 8004dc4:	6978      	ldr	r0, [r7, #20]
 8004dc6:	f7ff fecf 	bl	8004b68 <xQueueGenericCreateStatic>
 8004dca:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8004dcc:	68f8      	ldr	r0, [r7, #12]
 8004dce:	f7ff ffb8 	bl	8004d42 <prvInitialiseMutex>

		return xNewQueue;
 8004dd2:	68fb      	ldr	r3, [r7, #12]
	}
 8004dd4:	4618      	mov	r0, r3
 8004dd6:	3718      	adds	r7, #24
 8004dd8:	46bd      	mov	sp, r7
 8004dda:	bd80      	pop	{r7, pc}

08004ddc <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 8004ddc:	b590      	push	{r4, r7, lr}
 8004dde:	b087      	sub	sp, #28
 8004de0:	af00      	add	r7, sp, #0
 8004de2:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8004de8:	693b      	ldr	r3, [r7, #16]
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d10d      	bne.n	8004e0a <xQueueGiveMutexRecursive+0x2e>
	__asm volatile
 8004dee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004df2:	b672      	cpsid	i
 8004df4:	f383 8811 	msr	BASEPRI, r3
 8004df8:	f3bf 8f6f 	isb	sy
 8004dfc:	f3bf 8f4f 	dsb	sy
 8004e00:	b662      	cpsie	i
 8004e02:	60fb      	str	r3, [r7, #12]
}
 8004e04:	bf00      	nop
 8004e06:	bf00      	nop
 8004e08:	e7fd      	b.n	8004e06 <xQueueGiveMutexRecursive+0x2a>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8004e0a:	693b      	ldr	r3, [r7, #16]
 8004e0c:	689c      	ldr	r4, [r3, #8]
 8004e0e:	f001 fc01 	bl	8006614 <xTaskGetCurrentTaskHandle>
 8004e12:	4603      	mov	r3, r0
 8004e14:	429c      	cmp	r4, r3
 8004e16:	d111      	bne.n	8004e3c <xQueueGiveMutexRecursive+0x60>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 8004e18:	693b      	ldr	r3, [r7, #16]
 8004e1a:	68db      	ldr	r3, [r3, #12]
 8004e1c:	1e5a      	subs	r2, r3, #1
 8004e1e:	693b      	ldr	r3, [r7, #16]
 8004e20:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 8004e22:	693b      	ldr	r3, [r7, #16]
 8004e24:	68db      	ldr	r3, [r3, #12]
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d105      	bne.n	8004e36 <xQueueGiveMutexRecursive+0x5a>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 8004e2a:	2300      	movs	r3, #0
 8004e2c:	2200      	movs	r2, #0
 8004e2e:	2100      	movs	r1, #0
 8004e30:	6938      	ldr	r0, [r7, #16]
 8004e32:	f000 f843 	bl	8004ebc <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 8004e36:	2301      	movs	r3, #1
 8004e38:	617b      	str	r3, [r7, #20]
 8004e3a:	e001      	b.n	8004e40 <xQueueGiveMutexRecursive+0x64>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 8004e3c:	2300      	movs	r3, #0
 8004e3e:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 8004e40:	697b      	ldr	r3, [r7, #20]
	}
 8004e42:	4618      	mov	r0, r3
 8004e44:	371c      	adds	r7, #28
 8004e46:	46bd      	mov	sp, r7
 8004e48:	bd90      	pop	{r4, r7, pc}

08004e4a <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 8004e4a:	b590      	push	{r4, r7, lr}
 8004e4c:	b087      	sub	sp, #28
 8004e4e:	af00      	add	r7, sp, #0
 8004e50:	6078      	str	r0, [r7, #4]
 8004e52:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8004e58:	693b      	ldr	r3, [r7, #16]
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d10d      	bne.n	8004e7a <xQueueTakeMutexRecursive+0x30>
	__asm volatile
 8004e5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e62:	b672      	cpsid	i
 8004e64:	f383 8811 	msr	BASEPRI, r3
 8004e68:	f3bf 8f6f 	isb	sy
 8004e6c:	f3bf 8f4f 	dsb	sy
 8004e70:	b662      	cpsie	i
 8004e72:	60fb      	str	r3, [r7, #12]
}
 8004e74:	bf00      	nop
 8004e76:	bf00      	nop
 8004e78:	e7fd      	b.n	8004e76 <xQueueTakeMutexRecursive+0x2c>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8004e7a:	693b      	ldr	r3, [r7, #16]
 8004e7c:	689c      	ldr	r4, [r3, #8]
 8004e7e:	f001 fbc9 	bl	8006614 <xTaskGetCurrentTaskHandle>
 8004e82:	4603      	mov	r3, r0
 8004e84:	429c      	cmp	r4, r3
 8004e86:	d107      	bne.n	8004e98 <xQueueTakeMutexRecursive+0x4e>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8004e88:	693b      	ldr	r3, [r7, #16]
 8004e8a:	68db      	ldr	r3, [r3, #12]
 8004e8c:	1c5a      	adds	r2, r3, #1
 8004e8e:	693b      	ldr	r3, [r7, #16]
 8004e90:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 8004e92:	2301      	movs	r3, #1
 8004e94:	617b      	str	r3, [r7, #20]
 8004e96:	e00c      	b.n	8004eb2 <xQueueTakeMutexRecursive+0x68>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 8004e98:	6839      	ldr	r1, [r7, #0]
 8004e9a:	6938      	ldr	r0, [r7, #16]
 8004e9c:	f000 faa4 	bl	80053e8 <xQueueSemaphoreTake>
 8004ea0:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 8004ea2:	697b      	ldr	r3, [r7, #20]
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d004      	beq.n	8004eb2 <xQueueTakeMutexRecursive+0x68>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8004ea8:	693b      	ldr	r3, [r7, #16]
 8004eaa:	68db      	ldr	r3, [r3, #12]
 8004eac:	1c5a      	adds	r2, r3, #1
 8004eae:	693b      	ldr	r3, [r7, #16]
 8004eb0:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 8004eb2:	697b      	ldr	r3, [r7, #20]
	}
 8004eb4:	4618      	mov	r0, r3
 8004eb6:	371c      	adds	r7, #28
 8004eb8:	46bd      	mov	sp, r7
 8004eba:	bd90      	pop	{r4, r7, pc}

08004ebc <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004ebc:	b580      	push	{r7, lr}
 8004ebe:	b08e      	sub	sp, #56	@ 0x38
 8004ec0:	af00      	add	r7, sp, #0
 8004ec2:	60f8      	str	r0, [r7, #12]
 8004ec4:	60b9      	str	r1, [r7, #8]
 8004ec6:	607a      	str	r2, [r7, #4]
 8004ec8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8004eca:	2300      	movs	r3, #0
 8004ecc:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8004ed2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d10d      	bne.n	8004ef4 <xQueueGenericSend+0x38>
	__asm volatile
 8004ed8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004edc:	b672      	cpsid	i
 8004ede:	f383 8811 	msr	BASEPRI, r3
 8004ee2:	f3bf 8f6f 	isb	sy
 8004ee6:	f3bf 8f4f 	dsb	sy
 8004eea:	b662      	cpsie	i
 8004eec:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8004eee:	bf00      	nop
 8004ef0:	bf00      	nop
 8004ef2:	e7fd      	b.n	8004ef0 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004ef4:	68bb      	ldr	r3, [r7, #8]
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d103      	bne.n	8004f02 <xQueueGenericSend+0x46>
 8004efa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004efc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d101      	bne.n	8004f06 <xQueueGenericSend+0x4a>
 8004f02:	2301      	movs	r3, #1
 8004f04:	e000      	b.n	8004f08 <xQueueGenericSend+0x4c>
 8004f06:	2300      	movs	r3, #0
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d10d      	bne.n	8004f28 <xQueueGenericSend+0x6c>
	__asm volatile
 8004f0c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f10:	b672      	cpsid	i
 8004f12:	f383 8811 	msr	BASEPRI, r3
 8004f16:	f3bf 8f6f 	isb	sy
 8004f1a:	f3bf 8f4f 	dsb	sy
 8004f1e:	b662      	cpsie	i
 8004f20:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8004f22:	bf00      	nop
 8004f24:	bf00      	nop
 8004f26:	e7fd      	b.n	8004f24 <xQueueGenericSend+0x68>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004f28:	683b      	ldr	r3, [r7, #0]
 8004f2a:	2b02      	cmp	r3, #2
 8004f2c:	d103      	bne.n	8004f36 <xQueueGenericSend+0x7a>
 8004f2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f30:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004f32:	2b01      	cmp	r3, #1
 8004f34:	d101      	bne.n	8004f3a <xQueueGenericSend+0x7e>
 8004f36:	2301      	movs	r3, #1
 8004f38:	e000      	b.n	8004f3c <xQueueGenericSend+0x80>
 8004f3a:	2300      	movs	r3, #0
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d10d      	bne.n	8004f5c <xQueueGenericSend+0xa0>
	__asm volatile
 8004f40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f44:	b672      	cpsid	i
 8004f46:	f383 8811 	msr	BASEPRI, r3
 8004f4a:	f3bf 8f6f 	isb	sy
 8004f4e:	f3bf 8f4f 	dsb	sy
 8004f52:	b662      	cpsie	i
 8004f54:	623b      	str	r3, [r7, #32]
}
 8004f56:	bf00      	nop
 8004f58:	bf00      	nop
 8004f5a:	e7fd      	b.n	8004f58 <xQueueGenericSend+0x9c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004f5c:	f001 fb6a 	bl	8006634 <xTaskGetSchedulerState>
 8004f60:	4603      	mov	r3, r0
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d102      	bne.n	8004f6c <xQueueGenericSend+0xb0>
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d101      	bne.n	8004f70 <xQueueGenericSend+0xb4>
 8004f6c:	2301      	movs	r3, #1
 8004f6e:	e000      	b.n	8004f72 <xQueueGenericSend+0xb6>
 8004f70:	2300      	movs	r3, #0
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d10d      	bne.n	8004f92 <xQueueGenericSend+0xd6>
	__asm volatile
 8004f76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f7a:	b672      	cpsid	i
 8004f7c:	f383 8811 	msr	BASEPRI, r3
 8004f80:	f3bf 8f6f 	isb	sy
 8004f84:	f3bf 8f4f 	dsb	sy
 8004f88:	b662      	cpsie	i
 8004f8a:	61fb      	str	r3, [r7, #28]
}
 8004f8c:	bf00      	nop
 8004f8e:	bf00      	nop
 8004f90:	e7fd      	b.n	8004f8e <xQueueGenericSend+0xd2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004f92:	f002 f9b3 	bl	80072fc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004f96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f98:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004f9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f9c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004f9e:	429a      	cmp	r2, r3
 8004fa0:	d302      	bcc.n	8004fa8 <xQueueGenericSend+0xec>
 8004fa2:	683b      	ldr	r3, [r7, #0]
 8004fa4:	2b02      	cmp	r3, #2
 8004fa6:	d129      	bne.n	8004ffc <xQueueGenericSend+0x140>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004fa8:	683a      	ldr	r2, [r7, #0]
 8004faa:	68b9      	ldr	r1, [r7, #8]
 8004fac:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004fae:	f000 fb4b 	bl	8005648 <prvCopyDataToQueue>
 8004fb2:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004fb4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004fb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d010      	beq.n	8004fde <xQueueGenericSend+0x122>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004fbc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004fbe:	3324      	adds	r3, #36	@ 0x24
 8004fc0:	4618      	mov	r0, r3
 8004fc2:	f001 f959 	bl	8006278 <xTaskRemoveFromEventList>
 8004fc6:	4603      	mov	r3, r0
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d013      	beq.n	8004ff4 <xQueueGenericSend+0x138>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8004fcc:	4b3f      	ldr	r3, [pc, #252]	@ (80050cc <xQueueGenericSend+0x210>)
 8004fce:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004fd2:	601a      	str	r2, [r3, #0]
 8004fd4:	f3bf 8f4f 	dsb	sy
 8004fd8:	f3bf 8f6f 	isb	sy
 8004fdc:	e00a      	b.n	8004ff4 <xQueueGenericSend+0x138>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8004fde:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d007      	beq.n	8004ff4 <xQueueGenericSend+0x138>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8004fe4:	4b39      	ldr	r3, [pc, #228]	@ (80050cc <xQueueGenericSend+0x210>)
 8004fe6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004fea:	601a      	str	r2, [r3, #0]
 8004fec:	f3bf 8f4f 	dsb	sy
 8004ff0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8004ff4:	f002 f9b8 	bl	8007368 <vPortExitCritical>
				return pdPASS;
 8004ff8:	2301      	movs	r3, #1
 8004ffa:	e063      	b.n	80050c4 <xQueueGenericSend+0x208>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d103      	bne.n	800500a <xQueueGenericSend+0x14e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005002:	f002 f9b1 	bl	8007368 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8005006:	2300      	movs	r3, #0
 8005008:	e05c      	b.n	80050c4 <xQueueGenericSend+0x208>
				}
				else if( xEntryTimeSet == pdFALSE )
 800500a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800500c:	2b00      	cmp	r3, #0
 800500e:	d106      	bne.n	800501e <xQueueGenericSend+0x162>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005010:	f107 0314 	add.w	r3, r7, #20
 8005014:	4618      	mov	r0, r3
 8005016:	f001 f995 	bl	8006344 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800501a:	2301      	movs	r3, #1
 800501c:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800501e:	f002 f9a3 	bl	8007368 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005022:	f000 fef1 	bl	8005e08 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005026:	f002 f969 	bl	80072fc <vPortEnterCritical>
 800502a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800502c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005030:	b25b      	sxtb	r3, r3
 8005032:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005036:	d103      	bne.n	8005040 <xQueueGenericSend+0x184>
 8005038:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800503a:	2200      	movs	r2, #0
 800503c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005040:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005042:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005046:	b25b      	sxtb	r3, r3
 8005048:	f1b3 3fff 	cmp.w	r3, #4294967295
 800504c:	d103      	bne.n	8005056 <xQueueGenericSend+0x19a>
 800504e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005050:	2200      	movs	r2, #0
 8005052:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005056:	f002 f987 	bl	8007368 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800505a:	1d3a      	adds	r2, r7, #4
 800505c:	f107 0314 	add.w	r3, r7, #20
 8005060:	4611      	mov	r1, r2
 8005062:	4618      	mov	r0, r3
 8005064:	f001 f984 	bl	8006370 <xTaskCheckForTimeOut>
 8005068:	4603      	mov	r3, r0
 800506a:	2b00      	cmp	r3, #0
 800506c:	d124      	bne.n	80050b8 <xQueueGenericSend+0x1fc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800506e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005070:	f000 fbe2 	bl	8005838 <prvIsQueueFull>
 8005074:	4603      	mov	r3, r0
 8005076:	2b00      	cmp	r3, #0
 8005078:	d018      	beq.n	80050ac <xQueueGenericSend+0x1f0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800507a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800507c:	3310      	adds	r3, #16
 800507e:	687a      	ldr	r2, [r7, #4]
 8005080:	4611      	mov	r1, r2
 8005082:	4618      	mov	r0, r3
 8005084:	f001 f8a2 	bl	80061cc <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8005088:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800508a:	f000 fb6d 	bl	8005768 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800508e:	f000 fec9 	bl	8005e24 <xTaskResumeAll>
 8005092:	4603      	mov	r3, r0
 8005094:	2b00      	cmp	r3, #0
 8005096:	f47f af7c 	bne.w	8004f92 <xQueueGenericSend+0xd6>
				{
					portYIELD_WITHIN_API();
 800509a:	4b0c      	ldr	r3, [pc, #48]	@ (80050cc <xQueueGenericSend+0x210>)
 800509c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80050a0:	601a      	str	r2, [r3, #0]
 80050a2:	f3bf 8f4f 	dsb	sy
 80050a6:	f3bf 8f6f 	isb	sy
 80050aa:	e772      	b.n	8004f92 <xQueueGenericSend+0xd6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80050ac:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80050ae:	f000 fb5b 	bl	8005768 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80050b2:	f000 feb7 	bl	8005e24 <xTaskResumeAll>
 80050b6:	e76c      	b.n	8004f92 <xQueueGenericSend+0xd6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80050b8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80050ba:	f000 fb55 	bl	8005768 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80050be:	f000 feb1 	bl	8005e24 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80050c2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80050c4:	4618      	mov	r0, r3
 80050c6:	3738      	adds	r7, #56	@ 0x38
 80050c8:	46bd      	mov	sp, r7
 80050ca:	bd80      	pop	{r7, pc}
 80050cc:	e000ed04 	.word	0xe000ed04

080050d0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80050d0:	b580      	push	{r7, lr}
 80050d2:	b08e      	sub	sp, #56	@ 0x38
 80050d4:	af00      	add	r7, sp, #0
 80050d6:	60f8      	str	r0, [r7, #12]
 80050d8:	60b9      	str	r1, [r7, #8]
 80050da:	607a      	str	r2, [r7, #4]
 80050dc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80050e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d10d      	bne.n	8005104 <xQueueGenericSendFromISR+0x34>
	__asm volatile
 80050e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80050ec:	b672      	cpsid	i
 80050ee:	f383 8811 	msr	BASEPRI, r3
 80050f2:	f3bf 8f6f 	isb	sy
 80050f6:	f3bf 8f4f 	dsb	sy
 80050fa:	b662      	cpsie	i
 80050fc:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80050fe:	bf00      	nop
 8005100:	bf00      	nop
 8005102:	e7fd      	b.n	8005100 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005104:	68bb      	ldr	r3, [r7, #8]
 8005106:	2b00      	cmp	r3, #0
 8005108:	d103      	bne.n	8005112 <xQueueGenericSendFromISR+0x42>
 800510a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800510c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800510e:	2b00      	cmp	r3, #0
 8005110:	d101      	bne.n	8005116 <xQueueGenericSendFromISR+0x46>
 8005112:	2301      	movs	r3, #1
 8005114:	e000      	b.n	8005118 <xQueueGenericSendFromISR+0x48>
 8005116:	2300      	movs	r3, #0
 8005118:	2b00      	cmp	r3, #0
 800511a:	d10d      	bne.n	8005138 <xQueueGenericSendFromISR+0x68>
	__asm volatile
 800511c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005120:	b672      	cpsid	i
 8005122:	f383 8811 	msr	BASEPRI, r3
 8005126:	f3bf 8f6f 	isb	sy
 800512a:	f3bf 8f4f 	dsb	sy
 800512e:	b662      	cpsie	i
 8005130:	623b      	str	r3, [r7, #32]
}
 8005132:	bf00      	nop
 8005134:	bf00      	nop
 8005136:	e7fd      	b.n	8005134 <xQueueGenericSendFromISR+0x64>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005138:	683b      	ldr	r3, [r7, #0]
 800513a:	2b02      	cmp	r3, #2
 800513c:	d103      	bne.n	8005146 <xQueueGenericSendFromISR+0x76>
 800513e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005140:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005142:	2b01      	cmp	r3, #1
 8005144:	d101      	bne.n	800514a <xQueueGenericSendFromISR+0x7a>
 8005146:	2301      	movs	r3, #1
 8005148:	e000      	b.n	800514c <xQueueGenericSendFromISR+0x7c>
 800514a:	2300      	movs	r3, #0
 800514c:	2b00      	cmp	r3, #0
 800514e:	d10d      	bne.n	800516c <xQueueGenericSendFromISR+0x9c>
	__asm volatile
 8005150:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005154:	b672      	cpsid	i
 8005156:	f383 8811 	msr	BASEPRI, r3
 800515a:	f3bf 8f6f 	isb	sy
 800515e:	f3bf 8f4f 	dsb	sy
 8005162:	b662      	cpsie	i
 8005164:	61fb      	str	r3, [r7, #28]
}
 8005166:	bf00      	nop
 8005168:	bf00      	nop
 800516a:	e7fd      	b.n	8005168 <xQueueGenericSendFromISR+0x98>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800516c:	f002 f9ae 	bl	80074cc <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8005170:	f3ef 8211 	mrs	r2, BASEPRI
 8005174:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005178:	b672      	cpsid	i
 800517a:	f383 8811 	msr	BASEPRI, r3
 800517e:	f3bf 8f6f 	isb	sy
 8005182:	f3bf 8f4f 	dsb	sy
 8005186:	b662      	cpsie	i
 8005188:	61ba      	str	r2, [r7, #24]
 800518a:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800518c:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800518e:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005190:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005192:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005194:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005196:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005198:	429a      	cmp	r2, r3
 800519a:	d302      	bcc.n	80051a2 <xQueueGenericSendFromISR+0xd2>
 800519c:	683b      	ldr	r3, [r7, #0]
 800519e:	2b02      	cmp	r3, #2
 80051a0:	d12c      	bne.n	80051fc <xQueueGenericSendFromISR+0x12c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80051a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80051a4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80051a8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80051ac:	683a      	ldr	r2, [r7, #0]
 80051ae:	68b9      	ldr	r1, [r7, #8]
 80051b0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80051b2:	f000 fa49 	bl	8005648 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80051b6:	f997 302b 	ldrsb.w	r3, [r7, #43]	@ 0x2b
 80051ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051be:	d112      	bne.n	80051e6 <xQueueGenericSendFromISR+0x116>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80051c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80051c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d016      	beq.n	80051f6 <xQueueGenericSendFromISR+0x126>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80051c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80051ca:	3324      	adds	r3, #36	@ 0x24
 80051cc:	4618      	mov	r0, r3
 80051ce:	f001 f853 	bl	8006278 <xTaskRemoveFromEventList>
 80051d2:	4603      	mov	r3, r0
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d00e      	beq.n	80051f6 <xQueueGenericSendFromISR+0x126>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d00b      	beq.n	80051f6 <xQueueGenericSendFromISR+0x126>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	2201      	movs	r2, #1
 80051e2:	601a      	str	r2, [r3, #0]
 80051e4:	e007      	b.n	80051f6 <xQueueGenericSendFromISR+0x126>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80051e6:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80051ea:	3301      	adds	r3, #1
 80051ec:	b2db      	uxtb	r3, r3
 80051ee:	b25a      	sxtb	r2, r3
 80051f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80051f2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 80051f6:	2301      	movs	r3, #1
 80051f8:	637b      	str	r3, [r7, #52]	@ 0x34
		{
 80051fa:	e001      	b.n	8005200 <xQueueGenericSendFromISR+0x130>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80051fc:	2300      	movs	r3, #0
 80051fe:	637b      	str	r3, [r7, #52]	@ 0x34
 8005200:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005202:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005204:	693b      	ldr	r3, [r7, #16]
 8005206:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800520a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800520c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800520e:	4618      	mov	r0, r3
 8005210:	3738      	adds	r7, #56	@ 0x38
 8005212:	46bd      	mov	sp, r7
 8005214:	bd80      	pop	{r7, pc}
	...

08005218 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8005218:	b580      	push	{r7, lr}
 800521a:	b08c      	sub	sp, #48	@ 0x30
 800521c:	af00      	add	r7, sp, #0
 800521e:	60f8      	str	r0, [r7, #12]
 8005220:	60b9      	str	r1, [r7, #8]
 8005222:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8005224:	2300      	movs	r3, #0
 8005226:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800522c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800522e:	2b00      	cmp	r3, #0
 8005230:	d10d      	bne.n	800524e <xQueueReceive+0x36>
	__asm volatile
 8005232:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005236:	b672      	cpsid	i
 8005238:	f383 8811 	msr	BASEPRI, r3
 800523c:	f3bf 8f6f 	isb	sy
 8005240:	f3bf 8f4f 	dsb	sy
 8005244:	b662      	cpsie	i
 8005246:	623b      	str	r3, [r7, #32]
}
 8005248:	bf00      	nop
 800524a:	bf00      	nop
 800524c:	e7fd      	b.n	800524a <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800524e:	68bb      	ldr	r3, [r7, #8]
 8005250:	2b00      	cmp	r3, #0
 8005252:	d103      	bne.n	800525c <xQueueReceive+0x44>
 8005254:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005256:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005258:	2b00      	cmp	r3, #0
 800525a:	d101      	bne.n	8005260 <xQueueReceive+0x48>
 800525c:	2301      	movs	r3, #1
 800525e:	e000      	b.n	8005262 <xQueueReceive+0x4a>
 8005260:	2300      	movs	r3, #0
 8005262:	2b00      	cmp	r3, #0
 8005264:	d10d      	bne.n	8005282 <xQueueReceive+0x6a>
	__asm volatile
 8005266:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800526a:	b672      	cpsid	i
 800526c:	f383 8811 	msr	BASEPRI, r3
 8005270:	f3bf 8f6f 	isb	sy
 8005274:	f3bf 8f4f 	dsb	sy
 8005278:	b662      	cpsie	i
 800527a:	61fb      	str	r3, [r7, #28]
}
 800527c:	bf00      	nop
 800527e:	bf00      	nop
 8005280:	e7fd      	b.n	800527e <xQueueReceive+0x66>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005282:	f001 f9d7 	bl	8006634 <xTaskGetSchedulerState>
 8005286:	4603      	mov	r3, r0
 8005288:	2b00      	cmp	r3, #0
 800528a:	d102      	bne.n	8005292 <xQueueReceive+0x7a>
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	2b00      	cmp	r3, #0
 8005290:	d101      	bne.n	8005296 <xQueueReceive+0x7e>
 8005292:	2301      	movs	r3, #1
 8005294:	e000      	b.n	8005298 <xQueueReceive+0x80>
 8005296:	2300      	movs	r3, #0
 8005298:	2b00      	cmp	r3, #0
 800529a:	d10d      	bne.n	80052b8 <xQueueReceive+0xa0>
	__asm volatile
 800529c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80052a0:	b672      	cpsid	i
 80052a2:	f383 8811 	msr	BASEPRI, r3
 80052a6:	f3bf 8f6f 	isb	sy
 80052aa:	f3bf 8f4f 	dsb	sy
 80052ae:	b662      	cpsie	i
 80052b0:	61bb      	str	r3, [r7, #24]
}
 80052b2:	bf00      	nop
 80052b4:	bf00      	nop
 80052b6:	e7fd      	b.n	80052b4 <xQueueReceive+0x9c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80052b8:	f002 f820 	bl	80072fc <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80052bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80052be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80052c0:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80052c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d01f      	beq.n	8005308 <xQueueReceive+0xf0>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80052c8:	68b9      	ldr	r1, [r7, #8]
 80052ca:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80052cc:	f000 fa26 	bl	800571c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80052d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052d2:	1e5a      	subs	r2, r3, #1
 80052d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80052d6:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80052d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80052da:	691b      	ldr	r3, [r3, #16]
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d00f      	beq.n	8005300 <xQueueReceive+0xe8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80052e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80052e2:	3310      	adds	r3, #16
 80052e4:	4618      	mov	r0, r3
 80052e6:	f000 ffc7 	bl	8006278 <xTaskRemoveFromEventList>
 80052ea:	4603      	mov	r3, r0
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d007      	beq.n	8005300 <xQueueReceive+0xe8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80052f0:	4b3c      	ldr	r3, [pc, #240]	@ (80053e4 <xQueueReceive+0x1cc>)
 80052f2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80052f6:	601a      	str	r2, [r3, #0]
 80052f8:	f3bf 8f4f 	dsb	sy
 80052fc:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005300:	f002 f832 	bl	8007368 <vPortExitCritical>
				return pdPASS;
 8005304:	2301      	movs	r3, #1
 8005306:	e069      	b.n	80053dc <xQueueReceive+0x1c4>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	2b00      	cmp	r3, #0
 800530c:	d103      	bne.n	8005316 <xQueueReceive+0xfe>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800530e:	f002 f82b 	bl	8007368 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005312:	2300      	movs	r3, #0
 8005314:	e062      	b.n	80053dc <xQueueReceive+0x1c4>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005316:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005318:	2b00      	cmp	r3, #0
 800531a:	d106      	bne.n	800532a <xQueueReceive+0x112>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800531c:	f107 0310 	add.w	r3, r7, #16
 8005320:	4618      	mov	r0, r3
 8005322:	f001 f80f 	bl	8006344 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005326:	2301      	movs	r3, #1
 8005328:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800532a:	f002 f81d 	bl	8007368 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800532e:	f000 fd6b 	bl	8005e08 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005332:	f001 ffe3 	bl	80072fc <vPortEnterCritical>
 8005336:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005338:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800533c:	b25b      	sxtb	r3, r3
 800533e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005342:	d103      	bne.n	800534c <xQueueReceive+0x134>
 8005344:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005346:	2200      	movs	r2, #0
 8005348:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800534c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800534e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005352:	b25b      	sxtb	r3, r3
 8005354:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005358:	d103      	bne.n	8005362 <xQueueReceive+0x14a>
 800535a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800535c:	2200      	movs	r2, #0
 800535e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005362:	f002 f801 	bl	8007368 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005366:	1d3a      	adds	r2, r7, #4
 8005368:	f107 0310 	add.w	r3, r7, #16
 800536c:	4611      	mov	r1, r2
 800536e:	4618      	mov	r0, r3
 8005370:	f000 fffe 	bl	8006370 <xTaskCheckForTimeOut>
 8005374:	4603      	mov	r3, r0
 8005376:	2b00      	cmp	r3, #0
 8005378:	d123      	bne.n	80053c2 <xQueueReceive+0x1aa>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800537a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800537c:	f000 fa46 	bl	800580c <prvIsQueueEmpty>
 8005380:	4603      	mov	r3, r0
 8005382:	2b00      	cmp	r3, #0
 8005384:	d017      	beq.n	80053b6 <xQueueReceive+0x19e>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005386:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005388:	3324      	adds	r3, #36	@ 0x24
 800538a:	687a      	ldr	r2, [r7, #4]
 800538c:	4611      	mov	r1, r2
 800538e:	4618      	mov	r0, r3
 8005390:	f000 ff1c 	bl	80061cc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005394:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005396:	f000 f9e7 	bl	8005768 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800539a:	f000 fd43 	bl	8005e24 <xTaskResumeAll>
 800539e:	4603      	mov	r3, r0
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d189      	bne.n	80052b8 <xQueueReceive+0xa0>
				{
					portYIELD_WITHIN_API();
 80053a4:	4b0f      	ldr	r3, [pc, #60]	@ (80053e4 <xQueueReceive+0x1cc>)
 80053a6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80053aa:	601a      	str	r2, [r3, #0]
 80053ac:	f3bf 8f4f 	dsb	sy
 80053b0:	f3bf 8f6f 	isb	sy
 80053b4:	e780      	b.n	80052b8 <xQueueReceive+0xa0>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80053b6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80053b8:	f000 f9d6 	bl	8005768 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80053bc:	f000 fd32 	bl	8005e24 <xTaskResumeAll>
 80053c0:	e77a      	b.n	80052b8 <xQueueReceive+0xa0>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80053c2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80053c4:	f000 f9d0 	bl	8005768 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80053c8:	f000 fd2c 	bl	8005e24 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80053cc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80053ce:	f000 fa1d 	bl	800580c <prvIsQueueEmpty>
 80053d2:	4603      	mov	r3, r0
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	f43f af6f 	beq.w	80052b8 <xQueueReceive+0xa0>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80053da:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80053dc:	4618      	mov	r0, r3
 80053de:	3730      	adds	r7, #48	@ 0x30
 80053e0:	46bd      	mov	sp, r7
 80053e2:	bd80      	pop	{r7, pc}
 80053e4:	e000ed04 	.word	0xe000ed04

080053e8 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80053e8:	b580      	push	{r7, lr}
 80053ea:	b08e      	sub	sp, #56	@ 0x38
 80053ec:	af00      	add	r7, sp, #0
 80053ee:	6078      	str	r0, [r7, #4]
 80053f0:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80053f2:	2300      	movs	r3, #0
 80053f4:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80053fa:	2300      	movs	r3, #0
 80053fc:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80053fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005400:	2b00      	cmp	r3, #0
 8005402:	d10d      	bne.n	8005420 <xQueueSemaphoreTake+0x38>
	__asm volatile
 8005404:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005408:	b672      	cpsid	i
 800540a:	f383 8811 	msr	BASEPRI, r3
 800540e:	f3bf 8f6f 	isb	sy
 8005412:	f3bf 8f4f 	dsb	sy
 8005416:	b662      	cpsie	i
 8005418:	623b      	str	r3, [r7, #32]
}
 800541a:	bf00      	nop
 800541c:	bf00      	nop
 800541e:	e7fd      	b.n	800541c <xQueueSemaphoreTake+0x34>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8005420:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005422:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005424:	2b00      	cmp	r3, #0
 8005426:	d00d      	beq.n	8005444 <xQueueSemaphoreTake+0x5c>
	__asm volatile
 8005428:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800542c:	b672      	cpsid	i
 800542e:	f383 8811 	msr	BASEPRI, r3
 8005432:	f3bf 8f6f 	isb	sy
 8005436:	f3bf 8f4f 	dsb	sy
 800543a:	b662      	cpsie	i
 800543c:	61fb      	str	r3, [r7, #28]
}
 800543e:	bf00      	nop
 8005440:	bf00      	nop
 8005442:	e7fd      	b.n	8005440 <xQueueSemaphoreTake+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005444:	f001 f8f6 	bl	8006634 <xTaskGetSchedulerState>
 8005448:	4603      	mov	r3, r0
 800544a:	2b00      	cmp	r3, #0
 800544c:	d102      	bne.n	8005454 <xQueueSemaphoreTake+0x6c>
 800544e:	683b      	ldr	r3, [r7, #0]
 8005450:	2b00      	cmp	r3, #0
 8005452:	d101      	bne.n	8005458 <xQueueSemaphoreTake+0x70>
 8005454:	2301      	movs	r3, #1
 8005456:	e000      	b.n	800545a <xQueueSemaphoreTake+0x72>
 8005458:	2300      	movs	r3, #0
 800545a:	2b00      	cmp	r3, #0
 800545c:	d10d      	bne.n	800547a <xQueueSemaphoreTake+0x92>
	__asm volatile
 800545e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005462:	b672      	cpsid	i
 8005464:	f383 8811 	msr	BASEPRI, r3
 8005468:	f3bf 8f6f 	isb	sy
 800546c:	f3bf 8f4f 	dsb	sy
 8005470:	b662      	cpsie	i
 8005472:	61bb      	str	r3, [r7, #24]
}
 8005474:	bf00      	nop
 8005476:	bf00      	nop
 8005478:	e7fd      	b.n	8005476 <xQueueSemaphoreTake+0x8e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800547a:	f001 ff3f 	bl	80072fc <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800547e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005480:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005482:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8005484:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005486:	2b00      	cmp	r3, #0
 8005488:	d024      	beq.n	80054d4 <xQueueSemaphoreTake+0xec>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800548a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800548c:	1e5a      	subs	r2, r3, #1
 800548e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005490:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005492:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	2b00      	cmp	r3, #0
 8005498:	d104      	bne.n	80054a4 <xQueueSemaphoreTake+0xbc>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800549a:	f001 fa4d 	bl	8006938 <pvTaskIncrementMutexHeldCount>
 800549e:	4602      	mov	r2, r0
 80054a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80054a2:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80054a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80054a6:	691b      	ldr	r3, [r3, #16]
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d00f      	beq.n	80054cc <xQueueSemaphoreTake+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80054ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80054ae:	3310      	adds	r3, #16
 80054b0:	4618      	mov	r0, r3
 80054b2:	f000 fee1 	bl	8006278 <xTaskRemoveFromEventList>
 80054b6:	4603      	mov	r3, r0
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d007      	beq.n	80054cc <xQueueSemaphoreTake+0xe4>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80054bc:	4b55      	ldr	r3, [pc, #340]	@ (8005614 <xQueueSemaphoreTake+0x22c>)
 80054be:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80054c2:	601a      	str	r2, [r3, #0]
 80054c4:	f3bf 8f4f 	dsb	sy
 80054c8:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80054cc:	f001 ff4c 	bl	8007368 <vPortExitCritical>
				return pdPASS;
 80054d0:	2301      	movs	r3, #1
 80054d2:	e09a      	b.n	800560a <xQueueSemaphoreTake+0x222>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80054d4:	683b      	ldr	r3, [r7, #0]
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d114      	bne.n	8005504 <xQueueSemaphoreTake+0x11c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80054da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d00d      	beq.n	80054fc <xQueueSemaphoreTake+0x114>
	__asm volatile
 80054e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80054e4:	b672      	cpsid	i
 80054e6:	f383 8811 	msr	BASEPRI, r3
 80054ea:	f3bf 8f6f 	isb	sy
 80054ee:	f3bf 8f4f 	dsb	sy
 80054f2:	b662      	cpsie	i
 80054f4:	617b      	str	r3, [r7, #20]
}
 80054f6:	bf00      	nop
 80054f8:	bf00      	nop
 80054fa:	e7fd      	b.n	80054f8 <xQueueSemaphoreTake+0x110>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 80054fc:	f001 ff34 	bl	8007368 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005500:	2300      	movs	r3, #0
 8005502:	e082      	b.n	800560a <xQueueSemaphoreTake+0x222>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005504:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005506:	2b00      	cmp	r3, #0
 8005508:	d106      	bne.n	8005518 <xQueueSemaphoreTake+0x130>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800550a:	f107 030c 	add.w	r3, r7, #12
 800550e:	4618      	mov	r0, r3
 8005510:	f000 ff18 	bl	8006344 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005514:	2301      	movs	r3, #1
 8005516:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005518:	f001 ff26 	bl	8007368 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800551c:	f000 fc74 	bl	8005e08 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005520:	f001 feec 	bl	80072fc <vPortEnterCritical>
 8005524:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005526:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800552a:	b25b      	sxtb	r3, r3
 800552c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005530:	d103      	bne.n	800553a <xQueueSemaphoreTake+0x152>
 8005532:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005534:	2200      	movs	r2, #0
 8005536:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800553a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800553c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005540:	b25b      	sxtb	r3, r3
 8005542:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005546:	d103      	bne.n	8005550 <xQueueSemaphoreTake+0x168>
 8005548:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800554a:	2200      	movs	r2, #0
 800554c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005550:	f001 ff0a 	bl	8007368 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005554:	463a      	mov	r2, r7
 8005556:	f107 030c 	add.w	r3, r7, #12
 800555a:	4611      	mov	r1, r2
 800555c:	4618      	mov	r0, r3
 800555e:	f000 ff07 	bl	8006370 <xTaskCheckForTimeOut>
 8005562:	4603      	mov	r3, r0
 8005564:	2b00      	cmp	r3, #0
 8005566:	d132      	bne.n	80055ce <xQueueSemaphoreTake+0x1e6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005568:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800556a:	f000 f94f 	bl	800580c <prvIsQueueEmpty>
 800556e:	4603      	mov	r3, r0
 8005570:	2b00      	cmp	r3, #0
 8005572:	d026      	beq.n	80055c2 <xQueueSemaphoreTake+0x1da>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005574:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	2b00      	cmp	r3, #0
 800557a:	d109      	bne.n	8005590 <xQueueSemaphoreTake+0x1a8>
					{
						taskENTER_CRITICAL();
 800557c:	f001 febe 	bl	80072fc <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005580:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005582:	689b      	ldr	r3, [r3, #8]
 8005584:	4618      	mov	r0, r3
 8005586:	f001 f873 	bl	8006670 <xTaskPriorityInherit>
 800558a:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 800558c:	f001 feec 	bl	8007368 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005590:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005592:	3324      	adds	r3, #36	@ 0x24
 8005594:	683a      	ldr	r2, [r7, #0]
 8005596:	4611      	mov	r1, r2
 8005598:	4618      	mov	r0, r3
 800559a:	f000 fe17 	bl	80061cc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800559e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80055a0:	f000 f8e2 	bl	8005768 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80055a4:	f000 fc3e 	bl	8005e24 <xTaskResumeAll>
 80055a8:	4603      	mov	r3, r0
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	f47f af65 	bne.w	800547a <xQueueSemaphoreTake+0x92>
				{
					portYIELD_WITHIN_API();
 80055b0:	4b18      	ldr	r3, [pc, #96]	@ (8005614 <xQueueSemaphoreTake+0x22c>)
 80055b2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80055b6:	601a      	str	r2, [r3, #0]
 80055b8:	f3bf 8f4f 	dsb	sy
 80055bc:	f3bf 8f6f 	isb	sy
 80055c0:	e75b      	b.n	800547a <xQueueSemaphoreTake+0x92>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80055c2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80055c4:	f000 f8d0 	bl	8005768 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80055c8:	f000 fc2c 	bl	8005e24 <xTaskResumeAll>
 80055cc:	e755      	b.n	800547a <xQueueSemaphoreTake+0x92>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80055ce:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80055d0:	f000 f8ca 	bl	8005768 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80055d4:	f000 fc26 	bl	8005e24 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80055d8:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80055da:	f000 f917 	bl	800580c <prvIsQueueEmpty>
 80055de:	4603      	mov	r3, r0
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	f43f af4a 	beq.w	800547a <xQueueSemaphoreTake+0x92>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80055e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d00d      	beq.n	8005608 <xQueueSemaphoreTake+0x220>
					{
						taskENTER_CRITICAL();
 80055ec:	f001 fe86 	bl	80072fc <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80055f0:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80055f2:	f000 f811 	bl	8005618 <prvGetDisinheritPriorityAfterTimeout>
 80055f6:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80055f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80055fa:	689b      	ldr	r3, [r3, #8]
 80055fc:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80055fe:	4618      	mov	r0, r3
 8005600:	f001 f912 	bl	8006828 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8005604:	f001 feb0 	bl	8007368 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005608:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800560a:	4618      	mov	r0, r3
 800560c:	3738      	adds	r7, #56	@ 0x38
 800560e:	46bd      	mov	sp, r7
 8005610:	bd80      	pop	{r7, pc}
 8005612:	bf00      	nop
 8005614:	e000ed04 	.word	0xe000ed04

08005618 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8005618:	b480      	push	{r7}
 800561a:	b085      	sub	sp, #20
 800561c:	af00      	add	r7, sp, #0
 800561e:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005624:	2b00      	cmp	r3, #0
 8005626:	d006      	beq.n	8005636 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 8005632:	60fb      	str	r3, [r7, #12]
 8005634:	e001      	b.n	800563a <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8005636:	2300      	movs	r3, #0
 8005638:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800563a:	68fb      	ldr	r3, [r7, #12]
	}
 800563c:	4618      	mov	r0, r3
 800563e:	3714      	adds	r7, #20
 8005640:	46bd      	mov	sp, r7
 8005642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005646:	4770      	bx	lr

08005648 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005648:	b580      	push	{r7, lr}
 800564a:	b086      	sub	sp, #24
 800564c:	af00      	add	r7, sp, #0
 800564e:	60f8      	str	r0, [r7, #12]
 8005650:	60b9      	str	r1, [r7, #8]
 8005652:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8005654:	2300      	movs	r3, #0
 8005656:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800565c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005662:	2b00      	cmp	r3, #0
 8005664:	d10d      	bne.n	8005682 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	2b00      	cmp	r3, #0
 800566c:	d14d      	bne.n	800570a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	689b      	ldr	r3, [r3, #8]
 8005672:	4618      	mov	r0, r3
 8005674:	f001 f864 	bl	8006740 <xTaskPriorityDisinherit>
 8005678:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	2200      	movs	r2, #0
 800567e:	609a      	str	r2, [r3, #8]
 8005680:	e043      	b.n	800570a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	2b00      	cmp	r3, #0
 8005686:	d119      	bne.n	80056bc <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	6858      	ldr	r0, [r3, #4]
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005690:	461a      	mov	r2, r3
 8005692:	68b9      	ldr	r1, [r7, #8]
 8005694:	f002 fc25 	bl	8007ee2 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	685a      	ldr	r2, [r3, #4]
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80056a0:	441a      	add	r2, r3
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	685a      	ldr	r2, [r3, #4]
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	689b      	ldr	r3, [r3, #8]
 80056ae:	429a      	cmp	r2, r3
 80056b0:	d32b      	bcc.n	800570a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	681a      	ldr	r2, [r3, #0]
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	605a      	str	r2, [r3, #4]
 80056ba:	e026      	b.n	800570a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	68d8      	ldr	r0, [r3, #12]
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80056c4:	461a      	mov	r2, r3
 80056c6:	68b9      	ldr	r1, [r7, #8]
 80056c8:	f002 fc0b 	bl	8007ee2 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	68da      	ldr	r2, [r3, #12]
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80056d4:	425b      	negs	r3, r3
 80056d6:	441a      	add	r2, r3
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	68da      	ldr	r2, [r3, #12]
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	429a      	cmp	r2, r3
 80056e6:	d207      	bcs.n	80056f8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	689a      	ldr	r2, [r3, #8]
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80056f0:	425b      	negs	r3, r3
 80056f2:	441a      	add	r2, r3
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	2b02      	cmp	r3, #2
 80056fc:	d105      	bne.n	800570a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80056fe:	693b      	ldr	r3, [r7, #16]
 8005700:	2b00      	cmp	r3, #0
 8005702:	d002      	beq.n	800570a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005704:	693b      	ldr	r3, [r7, #16]
 8005706:	3b01      	subs	r3, #1
 8005708:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800570a:	693b      	ldr	r3, [r7, #16]
 800570c:	1c5a      	adds	r2, r3, #1
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8005712:	697b      	ldr	r3, [r7, #20]
}
 8005714:	4618      	mov	r0, r3
 8005716:	3718      	adds	r7, #24
 8005718:	46bd      	mov	sp, r7
 800571a:	bd80      	pop	{r7, pc}

0800571c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800571c:	b580      	push	{r7, lr}
 800571e:	b082      	sub	sp, #8
 8005720:	af00      	add	r7, sp, #0
 8005722:	6078      	str	r0, [r7, #4]
 8005724:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800572a:	2b00      	cmp	r3, #0
 800572c:	d018      	beq.n	8005760 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	68da      	ldr	r2, [r3, #12]
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005736:	441a      	add	r2, r3
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	68da      	ldr	r2, [r3, #12]
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	689b      	ldr	r3, [r3, #8]
 8005744:	429a      	cmp	r2, r3
 8005746:	d303      	bcc.n	8005750 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681a      	ldr	r2, [r3, #0]
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	68d9      	ldr	r1, [r3, #12]
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005758:	461a      	mov	r2, r3
 800575a:	6838      	ldr	r0, [r7, #0]
 800575c:	f002 fbc1 	bl	8007ee2 <memcpy>
	}
}
 8005760:	bf00      	nop
 8005762:	3708      	adds	r7, #8
 8005764:	46bd      	mov	sp, r7
 8005766:	bd80      	pop	{r7, pc}

08005768 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005768:	b580      	push	{r7, lr}
 800576a:	b084      	sub	sp, #16
 800576c:	af00      	add	r7, sp, #0
 800576e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005770:	f001 fdc4 	bl	80072fc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800577a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800577c:	e011      	b.n	80057a2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005782:	2b00      	cmp	r3, #0
 8005784:	d012      	beq.n	80057ac <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	3324      	adds	r3, #36	@ 0x24
 800578a:	4618      	mov	r0, r3
 800578c:	f000 fd74 	bl	8006278 <xTaskRemoveFromEventList>
 8005790:	4603      	mov	r3, r0
 8005792:	2b00      	cmp	r3, #0
 8005794:	d001      	beq.n	800579a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8005796:	f000 fe53 	bl	8006440 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800579a:	7bfb      	ldrb	r3, [r7, #15]
 800579c:	3b01      	subs	r3, #1
 800579e:	b2db      	uxtb	r3, r3
 80057a0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80057a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	dce9      	bgt.n	800577e <prvUnlockQueue+0x16>
 80057aa:	e000      	b.n	80057ae <prvUnlockQueue+0x46>
					break;
 80057ac:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	22ff      	movs	r2, #255	@ 0xff
 80057b2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 80057b6:	f001 fdd7 	bl	8007368 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80057ba:	f001 fd9f 	bl	80072fc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80057c4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80057c6:	e011      	b.n	80057ec <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	691b      	ldr	r3, [r3, #16]
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d012      	beq.n	80057f6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	3310      	adds	r3, #16
 80057d4:	4618      	mov	r0, r3
 80057d6:	f000 fd4f 	bl	8006278 <xTaskRemoveFromEventList>
 80057da:	4603      	mov	r3, r0
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d001      	beq.n	80057e4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80057e0:	f000 fe2e 	bl	8006440 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80057e4:	7bbb      	ldrb	r3, [r7, #14]
 80057e6:	3b01      	subs	r3, #1
 80057e8:	b2db      	uxtb	r3, r3
 80057ea:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80057ec:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	dce9      	bgt.n	80057c8 <prvUnlockQueue+0x60>
 80057f4:	e000      	b.n	80057f8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80057f6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	22ff      	movs	r2, #255	@ 0xff
 80057fc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8005800:	f001 fdb2 	bl	8007368 <vPortExitCritical>
}
 8005804:	bf00      	nop
 8005806:	3710      	adds	r7, #16
 8005808:	46bd      	mov	sp, r7
 800580a:	bd80      	pop	{r7, pc}

0800580c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800580c:	b580      	push	{r7, lr}
 800580e:	b084      	sub	sp, #16
 8005810:	af00      	add	r7, sp, #0
 8005812:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005814:	f001 fd72 	bl	80072fc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800581c:	2b00      	cmp	r3, #0
 800581e:	d102      	bne.n	8005826 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005820:	2301      	movs	r3, #1
 8005822:	60fb      	str	r3, [r7, #12]
 8005824:	e001      	b.n	800582a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8005826:	2300      	movs	r3, #0
 8005828:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800582a:	f001 fd9d 	bl	8007368 <vPortExitCritical>

	return xReturn;
 800582e:	68fb      	ldr	r3, [r7, #12]
}
 8005830:	4618      	mov	r0, r3
 8005832:	3710      	adds	r7, #16
 8005834:	46bd      	mov	sp, r7
 8005836:	bd80      	pop	{r7, pc}

08005838 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005838:	b580      	push	{r7, lr}
 800583a:	b084      	sub	sp, #16
 800583c:	af00      	add	r7, sp, #0
 800583e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005840:	f001 fd5c 	bl	80072fc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800584c:	429a      	cmp	r2, r3
 800584e:	d102      	bne.n	8005856 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8005850:	2301      	movs	r3, #1
 8005852:	60fb      	str	r3, [r7, #12]
 8005854:	e001      	b.n	800585a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8005856:	2300      	movs	r3, #0
 8005858:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800585a:	f001 fd85 	bl	8007368 <vPortExitCritical>

	return xReturn;
 800585e:	68fb      	ldr	r3, [r7, #12]
}
 8005860:	4618      	mov	r0, r3
 8005862:	3710      	adds	r7, #16
 8005864:	46bd      	mov	sp, r7
 8005866:	bd80      	pop	{r7, pc}

08005868 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8005868:	b480      	push	{r7}
 800586a:	b085      	sub	sp, #20
 800586c:	af00      	add	r7, sp, #0
 800586e:	6078      	str	r0, [r7, #4]
 8005870:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005872:	2300      	movs	r3, #0
 8005874:	60fb      	str	r3, [r7, #12]
 8005876:	e014      	b.n	80058a2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8005878:	4a0f      	ldr	r2, [pc, #60]	@ (80058b8 <vQueueAddToRegistry+0x50>)
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8005880:	2b00      	cmp	r3, #0
 8005882:	d10b      	bne.n	800589c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8005884:	490c      	ldr	r1, [pc, #48]	@ (80058b8 <vQueueAddToRegistry+0x50>)
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	683a      	ldr	r2, [r7, #0]
 800588a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800588e:	4a0a      	ldr	r2, [pc, #40]	@ (80058b8 <vQueueAddToRegistry+0x50>)
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	00db      	lsls	r3, r3, #3
 8005894:	4413      	add	r3, r2
 8005896:	687a      	ldr	r2, [r7, #4]
 8005898:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800589a:	e006      	b.n	80058aa <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	3301      	adds	r3, #1
 80058a0:	60fb      	str	r3, [r7, #12]
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	2b07      	cmp	r3, #7
 80058a6:	d9e7      	bls.n	8005878 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80058a8:	bf00      	nop
 80058aa:	bf00      	nop
 80058ac:	3714      	adds	r7, #20
 80058ae:	46bd      	mov	sp, r7
 80058b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058b4:	4770      	bx	lr
 80058b6:	bf00      	nop
 80058b8:	20000f90 	.word	0x20000f90

080058bc <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80058bc:	b580      	push	{r7, lr}
 80058be:	b086      	sub	sp, #24
 80058c0:	af00      	add	r7, sp, #0
 80058c2:	60f8      	str	r0, [r7, #12]
 80058c4:	60b9      	str	r1, [r7, #8]
 80058c6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80058cc:	f001 fd16 	bl	80072fc <vPortEnterCritical>
 80058d0:	697b      	ldr	r3, [r7, #20]
 80058d2:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80058d6:	b25b      	sxtb	r3, r3
 80058d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058dc:	d103      	bne.n	80058e6 <vQueueWaitForMessageRestricted+0x2a>
 80058de:	697b      	ldr	r3, [r7, #20]
 80058e0:	2200      	movs	r2, #0
 80058e2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80058e6:	697b      	ldr	r3, [r7, #20]
 80058e8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80058ec:	b25b      	sxtb	r3, r3
 80058ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058f2:	d103      	bne.n	80058fc <vQueueWaitForMessageRestricted+0x40>
 80058f4:	697b      	ldr	r3, [r7, #20]
 80058f6:	2200      	movs	r2, #0
 80058f8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80058fc:	f001 fd34 	bl	8007368 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8005900:	697b      	ldr	r3, [r7, #20]
 8005902:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005904:	2b00      	cmp	r3, #0
 8005906:	d106      	bne.n	8005916 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8005908:	697b      	ldr	r3, [r7, #20]
 800590a:	3324      	adds	r3, #36	@ 0x24
 800590c:	687a      	ldr	r2, [r7, #4]
 800590e:	68b9      	ldr	r1, [r7, #8]
 8005910:	4618      	mov	r0, r3
 8005912:	f000 fc83 	bl	800621c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8005916:	6978      	ldr	r0, [r7, #20]
 8005918:	f7ff ff26 	bl	8005768 <prvUnlockQueue>
	}
 800591c:	bf00      	nop
 800591e:	3718      	adds	r7, #24
 8005920:	46bd      	mov	sp, r7
 8005922:	bd80      	pop	{r7, pc}

08005924 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005924:	b580      	push	{r7, lr}
 8005926:	b08e      	sub	sp, #56	@ 0x38
 8005928:	af04      	add	r7, sp, #16
 800592a:	60f8      	str	r0, [r7, #12]
 800592c:	60b9      	str	r1, [r7, #8]
 800592e:	607a      	str	r2, [r7, #4]
 8005930:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005932:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005934:	2b00      	cmp	r3, #0
 8005936:	d10d      	bne.n	8005954 <xTaskCreateStatic+0x30>
	__asm volatile
 8005938:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800593c:	b672      	cpsid	i
 800593e:	f383 8811 	msr	BASEPRI, r3
 8005942:	f3bf 8f6f 	isb	sy
 8005946:	f3bf 8f4f 	dsb	sy
 800594a:	b662      	cpsie	i
 800594c:	623b      	str	r3, [r7, #32]
}
 800594e:	bf00      	nop
 8005950:	bf00      	nop
 8005952:	e7fd      	b.n	8005950 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 8005954:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005956:	2b00      	cmp	r3, #0
 8005958:	d10d      	bne.n	8005976 <xTaskCreateStatic+0x52>
	__asm volatile
 800595a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800595e:	b672      	cpsid	i
 8005960:	f383 8811 	msr	BASEPRI, r3
 8005964:	f3bf 8f6f 	isb	sy
 8005968:	f3bf 8f4f 	dsb	sy
 800596c:	b662      	cpsie	i
 800596e:	61fb      	str	r3, [r7, #28]
}
 8005970:	bf00      	nop
 8005972:	bf00      	nop
 8005974:	e7fd      	b.n	8005972 <xTaskCreateStatic+0x4e>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8005976:	23a8      	movs	r3, #168	@ 0xa8
 8005978:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800597a:	693b      	ldr	r3, [r7, #16]
 800597c:	2ba8      	cmp	r3, #168	@ 0xa8
 800597e:	d00d      	beq.n	800599c <xTaskCreateStatic+0x78>
	__asm volatile
 8005980:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005984:	b672      	cpsid	i
 8005986:	f383 8811 	msr	BASEPRI, r3
 800598a:	f3bf 8f6f 	isb	sy
 800598e:	f3bf 8f4f 	dsb	sy
 8005992:	b662      	cpsie	i
 8005994:	61bb      	str	r3, [r7, #24]
}
 8005996:	bf00      	nop
 8005998:	bf00      	nop
 800599a:	e7fd      	b.n	8005998 <xTaskCreateStatic+0x74>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800599c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800599e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d01e      	beq.n	80059e2 <xTaskCreateStatic+0xbe>
 80059a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d01b      	beq.n	80059e2 <xTaskCreateStatic+0xbe>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80059aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80059ac:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80059ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059b0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80059b2:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80059b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059b6:	2202      	movs	r2, #2
 80059b8:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80059bc:	2300      	movs	r3, #0
 80059be:	9303      	str	r3, [sp, #12]
 80059c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059c2:	9302      	str	r3, [sp, #8]
 80059c4:	f107 0314 	add.w	r3, r7, #20
 80059c8:	9301      	str	r3, [sp, #4]
 80059ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059cc:	9300      	str	r3, [sp, #0]
 80059ce:	683b      	ldr	r3, [r7, #0]
 80059d0:	687a      	ldr	r2, [r7, #4]
 80059d2:	68b9      	ldr	r1, [r7, #8]
 80059d4:	68f8      	ldr	r0, [r7, #12]
 80059d6:	f000 f851 	bl	8005a7c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80059da:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80059dc:	f000 f8f8 	bl	8005bd0 <prvAddNewTaskToReadyList>
 80059e0:	e001      	b.n	80059e6 <xTaskCreateStatic+0xc2>
		}
		else
		{
			xReturn = NULL;
 80059e2:	2300      	movs	r3, #0
 80059e4:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80059e6:	697b      	ldr	r3, [r7, #20]
	}
 80059e8:	4618      	mov	r0, r3
 80059ea:	3728      	adds	r7, #40	@ 0x28
 80059ec:	46bd      	mov	sp, r7
 80059ee:	bd80      	pop	{r7, pc}

080059f0 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80059f0:	b580      	push	{r7, lr}
 80059f2:	b08c      	sub	sp, #48	@ 0x30
 80059f4:	af04      	add	r7, sp, #16
 80059f6:	60f8      	str	r0, [r7, #12]
 80059f8:	60b9      	str	r1, [r7, #8]
 80059fa:	603b      	str	r3, [r7, #0]
 80059fc:	4613      	mov	r3, r2
 80059fe:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005a00:	88fb      	ldrh	r3, [r7, #6]
 8005a02:	009b      	lsls	r3, r3, #2
 8005a04:	4618      	mov	r0, r3
 8005a06:	f001 fda7 	bl	8007558 <pvPortMalloc>
 8005a0a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005a0c:	697b      	ldr	r3, [r7, #20]
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d00e      	beq.n	8005a30 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8005a12:	20a8      	movs	r0, #168	@ 0xa8
 8005a14:	f001 fda0 	bl	8007558 <pvPortMalloc>
 8005a18:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005a1a:	69fb      	ldr	r3, [r7, #28]
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d003      	beq.n	8005a28 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005a20:	69fb      	ldr	r3, [r7, #28]
 8005a22:	697a      	ldr	r2, [r7, #20]
 8005a24:	631a      	str	r2, [r3, #48]	@ 0x30
 8005a26:	e005      	b.n	8005a34 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005a28:	6978      	ldr	r0, [r7, #20]
 8005a2a:	f001 fe63 	bl	80076f4 <vPortFree>
 8005a2e:	e001      	b.n	8005a34 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005a30:	2300      	movs	r3, #0
 8005a32:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005a34:	69fb      	ldr	r3, [r7, #28]
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d017      	beq.n	8005a6a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005a3a:	69fb      	ldr	r3, [r7, #28]
 8005a3c:	2200      	movs	r2, #0
 8005a3e:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005a42:	88fa      	ldrh	r2, [r7, #6]
 8005a44:	2300      	movs	r3, #0
 8005a46:	9303      	str	r3, [sp, #12]
 8005a48:	69fb      	ldr	r3, [r7, #28]
 8005a4a:	9302      	str	r3, [sp, #8]
 8005a4c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005a4e:	9301      	str	r3, [sp, #4]
 8005a50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a52:	9300      	str	r3, [sp, #0]
 8005a54:	683b      	ldr	r3, [r7, #0]
 8005a56:	68b9      	ldr	r1, [r7, #8]
 8005a58:	68f8      	ldr	r0, [r7, #12]
 8005a5a:	f000 f80f 	bl	8005a7c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005a5e:	69f8      	ldr	r0, [r7, #28]
 8005a60:	f000 f8b6 	bl	8005bd0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005a64:	2301      	movs	r3, #1
 8005a66:	61bb      	str	r3, [r7, #24]
 8005a68:	e002      	b.n	8005a70 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005a6a:	f04f 33ff 	mov.w	r3, #4294967295
 8005a6e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005a70:	69bb      	ldr	r3, [r7, #24]
	}
 8005a72:	4618      	mov	r0, r3
 8005a74:	3720      	adds	r7, #32
 8005a76:	46bd      	mov	sp, r7
 8005a78:	bd80      	pop	{r7, pc}
	...

08005a7c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005a7c:	b580      	push	{r7, lr}
 8005a7e:	b088      	sub	sp, #32
 8005a80:	af00      	add	r7, sp, #0
 8005a82:	60f8      	str	r0, [r7, #12]
 8005a84:	60b9      	str	r1, [r7, #8]
 8005a86:	607a      	str	r2, [r7, #4]
 8005a88:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8005a8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a8c:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	009b      	lsls	r3, r3, #2
 8005a92:	461a      	mov	r2, r3
 8005a94:	21a5      	movs	r1, #165	@ 0xa5
 8005a96:	f002 f953 	bl	8007d40 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8005a9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a9c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005a9e:	6879      	ldr	r1, [r7, #4]
 8005aa0:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 8005aa4:	440b      	add	r3, r1
 8005aa6:	009b      	lsls	r3, r3, #2
 8005aa8:	4413      	add	r3, r2
 8005aaa:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8005aac:	69bb      	ldr	r3, [r7, #24]
 8005aae:	f023 0307 	bic.w	r3, r3, #7
 8005ab2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005ab4:	69bb      	ldr	r3, [r7, #24]
 8005ab6:	f003 0307 	and.w	r3, r3, #7
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d00d      	beq.n	8005ada <prvInitialiseNewTask+0x5e>
	__asm volatile
 8005abe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ac2:	b672      	cpsid	i
 8005ac4:	f383 8811 	msr	BASEPRI, r3
 8005ac8:	f3bf 8f6f 	isb	sy
 8005acc:	f3bf 8f4f 	dsb	sy
 8005ad0:	b662      	cpsie	i
 8005ad2:	617b      	str	r3, [r7, #20]
}
 8005ad4:	bf00      	nop
 8005ad6:	bf00      	nop
 8005ad8:	e7fd      	b.n	8005ad6 <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8005ada:	68bb      	ldr	r3, [r7, #8]
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d01f      	beq.n	8005b20 <prvInitialiseNewTask+0xa4>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005ae0:	2300      	movs	r3, #0
 8005ae2:	61fb      	str	r3, [r7, #28]
 8005ae4:	e012      	b.n	8005b0c <prvInitialiseNewTask+0x90>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005ae6:	68ba      	ldr	r2, [r7, #8]
 8005ae8:	69fb      	ldr	r3, [r7, #28]
 8005aea:	4413      	add	r3, r2
 8005aec:	7819      	ldrb	r1, [r3, #0]
 8005aee:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005af0:	69fb      	ldr	r3, [r7, #28]
 8005af2:	4413      	add	r3, r2
 8005af4:	3334      	adds	r3, #52	@ 0x34
 8005af6:	460a      	mov	r2, r1
 8005af8:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8005afa:	68ba      	ldr	r2, [r7, #8]
 8005afc:	69fb      	ldr	r3, [r7, #28]
 8005afe:	4413      	add	r3, r2
 8005b00:	781b      	ldrb	r3, [r3, #0]
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d006      	beq.n	8005b14 <prvInitialiseNewTask+0x98>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005b06:	69fb      	ldr	r3, [r7, #28]
 8005b08:	3301      	adds	r3, #1
 8005b0a:	61fb      	str	r3, [r7, #28]
 8005b0c:	69fb      	ldr	r3, [r7, #28]
 8005b0e:	2b0f      	cmp	r3, #15
 8005b10:	d9e9      	bls.n	8005ae6 <prvInitialiseNewTask+0x6a>
 8005b12:	e000      	b.n	8005b16 <prvInitialiseNewTask+0x9a>
			{
				break;
 8005b14:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005b16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b18:	2200      	movs	r2, #0
 8005b1a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005b1e:	e003      	b.n	8005b28 <prvInitialiseNewTask+0xac>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8005b20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b22:	2200      	movs	r2, #0
 8005b24:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005b28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b2a:	2b37      	cmp	r3, #55	@ 0x37
 8005b2c:	d901      	bls.n	8005b32 <prvInitialiseNewTask+0xb6>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005b2e:	2337      	movs	r3, #55	@ 0x37
 8005b30:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005b32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b34:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005b36:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005b38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b3a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005b3c:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8005b3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b40:	2200      	movs	r2, #0
 8005b42:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005b44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b46:	3304      	adds	r3, #4
 8005b48:	4618      	mov	r0, r3
 8005b4a:	f7fe ff0d 	bl	8004968 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005b4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b50:	3318      	adds	r3, #24
 8005b52:	4618      	mov	r0, r3
 8005b54:	f7fe ff08 	bl	8004968 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005b58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b5a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005b5c:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005b5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b60:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8005b64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b66:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005b68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b6a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005b6c:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005b6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b70:	2200      	movs	r2, #0
 8005b72:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005b76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b78:	2200      	movs	r2, #0
 8005b7a:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8005b7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b80:	3354      	adds	r3, #84	@ 0x54
 8005b82:	224c      	movs	r2, #76	@ 0x4c
 8005b84:	2100      	movs	r1, #0
 8005b86:	4618      	mov	r0, r3
 8005b88:	f002 f8da 	bl	8007d40 <memset>
 8005b8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b8e:	4a0d      	ldr	r2, [pc, #52]	@ (8005bc4 <prvInitialiseNewTask+0x148>)
 8005b90:	659a      	str	r2, [r3, #88]	@ 0x58
 8005b92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b94:	4a0c      	ldr	r2, [pc, #48]	@ (8005bc8 <prvInitialiseNewTask+0x14c>)
 8005b96:	65da      	str	r2, [r3, #92]	@ 0x5c
 8005b98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b9a:	4a0c      	ldr	r2, [pc, #48]	@ (8005bcc <prvInitialiseNewTask+0x150>)
 8005b9c:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005b9e:	683a      	ldr	r2, [r7, #0]
 8005ba0:	68f9      	ldr	r1, [r7, #12]
 8005ba2:	69b8      	ldr	r0, [r7, #24]
 8005ba4:	f001 fa98 	bl	80070d8 <pxPortInitialiseStack>
 8005ba8:	4602      	mov	r2, r0
 8005baa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005bac:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8005bae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d002      	beq.n	8005bba <prvInitialiseNewTask+0x13e>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005bb4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005bb6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005bb8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005bba:	bf00      	nop
 8005bbc:	3720      	adds	r7, #32
 8005bbe:	46bd      	mov	sp, r7
 8005bc0:	bd80      	pop	{r7, pc}
 8005bc2:	bf00      	nop
 8005bc4:	2000521c 	.word	0x2000521c
 8005bc8:	20005284 	.word	0x20005284
 8005bcc:	200052ec 	.word	0x200052ec

08005bd0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005bd0:	b580      	push	{r7, lr}
 8005bd2:	b082      	sub	sp, #8
 8005bd4:	af00      	add	r7, sp, #0
 8005bd6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005bd8:	f001 fb90 	bl	80072fc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005bdc:	4b2d      	ldr	r3, [pc, #180]	@ (8005c94 <prvAddNewTaskToReadyList+0xc4>)
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	3301      	adds	r3, #1
 8005be2:	4a2c      	ldr	r2, [pc, #176]	@ (8005c94 <prvAddNewTaskToReadyList+0xc4>)
 8005be4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005be6:	4b2c      	ldr	r3, [pc, #176]	@ (8005c98 <prvAddNewTaskToReadyList+0xc8>)
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d109      	bne.n	8005c02 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005bee:	4a2a      	ldr	r2, [pc, #168]	@ (8005c98 <prvAddNewTaskToReadyList+0xc8>)
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005bf4:	4b27      	ldr	r3, [pc, #156]	@ (8005c94 <prvAddNewTaskToReadyList+0xc4>)
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	2b01      	cmp	r3, #1
 8005bfa:	d110      	bne.n	8005c1e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005bfc:	f000 fc44 	bl	8006488 <prvInitialiseTaskLists>
 8005c00:	e00d      	b.n	8005c1e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005c02:	4b26      	ldr	r3, [pc, #152]	@ (8005c9c <prvAddNewTaskToReadyList+0xcc>)
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d109      	bne.n	8005c1e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005c0a:	4b23      	ldr	r3, [pc, #140]	@ (8005c98 <prvAddNewTaskToReadyList+0xc8>)
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c14:	429a      	cmp	r2, r3
 8005c16:	d802      	bhi.n	8005c1e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005c18:	4a1f      	ldr	r2, [pc, #124]	@ (8005c98 <prvAddNewTaskToReadyList+0xc8>)
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005c1e:	4b20      	ldr	r3, [pc, #128]	@ (8005ca0 <prvAddNewTaskToReadyList+0xd0>)
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	3301      	adds	r3, #1
 8005c24:	4a1e      	ldr	r2, [pc, #120]	@ (8005ca0 <prvAddNewTaskToReadyList+0xd0>)
 8005c26:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8005c28:	4b1d      	ldr	r3, [pc, #116]	@ (8005ca0 <prvAddNewTaskToReadyList+0xd0>)
 8005c2a:	681a      	ldr	r2, [r3, #0]
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005c34:	4b1b      	ldr	r3, [pc, #108]	@ (8005ca4 <prvAddNewTaskToReadyList+0xd4>)
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	429a      	cmp	r2, r3
 8005c3a:	d903      	bls.n	8005c44 <prvAddNewTaskToReadyList+0x74>
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c40:	4a18      	ldr	r2, [pc, #96]	@ (8005ca4 <prvAddNewTaskToReadyList+0xd4>)
 8005c42:	6013      	str	r3, [r2, #0]
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005c48:	4613      	mov	r3, r2
 8005c4a:	009b      	lsls	r3, r3, #2
 8005c4c:	4413      	add	r3, r2
 8005c4e:	009b      	lsls	r3, r3, #2
 8005c50:	4a15      	ldr	r2, [pc, #84]	@ (8005ca8 <prvAddNewTaskToReadyList+0xd8>)
 8005c52:	441a      	add	r2, r3
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	3304      	adds	r3, #4
 8005c58:	4619      	mov	r1, r3
 8005c5a:	4610      	mov	r0, r2
 8005c5c:	f7fe fe91 	bl	8004982 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005c60:	f001 fb82 	bl	8007368 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005c64:	4b0d      	ldr	r3, [pc, #52]	@ (8005c9c <prvAddNewTaskToReadyList+0xcc>)
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d00e      	beq.n	8005c8a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005c6c:	4b0a      	ldr	r3, [pc, #40]	@ (8005c98 <prvAddNewTaskToReadyList+0xc8>)
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c76:	429a      	cmp	r2, r3
 8005c78:	d207      	bcs.n	8005c8a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005c7a:	4b0c      	ldr	r3, [pc, #48]	@ (8005cac <prvAddNewTaskToReadyList+0xdc>)
 8005c7c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005c80:	601a      	str	r2, [r3, #0]
 8005c82:	f3bf 8f4f 	dsb	sy
 8005c86:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005c8a:	bf00      	nop
 8005c8c:	3708      	adds	r7, #8
 8005c8e:	46bd      	mov	sp, r7
 8005c90:	bd80      	pop	{r7, pc}
 8005c92:	bf00      	nop
 8005c94:	200014a4 	.word	0x200014a4
 8005c98:	20000fd0 	.word	0x20000fd0
 8005c9c:	200014b0 	.word	0x200014b0
 8005ca0:	200014c0 	.word	0x200014c0
 8005ca4:	200014ac 	.word	0x200014ac
 8005ca8:	20000fd4 	.word	0x20000fd4
 8005cac:	e000ed04 	.word	0xe000ed04

08005cb0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005cb0:	b580      	push	{r7, lr}
 8005cb2:	b084      	sub	sp, #16
 8005cb4:	af00      	add	r7, sp, #0
 8005cb6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005cb8:	2300      	movs	r3, #0
 8005cba:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d01a      	beq.n	8005cf8 <vTaskDelay+0x48>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8005cc2:	4b15      	ldr	r3, [pc, #84]	@ (8005d18 <vTaskDelay+0x68>)
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d00d      	beq.n	8005ce6 <vTaskDelay+0x36>
	__asm volatile
 8005cca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005cce:	b672      	cpsid	i
 8005cd0:	f383 8811 	msr	BASEPRI, r3
 8005cd4:	f3bf 8f6f 	isb	sy
 8005cd8:	f3bf 8f4f 	dsb	sy
 8005cdc:	b662      	cpsie	i
 8005cde:	60bb      	str	r3, [r7, #8]
}
 8005ce0:	bf00      	nop
 8005ce2:	bf00      	nop
 8005ce4:	e7fd      	b.n	8005ce2 <vTaskDelay+0x32>
			vTaskSuspendAll();
 8005ce6:	f000 f88f 	bl	8005e08 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005cea:	2100      	movs	r1, #0
 8005cec:	6878      	ldr	r0, [r7, #4]
 8005cee:	f000 fe37 	bl	8006960 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005cf2:	f000 f897 	bl	8005e24 <xTaskResumeAll>
 8005cf6:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d107      	bne.n	8005d0e <vTaskDelay+0x5e>
		{
			portYIELD_WITHIN_API();
 8005cfe:	4b07      	ldr	r3, [pc, #28]	@ (8005d1c <vTaskDelay+0x6c>)
 8005d00:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005d04:	601a      	str	r2, [r3, #0]
 8005d06:	f3bf 8f4f 	dsb	sy
 8005d0a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005d0e:	bf00      	nop
 8005d10:	3710      	adds	r7, #16
 8005d12:	46bd      	mov	sp, r7
 8005d14:	bd80      	pop	{r7, pc}
 8005d16:	bf00      	nop
 8005d18:	200014cc 	.word	0x200014cc
 8005d1c:	e000ed04 	.word	0xe000ed04

08005d20 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005d20:	b580      	push	{r7, lr}
 8005d22:	b08a      	sub	sp, #40	@ 0x28
 8005d24:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005d26:	2300      	movs	r3, #0
 8005d28:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005d2a:	2300      	movs	r3, #0
 8005d2c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005d2e:	463a      	mov	r2, r7
 8005d30:	1d39      	adds	r1, r7, #4
 8005d32:	f107 0308 	add.w	r3, r7, #8
 8005d36:	4618      	mov	r0, r3
 8005d38:	f7fe fdc2 	bl	80048c0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005d3c:	6839      	ldr	r1, [r7, #0]
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	68ba      	ldr	r2, [r7, #8]
 8005d42:	9202      	str	r2, [sp, #8]
 8005d44:	9301      	str	r3, [sp, #4]
 8005d46:	2300      	movs	r3, #0
 8005d48:	9300      	str	r3, [sp, #0]
 8005d4a:	2300      	movs	r3, #0
 8005d4c:	460a      	mov	r2, r1
 8005d4e:	4926      	ldr	r1, [pc, #152]	@ (8005de8 <vTaskStartScheduler+0xc8>)
 8005d50:	4826      	ldr	r0, [pc, #152]	@ (8005dec <vTaskStartScheduler+0xcc>)
 8005d52:	f7ff fde7 	bl	8005924 <xTaskCreateStatic>
 8005d56:	4603      	mov	r3, r0
 8005d58:	4a25      	ldr	r2, [pc, #148]	@ (8005df0 <vTaskStartScheduler+0xd0>)
 8005d5a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005d5c:	4b24      	ldr	r3, [pc, #144]	@ (8005df0 <vTaskStartScheduler+0xd0>)
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d002      	beq.n	8005d6a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005d64:	2301      	movs	r3, #1
 8005d66:	617b      	str	r3, [r7, #20]
 8005d68:	e001      	b.n	8005d6e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005d6a:	2300      	movs	r3, #0
 8005d6c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8005d6e:	697b      	ldr	r3, [r7, #20]
 8005d70:	2b01      	cmp	r3, #1
 8005d72:	d102      	bne.n	8005d7a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8005d74:	f000 fe48 	bl	8006a08 <xTimerCreateTimerTask>
 8005d78:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005d7a:	697b      	ldr	r3, [r7, #20]
 8005d7c:	2b01      	cmp	r3, #1
 8005d7e:	d11d      	bne.n	8005dbc <vTaskStartScheduler+0x9c>
	__asm volatile
 8005d80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d84:	b672      	cpsid	i
 8005d86:	f383 8811 	msr	BASEPRI, r3
 8005d8a:	f3bf 8f6f 	isb	sy
 8005d8e:	f3bf 8f4f 	dsb	sy
 8005d92:	b662      	cpsie	i
 8005d94:	613b      	str	r3, [r7, #16]
}
 8005d96:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005d98:	4b16      	ldr	r3, [pc, #88]	@ (8005df4 <vTaskStartScheduler+0xd4>)
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	3354      	adds	r3, #84	@ 0x54
 8005d9e:	4a16      	ldr	r2, [pc, #88]	@ (8005df8 <vTaskStartScheduler+0xd8>)
 8005da0:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005da2:	4b16      	ldr	r3, [pc, #88]	@ (8005dfc <vTaskStartScheduler+0xdc>)
 8005da4:	f04f 32ff 	mov.w	r2, #4294967295
 8005da8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005daa:	4b15      	ldr	r3, [pc, #84]	@ (8005e00 <vTaskStartScheduler+0xe0>)
 8005dac:	2201      	movs	r2, #1
 8005dae:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8005db0:	4b14      	ldr	r3, [pc, #80]	@ (8005e04 <vTaskStartScheduler+0xe4>)
 8005db2:	2200      	movs	r2, #0
 8005db4:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005db6:	f001 fa23 	bl	8007200 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005dba:	e011      	b.n	8005de0 <vTaskStartScheduler+0xc0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005dbc:	697b      	ldr	r3, [r7, #20]
 8005dbe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005dc2:	d10d      	bne.n	8005de0 <vTaskStartScheduler+0xc0>
	__asm volatile
 8005dc4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005dc8:	b672      	cpsid	i
 8005dca:	f383 8811 	msr	BASEPRI, r3
 8005dce:	f3bf 8f6f 	isb	sy
 8005dd2:	f3bf 8f4f 	dsb	sy
 8005dd6:	b662      	cpsie	i
 8005dd8:	60fb      	str	r3, [r7, #12]
}
 8005dda:	bf00      	nop
 8005ddc:	bf00      	nop
 8005dde:	e7fd      	b.n	8005ddc <vTaskStartScheduler+0xbc>
}
 8005de0:	bf00      	nop
 8005de2:	3718      	adds	r7, #24
 8005de4:	46bd      	mov	sp, r7
 8005de6:	bd80      	pop	{r7, pc}
 8005de8:	080089fc 	.word	0x080089fc
 8005dec:	08006459 	.word	0x08006459
 8005df0:	200014c8 	.word	0x200014c8
 8005df4:	20000fd0 	.word	0x20000fd0
 8005df8:	2000001c 	.word	0x2000001c
 8005dfc:	200014c4 	.word	0x200014c4
 8005e00:	200014b0 	.word	0x200014b0
 8005e04:	200014a8 	.word	0x200014a8

08005e08 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005e08:	b480      	push	{r7}
 8005e0a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8005e0c:	4b04      	ldr	r3, [pc, #16]	@ (8005e20 <vTaskSuspendAll+0x18>)
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	3301      	adds	r3, #1
 8005e12:	4a03      	ldr	r2, [pc, #12]	@ (8005e20 <vTaskSuspendAll+0x18>)
 8005e14:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8005e16:	bf00      	nop
 8005e18:	46bd      	mov	sp, r7
 8005e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e1e:	4770      	bx	lr
 8005e20:	200014cc 	.word	0x200014cc

08005e24 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005e24:	b580      	push	{r7, lr}
 8005e26:	b084      	sub	sp, #16
 8005e28:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005e2a:	2300      	movs	r3, #0
 8005e2c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005e2e:	2300      	movs	r3, #0
 8005e30:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005e32:	4b43      	ldr	r3, [pc, #268]	@ (8005f40 <xTaskResumeAll+0x11c>)
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d10d      	bne.n	8005e56 <xTaskResumeAll+0x32>
	__asm volatile
 8005e3a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e3e:	b672      	cpsid	i
 8005e40:	f383 8811 	msr	BASEPRI, r3
 8005e44:	f3bf 8f6f 	isb	sy
 8005e48:	f3bf 8f4f 	dsb	sy
 8005e4c:	b662      	cpsie	i
 8005e4e:	603b      	str	r3, [r7, #0]
}
 8005e50:	bf00      	nop
 8005e52:	bf00      	nop
 8005e54:	e7fd      	b.n	8005e52 <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005e56:	f001 fa51 	bl	80072fc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005e5a:	4b39      	ldr	r3, [pc, #228]	@ (8005f40 <xTaskResumeAll+0x11c>)
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	3b01      	subs	r3, #1
 8005e60:	4a37      	ldr	r2, [pc, #220]	@ (8005f40 <xTaskResumeAll+0x11c>)
 8005e62:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005e64:	4b36      	ldr	r3, [pc, #216]	@ (8005f40 <xTaskResumeAll+0x11c>)
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d162      	bne.n	8005f32 <xTaskResumeAll+0x10e>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005e6c:	4b35      	ldr	r3, [pc, #212]	@ (8005f44 <xTaskResumeAll+0x120>)
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d05e      	beq.n	8005f32 <xTaskResumeAll+0x10e>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005e74:	e02f      	b.n	8005ed6 <xTaskResumeAll+0xb2>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005e76:	4b34      	ldr	r3, [pc, #208]	@ (8005f48 <xTaskResumeAll+0x124>)
 8005e78:	68db      	ldr	r3, [r3, #12]
 8005e7a:	68db      	ldr	r3, [r3, #12]
 8005e7c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	3318      	adds	r3, #24
 8005e82:	4618      	mov	r0, r3
 8005e84:	f7fe fdda 	bl	8004a3c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	3304      	adds	r3, #4
 8005e8c:	4618      	mov	r0, r3
 8005e8e:	f7fe fdd5 	bl	8004a3c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005e96:	4b2d      	ldr	r3, [pc, #180]	@ (8005f4c <xTaskResumeAll+0x128>)
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	429a      	cmp	r2, r3
 8005e9c:	d903      	bls.n	8005ea6 <xTaskResumeAll+0x82>
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ea2:	4a2a      	ldr	r2, [pc, #168]	@ (8005f4c <xTaskResumeAll+0x128>)
 8005ea4:	6013      	str	r3, [r2, #0]
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005eaa:	4613      	mov	r3, r2
 8005eac:	009b      	lsls	r3, r3, #2
 8005eae:	4413      	add	r3, r2
 8005eb0:	009b      	lsls	r3, r3, #2
 8005eb2:	4a27      	ldr	r2, [pc, #156]	@ (8005f50 <xTaskResumeAll+0x12c>)
 8005eb4:	441a      	add	r2, r3
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	3304      	adds	r3, #4
 8005eba:	4619      	mov	r1, r3
 8005ebc:	4610      	mov	r0, r2
 8005ebe:	f7fe fd60 	bl	8004982 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005ec6:	4b23      	ldr	r3, [pc, #140]	@ (8005f54 <xTaskResumeAll+0x130>)
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ecc:	429a      	cmp	r2, r3
 8005ece:	d302      	bcc.n	8005ed6 <xTaskResumeAll+0xb2>
					{
						xYieldPending = pdTRUE;
 8005ed0:	4b21      	ldr	r3, [pc, #132]	@ (8005f58 <xTaskResumeAll+0x134>)
 8005ed2:	2201      	movs	r2, #1
 8005ed4:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005ed6:	4b1c      	ldr	r3, [pc, #112]	@ (8005f48 <xTaskResumeAll+0x124>)
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d1cb      	bne.n	8005e76 <xTaskResumeAll+0x52>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d001      	beq.n	8005ee8 <xTaskResumeAll+0xc4>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005ee4:	f000 fb76 	bl	80065d4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8005ee8:	4b1c      	ldr	r3, [pc, #112]	@ (8005f5c <xTaskResumeAll+0x138>)
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d010      	beq.n	8005f16 <xTaskResumeAll+0xf2>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005ef4:	f000 f846 	bl	8005f84 <xTaskIncrementTick>
 8005ef8:	4603      	mov	r3, r0
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d002      	beq.n	8005f04 <xTaskResumeAll+0xe0>
							{
								xYieldPending = pdTRUE;
 8005efe:	4b16      	ldr	r3, [pc, #88]	@ (8005f58 <xTaskResumeAll+0x134>)
 8005f00:	2201      	movs	r2, #1
 8005f02:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	3b01      	subs	r3, #1
 8005f08:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d1f1      	bne.n	8005ef4 <xTaskResumeAll+0xd0>

						uxPendedTicks = 0;
 8005f10:	4b12      	ldr	r3, [pc, #72]	@ (8005f5c <xTaskResumeAll+0x138>)
 8005f12:	2200      	movs	r2, #0
 8005f14:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005f16:	4b10      	ldr	r3, [pc, #64]	@ (8005f58 <xTaskResumeAll+0x134>)
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d009      	beq.n	8005f32 <xTaskResumeAll+0x10e>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005f1e:	2301      	movs	r3, #1
 8005f20:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005f22:	4b0f      	ldr	r3, [pc, #60]	@ (8005f60 <xTaskResumeAll+0x13c>)
 8005f24:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005f28:	601a      	str	r2, [r3, #0]
 8005f2a:	f3bf 8f4f 	dsb	sy
 8005f2e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005f32:	f001 fa19 	bl	8007368 <vPortExitCritical>

	return xAlreadyYielded;
 8005f36:	68bb      	ldr	r3, [r7, #8]
}
 8005f38:	4618      	mov	r0, r3
 8005f3a:	3710      	adds	r7, #16
 8005f3c:	46bd      	mov	sp, r7
 8005f3e:	bd80      	pop	{r7, pc}
 8005f40:	200014cc 	.word	0x200014cc
 8005f44:	200014a4 	.word	0x200014a4
 8005f48:	20001464 	.word	0x20001464
 8005f4c:	200014ac 	.word	0x200014ac
 8005f50:	20000fd4 	.word	0x20000fd4
 8005f54:	20000fd0 	.word	0x20000fd0
 8005f58:	200014b8 	.word	0x200014b8
 8005f5c:	200014b4 	.word	0x200014b4
 8005f60:	e000ed04 	.word	0xe000ed04

08005f64 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8005f64:	b480      	push	{r7}
 8005f66:	b083      	sub	sp, #12
 8005f68:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8005f6a:	4b05      	ldr	r3, [pc, #20]	@ (8005f80 <xTaskGetTickCount+0x1c>)
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8005f70:	687b      	ldr	r3, [r7, #4]
}
 8005f72:	4618      	mov	r0, r3
 8005f74:	370c      	adds	r7, #12
 8005f76:	46bd      	mov	sp, r7
 8005f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f7c:	4770      	bx	lr
 8005f7e:	bf00      	nop
 8005f80:	200014a8 	.word	0x200014a8

08005f84 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005f84:	b580      	push	{r7, lr}
 8005f86:	b086      	sub	sp, #24
 8005f88:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005f8a:	2300      	movs	r3, #0
 8005f8c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005f8e:	4b50      	ldr	r3, [pc, #320]	@ (80060d0 <xTaskIncrementTick+0x14c>)
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	f040 808c 	bne.w	80060b0 <xTaskIncrementTick+0x12c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005f98:	4b4e      	ldr	r3, [pc, #312]	@ (80060d4 <xTaskIncrementTick+0x150>)
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	3301      	adds	r3, #1
 8005f9e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005fa0:	4a4c      	ldr	r2, [pc, #304]	@ (80060d4 <xTaskIncrementTick+0x150>)
 8005fa2:	693b      	ldr	r3, [r7, #16]
 8005fa4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005fa6:	693b      	ldr	r3, [r7, #16]
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d123      	bne.n	8005ff4 <xTaskIncrementTick+0x70>
		{
			taskSWITCH_DELAYED_LISTS();
 8005fac:	4b4a      	ldr	r3, [pc, #296]	@ (80060d8 <xTaskIncrementTick+0x154>)
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d00d      	beq.n	8005fd2 <xTaskIncrementTick+0x4e>
	__asm volatile
 8005fb6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005fba:	b672      	cpsid	i
 8005fbc:	f383 8811 	msr	BASEPRI, r3
 8005fc0:	f3bf 8f6f 	isb	sy
 8005fc4:	f3bf 8f4f 	dsb	sy
 8005fc8:	b662      	cpsie	i
 8005fca:	603b      	str	r3, [r7, #0]
}
 8005fcc:	bf00      	nop
 8005fce:	bf00      	nop
 8005fd0:	e7fd      	b.n	8005fce <xTaskIncrementTick+0x4a>
 8005fd2:	4b41      	ldr	r3, [pc, #260]	@ (80060d8 <xTaskIncrementTick+0x154>)
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	60fb      	str	r3, [r7, #12]
 8005fd8:	4b40      	ldr	r3, [pc, #256]	@ (80060dc <xTaskIncrementTick+0x158>)
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	4a3e      	ldr	r2, [pc, #248]	@ (80060d8 <xTaskIncrementTick+0x154>)
 8005fde:	6013      	str	r3, [r2, #0]
 8005fe0:	4a3e      	ldr	r2, [pc, #248]	@ (80060dc <xTaskIncrementTick+0x158>)
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	6013      	str	r3, [r2, #0]
 8005fe6:	4b3e      	ldr	r3, [pc, #248]	@ (80060e0 <xTaskIncrementTick+0x15c>)
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	3301      	adds	r3, #1
 8005fec:	4a3c      	ldr	r2, [pc, #240]	@ (80060e0 <xTaskIncrementTick+0x15c>)
 8005fee:	6013      	str	r3, [r2, #0]
 8005ff0:	f000 faf0 	bl	80065d4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005ff4:	4b3b      	ldr	r3, [pc, #236]	@ (80060e4 <xTaskIncrementTick+0x160>)
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	693a      	ldr	r2, [r7, #16]
 8005ffa:	429a      	cmp	r2, r3
 8005ffc:	d349      	bcc.n	8006092 <xTaskIncrementTick+0x10e>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005ffe:	4b36      	ldr	r3, [pc, #216]	@ (80060d8 <xTaskIncrementTick+0x154>)
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	2b00      	cmp	r3, #0
 8006006:	d104      	bne.n	8006012 <xTaskIncrementTick+0x8e>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006008:	4b36      	ldr	r3, [pc, #216]	@ (80060e4 <xTaskIncrementTick+0x160>)
 800600a:	f04f 32ff 	mov.w	r2, #4294967295
 800600e:	601a      	str	r2, [r3, #0]
					break;
 8006010:	e03f      	b.n	8006092 <xTaskIncrementTick+0x10e>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006012:	4b31      	ldr	r3, [pc, #196]	@ (80060d8 <xTaskIncrementTick+0x154>)
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	68db      	ldr	r3, [r3, #12]
 8006018:	68db      	ldr	r3, [r3, #12]
 800601a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800601c:	68bb      	ldr	r3, [r7, #8]
 800601e:	685b      	ldr	r3, [r3, #4]
 8006020:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006022:	693a      	ldr	r2, [r7, #16]
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	429a      	cmp	r2, r3
 8006028:	d203      	bcs.n	8006032 <xTaskIncrementTick+0xae>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800602a:	4a2e      	ldr	r2, [pc, #184]	@ (80060e4 <xTaskIncrementTick+0x160>)
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8006030:	e02f      	b.n	8006092 <xTaskIncrementTick+0x10e>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006032:	68bb      	ldr	r3, [r7, #8]
 8006034:	3304      	adds	r3, #4
 8006036:	4618      	mov	r0, r3
 8006038:	f7fe fd00 	bl	8004a3c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800603c:	68bb      	ldr	r3, [r7, #8]
 800603e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006040:	2b00      	cmp	r3, #0
 8006042:	d004      	beq.n	800604e <xTaskIncrementTick+0xca>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006044:	68bb      	ldr	r3, [r7, #8]
 8006046:	3318      	adds	r3, #24
 8006048:	4618      	mov	r0, r3
 800604a:	f7fe fcf7 	bl	8004a3c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800604e:	68bb      	ldr	r3, [r7, #8]
 8006050:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006052:	4b25      	ldr	r3, [pc, #148]	@ (80060e8 <xTaskIncrementTick+0x164>)
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	429a      	cmp	r2, r3
 8006058:	d903      	bls.n	8006062 <xTaskIncrementTick+0xde>
 800605a:	68bb      	ldr	r3, [r7, #8]
 800605c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800605e:	4a22      	ldr	r2, [pc, #136]	@ (80060e8 <xTaskIncrementTick+0x164>)
 8006060:	6013      	str	r3, [r2, #0]
 8006062:	68bb      	ldr	r3, [r7, #8]
 8006064:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006066:	4613      	mov	r3, r2
 8006068:	009b      	lsls	r3, r3, #2
 800606a:	4413      	add	r3, r2
 800606c:	009b      	lsls	r3, r3, #2
 800606e:	4a1f      	ldr	r2, [pc, #124]	@ (80060ec <xTaskIncrementTick+0x168>)
 8006070:	441a      	add	r2, r3
 8006072:	68bb      	ldr	r3, [r7, #8]
 8006074:	3304      	adds	r3, #4
 8006076:	4619      	mov	r1, r3
 8006078:	4610      	mov	r0, r2
 800607a:	f7fe fc82 	bl	8004982 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800607e:	68bb      	ldr	r3, [r7, #8]
 8006080:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006082:	4b1b      	ldr	r3, [pc, #108]	@ (80060f0 <xTaskIncrementTick+0x16c>)
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006088:	429a      	cmp	r2, r3
 800608a:	d3b8      	bcc.n	8005ffe <xTaskIncrementTick+0x7a>
						{
							xSwitchRequired = pdTRUE;
 800608c:	2301      	movs	r3, #1
 800608e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006090:	e7b5      	b.n	8005ffe <xTaskIncrementTick+0x7a>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006092:	4b17      	ldr	r3, [pc, #92]	@ (80060f0 <xTaskIncrementTick+0x16c>)
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006098:	4914      	ldr	r1, [pc, #80]	@ (80060ec <xTaskIncrementTick+0x168>)
 800609a:	4613      	mov	r3, r2
 800609c:	009b      	lsls	r3, r3, #2
 800609e:	4413      	add	r3, r2
 80060a0:	009b      	lsls	r3, r3, #2
 80060a2:	440b      	add	r3, r1
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	2b01      	cmp	r3, #1
 80060a8:	d907      	bls.n	80060ba <xTaskIncrementTick+0x136>
			{
				xSwitchRequired = pdTRUE;
 80060aa:	2301      	movs	r3, #1
 80060ac:	617b      	str	r3, [r7, #20]
 80060ae:	e004      	b.n	80060ba <xTaskIncrementTick+0x136>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80060b0:	4b10      	ldr	r3, [pc, #64]	@ (80060f4 <xTaskIncrementTick+0x170>)
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	3301      	adds	r3, #1
 80060b6:	4a0f      	ldr	r2, [pc, #60]	@ (80060f4 <xTaskIncrementTick+0x170>)
 80060b8:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80060ba:	4b0f      	ldr	r3, [pc, #60]	@ (80060f8 <xTaskIncrementTick+0x174>)
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d001      	beq.n	80060c6 <xTaskIncrementTick+0x142>
		{
			xSwitchRequired = pdTRUE;
 80060c2:	2301      	movs	r3, #1
 80060c4:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80060c6:	697b      	ldr	r3, [r7, #20]
}
 80060c8:	4618      	mov	r0, r3
 80060ca:	3718      	adds	r7, #24
 80060cc:	46bd      	mov	sp, r7
 80060ce:	bd80      	pop	{r7, pc}
 80060d0:	200014cc 	.word	0x200014cc
 80060d4:	200014a8 	.word	0x200014a8
 80060d8:	2000145c 	.word	0x2000145c
 80060dc:	20001460 	.word	0x20001460
 80060e0:	200014bc 	.word	0x200014bc
 80060e4:	200014c4 	.word	0x200014c4
 80060e8:	200014ac 	.word	0x200014ac
 80060ec:	20000fd4 	.word	0x20000fd4
 80060f0:	20000fd0 	.word	0x20000fd0
 80060f4:	200014b4 	.word	0x200014b4
 80060f8:	200014b8 	.word	0x200014b8

080060fc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80060fc:	b480      	push	{r7}
 80060fe:	b085      	sub	sp, #20
 8006100:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006102:	4b2c      	ldr	r3, [pc, #176]	@ (80061b4 <vTaskSwitchContext+0xb8>)
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	2b00      	cmp	r3, #0
 8006108:	d003      	beq.n	8006112 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800610a:	4b2b      	ldr	r3, [pc, #172]	@ (80061b8 <vTaskSwitchContext+0xbc>)
 800610c:	2201      	movs	r2, #1
 800610e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006110:	e049      	b.n	80061a6 <vTaskSwitchContext+0xaa>
		xYieldPending = pdFALSE;
 8006112:	4b29      	ldr	r3, [pc, #164]	@ (80061b8 <vTaskSwitchContext+0xbc>)
 8006114:	2200      	movs	r2, #0
 8006116:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006118:	4b28      	ldr	r3, [pc, #160]	@ (80061bc <vTaskSwitchContext+0xc0>)
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	60fb      	str	r3, [r7, #12]
 800611e:	e013      	b.n	8006148 <vTaskSwitchContext+0x4c>
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	2b00      	cmp	r3, #0
 8006124:	d10d      	bne.n	8006142 <vTaskSwitchContext+0x46>
	__asm volatile
 8006126:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800612a:	b672      	cpsid	i
 800612c:	f383 8811 	msr	BASEPRI, r3
 8006130:	f3bf 8f6f 	isb	sy
 8006134:	f3bf 8f4f 	dsb	sy
 8006138:	b662      	cpsie	i
 800613a:	607b      	str	r3, [r7, #4]
}
 800613c:	bf00      	nop
 800613e:	bf00      	nop
 8006140:	e7fd      	b.n	800613e <vTaskSwitchContext+0x42>
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	3b01      	subs	r3, #1
 8006146:	60fb      	str	r3, [r7, #12]
 8006148:	491d      	ldr	r1, [pc, #116]	@ (80061c0 <vTaskSwitchContext+0xc4>)
 800614a:	68fa      	ldr	r2, [r7, #12]
 800614c:	4613      	mov	r3, r2
 800614e:	009b      	lsls	r3, r3, #2
 8006150:	4413      	add	r3, r2
 8006152:	009b      	lsls	r3, r3, #2
 8006154:	440b      	add	r3, r1
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	2b00      	cmp	r3, #0
 800615a:	d0e1      	beq.n	8006120 <vTaskSwitchContext+0x24>
 800615c:	68fa      	ldr	r2, [r7, #12]
 800615e:	4613      	mov	r3, r2
 8006160:	009b      	lsls	r3, r3, #2
 8006162:	4413      	add	r3, r2
 8006164:	009b      	lsls	r3, r3, #2
 8006166:	4a16      	ldr	r2, [pc, #88]	@ (80061c0 <vTaskSwitchContext+0xc4>)
 8006168:	4413      	add	r3, r2
 800616a:	60bb      	str	r3, [r7, #8]
 800616c:	68bb      	ldr	r3, [r7, #8]
 800616e:	685b      	ldr	r3, [r3, #4]
 8006170:	685a      	ldr	r2, [r3, #4]
 8006172:	68bb      	ldr	r3, [r7, #8]
 8006174:	605a      	str	r2, [r3, #4]
 8006176:	68bb      	ldr	r3, [r7, #8]
 8006178:	685a      	ldr	r2, [r3, #4]
 800617a:	68bb      	ldr	r3, [r7, #8]
 800617c:	3308      	adds	r3, #8
 800617e:	429a      	cmp	r2, r3
 8006180:	d104      	bne.n	800618c <vTaskSwitchContext+0x90>
 8006182:	68bb      	ldr	r3, [r7, #8]
 8006184:	685b      	ldr	r3, [r3, #4]
 8006186:	685a      	ldr	r2, [r3, #4]
 8006188:	68bb      	ldr	r3, [r7, #8]
 800618a:	605a      	str	r2, [r3, #4]
 800618c:	68bb      	ldr	r3, [r7, #8]
 800618e:	685b      	ldr	r3, [r3, #4]
 8006190:	68db      	ldr	r3, [r3, #12]
 8006192:	4a0c      	ldr	r2, [pc, #48]	@ (80061c4 <vTaskSwitchContext+0xc8>)
 8006194:	6013      	str	r3, [r2, #0]
 8006196:	4a09      	ldr	r2, [pc, #36]	@ (80061bc <vTaskSwitchContext+0xc0>)
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800619c:	4b09      	ldr	r3, [pc, #36]	@ (80061c4 <vTaskSwitchContext+0xc8>)
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	3354      	adds	r3, #84	@ 0x54
 80061a2:	4a09      	ldr	r2, [pc, #36]	@ (80061c8 <vTaskSwitchContext+0xcc>)
 80061a4:	6013      	str	r3, [r2, #0]
}
 80061a6:	bf00      	nop
 80061a8:	3714      	adds	r7, #20
 80061aa:	46bd      	mov	sp, r7
 80061ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061b0:	4770      	bx	lr
 80061b2:	bf00      	nop
 80061b4:	200014cc 	.word	0x200014cc
 80061b8:	200014b8 	.word	0x200014b8
 80061bc:	200014ac 	.word	0x200014ac
 80061c0:	20000fd4 	.word	0x20000fd4
 80061c4:	20000fd0 	.word	0x20000fd0
 80061c8:	2000001c 	.word	0x2000001c

080061cc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80061cc:	b580      	push	{r7, lr}
 80061ce:	b084      	sub	sp, #16
 80061d0:	af00      	add	r7, sp, #0
 80061d2:	6078      	str	r0, [r7, #4]
 80061d4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d10d      	bne.n	80061f8 <vTaskPlaceOnEventList+0x2c>
	__asm volatile
 80061dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80061e0:	b672      	cpsid	i
 80061e2:	f383 8811 	msr	BASEPRI, r3
 80061e6:	f3bf 8f6f 	isb	sy
 80061ea:	f3bf 8f4f 	dsb	sy
 80061ee:	b662      	cpsie	i
 80061f0:	60fb      	str	r3, [r7, #12]
}
 80061f2:	bf00      	nop
 80061f4:	bf00      	nop
 80061f6:	e7fd      	b.n	80061f4 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80061f8:	4b07      	ldr	r3, [pc, #28]	@ (8006218 <vTaskPlaceOnEventList+0x4c>)
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	3318      	adds	r3, #24
 80061fe:	4619      	mov	r1, r3
 8006200:	6878      	ldr	r0, [r7, #4]
 8006202:	f7fe fbe2 	bl	80049ca <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006206:	2101      	movs	r1, #1
 8006208:	6838      	ldr	r0, [r7, #0]
 800620a:	f000 fba9 	bl	8006960 <prvAddCurrentTaskToDelayedList>
}
 800620e:	bf00      	nop
 8006210:	3710      	adds	r7, #16
 8006212:	46bd      	mov	sp, r7
 8006214:	bd80      	pop	{r7, pc}
 8006216:	bf00      	nop
 8006218:	20000fd0 	.word	0x20000fd0

0800621c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800621c:	b580      	push	{r7, lr}
 800621e:	b086      	sub	sp, #24
 8006220:	af00      	add	r7, sp, #0
 8006222:	60f8      	str	r0, [r7, #12]
 8006224:	60b9      	str	r1, [r7, #8]
 8006226:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	2b00      	cmp	r3, #0
 800622c:	d10d      	bne.n	800624a <vTaskPlaceOnEventListRestricted+0x2e>
	__asm volatile
 800622e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006232:	b672      	cpsid	i
 8006234:	f383 8811 	msr	BASEPRI, r3
 8006238:	f3bf 8f6f 	isb	sy
 800623c:	f3bf 8f4f 	dsb	sy
 8006240:	b662      	cpsie	i
 8006242:	617b      	str	r3, [r7, #20]
}
 8006244:	bf00      	nop
 8006246:	bf00      	nop
 8006248:	e7fd      	b.n	8006246 <vTaskPlaceOnEventListRestricted+0x2a>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800624a:	4b0a      	ldr	r3, [pc, #40]	@ (8006274 <vTaskPlaceOnEventListRestricted+0x58>)
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	3318      	adds	r3, #24
 8006250:	4619      	mov	r1, r3
 8006252:	68f8      	ldr	r0, [r7, #12]
 8006254:	f7fe fb95 	bl	8004982 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	2b00      	cmp	r3, #0
 800625c:	d002      	beq.n	8006264 <vTaskPlaceOnEventListRestricted+0x48>
		{
			xTicksToWait = portMAX_DELAY;
 800625e:	f04f 33ff 	mov.w	r3, #4294967295
 8006262:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8006264:	6879      	ldr	r1, [r7, #4]
 8006266:	68b8      	ldr	r0, [r7, #8]
 8006268:	f000 fb7a 	bl	8006960 <prvAddCurrentTaskToDelayedList>
	}
 800626c:	bf00      	nop
 800626e:	3718      	adds	r7, #24
 8006270:	46bd      	mov	sp, r7
 8006272:	bd80      	pop	{r7, pc}
 8006274:	20000fd0 	.word	0x20000fd0

08006278 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006278:	b580      	push	{r7, lr}
 800627a:	b086      	sub	sp, #24
 800627c:	af00      	add	r7, sp, #0
 800627e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	68db      	ldr	r3, [r3, #12]
 8006284:	68db      	ldr	r3, [r3, #12]
 8006286:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8006288:	693b      	ldr	r3, [r7, #16]
 800628a:	2b00      	cmp	r3, #0
 800628c:	d10d      	bne.n	80062aa <xTaskRemoveFromEventList+0x32>
	__asm volatile
 800628e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006292:	b672      	cpsid	i
 8006294:	f383 8811 	msr	BASEPRI, r3
 8006298:	f3bf 8f6f 	isb	sy
 800629c:	f3bf 8f4f 	dsb	sy
 80062a0:	b662      	cpsie	i
 80062a2:	60fb      	str	r3, [r7, #12]
}
 80062a4:	bf00      	nop
 80062a6:	bf00      	nop
 80062a8:	e7fd      	b.n	80062a6 <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80062aa:	693b      	ldr	r3, [r7, #16]
 80062ac:	3318      	adds	r3, #24
 80062ae:	4618      	mov	r0, r3
 80062b0:	f7fe fbc4 	bl	8004a3c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80062b4:	4b1d      	ldr	r3, [pc, #116]	@ (800632c <xTaskRemoveFromEventList+0xb4>)
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d11d      	bne.n	80062f8 <xTaskRemoveFromEventList+0x80>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80062bc:	693b      	ldr	r3, [r7, #16]
 80062be:	3304      	adds	r3, #4
 80062c0:	4618      	mov	r0, r3
 80062c2:	f7fe fbbb 	bl	8004a3c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80062c6:	693b      	ldr	r3, [r7, #16]
 80062c8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80062ca:	4b19      	ldr	r3, [pc, #100]	@ (8006330 <xTaskRemoveFromEventList+0xb8>)
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	429a      	cmp	r2, r3
 80062d0:	d903      	bls.n	80062da <xTaskRemoveFromEventList+0x62>
 80062d2:	693b      	ldr	r3, [r7, #16]
 80062d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80062d6:	4a16      	ldr	r2, [pc, #88]	@ (8006330 <xTaskRemoveFromEventList+0xb8>)
 80062d8:	6013      	str	r3, [r2, #0]
 80062da:	693b      	ldr	r3, [r7, #16]
 80062dc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80062de:	4613      	mov	r3, r2
 80062e0:	009b      	lsls	r3, r3, #2
 80062e2:	4413      	add	r3, r2
 80062e4:	009b      	lsls	r3, r3, #2
 80062e6:	4a13      	ldr	r2, [pc, #76]	@ (8006334 <xTaskRemoveFromEventList+0xbc>)
 80062e8:	441a      	add	r2, r3
 80062ea:	693b      	ldr	r3, [r7, #16]
 80062ec:	3304      	adds	r3, #4
 80062ee:	4619      	mov	r1, r3
 80062f0:	4610      	mov	r0, r2
 80062f2:	f7fe fb46 	bl	8004982 <vListInsertEnd>
 80062f6:	e005      	b.n	8006304 <xTaskRemoveFromEventList+0x8c>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80062f8:	693b      	ldr	r3, [r7, #16]
 80062fa:	3318      	adds	r3, #24
 80062fc:	4619      	mov	r1, r3
 80062fe:	480e      	ldr	r0, [pc, #56]	@ (8006338 <xTaskRemoveFromEventList+0xc0>)
 8006300:	f7fe fb3f 	bl	8004982 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006304:	693b      	ldr	r3, [r7, #16]
 8006306:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006308:	4b0c      	ldr	r3, [pc, #48]	@ (800633c <xTaskRemoveFromEventList+0xc4>)
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800630e:	429a      	cmp	r2, r3
 8006310:	d905      	bls.n	800631e <xTaskRemoveFromEventList+0xa6>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8006312:	2301      	movs	r3, #1
 8006314:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8006316:	4b0a      	ldr	r3, [pc, #40]	@ (8006340 <xTaskRemoveFromEventList+0xc8>)
 8006318:	2201      	movs	r2, #1
 800631a:	601a      	str	r2, [r3, #0]
 800631c:	e001      	b.n	8006322 <xTaskRemoveFromEventList+0xaa>
	}
	else
	{
		xReturn = pdFALSE;
 800631e:	2300      	movs	r3, #0
 8006320:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8006322:	697b      	ldr	r3, [r7, #20]
}
 8006324:	4618      	mov	r0, r3
 8006326:	3718      	adds	r7, #24
 8006328:	46bd      	mov	sp, r7
 800632a:	bd80      	pop	{r7, pc}
 800632c:	200014cc 	.word	0x200014cc
 8006330:	200014ac 	.word	0x200014ac
 8006334:	20000fd4 	.word	0x20000fd4
 8006338:	20001464 	.word	0x20001464
 800633c:	20000fd0 	.word	0x20000fd0
 8006340:	200014b8 	.word	0x200014b8

08006344 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006344:	b480      	push	{r7}
 8006346:	b083      	sub	sp, #12
 8006348:	af00      	add	r7, sp, #0
 800634a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800634c:	4b06      	ldr	r3, [pc, #24]	@ (8006368 <vTaskInternalSetTimeOutState+0x24>)
 800634e:	681a      	ldr	r2, [r3, #0]
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006354:	4b05      	ldr	r3, [pc, #20]	@ (800636c <vTaskInternalSetTimeOutState+0x28>)
 8006356:	681a      	ldr	r2, [r3, #0]
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	605a      	str	r2, [r3, #4]
}
 800635c:	bf00      	nop
 800635e:	370c      	adds	r7, #12
 8006360:	46bd      	mov	sp, r7
 8006362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006366:	4770      	bx	lr
 8006368:	200014bc 	.word	0x200014bc
 800636c:	200014a8 	.word	0x200014a8

08006370 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8006370:	b580      	push	{r7, lr}
 8006372:	b088      	sub	sp, #32
 8006374:	af00      	add	r7, sp, #0
 8006376:	6078      	str	r0, [r7, #4]
 8006378:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	2b00      	cmp	r3, #0
 800637e:	d10d      	bne.n	800639c <xTaskCheckForTimeOut+0x2c>
	__asm volatile
 8006380:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006384:	b672      	cpsid	i
 8006386:	f383 8811 	msr	BASEPRI, r3
 800638a:	f3bf 8f6f 	isb	sy
 800638e:	f3bf 8f4f 	dsb	sy
 8006392:	b662      	cpsie	i
 8006394:	613b      	str	r3, [r7, #16]
}
 8006396:	bf00      	nop
 8006398:	bf00      	nop
 800639a:	e7fd      	b.n	8006398 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 800639c:	683b      	ldr	r3, [r7, #0]
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d10d      	bne.n	80063be <xTaskCheckForTimeOut+0x4e>
	__asm volatile
 80063a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80063a6:	b672      	cpsid	i
 80063a8:	f383 8811 	msr	BASEPRI, r3
 80063ac:	f3bf 8f6f 	isb	sy
 80063b0:	f3bf 8f4f 	dsb	sy
 80063b4:	b662      	cpsie	i
 80063b6:	60fb      	str	r3, [r7, #12]
}
 80063b8:	bf00      	nop
 80063ba:	bf00      	nop
 80063bc:	e7fd      	b.n	80063ba <xTaskCheckForTimeOut+0x4a>

	taskENTER_CRITICAL();
 80063be:	f000 ff9d 	bl	80072fc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80063c2:	4b1d      	ldr	r3, [pc, #116]	@ (8006438 <xTaskCheckForTimeOut+0xc8>)
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	685b      	ldr	r3, [r3, #4]
 80063cc:	69ba      	ldr	r2, [r7, #24]
 80063ce:	1ad3      	subs	r3, r2, r3
 80063d0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80063d2:	683b      	ldr	r3, [r7, #0]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063da:	d102      	bne.n	80063e2 <xTaskCheckForTimeOut+0x72>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80063dc:	2300      	movs	r3, #0
 80063de:	61fb      	str	r3, [r7, #28]
 80063e0:	e023      	b.n	800642a <xTaskCheckForTimeOut+0xba>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	681a      	ldr	r2, [r3, #0]
 80063e6:	4b15      	ldr	r3, [pc, #84]	@ (800643c <xTaskCheckForTimeOut+0xcc>)
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	429a      	cmp	r2, r3
 80063ec:	d007      	beq.n	80063fe <xTaskCheckForTimeOut+0x8e>
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	685b      	ldr	r3, [r3, #4]
 80063f2:	69ba      	ldr	r2, [r7, #24]
 80063f4:	429a      	cmp	r2, r3
 80063f6:	d302      	bcc.n	80063fe <xTaskCheckForTimeOut+0x8e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80063f8:	2301      	movs	r3, #1
 80063fa:	61fb      	str	r3, [r7, #28]
 80063fc:	e015      	b.n	800642a <xTaskCheckForTimeOut+0xba>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80063fe:	683b      	ldr	r3, [r7, #0]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	697a      	ldr	r2, [r7, #20]
 8006404:	429a      	cmp	r2, r3
 8006406:	d20b      	bcs.n	8006420 <xTaskCheckForTimeOut+0xb0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8006408:	683b      	ldr	r3, [r7, #0]
 800640a:	681a      	ldr	r2, [r3, #0]
 800640c:	697b      	ldr	r3, [r7, #20]
 800640e:	1ad2      	subs	r2, r2, r3
 8006410:	683b      	ldr	r3, [r7, #0]
 8006412:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8006414:	6878      	ldr	r0, [r7, #4]
 8006416:	f7ff ff95 	bl	8006344 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800641a:	2300      	movs	r3, #0
 800641c:	61fb      	str	r3, [r7, #28]
 800641e:	e004      	b.n	800642a <xTaskCheckForTimeOut+0xba>
		}
		else
		{
			*pxTicksToWait = 0;
 8006420:	683b      	ldr	r3, [r7, #0]
 8006422:	2200      	movs	r2, #0
 8006424:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8006426:	2301      	movs	r3, #1
 8006428:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800642a:	f000 ff9d 	bl	8007368 <vPortExitCritical>

	return xReturn;
 800642e:	69fb      	ldr	r3, [r7, #28]
}
 8006430:	4618      	mov	r0, r3
 8006432:	3720      	adds	r7, #32
 8006434:	46bd      	mov	sp, r7
 8006436:	bd80      	pop	{r7, pc}
 8006438:	200014a8 	.word	0x200014a8
 800643c:	200014bc 	.word	0x200014bc

08006440 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006440:	b480      	push	{r7}
 8006442:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8006444:	4b03      	ldr	r3, [pc, #12]	@ (8006454 <vTaskMissedYield+0x14>)
 8006446:	2201      	movs	r2, #1
 8006448:	601a      	str	r2, [r3, #0]
}
 800644a:	bf00      	nop
 800644c:	46bd      	mov	sp, r7
 800644e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006452:	4770      	bx	lr
 8006454:	200014b8 	.word	0x200014b8

08006458 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006458:	b580      	push	{r7, lr}
 800645a:	b082      	sub	sp, #8
 800645c:	af00      	add	r7, sp, #0
 800645e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006460:	f000 f852 	bl	8006508 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006464:	4b06      	ldr	r3, [pc, #24]	@ (8006480 <prvIdleTask+0x28>)
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	2b01      	cmp	r3, #1
 800646a:	d9f9      	bls.n	8006460 <prvIdleTask+0x8>
			{
				taskYIELD();
 800646c:	4b05      	ldr	r3, [pc, #20]	@ (8006484 <prvIdleTask+0x2c>)
 800646e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006472:	601a      	str	r2, [r3, #0]
 8006474:	f3bf 8f4f 	dsb	sy
 8006478:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800647c:	e7f0      	b.n	8006460 <prvIdleTask+0x8>
 800647e:	bf00      	nop
 8006480:	20000fd4 	.word	0x20000fd4
 8006484:	e000ed04 	.word	0xe000ed04

08006488 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006488:	b580      	push	{r7, lr}
 800648a:	b082      	sub	sp, #8
 800648c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800648e:	2300      	movs	r3, #0
 8006490:	607b      	str	r3, [r7, #4]
 8006492:	e00c      	b.n	80064ae <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006494:	687a      	ldr	r2, [r7, #4]
 8006496:	4613      	mov	r3, r2
 8006498:	009b      	lsls	r3, r3, #2
 800649a:	4413      	add	r3, r2
 800649c:	009b      	lsls	r3, r3, #2
 800649e:	4a12      	ldr	r2, [pc, #72]	@ (80064e8 <prvInitialiseTaskLists+0x60>)
 80064a0:	4413      	add	r3, r2
 80064a2:	4618      	mov	r0, r3
 80064a4:	f7fe fa40 	bl	8004928 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	3301      	adds	r3, #1
 80064ac:	607b      	str	r3, [r7, #4]
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	2b37      	cmp	r3, #55	@ 0x37
 80064b2:	d9ef      	bls.n	8006494 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80064b4:	480d      	ldr	r0, [pc, #52]	@ (80064ec <prvInitialiseTaskLists+0x64>)
 80064b6:	f7fe fa37 	bl	8004928 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80064ba:	480d      	ldr	r0, [pc, #52]	@ (80064f0 <prvInitialiseTaskLists+0x68>)
 80064bc:	f7fe fa34 	bl	8004928 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80064c0:	480c      	ldr	r0, [pc, #48]	@ (80064f4 <prvInitialiseTaskLists+0x6c>)
 80064c2:	f7fe fa31 	bl	8004928 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80064c6:	480c      	ldr	r0, [pc, #48]	@ (80064f8 <prvInitialiseTaskLists+0x70>)
 80064c8:	f7fe fa2e 	bl	8004928 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80064cc:	480b      	ldr	r0, [pc, #44]	@ (80064fc <prvInitialiseTaskLists+0x74>)
 80064ce:	f7fe fa2b 	bl	8004928 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80064d2:	4b0b      	ldr	r3, [pc, #44]	@ (8006500 <prvInitialiseTaskLists+0x78>)
 80064d4:	4a05      	ldr	r2, [pc, #20]	@ (80064ec <prvInitialiseTaskLists+0x64>)
 80064d6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80064d8:	4b0a      	ldr	r3, [pc, #40]	@ (8006504 <prvInitialiseTaskLists+0x7c>)
 80064da:	4a05      	ldr	r2, [pc, #20]	@ (80064f0 <prvInitialiseTaskLists+0x68>)
 80064dc:	601a      	str	r2, [r3, #0]
}
 80064de:	bf00      	nop
 80064e0:	3708      	adds	r7, #8
 80064e2:	46bd      	mov	sp, r7
 80064e4:	bd80      	pop	{r7, pc}
 80064e6:	bf00      	nop
 80064e8:	20000fd4 	.word	0x20000fd4
 80064ec:	20001434 	.word	0x20001434
 80064f0:	20001448 	.word	0x20001448
 80064f4:	20001464 	.word	0x20001464
 80064f8:	20001478 	.word	0x20001478
 80064fc:	20001490 	.word	0x20001490
 8006500:	2000145c 	.word	0x2000145c
 8006504:	20001460 	.word	0x20001460

08006508 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006508:	b580      	push	{r7, lr}
 800650a:	b082      	sub	sp, #8
 800650c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800650e:	e019      	b.n	8006544 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006510:	f000 fef4 	bl	80072fc <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006514:	4b10      	ldr	r3, [pc, #64]	@ (8006558 <prvCheckTasksWaitingTermination+0x50>)
 8006516:	68db      	ldr	r3, [r3, #12]
 8006518:	68db      	ldr	r3, [r3, #12]
 800651a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	3304      	adds	r3, #4
 8006520:	4618      	mov	r0, r3
 8006522:	f7fe fa8b 	bl	8004a3c <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006526:	4b0d      	ldr	r3, [pc, #52]	@ (800655c <prvCheckTasksWaitingTermination+0x54>)
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	3b01      	subs	r3, #1
 800652c:	4a0b      	ldr	r2, [pc, #44]	@ (800655c <prvCheckTasksWaitingTermination+0x54>)
 800652e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006530:	4b0b      	ldr	r3, [pc, #44]	@ (8006560 <prvCheckTasksWaitingTermination+0x58>)
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	3b01      	subs	r3, #1
 8006536:	4a0a      	ldr	r2, [pc, #40]	@ (8006560 <prvCheckTasksWaitingTermination+0x58>)
 8006538:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800653a:	f000 ff15 	bl	8007368 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800653e:	6878      	ldr	r0, [r7, #4]
 8006540:	f000 f810 	bl	8006564 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006544:	4b06      	ldr	r3, [pc, #24]	@ (8006560 <prvCheckTasksWaitingTermination+0x58>)
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	2b00      	cmp	r3, #0
 800654a:	d1e1      	bne.n	8006510 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800654c:	bf00      	nop
 800654e:	bf00      	nop
 8006550:	3708      	adds	r7, #8
 8006552:	46bd      	mov	sp, r7
 8006554:	bd80      	pop	{r7, pc}
 8006556:	bf00      	nop
 8006558:	20001478 	.word	0x20001478
 800655c:	200014a4 	.word	0x200014a4
 8006560:	2000148c 	.word	0x2000148c

08006564 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006564:	b580      	push	{r7, lr}
 8006566:	b084      	sub	sp, #16
 8006568:	af00      	add	r7, sp, #0
 800656a:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	3354      	adds	r3, #84	@ 0x54
 8006570:	4618      	mov	r0, r3
 8006572:	f001 fbfd 	bl	8007d70 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800657c:	2b00      	cmp	r3, #0
 800657e:	d108      	bne.n	8006592 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006584:	4618      	mov	r0, r3
 8006586:	f001 f8b5 	bl	80076f4 <vPortFree>
				vPortFree( pxTCB );
 800658a:	6878      	ldr	r0, [r7, #4]
 800658c:	f001 f8b2 	bl	80076f4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006590:	e01b      	b.n	80065ca <prvDeleteTCB+0x66>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8006598:	2b01      	cmp	r3, #1
 800659a:	d103      	bne.n	80065a4 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800659c:	6878      	ldr	r0, [r7, #4]
 800659e:	f001 f8a9 	bl	80076f4 <vPortFree>
	}
 80065a2:	e012      	b.n	80065ca <prvDeleteTCB+0x66>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 80065aa:	2b02      	cmp	r3, #2
 80065ac:	d00d      	beq.n	80065ca <prvDeleteTCB+0x66>
	__asm volatile
 80065ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80065b2:	b672      	cpsid	i
 80065b4:	f383 8811 	msr	BASEPRI, r3
 80065b8:	f3bf 8f6f 	isb	sy
 80065bc:	f3bf 8f4f 	dsb	sy
 80065c0:	b662      	cpsie	i
 80065c2:	60fb      	str	r3, [r7, #12]
}
 80065c4:	bf00      	nop
 80065c6:	bf00      	nop
 80065c8:	e7fd      	b.n	80065c6 <prvDeleteTCB+0x62>
	}
 80065ca:	bf00      	nop
 80065cc:	3710      	adds	r7, #16
 80065ce:	46bd      	mov	sp, r7
 80065d0:	bd80      	pop	{r7, pc}
	...

080065d4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80065d4:	b480      	push	{r7}
 80065d6:	b083      	sub	sp, #12
 80065d8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80065da:	4b0c      	ldr	r3, [pc, #48]	@ (800660c <prvResetNextTaskUnblockTime+0x38>)
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d104      	bne.n	80065ee <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80065e4:	4b0a      	ldr	r3, [pc, #40]	@ (8006610 <prvResetNextTaskUnblockTime+0x3c>)
 80065e6:	f04f 32ff 	mov.w	r2, #4294967295
 80065ea:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80065ec:	e008      	b.n	8006600 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80065ee:	4b07      	ldr	r3, [pc, #28]	@ (800660c <prvResetNextTaskUnblockTime+0x38>)
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	68db      	ldr	r3, [r3, #12]
 80065f4:	68db      	ldr	r3, [r3, #12]
 80065f6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	685b      	ldr	r3, [r3, #4]
 80065fc:	4a04      	ldr	r2, [pc, #16]	@ (8006610 <prvResetNextTaskUnblockTime+0x3c>)
 80065fe:	6013      	str	r3, [r2, #0]
}
 8006600:	bf00      	nop
 8006602:	370c      	adds	r7, #12
 8006604:	46bd      	mov	sp, r7
 8006606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800660a:	4770      	bx	lr
 800660c:	2000145c 	.word	0x2000145c
 8006610:	200014c4 	.word	0x200014c4

08006614 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 8006614:	b480      	push	{r7}
 8006616:	b083      	sub	sp, #12
 8006618:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 800661a:	4b05      	ldr	r3, [pc, #20]	@ (8006630 <xTaskGetCurrentTaskHandle+0x1c>)
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	607b      	str	r3, [r7, #4]

		return xReturn;
 8006620:	687b      	ldr	r3, [r7, #4]
	}
 8006622:	4618      	mov	r0, r3
 8006624:	370c      	adds	r7, #12
 8006626:	46bd      	mov	sp, r7
 8006628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800662c:	4770      	bx	lr
 800662e:	bf00      	nop
 8006630:	20000fd0 	.word	0x20000fd0

08006634 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006634:	b480      	push	{r7}
 8006636:	b083      	sub	sp, #12
 8006638:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800663a:	4b0b      	ldr	r3, [pc, #44]	@ (8006668 <xTaskGetSchedulerState+0x34>)
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	2b00      	cmp	r3, #0
 8006640:	d102      	bne.n	8006648 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8006642:	2301      	movs	r3, #1
 8006644:	607b      	str	r3, [r7, #4]
 8006646:	e008      	b.n	800665a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006648:	4b08      	ldr	r3, [pc, #32]	@ (800666c <xTaskGetSchedulerState+0x38>)
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	2b00      	cmp	r3, #0
 800664e:	d102      	bne.n	8006656 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006650:	2302      	movs	r3, #2
 8006652:	607b      	str	r3, [r7, #4]
 8006654:	e001      	b.n	800665a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8006656:	2300      	movs	r3, #0
 8006658:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800665a:	687b      	ldr	r3, [r7, #4]
	}
 800665c:	4618      	mov	r0, r3
 800665e:	370c      	adds	r7, #12
 8006660:	46bd      	mov	sp, r7
 8006662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006666:	4770      	bx	lr
 8006668:	200014b0 	.word	0x200014b0
 800666c:	200014cc 	.word	0x200014cc

08006670 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8006670:	b580      	push	{r7, lr}
 8006672:	b084      	sub	sp, #16
 8006674:	af00      	add	r7, sp, #0
 8006676:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800667c:	2300      	movs	r3, #0
 800667e:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	2b00      	cmp	r3, #0
 8006684:	d051      	beq.n	800672a <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8006686:	68bb      	ldr	r3, [r7, #8]
 8006688:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800668a:	4b2a      	ldr	r3, [pc, #168]	@ (8006734 <xTaskPriorityInherit+0xc4>)
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006690:	429a      	cmp	r2, r3
 8006692:	d241      	bcs.n	8006718 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8006694:	68bb      	ldr	r3, [r7, #8]
 8006696:	699b      	ldr	r3, [r3, #24]
 8006698:	2b00      	cmp	r3, #0
 800669a:	db06      	blt.n	80066aa <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800669c:	4b25      	ldr	r3, [pc, #148]	@ (8006734 <xTaskPriorityInherit+0xc4>)
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80066a2:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80066a6:	68bb      	ldr	r3, [r7, #8]
 80066a8:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80066aa:	68bb      	ldr	r3, [r7, #8]
 80066ac:	6959      	ldr	r1, [r3, #20]
 80066ae:	68bb      	ldr	r3, [r7, #8]
 80066b0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80066b2:	4613      	mov	r3, r2
 80066b4:	009b      	lsls	r3, r3, #2
 80066b6:	4413      	add	r3, r2
 80066b8:	009b      	lsls	r3, r3, #2
 80066ba:	4a1f      	ldr	r2, [pc, #124]	@ (8006738 <xTaskPriorityInherit+0xc8>)
 80066bc:	4413      	add	r3, r2
 80066be:	4299      	cmp	r1, r3
 80066c0:	d122      	bne.n	8006708 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80066c2:	68bb      	ldr	r3, [r7, #8]
 80066c4:	3304      	adds	r3, #4
 80066c6:	4618      	mov	r0, r3
 80066c8:	f7fe f9b8 	bl	8004a3c <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80066cc:	4b19      	ldr	r3, [pc, #100]	@ (8006734 <xTaskPriorityInherit+0xc4>)
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80066d2:	68bb      	ldr	r3, [r7, #8]
 80066d4:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80066d6:	68bb      	ldr	r3, [r7, #8]
 80066d8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80066da:	4b18      	ldr	r3, [pc, #96]	@ (800673c <xTaskPriorityInherit+0xcc>)
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	429a      	cmp	r2, r3
 80066e0:	d903      	bls.n	80066ea <xTaskPriorityInherit+0x7a>
 80066e2:	68bb      	ldr	r3, [r7, #8]
 80066e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80066e6:	4a15      	ldr	r2, [pc, #84]	@ (800673c <xTaskPriorityInherit+0xcc>)
 80066e8:	6013      	str	r3, [r2, #0]
 80066ea:	68bb      	ldr	r3, [r7, #8]
 80066ec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80066ee:	4613      	mov	r3, r2
 80066f0:	009b      	lsls	r3, r3, #2
 80066f2:	4413      	add	r3, r2
 80066f4:	009b      	lsls	r3, r3, #2
 80066f6:	4a10      	ldr	r2, [pc, #64]	@ (8006738 <xTaskPriorityInherit+0xc8>)
 80066f8:	441a      	add	r2, r3
 80066fa:	68bb      	ldr	r3, [r7, #8]
 80066fc:	3304      	adds	r3, #4
 80066fe:	4619      	mov	r1, r3
 8006700:	4610      	mov	r0, r2
 8006702:	f7fe f93e 	bl	8004982 <vListInsertEnd>
 8006706:	e004      	b.n	8006712 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8006708:	4b0a      	ldr	r3, [pc, #40]	@ (8006734 <xTaskPriorityInherit+0xc4>)
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800670e:	68bb      	ldr	r3, [r7, #8]
 8006710:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8006712:	2301      	movs	r3, #1
 8006714:	60fb      	str	r3, [r7, #12]
 8006716:	e008      	b.n	800672a <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8006718:	68bb      	ldr	r3, [r7, #8]
 800671a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800671c:	4b05      	ldr	r3, [pc, #20]	@ (8006734 <xTaskPriorityInherit+0xc4>)
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006722:	429a      	cmp	r2, r3
 8006724:	d201      	bcs.n	800672a <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8006726:	2301      	movs	r3, #1
 8006728:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800672a:	68fb      	ldr	r3, [r7, #12]
	}
 800672c:	4618      	mov	r0, r3
 800672e:	3710      	adds	r7, #16
 8006730:	46bd      	mov	sp, r7
 8006732:	bd80      	pop	{r7, pc}
 8006734:	20000fd0 	.word	0x20000fd0
 8006738:	20000fd4 	.word	0x20000fd4
 800673c:	200014ac 	.word	0x200014ac

08006740 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006740:	b580      	push	{r7, lr}
 8006742:	b086      	sub	sp, #24
 8006744:	af00      	add	r7, sp, #0
 8006746:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800674c:	2300      	movs	r3, #0
 800674e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	2b00      	cmp	r3, #0
 8006754:	d05c      	beq.n	8006810 <xTaskPriorityDisinherit+0xd0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8006756:	4b31      	ldr	r3, [pc, #196]	@ (800681c <xTaskPriorityDisinherit+0xdc>)
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	693a      	ldr	r2, [r7, #16]
 800675c:	429a      	cmp	r2, r3
 800675e:	d00d      	beq.n	800677c <xTaskPriorityDisinherit+0x3c>
	__asm volatile
 8006760:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006764:	b672      	cpsid	i
 8006766:	f383 8811 	msr	BASEPRI, r3
 800676a:	f3bf 8f6f 	isb	sy
 800676e:	f3bf 8f4f 	dsb	sy
 8006772:	b662      	cpsie	i
 8006774:	60fb      	str	r3, [r7, #12]
}
 8006776:	bf00      	nop
 8006778:	bf00      	nop
 800677a:	e7fd      	b.n	8006778 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 800677c:	693b      	ldr	r3, [r7, #16]
 800677e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006780:	2b00      	cmp	r3, #0
 8006782:	d10d      	bne.n	80067a0 <xTaskPriorityDisinherit+0x60>
	__asm volatile
 8006784:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006788:	b672      	cpsid	i
 800678a:	f383 8811 	msr	BASEPRI, r3
 800678e:	f3bf 8f6f 	isb	sy
 8006792:	f3bf 8f4f 	dsb	sy
 8006796:	b662      	cpsie	i
 8006798:	60bb      	str	r3, [r7, #8]
}
 800679a:	bf00      	nop
 800679c:	bf00      	nop
 800679e:	e7fd      	b.n	800679c <xTaskPriorityDisinherit+0x5c>
			( pxTCB->uxMutexesHeld )--;
 80067a0:	693b      	ldr	r3, [r7, #16]
 80067a2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80067a4:	1e5a      	subs	r2, r3, #1
 80067a6:	693b      	ldr	r3, [r7, #16]
 80067a8:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80067aa:	693b      	ldr	r3, [r7, #16]
 80067ac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80067ae:	693b      	ldr	r3, [r7, #16]
 80067b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80067b2:	429a      	cmp	r2, r3
 80067b4:	d02c      	beq.n	8006810 <xTaskPriorityDisinherit+0xd0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80067b6:	693b      	ldr	r3, [r7, #16]
 80067b8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d128      	bne.n	8006810 <xTaskPriorityDisinherit+0xd0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80067be:	693b      	ldr	r3, [r7, #16]
 80067c0:	3304      	adds	r3, #4
 80067c2:	4618      	mov	r0, r3
 80067c4:	f7fe f93a 	bl	8004a3c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80067c8:	693b      	ldr	r3, [r7, #16]
 80067ca:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80067cc:	693b      	ldr	r3, [r7, #16]
 80067ce:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80067d0:	693b      	ldr	r3, [r7, #16]
 80067d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80067d4:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80067d8:	693b      	ldr	r3, [r7, #16]
 80067da:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80067dc:	693b      	ldr	r3, [r7, #16]
 80067de:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80067e0:	4b0f      	ldr	r3, [pc, #60]	@ (8006820 <xTaskPriorityDisinherit+0xe0>)
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	429a      	cmp	r2, r3
 80067e6:	d903      	bls.n	80067f0 <xTaskPriorityDisinherit+0xb0>
 80067e8:	693b      	ldr	r3, [r7, #16]
 80067ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80067ec:	4a0c      	ldr	r2, [pc, #48]	@ (8006820 <xTaskPriorityDisinherit+0xe0>)
 80067ee:	6013      	str	r3, [r2, #0]
 80067f0:	693b      	ldr	r3, [r7, #16]
 80067f2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80067f4:	4613      	mov	r3, r2
 80067f6:	009b      	lsls	r3, r3, #2
 80067f8:	4413      	add	r3, r2
 80067fa:	009b      	lsls	r3, r3, #2
 80067fc:	4a09      	ldr	r2, [pc, #36]	@ (8006824 <xTaskPriorityDisinherit+0xe4>)
 80067fe:	441a      	add	r2, r3
 8006800:	693b      	ldr	r3, [r7, #16]
 8006802:	3304      	adds	r3, #4
 8006804:	4619      	mov	r1, r3
 8006806:	4610      	mov	r0, r2
 8006808:	f7fe f8bb 	bl	8004982 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800680c:	2301      	movs	r3, #1
 800680e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006810:	697b      	ldr	r3, [r7, #20]
	}
 8006812:	4618      	mov	r0, r3
 8006814:	3718      	adds	r7, #24
 8006816:	46bd      	mov	sp, r7
 8006818:	bd80      	pop	{r7, pc}
 800681a:	bf00      	nop
 800681c:	20000fd0 	.word	0x20000fd0
 8006820:	200014ac 	.word	0x200014ac
 8006824:	20000fd4 	.word	0x20000fd4

08006828 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8006828:	b580      	push	{r7, lr}
 800682a:	b088      	sub	sp, #32
 800682c:	af00      	add	r7, sp, #0
 800682e:	6078      	str	r0, [r7, #4]
 8006830:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8006836:	2301      	movs	r3, #1
 8006838:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	2b00      	cmp	r3, #0
 800683e:	d070      	beq.n	8006922 <vTaskPriorityDisinheritAfterTimeout+0xfa>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8006840:	69bb      	ldr	r3, [r7, #24]
 8006842:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006844:	2b00      	cmp	r3, #0
 8006846:	d10d      	bne.n	8006864 <vTaskPriorityDisinheritAfterTimeout+0x3c>
	__asm volatile
 8006848:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800684c:	b672      	cpsid	i
 800684e:	f383 8811 	msr	BASEPRI, r3
 8006852:	f3bf 8f6f 	isb	sy
 8006856:	f3bf 8f4f 	dsb	sy
 800685a:	b662      	cpsie	i
 800685c:	60fb      	str	r3, [r7, #12]
}
 800685e:	bf00      	nop
 8006860:	bf00      	nop
 8006862:	e7fd      	b.n	8006860 <vTaskPriorityDisinheritAfterTimeout+0x38>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8006864:	69bb      	ldr	r3, [r7, #24]
 8006866:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006868:	683a      	ldr	r2, [r7, #0]
 800686a:	429a      	cmp	r2, r3
 800686c:	d902      	bls.n	8006874 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800686e:	683b      	ldr	r3, [r7, #0]
 8006870:	61fb      	str	r3, [r7, #28]
 8006872:	e002      	b.n	800687a <vTaskPriorityDisinheritAfterTimeout+0x52>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8006874:	69bb      	ldr	r3, [r7, #24]
 8006876:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006878:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800687a:	69bb      	ldr	r3, [r7, #24]
 800687c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800687e:	69fa      	ldr	r2, [r7, #28]
 8006880:	429a      	cmp	r2, r3
 8006882:	d04e      	beq.n	8006922 <vTaskPriorityDisinheritAfterTimeout+0xfa>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8006884:	69bb      	ldr	r3, [r7, #24]
 8006886:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006888:	697a      	ldr	r2, [r7, #20]
 800688a:	429a      	cmp	r2, r3
 800688c:	d149      	bne.n	8006922 <vTaskPriorityDisinheritAfterTimeout+0xfa>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800688e:	4b27      	ldr	r3, [pc, #156]	@ (800692c <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	69ba      	ldr	r2, [r7, #24]
 8006894:	429a      	cmp	r2, r3
 8006896:	d10d      	bne.n	80068b4 <vTaskPriorityDisinheritAfterTimeout+0x8c>
	__asm volatile
 8006898:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800689c:	b672      	cpsid	i
 800689e:	f383 8811 	msr	BASEPRI, r3
 80068a2:	f3bf 8f6f 	isb	sy
 80068a6:	f3bf 8f4f 	dsb	sy
 80068aa:	b662      	cpsie	i
 80068ac:	60bb      	str	r3, [r7, #8]
}
 80068ae:	bf00      	nop
 80068b0:	bf00      	nop
 80068b2:	e7fd      	b.n	80068b0 <vTaskPriorityDisinheritAfterTimeout+0x88>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80068b4:	69bb      	ldr	r3, [r7, #24]
 80068b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80068b8:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 80068ba:	69bb      	ldr	r3, [r7, #24]
 80068bc:	69fa      	ldr	r2, [r7, #28]
 80068be:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80068c0:	69bb      	ldr	r3, [r7, #24]
 80068c2:	699b      	ldr	r3, [r3, #24]
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	db04      	blt.n	80068d2 <vTaskPriorityDisinheritAfterTimeout+0xaa>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80068c8:	69fb      	ldr	r3, [r7, #28]
 80068ca:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80068ce:	69bb      	ldr	r3, [r7, #24]
 80068d0:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80068d2:	69bb      	ldr	r3, [r7, #24]
 80068d4:	6959      	ldr	r1, [r3, #20]
 80068d6:	693a      	ldr	r2, [r7, #16]
 80068d8:	4613      	mov	r3, r2
 80068da:	009b      	lsls	r3, r3, #2
 80068dc:	4413      	add	r3, r2
 80068de:	009b      	lsls	r3, r3, #2
 80068e0:	4a13      	ldr	r2, [pc, #76]	@ (8006930 <vTaskPriorityDisinheritAfterTimeout+0x108>)
 80068e2:	4413      	add	r3, r2
 80068e4:	4299      	cmp	r1, r3
 80068e6:	d11c      	bne.n	8006922 <vTaskPriorityDisinheritAfterTimeout+0xfa>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80068e8:	69bb      	ldr	r3, [r7, #24]
 80068ea:	3304      	adds	r3, #4
 80068ec:	4618      	mov	r0, r3
 80068ee:	f7fe f8a5 	bl	8004a3c <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 80068f2:	69bb      	ldr	r3, [r7, #24]
 80068f4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80068f6:	4b0f      	ldr	r3, [pc, #60]	@ (8006934 <vTaskPriorityDisinheritAfterTimeout+0x10c>)
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	429a      	cmp	r2, r3
 80068fc:	d903      	bls.n	8006906 <vTaskPriorityDisinheritAfterTimeout+0xde>
 80068fe:	69bb      	ldr	r3, [r7, #24]
 8006900:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006902:	4a0c      	ldr	r2, [pc, #48]	@ (8006934 <vTaskPriorityDisinheritAfterTimeout+0x10c>)
 8006904:	6013      	str	r3, [r2, #0]
 8006906:	69bb      	ldr	r3, [r7, #24]
 8006908:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800690a:	4613      	mov	r3, r2
 800690c:	009b      	lsls	r3, r3, #2
 800690e:	4413      	add	r3, r2
 8006910:	009b      	lsls	r3, r3, #2
 8006912:	4a07      	ldr	r2, [pc, #28]	@ (8006930 <vTaskPriorityDisinheritAfterTimeout+0x108>)
 8006914:	441a      	add	r2, r3
 8006916:	69bb      	ldr	r3, [r7, #24]
 8006918:	3304      	adds	r3, #4
 800691a:	4619      	mov	r1, r3
 800691c:	4610      	mov	r0, r2
 800691e:	f7fe f830 	bl	8004982 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006922:	bf00      	nop
 8006924:	3720      	adds	r7, #32
 8006926:	46bd      	mov	sp, r7
 8006928:	bd80      	pop	{r7, pc}
 800692a:	bf00      	nop
 800692c:	20000fd0 	.word	0x20000fd0
 8006930:	20000fd4 	.word	0x20000fd4
 8006934:	200014ac 	.word	0x200014ac

08006938 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8006938:	b480      	push	{r7}
 800693a:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800693c:	4b07      	ldr	r3, [pc, #28]	@ (800695c <pvTaskIncrementMutexHeldCount+0x24>)
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	2b00      	cmp	r3, #0
 8006942:	d004      	beq.n	800694e <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8006944:	4b05      	ldr	r3, [pc, #20]	@ (800695c <pvTaskIncrementMutexHeldCount+0x24>)
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800694a:	3201      	adds	r2, #1
 800694c:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 800694e:	4b03      	ldr	r3, [pc, #12]	@ (800695c <pvTaskIncrementMutexHeldCount+0x24>)
 8006950:	681b      	ldr	r3, [r3, #0]
	}
 8006952:	4618      	mov	r0, r3
 8006954:	46bd      	mov	sp, r7
 8006956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800695a:	4770      	bx	lr
 800695c:	20000fd0 	.word	0x20000fd0

08006960 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006960:	b580      	push	{r7, lr}
 8006962:	b084      	sub	sp, #16
 8006964:	af00      	add	r7, sp, #0
 8006966:	6078      	str	r0, [r7, #4]
 8006968:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800696a:	4b21      	ldr	r3, [pc, #132]	@ (80069f0 <prvAddCurrentTaskToDelayedList+0x90>)
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006970:	4b20      	ldr	r3, [pc, #128]	@ (80069f4 <prvAddCurrentTaskToDelayedList+0x94>)
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	3304      	adds	r3, #4
 8006976:	4618      	mov	r0, r3
 8006978:	f7fe f860 	bl	8004a3c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006982:	d10a      	bne.n	800699a <prvAddCurrentTaskToDelayedList+0x3a>
 8006984:	683b      	ldr	r3, [r7, #0]
 8006986:	2b00      	cmp	r3, #0
 8006988:	d007      	beq.n	800699a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800698a:	4b1a      	ldr	r3, [pc, #104]	@ (80069f4 <prvAddCurrentTaskToDelayedList+0x94>)
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	3304      	adds	r3, #4
 8006990:	4619      	mov	r1, r3
 8006992:	4819      	ldr	r0, [pc, #100]	@ (80069f8 <prvAddCurrentTaskToDelayedList+0x98>)
 8006994:	f7fd fff5 	bl	8004982 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006998:	e026      	b.n	80069e8 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800699a:	68fa      	ldr	r2, [r7, #12]
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	4413      	add	r3, r2
 80069a0:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80069a2:	4b14      	ldr	r3, [pc, #80]	@ (80069f4 <prvAddCurrentTaskToDelayedList+0x94>)
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	68ba      	ldr	r2, [r7, #8]
 80069a8:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80069aa:	68ba      	ldr	r2, [r7, #8]
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	429a      	cmp	r2, r3
 80069b0:	d209      	bcs.n	80069c6 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80069b2:	4b12      	ldr	r3, [pc, #72]	@ (80069fc <prvAddCurrentTaskToDelayedList+0x9c>)
 80069b4:	681a      	ldr	r2, [r3, #0]
 80069b6:	4b0f      	ldr	r3, [pc, #60]	@ (80069f4 <prvAddCurrentTaskToDelayedList+0x94>)
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	3304      	adds	r3, #4
 80069bc:	4619      	mov	r1, r3
 80069be:	4610      	mov	r0, r2
 80069c0:	f7fe f803 	bl	80049ca <vListInsert>
}
 80069c4:	e010      	b.n	80069e8 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80069c6:	4b0e      	ldr	r3, [pc, #56]	@ (8006a00 <prvAddCurrentTaskToDelayedList+0xa0>)
 80069c8:	681a      	ldr	r2, [r3, #0]
 80069ca:	4b0a      	ldr	r3, [pc, #40]	@ (80069f4 <prvAddCurrentTaskToDelayedList+0x94>)
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	3304      	adds	r3, #4
 80069d0:	4619      	mov	r1, r3
 80069d2:	4610      	mov	r0, r2
 80069d4:	f7fd fff9 	bl	80049ca <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80069d8:	4b0a      	ldr	r3, [pc, #40]	@ (8006a04 <prvAddCurrentTaskToDelayedList+0xa4>)
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	68ba      	ldr	r2, [r7, #8]
 80069de:	429a      	cmp	r2, r3
 80069e0:	d202      	bcs.n	80069e8 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80069e2:	4a08      	ldr	r2, [pc, #32]	@ (8006a04 <prvAddCurrentTaskToDelayedList+0xa4>)
 80069e4:	68bb      	ldr	r3, [r7, #8]
 80069e6:	6013      	str	r3, [r2, #0]
}
 80069e8:	bf00      	nop
 80069ea:	3710      	adds	r7, #16
 80069ec:	46bd      	mov	sp, r7
 80069ee:	bd80      	pop	{r7, pc}
 80069f0:	200014a8 	.word	0x200014a8
 80069f4:	20000fd0 	.word	0x20000fd0
 80069f8:	20001490 	.word	0x20001490
 80069fc:	20001460 	.word	0x20001460
 8006a00:	2000145c 	.word	0x2000145c
 8006a04:	200014c4 	.word	0x200014c4

08006a08 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8006a08:	b580      	push	{r7, lr}
 8006a0a:	b08a      	sub	sp, #40	@ 0x28
 8006a0c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8006a0e:	2300      	movs	r3, #0
 8006a10:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8006a12:	f000 fb21 	bl	8007058 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8006a16:	4b1e      	ldr	r3, [pc, #120]	@ (8006a90 <xTimerCreateTimerTask+0x88>)
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d021      	beq.n	8006a62 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8006a1e:	2300      	movs	r3, #0
 8006a20:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8006a22:	2300      	movs	r3, #0
 8006a24:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8006a26:	1d3a      	adds	r2, r7, #4
 8006a28:	f107 0108 	add.w	r1, r7, #8
 8006a2c:	f107 030c 	add.w	r3, r7, #12
 8006a30:	4618      	mov	r0, r3
 8006a32:	f7fd ff5f 	bl	80048f4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8006a36:	6879      	ldr	r1, [r7, #4]
 8006a38:	68bb      	ldr	r3, [r7, #8]
 8006a3a:	68fa      	ldr	r2, [r7, #12]
 8006a3c:	9202      	str	r2, [sp, #8]
 8006a3e:	9301      	str	r3, [sp, #4]
 8006a40:	2302      	movs	r3, #2
 8006a42:	9300      	str	r3, [sp, #0]
 8006a44:	2300      	movs	r3, #0
 8006a46:	460a      	mov	r2, r1
 8006a48:	4912      	ldr	r1, [pc, #72]	@ (8006a94 <xTimerCreateTimerTask+0x8c>)
 8006a4a:	4813      	ldr	r0, [pc, #76]	@ (8006a98 <xTimerCreateTimerTask+0x90>)
 8006a4c:	f7fe ff6a 	bl	8005924 <xTaskCreateStatic>
 8006a50:	4603      	mov	r3, r0
 8006a52:	4a12      	ldr	r2, [pc, #72]	@ (8006a9c <xTimerCreateTimerTask+0x94>)
 8006a54:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8006a56:	4b11      	ldr	r3, [pc, #68]	@ (8006a9c <xTimerCreateTimerTask+0x94>)
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d001      	beq.n	8006a62 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8006a5e:	2301      	movs	r3, #1
 8006a60:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8006a62:	697b      	ldr	r3, [r7, #20]
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	d10d      	bne.n	8006a84 <xTimerCreateTimerTask+0x7c>
	__asm volatile
 8006a68:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a6c:	b672      	cpsid	i
 8006a6e:	f383 8811 	msr	BASEPRI, r3
 8006a72:	f3bf 8f6f 	isb	sy
 8006a76:	f3bf 8f4f 	dsb	sy
 8006a7a:	b662      	cpsie	i
 8006a7c:	613b      	str	r3, [r7, #16]
}
 8006a7e:	bf00      	nop
 8006a80:	bf00      	nop
 8006a82:	e7fd      	b.n	8006a80 <xTimerCreateTimerTask+0x78>
	return xReturn;
 8006a84:	697b      	ldr	r3, [r7, #20]
}
 8006a86:	4618      	mov	r0, r3
 8006a88:	3718      	adds	r7, #24
 8006a8a:	46bd      	mov	sp, r7
 8006a8c:	bd80      	pop	{r7, pc}
 8006a8e:	bf00      	nop
 8006a90:	20001500 	.word	0x20001500
 8006a94:	08008a04 	.word	0x08008a04
 8006a98:	08006be1 	.word	0x08006be1
 8006a9c:	20001504 	.word	0x20001504

08006aa0 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8006aa0:	b580      	push	{r7, lr}
 8006aa2:	b08a      	sub	sp, #40	@ 0x28
 8006aa4:	af00      	add	r7, sp, #0
 8006aa6:	60f8      	str	r0, [r7, #12]
 8006aa8:	60b9      	str	r1, [r7, #8]
 8006aaa:	607a      	str	r2, [r7, #4]
 8006aac:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8006aae:	2300      	movs	r3, #0
 8006ab0:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d10d      	bne.n	8006ad4 <xTimerGenericCommand+0x34>
	__asm volatile
 8006ab8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006abc:	b672      	cpsid	i
 8006abe:	f383 8811 	msr	BASEPRI, r3
 8006ac2:	f3bf 8f6f 	isb	sy
 8006ac6:	f3bf 8f4f 	dsb	sy
 8006aca:	b662      	cpsie	i
 8006acc:	623b      	str	r3, [r7, #32]
}
 8006ace:	bf00      	nop
 8006ad0:	bf00      	nop
 8006ad2:	e7fd      	b.n	8006ad0 <xTimerGenericCommand+0x30>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8006ad4:	4b19      	ldr	r3, [pc, #100]	@ (8006b3c <xTimerGenericCommand+0x9c>)
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d02a      	beq.n	8006b32 <xTimerGenericCommand+0x92>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8006adc:	68bb      	ldr	r3, [r7, #8]
 8006ade:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8006ae8:	68bb      	ldr	r3, [r7, #8]
 8006aea:	2b05      	cmp	r3, #5
 8006aec:	dc18      	bgt.n	8006b20 <xTimerGenericCommand+0x80>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8006aee:	f7ff fda1 	bl	8006634 <xTaskGetSchedulerState>
 8006af2:	4603      	mov	r3, r0
 8006af4:	2b02      	cmp	r3, #2
 8006af6:	d109      	bne.n	8006b0c <xTimerGenericCommand+0x6c>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8006af8:	4b10      	ldr	r3, [pc, #64]	@ (8006b3c <xTimerGenericCommand+0x9c>)
 8006afa:	6818      	ldr	r0, [r3, #0]
 8006afc:	f107 0110 	add.w	r1, r7, #16
 8006b00:	2300      	movs	r3, #0
 8006b02:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006b04:	f7fe f9da 	bl	8004ebc <xQueueGenericSend>
 8006b08:	6278      	str	r0, [r7, #36]	@ 0x24
 8006b0a:	e012      	b.n	8006b32 <xTimerGenericCommand+0x92>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8006b0c:	4b0b      	ldr	r3, [pc, #44]	@ (8006b3c <xTimerGenericCommand+0x9c>)
 8006b0e:	6818      	ldr	r0, [r3, #0]
 8006b10:	f107 0110 	add.w	r1, r7, #16
 8006b14:	2300      	movs	r3, #0
 8006b16:	2200      	movs	r2, #0
 8006b18:	f7fe f9d0 	bl	8004ebc <xQueueGenericSend>
 8006b1c:	6278      	str	r0, [r7, #36]	@ 0x24
 8006b1e:	e008      	b.n	8006b32 <xTimerGenericCommand+0x92>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8006b20:	4b06      	ldr	r3, [pc, #24]	@ (8006b3c <xTimerGenericCommand+0x9c>)
 8006b22:	6818      	ldr	r0, [r3, #0]
 8006b24:	f107 0110 	add.w	r1, r7, #16
 8006b28:	2300      	movs	r3, #0
 8006b2a:	683a      	ldr	r2, [r7, #0]
 8006b2c:	f7fe fad0 	bl	80050d0 <xQueueGenericSendFromISR>
 8006b30:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8006b32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8006b34:	4618      	mov	r0, r3
 8006b36:	3728      	adds	r7, #40	@ 0x28
 8006b38:	46bd      	mov	sp, r7
 8006b3a:	bd80      	pop	{r7, pc}
 8006b3c:	20001500 	.word	0x20001500

08006b40 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8006b40:	b580      	push	{r7, lr}
 8006b42:	b088      	sub	sp, #32
 8006b44:	af02      	add	r7, sp, #8
 8006b46:	6078      	str	r0, [r7, #4]
 8006b48:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006b4a:	4b24      	ldr	r3, [pc, #144]	@ (8006bdc <prvProcessExpiredTimer+0x9c>)
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	68db      	ldr	r3, [r3, #12]
 8006b50:	68db      	ldr	r3, [r3, #12]
 8006b52:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006b54:	697b      	ldr	r3, [r7, #20]
 8006b56:	3304      	adds	r3, #4
 8006b58:	4618      	mov	r0, r3
 8006b5a:	f7fd ff6f 	bl	8004a3c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006b5e:	697b      	ldr	r3, [r7, #20]
 8006b60:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006b64:	f003 0304 	and.w	r3, r3, #4
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	d025      	beq.n	8006bb8 <prvProcessExpiredTimer+0x78>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8006b6c:	697b      	ldr	r3, [r7, #20]
 8006b6e:	699a      	ldr	r2, [r3, #24]
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	18d1      	adds	r1, r2, r3
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	683a      	ldr	r2, [r7, #0]
 8006b78:	6978      	ldr	r0, [r7, #20]
 8006b7a:	f000 f8d7 	bl	8006d2c <prvInsertTimerInActiveList>
 8006b7e:	4603      	mov	r3, r0
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	d022      	beq.n	8006bca <prvProcessExpiredTimer+0x8a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006b84:	2300      	movs	r3, #0
 8006b86:	9300      	str	r3, [sp, #0]
 8006b88:	2300      	movs	r3, #0
 8006b8a:	687a      	ldr	r2, [r7, #4]
 8006b8c:	2100      	movs	r1, #0
 8006b8e:	6978      	ldr	r0, [r7, #20]
 8006b90:	f7ff ff86 	bl	8006aa0 <xTimerGenericCommand>
 8006b94:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8006b96:	693b      	ldr	r3, [r7, #16]
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d116      	bne.n	8006bca <prvProcessExpiredTimer+0x8a>
	__asm volatile
 8006b9c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ba0:	b672      	cpsid	i
 8006ba2:	f383 8811 	msr	BASEPRI, r3
 8006ba6:	f3bf 8f6f 	isb	sy
 8006baa:	f3bf 8f4f 	dsb	sy
 8006bae:	b662      	cpsie	i
 8006bb0:	60fb      	str	r3, [r7, #12]
}
 8006bb2:	bf00      	nop
 8006bb4:	bf00      	nop
 8006bb6:	e7fd      	b.n	8006bb4 <prvProcessExpiredTimer+0x74>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006bb8:	697b      	ldr	r3, [r7, #20]
 8006bba:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006bbe:	f023 0301 	bic.w	r3, r3, #1
 8006bc2:	b2da      	uxtb	r2, r3
 8006bc4:	697b      	ldr	r3, [r7, #20]
 8006bc6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006bca:	697b      	ldr	r3, [r7, #20]
 8006bcc:	6a1b      	ldr	r3, [r3, #32]
 8006bce:	6978      	ldr	r0, [r7, #20]
 8006bd0:	4798      	blx	r3
}
 8006bd2:	bf00      	nop
 8006bd4:	3718      	adds	r7, #24
 8006bd6:	46bd      	mov	sp, r7
 8006bd8:	bd80      	pop	{r7, pc}
 8006bda:	bf00      	nop
 8006bdc:	200014f8 	.word	0x200014f8

08006be0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8006be0:	b580      	push	{r7, lr}
 8006be2:	b084      	sub	sp, #16
 8006be4:	af00      	add	r7, sp, #0
 8006be6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006be8:	f107 0308 	add.w	r3, r7, #8
 8006bec:	4618      	mov	r0, r3
 8006bee:	f000 f859 	bl	8006ca4 <prvGetNextExpireTime>
 8006bf2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8006bf4:	68bb      	ldr	r3, [r7, #8]
 8006bf6:	4619      	mov	r1, r3
 8006bf8:	68f8      	ldr	r0, [r7, #12]
 8006bfa:	f000 f805 	bl	8006c08 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8006bfe:	f000 f8d7 	bl	8006db0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006c02:	bf00      	nop
 8006c04:	e7f0      	b.n	8006be8 <prvTimerTask+0x8>
	...

08006c08 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8006c08:	b580      	push	{r7, lr}
 8006c0a:	b084      	sub	sp, #16
 8006c0c:	af00      	add	r7, sp, #0
 8006c0e:	6078      	str	r0, [r7, #4]
 8006c10:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8006c12:	f7ff f8f9 	bl	8005e08 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006c16:	f107 0308 	add.w	r3, r7, #8
 8006c1a:	4618      	mov	r0, r3
 8006c1c:	f000 f866 	bl	8006cec <prvSampleTimeNow>
 8006c20:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8006c22:	68bb      	ldr	r3, [r7, #8]
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	d130      	bne.n	8006c8a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8006c28:	683b      	ldr	r3, [r7, #0]
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d10a      	bne.n	8006c44 <prvProcessTimerOrBlockTask+0x3c>
 8006c2e:	687a      	ldr	r2, [r7, #4]
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	429a      	cmp	r2, r3
 8006c34:	d806      	bhi.n	8006c44 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8006c36:	f7ff f8f5 	bl	8005e24 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8006c3a:	68f9      	ldr	r1, [r7, #12]
 8006c3c:	6878      	ldr	r0, [r7, #4]
 8006c3e:	f7ff ff7f 	bl	8006b40 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8006c42:	e024      	b.n	8006c8e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8006c44:	683b      	ldr	r3, [r7, #0]
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d008      	beq.n	8006c5c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8006c4a:	4b13      	ldr	r3, [pc, #76]	@ (8006c98 <prvProcessTimerOrBlockTask+0x90>)
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	d101      	bne.n	8006c58 <prvProcessTimerOrBlockTask+0x50>
 8006c54:	2301      	movs	r3, #1
 8006c56:	e000      	b.n	8006c5a <prvProcessTimerOrBlockTask+0x52>
 8006c58:	2300      	movs	r3, #0
 8006c5a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8006c5c:	4b0f      	ldr	r3, [pc, #60]	@ (8006c9c <prvProcessTimerOrBlockTask+0x94>)
 8006c5e:	6818      	ldr	r0, [r3, #0]
 8006c60:	687a      	ldr	r2, [r7, #4]
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	1ad3      	subs	r3, r2, r3
 8006c66:	683a      	ldr	r2, [r7, #0]
 8006c68:	4619      	mov	r1, r3
 8006c6a:	f7fe fe27 	bl	80058bc <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8006c6e:	f7ff f8d9 	bl	8005e24 <xTaskResumeAll>
 8006c72:	4603      	mov	r3, r0
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	d10a      	bne.n	8006c8e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8006c78:	4b09      	ldr	r3, [pc, #36]	@ (8006ca0 <prvProcessTimerOrBlockTask+0x98>)
 8006c7a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006c7e:	601a      	str	r2, [r3, #0]
 8006c80:	f3bf 8f4f 	dsb	sy
 8006c84:	f3bf 8f6f 	isb	sy
}
 8006c88:	e001      	b.n	8006c8e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8006c8a:	f7ff f8cb 	bl	8005e24 <xTaskResumeAll>
}
 8006c8e:	bf00      	nop
 8006c90:	3710      	adds	r7, #16
 8006c92:	46bd      	mov	sp, r7
 8006c94:	bd80      	pop	{r7, pc}
 8006c96:	bf00      	nop
 8006c98:	200014fc 	.word	0x200014fc
 8006c9c:	20001500 	.word	0x20001500
 8006ca0:	e000ed04 	.word	0xe000ed04

08006ca4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8006ca4:	b480      	push	{r7}
 8006ca6:	b085      	sub	sp, #20
 8006ca8:	af00      	add	r7, sp, #0
 8006caa:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8006cac:	4b0e      	ldr	r3, [pc, #56]	@ (8006ce8 <prvGetNextExpireTime+0x44>)
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	d101      	bne.n	8006cba <prvGetNextExpireTime+0x16>
 8006cb6:	2201      	movs	r2, #1
 8006cb8:	e000      	b.n	8006cbc <prvGetNextExpireTime+0x18>
 8006cba:	2200      	movs	r2, #0
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	d105      	bne.n	8006cd4 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006cc8:	4b07      	ldr	r3, [pc, #28]	@ (8006ce8 <prvGetNextExpireTime+0x44>)
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	68db      	ldr	r3, [r3, #12]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	60fb      	str	r3, [r7, #12]
 8006cd2:	e001      	b.n	8006cd8 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8006cd4:	2300      	movs	r3, #0
 8006cd6:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8006cd8:	68fb      	ldr	r3, [r7, #12]
}
 8006cda:	4618      	mov	r0, r3
 8006cdc:	3714      	adds	r7, #20
 8006cde:	46bd      	mov	sp, r7
 8006ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ce4:	4770      	bx	lr
 8006ce6:	bf00      	nop
 8006ce8:	200014f8 	.word	0x200014f8

08006cec <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8006cec:	b580      	push	{r7, lr}
 8006cee:	b084      	sub	sp, #16
 8006cf0:	af00      	add	r7, sp, #0
 8006cf2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8006cf4:	f7ff f936 	bl	8005f64 <xTaskGetTickCount>
 8006cf8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8006cfa:	4b0b      	ldr	r3, [pc, #44]	@ (8006d28 <prvSampleTimeNow+0x3c>)
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	68fa      	ldr	r2, [r7, #12]
 8006d00:	429a      	cmp	r2, r3
 8006d02:	d205      	bcs.n	8006d10 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8006d04:	f000 f940 	bl	8006f88 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	2201      	movs	r2, #1
 8006d0c:	601a      	str	r2, [r3, #0]
 8006d0e:	e002      	b.n	8006d16 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	2200      	movs	r2, #0
 8006d14:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8006d16:	4a04      	ldr	r2, [pc, #16]	@ (8006d28 <prvSampleTimeNow+0x3c>)
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8006d1c:	68fb      	ldr	r3, [r7, #12]
}
 8006d1e:	4618      	mov	r0, r3
 8006d20:	3710      	adds	r7, #16
 8006d22:	46bd      	mov	sp, r7
 8006d24:	bd80      	pop	{r7, pc}
 8006d26:	bf00      	nop
 8006d28:	20001508 	.word	0x20001508

08006d2c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8006d2c:	b580      	push	{r7, lr}
 8006d2e:	b086      	sub	sp, #24
 8006d30:	af00      	add	r7, sp, #0
 8006d32:	60f8      	str	r0, [r7, #12]
 8006d34:	60b9      	str	r1, [r7, #8]
 8006d36:	607a      	str	r2, [r7, #4]
 8006d38:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8006d3a:	2300      	movs	r3, #0
 8006d3c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	68ba      	ldr	r2, [r7, #8]
 8006d42:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	68fa      	ldr	r2, [r7, #12]
 8006d48:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8006d4a:	68ba      	ldr	r2, [r7, #8]
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	429a      	cmp	r2, r3
 8006d50:	d812      	bhi.n	8006d78 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006d52:	687a      	ldr	r2, [r7, #4]
 8006d54:	683b      	ldr	r3, [r7, #0]
 8006d56:	1ad2      	subs	r2, r2, r3
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	699b      	ldr	r3, [r3, #24]
 8006d5c:	429a      	cmp	r2, r3
 8006d5e:	d302      	bcc.n	8006d66 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8006d60:	2301      	movs	r3, #1
 8006d62:	617b      	str	r3, [r7, #20]
 8006d64:	e01b      	b.n	8006d9e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8006d66:	4b10      	ldr	r3, [pc, #64]	@ (8006da8 <prvInsertTimerInActiveList+0x7c>)
 8006d68:	681a      	ldr	r2, [r3, #0]
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	3304      	adds	r3, #4
 8006d6e:	4619      	mov	r1, r3
 8006d70:	4610      	mov	r0, r2
 8006d72:	f7fd fe2a 	bl	80049ca <vListInsert>
 8006d76:	e012      	b.n	8006d9e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8006d78:	687a      	ldr	r2, [r7, #4]
 8006d7a:	683b      	ldr	r3, [r7, #0]
 8006d7c:	429a      	cmp	r2, r3
 8006d7e:	d206      	bcs.n	8006d8e <prvInsertTimerInActiveList+0x62>
 8006d80:	68ba      	ldr	r2, [r7, #8]
 8006d82:	683b      	ldr	r3, [r7, #0]
 8006d84:	429a      	cmp	r2, r3
 8006d86:	d302      	bcc.n	8006d8e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8006d88:	2301      	movs	r3, #1
 8006d8a:	617b      	str	r3, [r7, #20]
 8006d8c:	e007      	b.n	8006d9e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006d8e:	4b07      	ldr	r3, [pc, #28]	@ (8006dac <prvInsertTimerInActiveList+0x80>)
 8006d90:	681a      	ldr	r2, [r3, #0]
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	3304      	adds	r3, #4
 8006d96:	4619      	mov	r1, r3
 8006d98:	4610      	mov	r0, r2
 8006d9a:	f7fd fe16 	bl	80049ca <vListInsert>
		}
	}

	return xProcessTimerNow;
 8006d9e:	697b      	ldr	r3, [r7, #20]
}
 8006da0:	4618      	mov	r0, r3
 8006da2:	3718      	adds	r7, #24
 8006da4:	46bd      	mov	sp, r7
 8006da6:	bd80      	pop	{r7, pc}
 8006da8:	200014fc 	.word	0x200014fc
 8006dac:	200014f8 	.word	0x200014f8

08006db0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8006db0:	b580      	push	{r7, lr}
 8006db2:	b08e      	sub	sp, #56	@ 0x38
 8006db4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006db6:	e0d4      	b.n	8006f62 <prvProcessReceivedCommands+0x1b2>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	da1b      	bge.n	8006df6 <prvProcessReceivedCommands+0x46>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8006dbe:	1d3b      	adds	r3, r7, #4
 8006dc0:	3304      	adds	r3, #4
 8006dc2:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8006dc4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	d10d      	bne.n	8006de6 <prvProcessReceivedCommands+0x36>
	__asm volatile
 8006dca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006dce:	b672      	cpsid	i
 8006dd0:	f383 8811 	msr	BASEPRI, r3
 8006dd4:	f3bf 8f6f 	isb	sy
 8006dd8:	f3bf 8f4f 	dsb	sy
 8006ddc:	b662      	cpsie	i
 8006dde:	61fb      	str	r3, [r7, #28]
}
 8006de0:	bf00      	nop
 8006de2:	bf00      	nop
 8006de4:	e7fd      	b.n	8006de2 <prvProcessReceivedCommands+0x32>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8006de6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006dec:	6850      	ldr	r0, [r2, #4]
 8006dee:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006df0:	6892      	ldr	r2, [r2, #8]
 8006df2:	4611      	mov	r1, r2
 8006df4:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	f2c0 80b2 	blt.w	8006f62 <prvProcessReceivedCommands+0x1b2>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8006e02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e04:	695b      	ldr	r3, [r3, #20]
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	d004      	beq.n	8006e14 <prvProcessReceivedCommands+0x64>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006e0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e0c:	3304      	adds	r3, #4
 8006e0e:	4618      	mov	r0, r3
 8006e10:	f7fd fe14 	bl	8004a3c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006e14:	463b      	mov	r3, r7
 8006e16:	4618      	mov	r0, r3
 8006e18:	f7ff ff68 	bl	8006cec <prvSampleTimeNow>
 8006e1c:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	2b09      	cmp	r3, #9
 8006e22:	f200 809b 	bhi.w	8006f5c <prvProcessReceivedCommands+0x1ac>
 8006e26:	a201      	add	r2, pc, #4	@ (adr r2, 8006e2c <prvProcessReceivedCommands+0x7c>)
 8006e28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e2c:	08006e55 	.word	0x08006e55
 8006e30:	08006e55 	.word	0x08006e55
 8006e34:	08006e55 	.word	0x08006e55
 8006e38:	08006ecf 	.word	0x08006ecf
 8006e3c:	08006ee3 	.word	0x08006ee3
 8006e40:	08006f33 	.word	0x08006f33
 8006e44:	08006e55 	.word	0x08006e55
 8006e48:	08006e55 	.word	0x08006e55
 8006e4c:	08006ecf 	.word	0x08006ecf
 8006e50:	08006ee3 	.word	0x08006ee3
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006e54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e56:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006e5a:	f043 0301 	orr.w	r3, r3, #1
 8006e5e:	b2da      	uxtb	r2, r3
 8006e60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e62:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8006e66:	68ba      	ldr	r2, [r7, #8]
 8006e68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e6a:	699b      	ldr	r3, [r3, #24]
 8006e6c:	18d1      	adds	r1, r2, r3
 8006e6e:	68bb      	ldr	r3, [r7, #8]
 8006e70:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006e72:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006e74:	f7ff ff5a 	bl	8006d2c <prvInsertTimerInActiveList>
 8006e78:	4603      	mov	r3, r0
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	d070      	beq.n	8006f60 <prvProcessReceivedCommands+0x1b0>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006e7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e80:	6a1b      	ldr	r3, [r3, #32]
 8006e82:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006e84:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006e86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e88:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006e8c:	f003 0304 	and.w	r3, r3, #4
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	d065      	beq.n	8006f60 <prvProcessReceivedCommands+0x1b0>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8006e94:	68ba      	ldr	r2, [r7, #8]
 8006e96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e98:	699b      	ldr	r3, [r3, #24]
 8006e9a:	441a      	add	r2, r3
 8006e9c:	2300      	movs	r3, #0
 8006e9e:	9300      	str	r3, [sp, #0]
 8006ea0:	2300      	movs	r3, #0
 8006ea2:	2100      	movs	r1, #0
 8006ea4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006ea6:	f7ff fdfb 	bl	8006aa0 <xTimerGenericCommand>
 8006eaa:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8006eac:	6a3b      	ldr	r3, [r7, #32]
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d156      	bne.n	8006f60 <prvProcessReceivedCommands+0x1b0>
	__asm volatile
 8006eb2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006eb6:	b672      	cpsid	i
 8006eb8:	f383 8811 	msr	BASEPRI, r3
 8006ebc:	f3bf 8f6f 	isb	sy
 8006ec0:	f3bf 8f4f 	dsb	sy
 8006ec4:	b662      	cpsie	i
 8006ec6:	61bb      	str	r3, [r7, #24]
}
 8006ec8:	bf00      	nop
 8006eca:	bf00      	nop
 8006ecc:	e7fd      	b.n	8006eca <prvProcessReceivedCommands+0x11a>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006ece:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ed0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006ed4:	f023 0301 	bic.w	r3, r3, #1
 8006ed8:	b2da      	uxtb	r2, r3
 8006eda:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006edc:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8006ee0:	e03f      	b.n	8006f62 <prvProcessReceivedCommands+0x1b2>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006ee2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ee4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006ee8:	f043 0301 	orr.w	r3, r3, #1
 8006eec:	b2da      	uxtb	r2, r3
 8006eee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ef0:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8006ef4:	68ba      	ldr	r2, [r7, #8]
 8006ef6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ef8:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8006efa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006efc:	699b      	ldr	r3, [r3, #24]
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	d10d      	bne.n	8006f1e <prvProcessReceivedCommands+0x16e>
	__asm volatile
 8006f02:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f06:	b672      	cpsid	i
 8006f08:	f383 8811 	msr	BASEPRI, r3
 8006f0c:	f3bf 8f6f 	isb	sy
 8006f10:	f3bf 8f4f 	dsb	sy
 8006f14:	b662      	cpsie	i
 8006f16:	617b      	str	r3, [r7, #20]
}
 8006f18:	bf00      	nop
 8006f1a:	bf00      	nop
 8006f1c:	e7fd      	b.n	8006f1a <prvProcessReceivedCommands+0x16a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8006f1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f20:	699a      	ldr	r2, [r3, #24]
 8006f22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f24:	18d1      	adds	r1, r2, r3
 8006f26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f28:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006f2a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006f2c:	f7ff fefe 	bl	8006d2c <prvInsertTimerInActiveList>
					break;
 8006f30:	e017      	b.n	8006f62 <prvProcessReceivedCommands+0x1b2>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8006f32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f34:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006f38:	f003 0302 	and.w	r3, r3, #2
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	d103      	bne.n	8006f48 <prvProcessReceivedCommands+0x198>
						{
							vPortFree( pxTimer );
 8006f40:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006f42:	f000 fbd7 	bl	80076f4 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8006f46:	e00c      	b.n	8006f62 <prvProcessReceivedCommands+0x1b2>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006f48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f4a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006f4e:	f023 0301 	bic.w	r3, r3, #1
 8006f52:	b2da      	uxtb	r2, r3
 8006f54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f56:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8006f5a:	e002      	b.n	8006f62 <prvProcessReceivedCommands+0x1b2>

				default	:
					/* Don't expect to get here. */
					break;
 8006f5c:	bf00      	nop
 8006f5e:	e000      	b.n	8006f62 <prvProcessReceivedCommands+0x1b2>
					break;
 8006f60:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006f62:	4b08      	ldr	r3, [pc, #32]	@ (8006f84 <prvProcessReceivedCommands+0x1d4>)
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	1d39      	adds	r1, r7, #4
 8006f68:	2200      	movs	r2, #0
 8006f6a:	4618      	mov	r0, r3
 8006f6c:	f7fe f954 	bl	8005218 <xQueueReceive>
 8006f70:	4603      	mov	r3, r0
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	f47f af20 	bne.w	8006db8 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8006f78:	bf00      	nop
 8006f7a:	bf00      	nop
 8006f7c:	3730      	adds	r7, #48	@ 0x30
 8006f7e:	46bd      	mov	sp, r7
 8006f80:	bd80      	pop	{r7, pc}
 8006f82:	bf00      	nop
 8006f84:	20001500 	.word	0x20001500

08006f88 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8006f88:	b580      	push	{r7, lr}
 8006f8a:	b088      	sub	sp, #32
 8006f8c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006f8e:	e04b      	b.n	8007028 <prvSwitchTimerLists+0xa0>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006f90:	4b2f      	ldr	r3, [pc, #188]	@ (8007050 <prvSwitchTimerLists+0xc8>)
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	68db      	ldr	r3, [r3, #12]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006f9a:	4b2d      	ldr	r3, [pc, #180]	@ (8007050 <prvSwitchTimerLists+0xc8>)
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	68db      	ldr	r3, [r3, #12]
 8006fa0:	68db      	ldr	r3, [r3, #12]
 8006fa2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	3304      	adds	r3, #4
 8006fa8:	4618      	mov	r0, r3
 8006faa:	f7fd fd47 	bl	8004a3c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	6a1b      	ldr	r3, [r3, #32]
 8006fb2:	68f8      	ldr	r0, [r7, #12]
 8006fb4:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006fbc:	f003 0304 	and.w	r3, r3, #4
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	d031      	beq.n	8007028 <prvSwitchTimerLists+0xa0>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	699b      	ldr	r3, [r3, #24]
 8006fc8:	693a      	ldr	r2, [r7, #16]
 8006fca:	4413      	add	r3, r2
 8006fcc:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8006fce:	68ba      	ldr	r2, [r7, #8]
 8006fd0:	693b      	ldr	r3, [r7, #16]
 8006fd2:	429a      	cmp	r2, r3
 8006fd4:	d90e      	bls.n	8006ff4 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	68ba      	ldr	r2, [r7, #8]
 8006fda:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	68fa      	ldr	r2, [r7, #12]
 8006fe0:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006fe2:	4b1b      	ldr	r3, [pc, #108]	@ (8007050 <prvSwitchTimerLists+0xc8>)
 8006fe4:	681a      	ldr	r2, [r3, #0]
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	3304      	adds	r3, #4
 8006fea:	4619      	mov	r1, r3
 8006fec:	4610      	mov	r0, r2
 8006fee:	f7fd fcec 	bl	80049ca <vListInsert>
 8006ff2:	e019      	b.n	8007028 <prvSwitchTimerLists+0xa0>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006ff4:	2300      	movs	r3, #0
 8006ff6:	9300      	str	r3, [sp, #0]
 8006ff8:	2300      	movs	r3, #0
 8006ffa:	693a      	ldr	r2, [r7, #16]
 8006ffc:	2100      	movs	r1, #0
 8006ffe:	68f8      	ldr	r0, [r7, #12]
 8007000:	f7ff fd4e 	bl	8006aa0 <xTimerGenericCommand>
 8007004:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	2b00      	cmp	r3, #0
 800700a:	d10d      	bne.n	8007028 <prvSwitchTimerLists+0xa0>
	__asm volatile
 800700c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007010:	b672      	cpsid	i
 8007012:	f383 8811 	msr	BASEPRI, r3
 8007016:	f3bf 8f6f 	isb	sy
 800701a:	f3bf 8f4f 	dsb	sy
 800701e:	b662      	cpsie	i
 8007020:	603b      	str	r3, [r7, #0]
}
 8007022:	bf00      	nop
 8007024:	bf00      	nop
 8007026:	e7fd      	b.n	8007024 <prvSwitchTimerLists+0x9c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007028:	4b09      	ldr	r3, [pc, #36]	@ (8007050 <prvSwitchTimerLists+0xc8>)
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	2b00      	cmp	r3, #0
 8007030:	d1ae      	bne.n	8006f90 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8007032:	4b07      	ldr	r3, [pc, #28]	@ (8007050 <prvSwitchTimerLists+0xc8>)
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8007038:	4b06      	ldr	r3, [pc, #24]	@ (8007054 <prvSwitchTimerLists+0xcc>)
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	4a04      	ldr	r2, [pc, #16]	@ (8007050 <prvSwitchTimerLists+0xc8>)
 800703e:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8007040:	4a04      	ldr	r2, [pc, #16]	@ (8007054 <prvSwitchTimerLists+0xcc>)
 8007042:	697b      	ldr	r3, [r7, #20]
 8007044:	6013      	str	r3, [r2, #0]
}
 8007046:	bf00      	nop
 8007048:	3718      	adds	r7, #24
 800704a:	46bd      	mov	sp, r7
 800704c:	bd80      	pop	{r7, pc}
 800704e:	bf00      	nop
 8007050:	200014f8 	.word	0x200014f8
 8007054:	200014fc 	.word	0x200014fc

08007058 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8007058:	b580      	push	{r7, lr}
 800705a:	b082      	sub	sp, #8
 800705c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800705e:	f000 f94d 	bl	80072fc <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8007062:	4b15      	ldr	r3, [pc, #84]	@ (80070b8 <prvCheckForValidListAndQueue+0x60>)
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	2b00      	cmp	r3, #0
 8007068:	d120      	bne.n	80070ac <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800706a:	4814      	ldr	r0, [pc, #80]	@ (80070bc <prvCheckForValidListAndQueue+0x64>)
 800706c:	f7fd fc5c 	bl	8004928 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8007070:	4813      	ldr	r0, [pc, #76]	@ (80070c0 <prvCheckForValidListAndQueue+0x68>)
 8007072:	f7fd fc59 	bl	8004928 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8007076:	4b13      	ldr	r3, [pc, #76]	@ (80070c4 <prvCheckForValidListAndQueue+0x6c>)
 8007078:	4a10      	ldr	r2, [pc, #64]	@ (80070bc <prvCheckForValidListAndQueue+0x64>)
 800707a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800707c:	4b12      	ldr	r3, [pc, #72]	@ (80070c8 <prvCheckForValidListAndQueue+0x70>)
 800707e:	4a10      	ldr	r2, [pc, #64]	@ (80070c0 <prvCheckForValidListAndQueue+0x68>)
 8007080:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8007082:	2300      	movs	r3, #0
 8007084:	9300      	str	r3, [sp, #0]
 8007086:	4b11      	ldr	r3, [pc, #68]	@ (80070cc <prvCheckForValidListAndQueue+0x74>)
 8007088:	4a11      	ldr	r2, [pc, #68]	@ (80070d0 <prvCheckForValidListAndQueue+0x78>)
 800708a:	2110      	movs	r1, #16
 800708c:	200a      	movs	r0, #10
 800708e:	f7fd fd6b 	bl	8004b68 <xQueueGenericCreateStatic>
 8007092:	4603      	mov	r3, r0
 8007094:	4a08      	ldr	r2, [pc, #32]	@ (80070b8 <prvCheckForValidListAndQueue+0x60>)
 8007096:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8007098:	4b07      	ldr	r3, [pc, #28]	@ (80070b8 <prvCheckForValidListAndQueue+0x60>)
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	2b00      	cmp	r3, #0
 800709e:	d005      	beq.n	80070ac <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80070a0:	4b05      	ldr	r3, [pc, #20]	@ (80070b8 <prvCheckForValidListAndQueue+0x60>)
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	490b      	ldr	r1, [pc, #44]	@ (80070d4 <prvCheckForValidListAndQueue+0x7c>)
 80070a6:	4618      	mov	r0, r3
 80070a8:	f7fe fbde 	bl	8005868 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80070ac:	f000 f95c 	bl	8007368 <vPortExitCritical>
}
 80070b0:	bf00      	nop
 80070b2:	46bd      	mov	sp, r7
 80070b4:	bd80      	pop	{r7, pc}
 80070b6:	bf00      	nop
 80070b8:	20001500 	.word	0x20001500
 80070bc:	200014d0 	.word	0x200014d0
 80070c0:	200014e4 	.word	0x200014e4
 80070c4:	200014f8 	.word	0x200014f8
 80070c8:	200014fc 	.word	0x200014fc
 80070cc:	200015ac 	.word	0x200015ac
 80070d0:	2000150c 	.word	0x2000150c
 80070d4:	08008a0c 	.word	0x08008a0c

080070d8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80070d8:	b480      	push	{r7}
 80070da:	b085      	sub	sp, #20
 80070dc:	af00      	add	r7, sp, #0
 80070de:	60f8      	str	r0, [r7, #12]
 80070e0:	60b9      	str	r1, [r7, #8]
 80070e2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	3b04      	subs	r3, #4
 80070e8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80070f0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	3b04      	subs	r3, #4
 80070f6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80070f8:	68bb      	ldr	r3, [r7, #8]
 80070fa:	f023 0201 	bic.w	r2, r3, #1
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	3b04      	subs	r3, #4
 8007106:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007108:	4a0c      	ldr	r2, [pc, #48]	@ (800713c <pxPortInitialiseStack+0x64>)
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	3b14      	subs	r3, #20
 8007112:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007114:	687a      	ldr	r2, [r7, #4]
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	3b04      	subs	r3, #4
 800711e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	f06f 0202 	mvn.w	r2, #2
 8007126:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	3b20      	subs	r3, #32
 800712c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800712e:	68fb      	ldr	r3, [r7, #12]
}
 8007130:	4618      	mov	r0, r3
 8007132:	3714      	adds	r7, #20
 8007134:	46bd      	mov	sp, r7
 8007136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800713a:	4770      	bx	lr
 800713c:	08007141 	.word	0x08007141

08007140 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007140:	b480      	push	{r7}
 8007142:	b085      	sub	sp, #20
 8007144:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8007146:	2300      	movs	r3, #0
 8007148:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800714a:	4b15      	ldr	r3, [pc, #84]	@ (80071a0 <prvTaskExitError+0x60>)
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007152:	d00d      	beq.n	8007170 <prvTaskExitError+0x30>
	__asm volatile
 8007154:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007158:	b672      	cpsid	i
 800715a:	f383 8811 	msr	BASEPRI, r3
 800715e:	f3bf 8f6f 	isb	sy
 8007162:	f3bf 8f4f 	dsb	sy
 8007166:	b662      	cpsie	i
 8007168:	60fb      	str	r3, [r7, #12]
}
 800716a:	bf00      	nop
 800716c:	bf00      	nop
 800716e:	e7fd      	b.n	800716c <prvTaskExitError+0x2c>
	__asm volatile
 8007170:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007174:	b672      	cpsid	i
 8007176:	f383 8811 	msr	BASEPRI, r3
 800717a:	f3bf 8f6f 	isb	sy
 800717e:	f3bf 8f4f 	dsb	sy
 8007182:	b662      	cpsie	i
 8007184:	60bb      	str	r3, [r7, #8]
}
 8007186:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007188:	bf00      	nop
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	2b00      	cmp	r3, #0
 800718e:	d0fc      	beq.n	800718a <prvTaskExitError+0x4a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007190:	bf00      	nop
 8007192:	bf00      	nop
 8007194:	3714      	adds	r7, #20
 8007196:	46bd      	mov	sp, r7
 8007198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800719c:	4770      	bx	lr
 800719e:	bf00      	nop
 80071a0:	2000000c 	.word	0x2000000c
	...

080071b0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80071b0:	4b07      	ldr	r3, [pc, #28]	@ (80071d0 <pxCurrentTCBConst2>)
 80071b2:	6819      	ldr	r1, [r3, #0]
 80071b4:	6808      	ldr	r0, [r1, #0]
 80071b6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80071ba:	f380 8809 	msr	PSP, r0
 80071be:	f3bf 8f6f 	isb	sy
 80071c2:	f04f 0000 	mov.w	r0, #0
 80071c6:	f380 8811 	msr	BASEPRI, r0
 80071ca:	4770      	bx	lr
 80071cc:	f3af 8000 	nop.w

080071d0 <pxCurrentTCBConst2>:
 80071d0:	20000fd0 	.word	0x20000fd0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80071d4:	bf00      	nop
 80071d6:	bf00      	nop

080071d8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80071d8:	4808      	ldr	r0, [pc, #32]	@ (80071fc <prvPortStartFirstTask+0x24>)
 80071da:	6800      	ldr	r0, [r0, #0]
 80071dc:	6800      	ldr	r0, [r0, #0]
 80071de:	f380 8808 	msr	MSP, r0
 80071e2:	f04f 0000 	mov.w	r0, #0
 80071e6:	f380 8814 	msr	CONTROL, r0
 80071ea:	b662      	cpsie	i
 80071ec:	b661      	cpsie	f
 80071ee:	f3bf 8f4f 	dsb	sy
 80071f2:	f3bf 8f6f 	isb	sy
 80071f6:	df00      	svc	0
 80071f8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80071fa:	bf00      	nop
 80071fc:	e000ed08 	.word	0xe000ed08

08007200 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007200:	b580      	push	{r7, lr}
 8007202:	b084      	sub	sp, #16
 8007204:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007206:	4b37      	ldr	r3, [pc, #220]	@ (80072e4 <xPortStartScheduler+0xe4>)
 8007208:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	781b      	ldrb	r3, [r3, #0]
 800720e:	b2db      	uxtb	r3, r3
 8007210:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	22ff      	movs	r2, #255	@ 0xff
 8007216:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	781b      	ldrb	r3, [r3, #0]
 800721c:	b2db      	uxtb	r3, r3
 800721e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007220:	78fb      	ldrb	r3, [r7, #3]
 8007222:	b2db      	uxtb	r3, r3
 8007224:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8007228:	b2da      	uxtb	r2, r3
 800722a:	4b2f      	ldr	r3, [pc, #188]	@ (80072e8 <xPortStartScheduler+0xe8>)
 800722c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800722e:	4b2f      	ldr	r3, [pc, #188]	@ (80072ec <xPortStartScheduler+0xec>)
 8007230:	2207      	movs	r2, #7
 8007232:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007234:	e009      	b.n	800724a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8007236:	4b2d      	ldr	r3, [pc, #180]	@ (80072ec <xPortStartScheduler+0xec>)
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	3b01      	subs	r3, #1
 800723c:	4a2b      	ldr	r2, [pc, #172]	@ (80072ec <xPortStartScheduler+0xec>)
 800723e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007240:	78fb      	ldrb	r3, [r7, #3]
 8007242:	b2db      	uxtb	r3, r3
 8007244:	005b      	lsls	r3, r3, #1
 8007246:	b2db      	uxtb	r3, r3
 8007248:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800724a:	78fb      	ldrb	r3, [r7, #3]
 800724c:	b2db      	uxtb	r3, r3
 800724e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007252:	2b80      	cmp	r3, #128	@ 0x80
 8007254:	d0ef      	beq.n	8007236 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007256:	4b25      	ldr	r3, [pc, #148]	@ (80072ec <xPortStartScheduler+0xec>)
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	f1c3 0307 	rsb	r3, r3, #7
 800725e:	2b04      	cmp	r3, #4
 8007260:	d00d      	beq.n	800727e <xPortStartScheduler+0x7e>
	__asm volatile
 8007262:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007266:	b672      	cpsid	i
 8007268:	f383 8811 	msr	BASEPRI, r3
 800726c:	f3bf 8f6f 	isb	sy
 8007270:	f3bf 8f4f 	dsb	sy
 8007274:	b662      	cpsie	i
 8007276:	60bb      	str	r3, [r7, #8]
}
 8007278:	bf00      	nop
 800727a:	bf00      	nop
 800727c:	e7fd      	b.n	800727a <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800727e:	4b1b      	ldr	r3, [pc, #108]	@ (80072ec <xPortStartScheduler+0xec>)
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	021b      	lsls	r3, r3, #8
 8007284:	4a19      	ldr	r2, [pc, #100]	@ (80072ec <xPortStartScheduler+0xec>)
 8007286:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007288:	4b18      	ldr	r3, [pc, #96]	@ (80072ec <xPortStartScheduler+0xec>)
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8007290:	4a16      	ldr	r2, [pc, #88]	@ (80072ec <xPortStartScheduler+0xec>)
 8007292:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	b2da      	uxtb	r2, r3
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800729c:	4b14      	ldr	r3, [pc, #80]	@ (80072f0 <xPortStartScheduler+0xf0>)
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	4a13      	ldr	r2, [pc, #76]	@ (80072f0 <xPortStartScheduler+0xf0>)
 80072a2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80072a6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80072a8:	4b11      	ldr	r3, [pc, #68]	@ (80072f0 <xPortStartScheduler+0xf0>)
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	4a10      	ldr	r2, [pc, #64]	@ (80072f0 <xPortStartScheduler+0xf0>)
 80072ae:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 80072b2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80072b4:	f000 f8dc 	bl	8007470 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80072b8:	4b0e      	ldr	r3, [pc, #56]	@ (80072f4 <xPortStartScheduler+0xf4>)
 80072ba:	2200      	movs	r2, #0
 80072bc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80072be:	f000 f8fb 	bl	80074b8 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80072c2:	4b0d      	ldr	r3, [pc, #52]	@ (80072f8 <xPortStartScheduler+0xf8>)
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	4a0c      	ldr	r2, [pc, #48]	@ (80072f8 <xPortStartScheduler+0xf8>)
 80072c8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 80072cc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80072ce:	f7ff ff83 	bl	80071d8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80072d2:	f7fe ff13 	bl	80060fc <vTaskSwitchContext>
	prvTaskExitError();
 80072d6:	f7ff ff33 	bl	8007140 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80072da:	2300      	movs	r3, #0
}
 80072dc:	4618      	mov	r0, r3
 80072de:	3710      	adds	r7, #16
 80072e0:	46bd      	mov	sp, r7
 80072e2:	bd80      	pop	{r7, pc}
 80072e4:	e000e400 	.word	0xe000e400
 80072e8:	200015fc 	.word	0x200015fc
 80072ec:	20001600 	.word	0x20001600
 80072f0:	e000ed20 	.word	0xe000ed20
 80072f4:	2000000c 	.word	0x2000000c
 80072f8:	e000ef34 	.word	0xe000ef34

080072fc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80072fc:	b480      	push	{r7}
 80072fe:	b083      	sub	sp, #12
 8007300:	af00      	add	r7, sp, #0
	__asm volatile
 8007302:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007306:	b672      	cpsid	i
 8007308:	f383 8811 	msr	BASEPRI, r3
 800730c:	f3bf 8f6f 	isb	sy
 8007310:	f3bf 8f4f 	dsb	sy
 8007314:	b662      	cpsie	i
 8007316:	607b      	str	r3, [r7, #4]
}
 8007318:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800731a:	4b11      	ldr	r3, [pc, #68]	@ (8007360 <vPortEnterCritical+0x64>)
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	3301      	adds	r3, #1
 8007320:	4a0f      	ldr	r2, [pc, #60]	@ (8007360 <vPortEnterCritical+0x64>)
 8007322:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007324:	4b0e      	ldr	r3, [pc, #56]	@ (8007360 <vPortEnterCritical+0x64>)
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	2b01      	cmp	r3, #1
 800732a:	d112      	bne.n	8007352 <vPortEnterCritical+0x56>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800732c:	4b0d      	ldr	r3, [pc, #52]	@ (8007364 <vPortEnterCritical+0x68>)
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	b2db      	uxtb	r3, r3
 8007332:	2b00      	cmp	r3, #0
 8007334:	d00d      	beq.n	8007352 <vPortEnterCritical+0x56>
	__asm volatile
 8007336:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800733a:	b672      	cpsid	i
 800733c:	f383 8811 	msr	BASEPRI, r3
 8007340:	f3bf 8f6f 	isb	sy
 8007344:	f3bf 8f4f 	dsb	sy
 8007348:	b662      	cpsie	i
 800734a:	603b      	str	r3, [r7, #0]
}
 800734c:	bf00      	nop
 800734e:	bf00      	nop
 8007350:	e7fd      	b.n	800734e <vPortEnterCritical+0x52>
	}
}
 8007352:	bf00      	nop
 8007354:	370c      	adds	r7, #12
 8007356:	46bd      	mov	sp, r7
 8007358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800735c:	4770      	bx	lr
 800735e:	bf00      	nop
 8007360:	2000000c 	.word	0x2000000c
 8007364:	e000ed04 	.word	0xe000ed04

08007368 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007368:	b480      	push	{r7}
 800736a:	b083      	sub	sp, #12
 800736c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800736e:	4b13      	ldr	r3, [pc, #76]	@ (80073bc <vPortExitCritical+0x54>)
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	2b00      	cmp	r3, #0
 8007374:	d10d      	bne.n	8007392 <vPortExitCritical+0x2a>
	__asm volatile
 8007376:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800737a:	b672      	cpsid	i
 800737c:	f383 8811 	msr	BASEPRI, r3
 8007380:	f3bf 8f6f 	isb	sy
 8007384:	f3bf 8f4f 	dsb	sy
 8007388:	b662      	cpsie	i
 800738a:	607b      	str	r3, [r7, #4]
}
 800738c:	bf00      	nop
 800738e:	bf00      	nop
 8007390:	e7fd      	b.n	800738e <vPortExitCritical+0x26>
	uxCriticalNesting--;
 8007392:	4b0a      	ldr	r3, [pc, #40]	@ (80073bc <vPortExitCritical+0x54>)
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	3b01      	subs	r3, #1
 8007398:	4a08      	ldr	r2, [pc, #32]	@ (80073bc <vPortExitCritical+0x54>)
 800739a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800739c:	4b07      	ldr	r3, [pc, #28]	@ (80073bc <vPortExitCritical+0x54>)
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	d105      	bne.n	80073b0 <vPortExitCritical+0x48>
 80073a4:	2300      	movs	r3, #0
 80073a6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80073a8:	683b      	ldr	r3, [r7, #0]
 80073aa:	f383 8811 	msr	BASEPRI, r3
}
 80073ae:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80073b0:	bf00      	nop
 80073b2:	370c      	adds	r7, #12
 80073b4:	46bd      	mov	sp, r7
 80073b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ba:	4770      	bx	lr
 80073bc:	2000000c 	.word	0x2000000c

080073c0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80073c0:	f3ef 8009 	mrs	r0, PSP
 80073c4:	f3bf 8f6f 	isb	sy
 80073c8:	4b15      	ldr	r3, [pc, #84]	@ (8007420 <pxCurrentTCBConst>)
 80073ca:	681a      	ldr	r2, [r3, #0]
 80073cc:	f01e 0f10 	tst.w	lr, #16
 80073d0:	bf08      	it	eq
 80073d2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80073d6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80073da:	6010      	str	r0, [r2, #0]
 80073dc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80073e0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80073e4:	b672      	cpsid	i
 80073e6:	f380 8811 	msr	BASEPRI, r0
 80073ea:	f3bf 8f4f 	dsb	sy
 80073ee:	f3bf 8f6f 	isb	sy
 80073f2:	b662      	cpsie	i
 80073f4:	f7fe fe82 	bl	80060fc <vTaskSwitchContext>
 80073f8:	f04f 0000 	mov.w	r0, #0
 80073fc:	f380 8811 	msr	BASEPRI, r0
 8007400:	bc09      	pop	{r0, r3}
 8007402:	6819      	ldr	r1, [r3, #0]
 8007404:	6808      	ldr	r0, [r1, #0]
 8007406:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800740a:	f01e 0f10 	tst.w	lr, #16
 800740e:	bf08      	it	eq
 8007410:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007414:	f380 8809 	msr	PSP, r0
 8007418:	f3bf 8f6f 	isb	sy
 800741c:	4770      	bx	lr
 800741e:	bf00      	nop

08007420 <pxCurrentTCBConst>:
 8007420:	20000fd0 	.word	0x20000fd0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007424:	bf00      	nop
 8007426:	bf00      	nop

08007428 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007428:	b580      	push	{r7, lr}
 800742a:	b082      	sub	sp, #8
 800742c:	af00      	add	r7, sp, #0
	__asm volatile
 800742e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007432:	b672      	cpsid	i
 8007434:	f383 8811 	msr	BASEPRI, r3
 8007438:	f3bf 8f6f 	isb	sy
 800743c:	f3bf 8f4f 	dsb	sy
 8007440:	b662      	cpsie	i
 8007442:	607b      	str	r3, [r7, #4]
}
 8007444:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007446:	f7fe fd9d 	bl	8005f84 <xTaskIncrementTick>
 800744a:	4603      	mov	r3, r0
 800744c:	2b00      	cmp	r3, #0
 800744e:	d003      	beq.n	8007458 <xPortSysTickHandler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8007450:	4b06      	ldr	r3, [pc, #24]	@ (800746c <xPortSysTickHandler+0x44>)
 8007452:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007456:	601a      	str	r2, [r3, #0]
 8007458:	2300      	movs	r3, #0
 800745a:	603b      	str	r3, [r7, #0]
	__asm volatile
 800745c:	683b      	ldr	r3, [r7, #0]
 800745e:	f383 8811 	msr	BASEPRI, r3
}
 8007462:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007464:	bf00      	nop
 8007466:	3708      	adds	r7, #8
 8007468:	46bd      	mov	sp, r7
 800746a:	bd80      	pop	{r7, pc}
 800746c:	e000ed04 	.word	0xe000ed04

08007470 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8007470:	b480      	push	{r7}
 8007472:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007474:	4b0b      	ldr	r3, [pc, #44]	@ (80074a4 <vPortSetupTimerInterrupt+0x34>)
 8007476:	2200      	movs	r2, #0
 8007478:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800747a:	4b0b      	ldr	r3, [pc, #44]	@ (80074a8 <vPortSetupTimerInterrupt+0x38>)
 800747c:	2200      	movs	r2, #0
 800747e:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8007480:	4b0a      	ldr	r3, [pc, #40]	@ (80074ac <vPortSetupTimerInterrupt+0x3c>)
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	4a0a      	ldr	r2, [pc, #40]	@ (80074b0 <vPortSetupTimerInterrupt+0x40>)
 8007486:	fba2 2303 	umull	r2, r3, r2, r3
 800748a:	099b      	lsrs	r3, r3, #6
 800748c:	4a09      	ldr	r2, [pc, #36]	@ (80074b4 <vPortSetupTimerInterrupt+0x44>)
 800748e:	3b01      	subs	r3, #1
 8007490:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8007492:	4b04      	ldr	r3, [pc, #16]	@ (80074a4 <vPortSetupTimerInterrupt+0x34>)
 8007494:	2207      	movs	r2, #7
 8007496:	601a      	str	r2, [r3, #0]
}
 8007498:	bf00      	nop
 800749a:	46bd      	mov	sp, r7
 800749c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074a0:	4770      	bx	lr
 80074a2:	bf00      	nop
 80074a4:	e000e010 	.word	0xe000e010
 80074a8:	e000e018 	.word	0xe000e018
 80074ac:	20000000 	.word	0x20000000
 80074b0:	10624dd3 	.word	0x10624dd3
 80074b4:	e000e014 	.word	0xe000e014

080074b8 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80074b8:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 80074c8 <vPortEnableVFP+0x10>
 80074bc:	6801      	ldr	r1, [r0, #0]
 80074be:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80074c2:	6001      	str	r1, [r0, #0]
 80074c4:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80074c6:	bf00      	nop
 80074c8:	e000ed88 	.word	0xe000ed88

080074cc <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80074cc:	b480      	push	{r7}
 80074ce:	b085      	sub	sp, #20
 80074d0:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80074d2:	f3ef 8305 	mrs	r3, IPSR
 80074d6:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	2b0f      	cmp	r3, #15
 80074dc:	d917      	bls.n	800750e <vPortValidateInterruptPriority+0x42>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80074de:	4a1a      	ldr	r2, [pc, #104]	@ (8007548 <vPortValidateInterruptPriority+0x7c>)
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	4413      	add	r3, r2
 80074e4:	781b      	ldrb	r3, [r3, #0]
 80074e6:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80074e8:	4b18      	ldr	r3, [pc, #96]	@ (800754c <vPortValidateInterruptPriority+0x80>)
 80074ea:	781b      	ldrb	r3, [r3, #0]
 80074ec:	7afa      	ldrb	r2, [r7, #11]
 80074ee:	429a      	cmp	r2, r3
 80074f0:	d20d      	bcs.n	800750e <vPortValidateInterruptPriority+0x42>
	__asm volatile
 80074f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80074f6:	b672      	cpsid	i
 80074f8:	f383 8811 	msr	BASEPRI, r3
 80074fc:	f3bf 8f6f 	isb	sy
 8007500:	f3bf 8f4f 	dsb	sy
 8007504:	b662      	cpsie	i
 8007506:	607b      	str	r3, [r7, #4]
}
 8007508:	bf00      	nop
 800750a:	bf00      	nop
 800750c:	e7fd      	b.n	800750a <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800750e:	4b10      	ldr	r3, [pc, #64]	@ (8007550 <vPortValidateInterruptPriority+0x84>)
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8007516:	4b0f      	ldr	r3, [pc, #60]	@ (8007554 <vPortValidateInterruptPriority+0x88>)
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	429a      	cmp	r2, r3
 800751c:	d90d      	bls.n	800753a <vPortValidateInterruptPriority+0x6e>
	__asm volatile
 800751e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007522:	b672      	cpsid	i
 8007524:	f383 8811 	msr	BASEPRI, r3
 8007528:	f3bf 8f6f 	isb	sy
 800752c:	f3bf 8f4f 	dsb	sy
 8007530:	b662      	cpsie	i
 8007532:	603b      	str	r3, [r7, #0]
}
 8007534:	bf00      	nop
 8007536:	bf00      	nop
 8007538:	e7fd      	b.n	8007536 <vPortValidateInterruptPriority+0x6a>
	}
 800753a:	bf00      	nop
 800753c:	3714      	adds	r7, #20
 800753e:	46bd      	mov	sp, r7
 8007540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007544:	4770      	bx	lr
 8007546:	bf00      	nop
 8007548:	e000e3f0 	.word	0xe000e3f0
 800754c:	200015fc 	.word	0x200015fc
 8007550:	e000ed0c 	.word	0xe000ed0c
 8007554:	20001600 	.word	0x20001600

08007558 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007558:	b580      	push	{r7, lr}
 800755a:	b08a      	sub	sp, #40	@ 0x28
 800755c:	af00      	add	r7, sp, #0
 800755e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007560:	2300      	movs	r3, #0
 8007562:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007564:	f7fe fc50 	bl	8005e08 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007568:	4b5d      	ldr	r3, [pc, #372]	@ (80076e0 <pvPortMalloc+0x188>)
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	2b00      	cmp	r3, #0
 800756e:	d101      	bne.n	8007574 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007570:	f000 f920 	bl	80077b4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007574:	4b5b      	ldr	r3, [pc, #364]	@ (80076e4 <pvPortMalloc+0x18c>)
 8007576:	681a      	ldr	r2, [r3, #0]
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	4013      	ands	r3, r2
 800757c:	2b00      	cmp	r3, #0
 800757e:	f040 8094 	bne.w	80076aa <pvPortMalloc+0x152>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	2b00      	cmp	r3, #0
 8007586:	d020      	beq.n	80075ca <pvPortMalloc+0x72>
			{
				xWantedSize += xHeapStructSize;
 8007588:	2208      	movs	r2, #8
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	4413      	add	r3, r2
 800758e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	f003 0307 	and.w	r3, r3, #7
 8007596:	2b00      	cmp	r3, #0
 8007598:	d017      	beq.n	80075ca <pvPortMalloc+0x72>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	f023 0307 	bic.w	r3, r3, #7
 80075a0:	3308      	adds	r3, #8
 80075a2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	f003 0307 	and.w	r3, r3, #7
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	d00d      	beq.n	80075ca <pvPortMalloc+0x72>
	__asm volatile
 80075ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80075b2:	b672      	cpsid	i
 80075b4:	f383 8811 	msr	BASEPRI, r3
 80075b8:	f3bf 8f6f 	isb	sy
 80075bc:	f3bf 8f4f 	dsb	sy
 80075c0:	b662      	cpsie	i
 80075c2:	617b      	str	r3, [r7, #20]
}
 80075c4:	bf00      	nop
 80075c6:	bf00      	nop
 80075c8:	e7fd      	b.n	80075c6 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	d06c      	beq.n	80076aa <pvPortMalloc+0x152>
 80075d0:	4b45      	ldr	r3, [pc, #276]	@ (80076e8 <pvPortMalloc+0x190>)
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	687a      	ldr	r2, [r7, #4]
 80075d6:	429a      	cmp	r2, r3
 80075d8:	d867      	bhi.n	80076aa <pvPortMalloc+0x152>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80075da:	4b44      	ldr	r3, [pc, #272]	@ (80076ec <pvPortMalloc+0x194>)
 80075dc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80075de:	4b43      	ldr	r3, [pc, #268]	@ (80076ec <pvPortMalloc+0x194>)
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80075e4:	e004      	b.n	80075f0 <pvPortMalloc+0x98>
				{
					pxPreviousBlock = pxBlock;
 80075e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075e8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80075ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80075f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075f2:	685b      	ldr	r3, [r3, #4]
 80075f4:	687a      	ldr	r2, [r7, #4]
 80075f6:	429a      	cmp	r2, r3
 80075f8:	d903      	bls.n	8007602 <pvPortMalloc+0xaa>
 80075fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	2b00      	cmp	r3, #0
 8007600:	d1f1      	bne.n	80075e6 <pvPortMalloc+0x8e>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8007602:	4b37      	ldr	r3, [pc, #220]	@ (80076e0 <pvPortMalloc+0x188>)
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007608:	429a      	cmp	r2, r3
 800760a:	d04e      	beq.n	80076aa <pvPortMalloc+0x152>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800760c:	6a3b      	ldr	r3, [r7, #32]
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	2208      	movs	r2, #8
 8007612:	4413      	add	r3, r2
 8007614:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007616:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007618:	681a      	ldr	r2, [r3, #0]
 800761a:	6a3b      	ldr	r3, [r7, #32]
 800761c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800761e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007620:	685a      	ldr	r2, [r3, #4]
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	1ad2      	subs	r2, r2, r3
 8007626:	2308      	movs	r3, #8
 8007628:	005b      	lsls	r3, r3, #1
 800762a:	429a      	cmp	r2, r3
 800762c:	d922      	bls.n	8007674 <pvPortMalloc+0x11c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800762e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	4413      	add	r3, r2
 8007634:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007636:	69bb      	ldr	r3, [r7, #24]
 8007638:	f003 0307 	and.w	r3, r3, #7
 800763c:	2b00      	cmp	r3, #0
 800763e:	d00d      	beq.n	800765c <pvPortMalloc+0x104>
	__asm volatile
 8007640:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007644:	b672      	cpsid	i
 8007646:	f383 8811 	msr	BASEPRI, r3
 800764a:	f3bf 8f6f 	isb	sy
 800764e:	f3bf 8f4f 	dsb	sy
 8007652:	b662      	cpsie	i
 8007654:	613b      	str	r3, [r7, #16]
}
 8007656:	bf00      	nop
 8007658:	bf00      	nop
 800765a:	e7fd      	b.n	8007658 <pvPortMalloc+0x100>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800765c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800765e:	685a      	ldr	r2, [r3, #4]
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	1ad2      	subs	r2, r2, r3
 8007664:	69bb      	ldr	r3, [r7, #24]
 8007666:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007668:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800766a:	687a      	ldr	r2, [r7, #4]
 800766c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800766e:	69b8      	ldr	r0, [r7, #24]
 8007670:	f000 f902 	bl	8007878 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007674:	4b1c      	ldr	r3, [pc, #112]	@ (80076e8 <pvPortMalloc+0x190>)
 8007676:	681a      	ldr	r2, [r3, #0]
 8007678:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800767a:	685b      	ldr	r3, [r3, #4]
 800767c:	1ad3      	subs	r3, r2, r3
 800767e:	4a1a      	ldr	r2, [pc, #104]	@ (80076e8 <pvPortMalloc+0x190>)
 8007680:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007682:	4b19      	ldr	r3, [pc, #100]	@ (80076e8 <pvPortMalloc+0x190>)
 8007684:	681a      	ldr	r2, [r3, #0]
 8007686:	4b1a      	ldr	r3, [pc, #104]	@ (80076f0 <pvPortMalloc+0x198>)
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	429a      	cmp	r2, r3
 800768c:	d203      	bcs.n	8007696 <pvPortMalloc+0x13e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800768e:	4b16      	ldr	r3, [pc, #88]	@ (80076e8 <pvPortMalloc+0x190>)
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	4a17      	ldr	r2, [pc, #92]	@ (80076f0 <pvPortMalloc+0x198>)
 8007694:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007696:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007698:	685a      	ldr	r2, [r3, #4]
 800769a:	4b12      	ldr	r3, [pc, #72]	@ (80076e4 <pvPortMalloc+0x18c>)
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	431a      	orrs	r2, r3
 80076a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076a2:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80076a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076a6:	2200      	movs	r2, #0
 80076a8:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80076aa:	f7fe fbbb 	bl	8005e24 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80076ae:	69fb      	ldr	r3, [r7, #28]
 80076b0:	f003 0307 	and.w	r3, r3, #7
 80076b4:	2b00      	cmp	r3, #0
 80076b6:	d00d      	beq.n	80076d4 <pvPortMalloc+0x17c>
	__asm volatile
 80076b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80076bc:	b672      	cpsid	i
 80076be:	f383 8811 	msr	BASEPRI, r3
 80076c2:	f3bf 8f6f 	isb	sy
 80076c6:	f3bf 8f4f 	dsb	sy
 80076ca:	b662      	cpsie	i
 80076cc:	60fb      	str	r3, [r7, #12]
}
 80076ce:	bf00      	nop
 80076d0:	bf00      	nop
 80076d2:	e7fd      	b.n	80076d0 <pvPortMalloc+0x178>
	return pvReturn;
 80076d4:	69fb      	ldr	r3, [r7, #28]
}
 80076d6:	4618      	mov	r0, r3
 80076d8:	3728      	adds	r7, #40	@ 0x28
 80076da:	46bd      	mov	sp, r7
 80076dc:	bd80      	pop	{r7, pc}
 80076de:	bf00      	nop
 80076e0:	2000520c 	.word	0x2000520c
 80076e4:	20005218 	.word	0x20005218
 80076e8:	20005210 	.word	0x20005210
 80076ec:	20005204 	.word	0x20005204
 80076f0:	20005214 	.word	0x20005214

080076f4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80076f4:	b580      	push	{r7, lr}
 80076f6:	b086      	sub	sp, #24
 80076f8:	af00      	add	r7, sp, #0
 80076fa:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	2b00      	cmp	r3, #0
 8007704:	d04e      	beq.n	80077a4 <vPortFree+0xb0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007706:	2308      	movs	r3, #8
 8007708:	425b      	negs	r3, r3
 800770a:	697a      	ldr	r2, [r7, #20]
 800770c:	4413      	add	r3, r2
 800770e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007710:	697b      	ldr	r3, [r7, #20]
 8007712:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007714:	693b      	ldr	r3, [r7, #16]
 8007716:	685a      	ldr	r2, [r3, #4]
 8007718:	4b24      	ldr	r3, [pc, #144]	@ (80077ac <vPortFree+0xb8>)
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	4013      	ands	r3, r2
 800771e:	2b00      	cmp	r3, #0
 8007720:	d10d      	bne.n	800773e <vPortFree+0x4a>
	__asm volatile
 8007722:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007726:	b672      	cpsid	i
 8007728:	f383 8811 	msr	BASEPRI, r3
 800772c:	f3bf 8f6f 	isb	sy
 8007730:	f3bf 8f4f 	dsb	sy
 8007734:	b662      	cpsie	i
 8007736:	60fb      	str	r3, [r7, #12]
}
 8007738:	bf00      	nop
 800773a:	bf00      	nop
 800773c:	e7fd      	b.n	800773a <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800773e:	693b      	ldr	r3, [r7, #16]
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	2b00      	cmp	r3, #0
 8007744:	d00d      	beq.n	8007762 <vPortFree+0x6e>
	__asm volatile
 8007746:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800774a:	b672      	cpsid	i
 800774c:	f383 8811 	msr	BASEPRI, r3
 8007750:	f3bf 8f6f 	isb	sy
 8007754:	f3bf 8f4f 	dsb	sy
 8007758:	b662      	cpsie	i
 800775a:	60bb      	str	r3, [r7, #8]
}
 800775c:	bf00      	nop
 800775e:	bf00      	nop
 8007760:	e7fd      	b.n	800775e <vPortFree+0x6a>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007762:	693b      	ldr	r3, [r7, #16]
 8007764:	685a      	ldr	r2, [r3, #4]
 8007766:	4b11      	ldr	r3, [pc, #68]	@ (80077ac <vPortFree+0xb8>)
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	4013      	ands	r3, r2
 800776c:	2b00      	cmp	r3, #0
 800776e:	d019      	beq.n	80077a4 <vPortFree+0xb0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007770:	693b      	ldr	r3, [r7, #16]
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	2b00      	cmp	r3, #0
 8007776:	d115      	bne.n	80077a4 <vPortFree+0xb0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007778:	693b      	ldr	r3, [r7, #16]
 800777a:	685a      	ldr	r2, [r3, #4]
 800777c:	4b0b      	ldr	r3, [pc, #44]	@ (80077ac <vPortFree+0xb8>)
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	43db      	mvns	r3, r3
 8007782:	401a      	ands	r2, r3
 8007784:	693b      	ldr	r3, [r7, #16]
 8007786:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007788:	f7fe fb3e 	bl	8005e08 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800778c:	693b      	ldr	r3, [r7, #16]
 800778e:	685a      	ldr	r2, [r3, #4]
 8007790:	4b07      	ldr	r3, [pc, #28]	@ (80077b0 <vPortFree+0xbc>)
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	4413      	add	r3, r2
 8007796:	4a06      	ldr	r2, [pc, #24]	@ (80077b0 <vPortFree+0xbc>)
 8007798:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800779a:	6938      	ldr	r0, [r7, #16]
 800779c:	f000 f86c 	bl	8007878 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80077a0:	f7fe fb40 	bl	8005e24 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80077a4:	bf00      	nop
 80077a6:	3718      	adds	r7, #24
 80077a8:	46bd      	mov	sp, r7
 80077aa:	bd80      	pop	{r7, pc}
 80077ac:	20005218 	.word	0x20005218
 80077b0:	20005210 	.word	0x20005210

080077b4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80077b4:	b480      	push	{r7}
 80077b6:	b085      	sub	sp, #20
 80077b8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80077ba:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 80077be:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80077c0:	4b27      	ldr	r3, [pc, #156]	@ (8007860 <prvHeapInit+0xac>)
 80077c2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	f003 0307 	and.w	r3, r3, #7
 80077ca:	2b00      	cmp	r3, #0
 80077cc:	d00c      	beq.n	80077e8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80077ce:	68fb      	ldr	r3, [r7, #12]
 80077d0:	3307      	adds	r3, #7
 80077d2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	f023 0307 	bic.w	r3, r3, #7
 80077da:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80077dc:	68ba      	ldr	r2, [r7, #8]
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	1ad3      	subs	r3, r2, r3
 80077e2:	4a1f      	ldr	r2, [pc, #124]	@ (8007860 <prvHeapInit+0xac>)
 80077e4:	4413      	add	r3, r2
 80077e6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80077ec:	4a1d      	ldr	r2, [pc, #116]	@ (8007864 <prvHeapInit+0xb0>)
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80077f2:	4b1c      	ldr	r3, [pc, #112]	@ (8007864 <prvHeapInit+0xb0>)
 80077f4:	2200      	movs	r2, #0
 80077f6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	68ba      	ldr	r2, [r7, #8]
 80077fc:	4413      	add	r3, r2
 80077fe:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007800:	2208      	movs	r2, #8
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	1a9b      	subs	r3, r3, r2
 8007806:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	f023 0307 	bic.w	r3, r3, #7
 800780e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	4a15      	ldr	r2, [pc, #84]	@ (8007868 <prvHeapInit+0xb4>)
 8007814:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007816:	4b14      	ldr	r3, [pc, #80]	@ (8007868 <prvHeapInit+0xb4>)
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	2200      	movs	r2, #0
 800781c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800781e:	4b12      	ldr	r3, [pc, #72]	@ (8007868 <prvHeapInit+0xb4>)
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	2200      	movs	r2, #0
 8007824:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800782a:	683b      	ldr	r3, [r7, #0]
 800782c:	68fa      	ldr	r2, [r7, #12]
 800782e:	1ad2      	subs	r2, r2, r3
 8007830:	683b      	ldr	r3, [r7, #0]
 8007832:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007834:	4b0c      	ldr	r3, [pc, #48]	@ (8007868 <prvHeapInit+0xb4>)
 8007836:	681a      	ldr	r2, [r3, #0]
 8007838:	683b      	ldr	r3, [r7, #0]
 800783a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800783c:	683b      	ldr	r3, [r7, #0]
 800783e:	685b      	ldr	r3, [r3, #4]
 8007840:	4a0a      	ldr	r2, [pc, #40]	@ (800786c <prvHeapInit+0xb8>)
 8007842:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007844:	683b      	ldr	r3, [r7, #0]
 8007846:	685b      	ldr	r3, [r3, #4]
 8007848:	4a09      	ldr	r2, [pc, #36]	@ (8007870 <prvHeapInit+0xbc>)
 800784a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800784c:	4b09      	ldr	r3, [pc, #36]	@ (8007874 <prvHeapInit+0xc0>)
 800784e:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8007852:	601a      	str	r2, [r3, #0]
}
 8007854:	bf00      	nop
 8007856:	3714      	adds	r7, #20
 8007858:	46bd      	mov	sp, r7
 800785a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800785e:	4770      	bx	lr
 8007860:	20001604 	.word	0x20001604
 8007864:	20005204 	.word	0x20005204
 8007868:	2000520c 	.word	0x2000520c
 800786c:	20005214 	.word	0x20005214
 8007870:	20005210 	.word	0x20005210
 8007874:	20005218 	.word	0x20005218

08007878 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007878:	b480      	push	{r7}
 800787a:	b085      	sub	sp, #20
 800787c:	af00      	add	r7, sp, #0
 800787e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007880:	4b28      	ldr	r3, [pc, #160]	@ (8007924 <prvInsertBlockIntoFreeList+0xac>)
 8007882:	60fb      	str	r3, [r7, #12]
 8007884:	e002      	b.n	800788c <prvInsertBlockIntoFreeList+0x14>
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	60fb      	str	r3, [r7, #12]
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	687a      	ldr	r2, [r7, #4]
 8007892:	429a      	cmp	r2, r3
 8007894:	d8f7      	bhi.n	8007886 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007896:	68fb      	ldr	r3, [r7, #12]
 8007898:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	685b      	ldr	r3, [r3, #4]
 800789e:	68ba      	ldr	r2, [r7, #8]
 80078a0:	4413      	add	r3, r2
 80078a2:	687a      	ldr	r2, [r7, #4]
 80078a4:	429a      	cmp	r2, r3
 80078a6:	d108      	bne.n	80078ba <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	685a      	ldr	r2, [r3, #4]
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	685b      	ldr	r3, [r3, #4]
 80078b0:	441a      	add	r2, r3
 80078b2:	68fb      	ldr	r3, [r7, #12]
 80078b4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80078b6:	68fb      	ldr	r3, [r7, #12]
 80078b8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	685b      	ldr	r3, [r3, #4]
 80078c2:	68ba      	ldr	r2, [r7, #8]
 80078c4:	441a      	add	r2, r3
 80078c6:	68fb      	ldr	r3, [r7, #12]
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	429a      	cmp	r2, r3
 80078cc:	d118      	bne.n	8007900 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	681a      	ldr	r2, [r3, #0]
 80078d2:	4b15      	ldr	r3, [pc, #84]	@ (8007928 <prvInsertBlockIntoFreeList+0xb0>)
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	429a      	cmp	r2, r3
 80078d8:	d00d      	beq.n	80078f6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	685a      	ldr	r2, [r3, #4]
 80078de:	68fb      	ldr	r3, [r7, #12]
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	685b      	ldr	r3, [r3, #4]
 80078e4:	441a      	add	r2, r3
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80078ea:	68fb      	ldr	r3, [r7, #12]
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	681a      	ldr	r2, [r3, #0]
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	601a      	str	r2, [r3, #0]
 80078f4:	e008      	b.n	8007908 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80078f6:	4b0c      	ldr	r3, [pc, #48]	@ (8007928 <prvInsertBlockIntoFreeList+0xb0>)
 80078f8:	681a      	ldr	r2, [r3, #0]
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	601a      	str	r2, [r3, #0]
 80078fe:	e003      	b.n	8007908 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007900:	68fb      	ldr	r3, [r7, #12]
 8007902:	681a      	ldr	r2, [r3, #0]
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007908:	68fa      	ldr	r2, [r7, #12]
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	429a      	cmp	r2, r3
 800790e:	d002      	beq.n	8007916 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007910:	68fb      	ldr	r3, [r7, #12]
 8007912:	687a      	ldr	r2, [r7, #4]
 8007914:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007916:	bf00      	nop
 8007918:	3714      	adds	r7, #20
 800791a:	46bd      	mov	sp, r7
 800791c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007920:	4770      	bx	lr
 8007922:	bf00      	nop
 8007924:	20005204 	.word	0x20005204
 8007928:	2000520c 	.word	0x2000520c

0800792c <std>:
 800792c:	2300      	movs	r3, #0
 800792e:	b510      	push	{r4, lr}
 8007930:	4604      	mov	r4, r0
 8007932:	e9c0 3300 	strd	r3, r3, [r0]
 8007936:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800793a:	6083      	str	r3, [r0, #8]
 800793c:	8181      	strh	r1, [r0, #12]
 800793e:	6643      	str	r3, [r0, #100]	@ 0x64
 8007940:	81c2      	strh	r2, [r0, #14]
 8007942:	6183      	str	r3, [r0, #24]
 8007944:	4619      	mov	r1, r3
 8007946:	2208      	movs	r2, #8
 8007948:	305c      	adds	r0, #92	@ 0x5c
 800794a:	f000 f9f9 	bl	8007d40 <memset>
 800794e:	4b0d      	ldr	r3, [pc, #52]	@ (8007984 <std+0x58>)
 8007950:	6263      	str	r3, [r4, #36]	@ 0x24
 8007952:	4b0d      	ldr	r3, [pc, #52]	@ (8007988 <std+0x5c>)
 8007954:	62a3      	str	r3, [r4, #40]	@ 0x28
 8007956:	4b0d      	ldr	r3, [pc, #52]	@ (800798c <std+0x60>)
 8007958:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800795a:	4b0d      	ldr	r3, [pc, #52]	@ (8007990 <std+0x64>)
 800795c:	6323      	str	r3, [r4, #48]	@ 0x30
 800795e:	4b0d      	ldr	r3, [pc, #52]	@ (8007994 <std+0x68>)
 8007960:	6224      	str	r4, [r4, #32]
 8007962:	429c      	cmp	r4, r3
 8007964:	d006      	beq.n	8007974 <std+0x48>
 8007966:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800796a:	4294      	cmp	r4, r2
 800796c:	d002      	beq.n	8007974 <std+0x48>
 800796e:	33d0      	adds	r3, #208	@ 0xd0
 8007970:	429c      	cmp	r4, r3
 8007972:	d105      	bne.n	8007980 <std+0x54>
 8007974:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8007978:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800797c:	f000 baae 	b.w	8007edc <__retarget_lock_init_recursive>
 8007980:	bd10      	pop	{r4, pc}
 8007982:	bf00      	nop
 8007984:	08007b91 	.word	0x08007b91
 8007988:	08007bb3 	.word	0x08007bb3
 800798c:	08007beb 	.word	0x08007beb
 8007990:	08007c0f 	.word	0x08007c0f
 8007994:	2000521c 	.word	0x2000521c

08007998 <stdio_exit_handler>:
 8007998:	4a02      	ldr	r2, [pc, #8]	@ (80079a4 <stdio_exit_handler+0xc>)
 800799a:	4903      	ldr	r1, [pc, #12]	@ (80079a8 <stdio_exit_handler+0x10>)
 800799c:	4803      	ldr	r0, [pc, #12]	@ (80079ac <stdio_exit_handler+0x14>)
 800799e:	f000 b869 	b.w	8007a74 <_fwalk_sglue>
 80079a2:	bf00      	nop
 80079a4:	20000010 	.word	0x20000010
 80079a8:	08008799 	.word	0x08008799
 80079ac:	20000020 	.word	0x20000020

080079b0 <cleanup_stdio>:
 80079b0:	6841      	ldr	r1, [r0, #4]
 80079b2:	4b0c      	ldr	r3, [pc, #48]	@ (80079e4 <cleanup_stdio+0x34>)
 80079b4:	4299      	cmp	r1, r3
 80079b6:	b510      	push	{r4, lr}
 80079b8:	4604      	mov	r4, r0
 80079ba:	d001      	beq.n	80079c0 <cleanup_stdio+0x10>
 80079bc:	f000 feec 	bl	8008798 <_fflush_r>
 80079c0:	68a1      	ldr	r1, [r4, #8]
 80079c2:	4b09      	ldr	r3, [pc, #36]	@ (80079e8 <cleanup_stdio+0x38>)
 80079c4:	4299      	cmp	r1, r3
 80079c6:	d002      	beq.n	80079ce <cleanup_stdio+0x1e>
 80079c8:	4620      	mov	r0, r4
 80079ca:	f000 fee5 	bl	8008798 <_fflush_r>
 80079ce:	68e1      	ldr	r1, [r4, #12]
 80079d0:	4b06      	ldr	r3, [pc, #24]	@ (80079ec <cleanup_stdio+0x3c>)
 80079d2:	4299      	cmp	r1, r3
 80079d4:	d004      	beq.n	80079e0 <cleanup_stdio+0x30>
 80079d6:	4620      	mov	r0, r4
 80079d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80079dc:	f000 bedc 	b.w	8008798 <_fflush_r>
 80079e0:	bd10      	pop	{r4, pc}
 80079e2:	bf00      	nop
 80079e4:	2000521c 	.word	0x2000521c
 80079e8:	20005284 	.word	0x20005284
 80079ec:	200052ec 	.word	0x200052ec

080079f0 <global_stdio_init.part.0>:
 80079f0:	b510      	push	{r4, lr}
 80079f2:	4b0b      	ldr	r3, [pc, #44]	@ (8007a20 <global_stdio_init.part.0+0x30>)
 80079f4:	4c0b      	ldr	r4, [pc, #44]	@ (8007a24 <global_stdio_init.part.0+0x34>)
 80079f6:	4a0c      	ldr	r2, [pc, #48]	@ (8007a28 <global_stdio_init.part.0+0x38>)
 80079f8:	601a      	str	r2, [r3, #0]
 80079fa:	4620      	mov	r0, r4
 80079fc:	2200      	movs	r2, #0
 80079fe:	2104      	movs	r1, #4
 8007a00:	f7ff ff94 	bl	800792c <std>
 8007a04:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8007a08:	2201      	movs	r2, #1
 8007a0a:	2109      	movs	r1, #9
 8007a0c:	f7ff ff8e 	bl	800792c <std>
 8007a10:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8007a14:	2202      	movs	r2, #2
 8007a16:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007a1a:	2112      	movs	r1, #18
 8007a1c:	f7ff bf86 	b.w	800792c <std>
 8007a20:	20005354 	.word	0x20005354
 8007a24:	2000521c 	.word	0x2000521c
 8007a28:	08007999 	.word	0x08007999

08007a2c <__sfp_lock_acquire>:
 8007a2c:	4801      	ldr	r0, [pc, #4]	@ (8007a34 <__sfp_lock_acquire+0x8>)
 8007a2e:	f000 ba56 	b.w	8007ede <__retarget_lock_acquire_recursive>
 8007a32:	bf00      	nop
 8007a34:	2000535d 	.word	0x2000535d

08007a38 <__sfp_lock_release>:
 8007a38:	4801      	ldr	r0, [pc, #4]	@ (8007a40 <__sfp_lock_release+0x8>)
 8007a3a:	f000 ba51 	b.w	8007ee0 <__retarget_lock_release_recursive>
 8007a3e:	bf00      	nop
 8007a40:	2000535d 	.word	0x2000535d

08007a44 <__sinit>:
 8007a44:	b510      	push	{r4, lr}
 8007a46:	4604      	mov	r4, r0
 8007a48:	f7ff fff0 	bl	8007a2c <__sfp_lock_acquire>
 8007a4c:	6a23      	ldr	r3, [r4, #32]
 8007a4e:	b11b      	cbz	r3, 8007a58 <__sinit+0x14>
 8007a50:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007a54:	f7ff bff0 	b.w	8007a38 <__sfp_lock_release>
 8007a58:	4b04      	ldr	r3, [pc, #16]	@ (8007a6c <__sinit+0x28>)
 8007a5a:	6223      	str	r3, [r4, #32]
 8007a5c:	4b04      	ldr	r3, [pc, #16]	@ (8007a70 <__sinit+0x2c>)
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	2b00      	cmp	r3, #0
 8007a62:	d1f5      	bne.n	8007a50 <__sinit+0xc>
 8007a64:	f7ff ffc4 	bl	80079f0 <global_stdio_init.part.0>
 8007a68:	e7f2      	b.n	8007a50 <__sinit+0xc>
 8007a6a:	bf00      	nop
 8007a6c:	080079b1 	.word	0x080079b1
 8007a70:	20005354 	.word	0x20005354

08007a74 <_fwalk_sglue>:
 8007a74:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007a78:	4607      	mov	r7, r0
 8007a7a:	4688      	mov	r8, r1
 8007a7c:	4614      	mov	r4, r2
 8007a7e:	2600      	movs	r6, #0
 8007a80:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007a84:	f1b9 0901 	subs.w	r9, r9, #1
 8007a88:	d505      	bpl.n	8007a96 <_fwalk_sglue+0x22>
 8007a8a:	6824      	ldr	r4, [r4, #0]
 8007a8c:	2c00      	cmp	r4, #0
 8007a8e:	d1f7      	bne.n	8007a80 <_fwalk_sglue+0xc>
 8007a90:	4630      	mov	r0, r6
 8007a92:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007a96:	89ab      	ldrh	r3, [r5, #12]
 8007a98:	2b01      	cmp	r3, #1
 8007a9a:	d907      	bls.n	8007aac <_fwalk_sglue+0x38>
 8007a9c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007aa0:	3301      	adds	r3, #1
 8007aa2:	d003      	beq.n	8007aac <_fwalk_sglue+0x38>
 8007aa4:	4629      	mov	r1, r5
 8007aa6:	4638      	mov	r0, r7
 8007aa8:	47c0      	blx	r8
 8007aaa:	4306      	orrs	r6, r0
 8007aac:	3568      	adds	r5, #104	@ 0x68
 8007aae:	e7e9      	b.n	8007a84 <_fwalk_sglue+0x10>

08007ab0 <iprintf>:
 8007ab0:	b40f      	push	{r0, r1, r2, r3}
 8007ab2:	b507      	push	{r0, r1, r2, lr}
 8007ab4:	4906      	ldr	r1, [pc, #24]	@ (8007ad0 <iprintf+0x20>)
 8007ab6:	ab04      	add	r3, sp, #16
 8007ab8:	6808      	ldr	r0, [r1, #0]
 8007aba:	f853 2b04 	ldr.w	r2, [r3], #4
 8007abe:	6881      	ldr	r1, [r0, #8]
 8007ac0:	9301      	str	r3, [sp, #4]
 8007ac2:	f000 fb3f 	bl	8008144 <_vfiprintf_r>
 8007ac6:	b003      	add	sp, #12
 8007ac8:	f85d eb04 	ldr.w	lr, [sp], #4
 8007acc:	b004      	add	sp, #16
 8007ace:	4770      	bx	lr
 8007ad0:	2000001c 	.word	0x2000001c

08007ad4 <_puts_r>:
 8007ad4:	6a03      	ldr	r3, [r0, #32]
 8007ad6:	b570      	push	{r4, r5, r6, lr}
 8007ad8:	6884      	ldr	r4, [r0, #8]
 8007ada:	4605      	mov	r5, r0
 8007adc:	460e      	mov	r6, r1
 8007ade:	b90b      	cbnz	r3, 8007ae4 <_puts_r+0x10>
 8007ae0:	f7ff ffb0 	bl	8007a44 <__sinit>
 8007ae4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007ae6:	07db      	lsls	r3, r3, #31
 8007ae8:	d405      	bmi.n	8007af6 <_puts_r+0x22>
 8007aea:	89a3      	ldrh	r3, [r4, #12]
 8007aec:	0598      	lsls	r0, r3, #22
 8007aee:	d402      	bmi.n	8007af6 <_puts_r+0x22>
 8007af0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007af2:	f000 f9f4 	bl	8007ede <__retarget_lock_acquire_recursive>
 8007af6:	89a3      	ldrh	r3, [r4, #12]
 8007af8:	0719      	lsls	r1, r3, #28
 8007afa:	d502      	bpl.n	8007b02 <_puts_r+0x2e>
 8007afc:	6923      	ldr	r3, [r4, #16]
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	d135      	bne.n	8007b6e <_puts_r+0x9a>
 8007b02:	4621      	mov	r1, r4
 8007b04:	4628      	mov	r0, r5
 8007b06:	f000 f8c5 	bl	8007c94 <__swsetup_r>
 8007b0a:	b380      	cbz	r0, 8007b6e <_puts_r+0x9a>
 8007b0c:	f04f 35ff 	mov.w	r5, #4294967295
 8007b10:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007b12:	07da      	lsls	r2, r3, #31
 8007b14:	d405      	bmi.n	8007b22 <_puts_r+0x4e>
 8007b16:	89a3      	ldrh	r3, [r4, #12]
 8007b18:	059b      	lsls	r3, r3, #22
 8007b1a:	d402      	bmi.n	8007b22 <_puts_r+0x4e>
 8007b1c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007b1e:	f000 f9df 	bl	8007ee0 <__retarget_lock_release_recursive>
 8007b22:	4628      	mov	r0, r5
 8007b24:	bd70      	pop	{r4, r5, r6, pc}
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	da04      	bge.n	8007b34 <_puts_r+0x60>
 8007b2a:	69a2      	ldr	r2, [r4, #24]
 8007b2c:	429a      	cmp	r2, r3
 8007b2e:	dc17      	bgt.n	8007b60 <_puts_r+0x8c>
 8007b30:	290a      	cmp	r1, #10
 8007b32:	d015      	beq.n	8007b60 <_puts_r+0x8c>
 8007b34:	6823      	ldr	r3, [r4, #0]
 8007b36:	1c5a      	adds	r2, r3, #1
 8007b38:	6022      	str	r2, [r4, #0]
 8007b3a:	7019      	strb	r1, [r3, #0]
 8007b3c:	68a3      	ldr	r3, [r4, #8]
 8007b3e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8007b42:	3b01      	subs	r3, #1
 8007b44:	60a3      	str	r3, [r4, #8]
 8007b46:	2900      	cmp	r1, #0
 8007b48:	d1ed      	bne.n	8007b26 <_puts_r+0x52>
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	da11      	bge.n	8007b72 <_puts_r+0x9e>
 8007b4e:	4622      	mov	r2, r4
 8007b50:	210a      	movs	r1, #10
 8007b52:	4628      	mov	r0, r5
 8007b54:	f000 f85f 	bl	8007c16 <__swbuf_r>
 8007b58:	3001      	adds	r0, #1
 8007b5a:	d0d7      	beq.n	8007b0c <_puts_r+0x38>
 8007b5c:	250a      	movs	r5, #10
 8007b5e:	e7d7      	b.n	8007b10 <_puts_r+0x3c>
 8007b60:	4622      	mov	r2, r4
 8007b62:	4628      	mov	r0, r5
 8007b64:	f000 f857 	bl	8007c16 <__swbuf_r>
 8007b68:	3001      	adds	r0, #1
 8007b6a:	d1e7      	bne.n	8007b3c <_puts_r+0x68>
 8007b6c:	e7ce      	b.n	8007b0c <_puts_r+0x38>
 8007b6e:	3e01      	subs	r6, #1
 8007b70:	e7e4      	b.n	8007b3c <_puts_r+0x68>
 8007b72:	6823      	ldr	r3, [r4, #0]
 8007b74:	1c5a      	adds	r2, r3, #1
 8007b76:	6022      	str	r2, [r4, #0]
 8007b78:	220a      	movs	r2, #10
 8007b7a:	701a      	strb	r2, [r3, #0]
 8007b7c:	e7ee      	b.n	8007b5c <_puts_r+0x88>
	...

08007b80 <puts>:
 8007b80:	4b02      	ldr	r3, [pc, #8]	@ (8007b8c <puts+0xc>)
 8007b82:	4601      	mov	r1, r0
 8007b84:	6818      	ldr	r0, [r3, #0]
 8007b86:	f7ff bfa5 	b.w	8007ad4 <_puts_r>
 8007b8a:	bf00      	nop
 8007b8c:	2000001c 	.word	0x2000001c

08007b90 <__sread>:
 8007b90:	b510      	push	{r4, lr}
 8007b92:	460c      	mov	r4, r1
 8007b94:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007b98:	f000 f952 	bl	8007e40 <_read_r>
 8007b9c:	2800      	cmp	r0, #0
 8007b9e:	bfab      	itete	ge
 8007ba0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8007ba2:	89a3      	ldrhlt	r3, [r4, #12]
 8007ba4:	181b      	addge	r3, r3, r0
 8007ba6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8007baa:	bfac      	ite	ge
 8007bac:	6563      	strge	r3, [r4, #84]	@ 0x54
 8007bae:	81a3      	strhlt	r3, [r4, #12]
 8007bb0:	bd10      	pop	{r4, pc}

08007bb2 <__swrite>:
 8007bb2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007bb6:	461f      	mov	r7, r3
 8007bb8:	898b      	ldrh	r3, [r1, #12]
 8007bba:	05db      	lsls	r3, r3, #23
 8007bbc:	4605      	mov	r5, r0
 8007bbe:	460c      	mov	r4, r1
 8007bc0:	4616      	mov	r6, r2
 8007bc2:	d505      	bpl.n	8007bd0 <__swrite+0x1e>
 8007bc4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007bc8:	2302      	movs	r3, #2
 8007bca:	2200      	movs	r2, #0
 8007bcc:	f000 f926 	bl	8007e1c <_lseek_r>
 8007bd0:	89a3      	ldrh	r3, [r4, #12]
 8007bd2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007bd6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007bda:	81a3      	strh	r3, [r4, #12]
 8007bdc:	4632      	mov	r2, r6
 8007bde:	463b      	mov	r3, r7
 8007be0:	4628      	mov	r0, r5
 8007be2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007be6:	f000 b93d 	b.w	8007e64 <_write_r>

08007bea <__sseek>:
 8007bea:	b510      	push	{r4, lr}
 8007bec:	460c      	mov	r4, r1
 8007bee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007bf2:	f000 f913 	bl	8007e1c <_lseek_r>
 8007bf6:	1c43      	adds	r3, r0, #1
 8007bf8:	89a3      	ldrh	r3, [r4, #12]
 8007bfa:	bf15      	itete	ne
 8007bfc:	6560      	strne	r0, [r4, #84]	@ 0x54
 8007bfe:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8007c02:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8007c06:	81a3      	strheq	r3, [r4, #12]
 8007c08:	bf18      	it	ne
 8007c0a:	81a3      	strhne	r3, [r4, #12]
 8007c0c:	bd10      	pop	{r4, pc}

08007c0e <__sclose>:
 8007c0e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007c12:	f000 b89d 	b.w	8007d50 <_close_r>

08007c16 <__swbuf_r>:
 8007c16:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c18:	460e      	mov	r6, r1
 8007c1a:	4614      	mov	r4, r2
 8007c1c:	4605      	mov	r5, r0
 8007c1e:	b118      	cbz	r0, 8007c28 <__swbuf_r+0x12>
 8007c20:	6a03      	ldr	r3, [r0, #32]
 8007c22:	b90b      	cbnz	r3, 8007c28 <__swbuf_r+0x12>
 8007c24:	f7ff ff0e 	bl	8007a44 <__sinit>
 8007c28:	69a3      	ldr	r3, [r4, #24]
 8007c2a:	60a3      	str	r3, [r4, #8]
 8007c2c:	89a3      	ldrh	r3, [r4, #12]
 8007c2e:	071a      	lsls	r2, r3, #28
 8007c30:	d501      	bpl.n	8007c36 <__swbuf_r+0x20>
 8007c32:	6923      	ldr	r3, [r4, #16]
 8007c34:	b943      	cbnz	r3, 8007c48 <__swbuf_r+0x32>
 8007c36:	4621      	mov	r1, r4
 8007c38:	4628      	mov	r0, r5
 8007c3a:	f000 f82b 	bl	8007c94 <__swsetup_r>
 8007c3e:	b118      	cbz	r0, 8007c48 <__swbuf_r+0x32>
 8007c40:	f04f 37ff 	mov.w	r7, #4294967295
 8007c44:	4638      	mov	r0, r7
 8007c46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007c48:	6823      	ldr	r3, [r4, #0]
 8007c4a:	6922      	ldr	r2, [r4, #16]
 8007c4c:	1a98      	subs	r0, r3, r2
 8007c4e:	6963      	ldr	r3, [r4, #20]
 8007c50:	b2f6      	uxtb	r6, r6
 8007c52:	4283      	cmp	r3, r0
 8007c54:	4637      	mov	r7, r6
 8007c56:	dc05      	bgt.n	8007c64 <__swbuf_r+0x4e>
 8007c58:	4621      	mov	r1, r4
 8007c5a:	4628      	mov	r0, r5
 8007c5c:	f000 fd9c 	bl	8008798 <_fflush_r>
 8007c60:	2800      	cmp	r0, #0
 8007c62:	d1ed      	bne.n	8007c40 <__swbuf_r+0x2a>
 8007c64:	68a3      	ldr	r3, [r4, #8]
 8007c66:	3b01      	subs	r3, #1
 8007c68:	60a3      	str	r3, [r4, #8]
 8007c6a:	6823      	ldr	r3, [r4, #0]
 8007c6c:	1c5a      	adds	r2, r3, #1
 8007c6e:	6022      	str	r2, [r4, #0]
 8007c70:	701e      	strb	r6, [r3, #0]
 8007c72:	6962      	ldr	r2, [r4, #20]
 8007c74:	1c43      	adds	r3, r0, #1
 8007c76:	429a      	cmp	r2, r3
 8007c78:	d004      	beq.n	8007c84 <__swbuf_r+0x6e>
 8007c7a:	89a3      	ldrh	r3, [r4, #12]
 8007c7c:	07db      	lsls	r3, r3, #31
 8007c7e:	d5e1      	bpl.n	8007c44 <__swbuf_r+0x2e>
 8007c80:	2e0a      	cmp	r6, #10
 8007c82:	d1df      	bne.n	8007c44 <__swbuf_r+0x2e>
 8007c84:	4621      	mov	r1, r4
 8007c86:	4628      	mov	r0, r5
 8007c88:	f000 fd86 	bl	8008798 <_fflush_r>
 8007c8c:	2800      	cmp	r0, #0
 8007c8e:	d0d9      	beq.n	8007c44 <__swbuf_r+0x2e>
 8007c90:	e7d6      	b.n	8007c40 <__swbuf_r+0x2a>
	...

08007c94 <__swsetup_r>:
 8007c94:	b538      	push	{r3, r4, r5, lr}
 8007c96:	4b29      	ldr	r3, [pc, #164]	@ (8007d3c <__swsetup_r+0xa8>)
 8007c98:	4605      	mov	r5, r0
 8007c9a:	6818      	ldr	r0, [r3, #0]
 8007c9c:	460c      	mov	r4, r1
 8007c9e:	b118      	cbz	r0, 8007ca8 <__swsetup_r+0x14>
 8007ca0:	6a03      	ldr	r3, [r0, #32]
 8007ca2:	b90b      	cbnz	r3, 8007ca8 <__swsetup_r+0x14>
 8007ca4:	f7ff fece 	bl	8007a44 <__sinit>
 8007ca8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007cac:	0719      	lsls	r1, r3, #28
 8007cae:	d422      	bmi.n	8007cf6 <__swsetup_r+0x62>
 8007cb0:	06da      	lsls	r2, r3, #27
 8007cb2:	d407      	bmi.n	8007cc4 <__swsetup_r+0x30>
 8007cb4:	2209      	movs	r2, #9
 8007cb6:	602a      	str	r2, [r5, #0]
 8007cb8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007cbc:	81a3      	strh	r3, [r4, #12]
 8007cbe:	f04f 30ff 	mov.w	r0, #4294967295
 8007cc2:	e033      	b.n	8007d2c <__swsetup_r+0x98>
 8007cc4:	0758      	lsls	r0, r3, #29
 8007cc6:	d512      	bpl.n	8007cee <__swsetup_r+0x5a>
 8007cc8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007cca:	b141      	cbz	r1, 8007cde <__swsetup_r+0x4a>
 8007ccc:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007cd0:	4299      	cmp	r1, r3
 8007cd2:	d002      	beq.n	8007cda <__swsetup_r+0x46>
 8007cd4:	4628      	mov	r0, r5
 8007cd6:	f000 f913 	bl	8007f00 <_free_r>
 8007cda:	2300      	movs	r3, #0
 8007cdc:	6363      	str	r3, [r4, #52]	@ 0x34
 8007cde:	89a3      	ldrh	r3, [r4, #12]
 8007ce0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8007ce4:	81a3      	strh	r3, [r4, #12]
 8007ce6:	2300      	movs	r3, #0
 8007ce8:	6063      	str	r3, [r4, #4]
 8007cea:	6923      	ldr	r3, [r4, #16]
 8007cec:	6023      	str	r3, [r4, #0]
 8007cee:	89a3      	ldrh	r3, [r4, #12]
 8007cf0:	f043 0308 	orr.w	r3, r3, #8
 8007cf4:	81a3      	strh	r3, [r4, #12]
 8007cf6:	6923      	ldr	r3, [r4, #16]
 8007cf8:	b94b      	cbnz	r3, 8007d0e <__swsetup_r+0x7a>
 8007cfa:	89a3      	ldrh	r3, [r4, #12]
 8007cfc:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8007d00:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007d04:	d003      	beq.n	8007d0e <__swsetup_r+0x7a>
 8007d06:	4621      	mov	r1, r4
 8007d08:	4628      	mov	r0, r5
 8007d0a:	f000 fd93 	bl	8008834 <__smakebuf_r>
 8007d0e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007d12:	f013 0201 	ands.w	r2, r3, #1
 8007d16:	d00a      	beq.n	8007d2e <__swsetup_r+0x9a>
 8007d18:	2200      	movs	r2, #0
 8007d1a:	60a2      	str	r2, [r4, #8]
 8007d1c:	6962      	ldr	r2, [r4, #20]
 8007d1e:	4252      	negs	r2, r2
 8007d20:	61a2      	str	r2, [r4, #24]
 8007d22:	6922      	ldr	r2, [r4, #16]
 8007d24:	b942      	cbnz	r2, 8007d38 <__swsetup_r+0xa4>
 8007d26:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8007d2a:	d1c5      	bne.n	8007cb8 <__swsetup_r+0x24>
 8007d2c:	bd38      	pop	{r3, r4, r5, pc}
 8007d2e:	0799      	lsls	r1, r3, #30
 8007d30:	bf58      	it	pl
 8007d32:	6962      	ldrpl	r2, [r4, #20]
 8007d34:	60a2      	str	r2, [r4, #8]
 8007d36:	e7f4      	b.n	8007d22 <__swsetup_r+0x8e>
 8007d38:	2000      	movs	r0, #0
 8007d3a:	e7f7      	b.n	8007d2c <__swsetup_r+0x98>
 8007d3c:	2000001c 	.word	0x2000001c

08007d40 <memset>:
 8007d40:	4402      	add	r2, r0
 8007d42:	4603      	mov	r3, r0
 8007d44:	4293      	cmp	r3, r2
 8007d46:	d100      	bne.n	8007d4a <memset+0xa>
 8007d48:	4770      	bx	lr
 8007d4a:	f803 1b01 	strb.w	r1, [r3], #1
 8007d4e:	e7f9      	b.n	8007d44 <memset+0x4>

08007d50 <_close_r>:
 8007d50:	b538      	push	{r3, r4, r5, lr}
 8007d52:	4d06      	ldr	r5, [pc, #24]	@ (8007d6c <_close_r+0x1c>)
 8007d54:	2300      	movs	r3, #0
 8007d56:	4604      	mov	r4, r0
 8007d58:	4608      	mov	r0, r1
 8007d5a:	602b      	str	r3, [r5, #0]
 8007d5c:	f7f9 f903 	bl	8000f66 <_close>
 8007d60:	1c43      	adds	r3, r0, #1
 8007d62:	d102      	bne.n	8007d6a <_close_r+0x1a>
 8007d64:	682b      	ldr	r3, [r5, #0]
 8007d66:	b103      	cbz	r3, 8007d6a <_close_r+0x1a>
 8007d68:	6023      	str	r3, [r4, #0]
 8007d6a:	bd38      	pop	{r3, r4, r5, pc}
 8007d6c:	20005358 	.word	0x20005358

08007d70 <_reclaim_reent>:
 8007d70:	4b29      	ldr	r3, [pc, #164]	@ (8007e18 <_reclaim_reent+0xa8>)
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	4283      	cmp	r3, r0
 8007d76:	b570      	push	{r4, r5, r6, lr}
 8007d78:	4604      	mov	r4, r0
 8007d7a:	d04b      	beq.n	8007e14 <_reclaim_reent+0xa4>
 8007d7c:	69c3      	ldr	r3, [r0, #28]
 8007d7e:	b1ab      	cbz	r3, 8007dac <_reclaim_reent+0x3c>
 8007d80:	68db      	ldr	r3, [r3, #12]
 8007d82:	b16b      	cbz	r3, 8007da0 <_reclaim_reent+0x30>
 8007d84:	2500      	movs	r5, #0
 8007d86:	69e3      	ldr	r3, [r4, #28]
 8007d88:	68db      	ldr	r3, [r3, #12]
 8007d8a:	5959      	ldr	r1, [r3, r5]
 8007d8c:	2900      	cmp	r1, #0
 8007d8e:	d13b      	bne.n	8007e08 <_reclaim_reent+0x98>
 8007d90:	3504      	adds	r5, #4
 8007d92:	2d80      	cmp	r5, #128	@ 0x80
 8007d94:	d1f7      	bne.n	8007d86 <_reclaim_reent+0x16>
 8007d96:	69e3      	ldr	r3, [r4, #28]
 8007d98:	4620      	mov	r0, r4
 8007d9a:	68d9      	ldr	r1, [r3, #12]
 8007d9c:	f000 f8b0 	bl	8007f00 <_free_r>
 8007da0:	69e3      	ldr	r3, [r4, #28]
 8007da2:	6819      	ldr	r1, [r3, #0]
 8007da4:	b111      	cbz	r1, 8007dac <_reclaim_reent+0x3c>
 8007da6:	4620      	mov	r0, r4
 8007da8:	f000 f8aa 	bl	8007f00 <_free_r>
 8007dac:	6961      	ldr	r1, [r4, #20]
 8007dae:	b111      	cbz	r1, 8007db6 <_reclaim_reent+0x46>
 8007db0:	4620      	mov	r0, r4
 8007db2:	f000 f8a5 	bl	8007f00 <_free_r>
 8007db6:	69e1      	ldr	r1, [r4, #28]
 8007db8:	b111      	cbz	r1, 8007dc0 <_reclaim_reent+0x50>
 8007dba:	4620      	mov	r0, r4
 8007dbc:	f000 f8a0 	bl	8007f00 <_free_r>
 8007dc0:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8007dc2:	b111      	cbz	r1, 8007dca <_reclaim_reent+0x5a>
 8007dc4:	4620      	mov	r0, r4
 8007dc6:	f000 f89b 	bl	8007f00 <_free_r>
 8007dca:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007dcc:	b111      	cbz	r1, 8007dd4 <_reclaim_reent+0x64>
 8007dce:	4620      	mov	r0, r4
 8007dd0:	f000 f896 	bl	8007f00 <_free_r>
 8007dd4:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8007dd6:	b111      	cbz	r1, 8007dde <_reclaim_reent+0x6e>
 8007dd8:	4620      	mov	r0, r4
 8007dda:	f000 f891 	bl	8007f00 <_free_r>
 8007dde:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8007de0:	b111      	cbz	r1, 8007de8 <_reclaim_reent+0x78>
 8007de2:	4620      	mov	r0, r4
 8007de4:	f000 f88c 	bl	8007f00 <_free_r>
 8007de8:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8007dea:	b111      	cbz	r1, 8007df2 <_reclaim_reent+0x82>
 8007dec:	4620      	mov	r0, r4
 8007dee:	f000 f887 	bl	8007f00 <_free_r>
 8007df2:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8007df4:	b111      	cbz	r1, 8007dfc <_reclaim_reent+0x8c>
 8007df6:	4620      	mov	r0, r4
 8007df8:	f000 f882 	bl	8007f00 <_free_r>
 8007dfc:	6a23      	ldr	r3, [r4, #32]
 8007dfe:	b14b      	cbz	r3, 8007e14 <_reclaim_reent+0xa4>
 8007e00:	4620      	mov	r0, r4
 8007e02:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8007e06:	4718      	bx	r3
 8007e08:	680e      	ldr	r6, [r1, #0]
 8007e0a:	4620      	mov	r0, r4
 8007e0c:	f000 f878 	bl	8007f00 <_free_r>
 8007e10:	4631      	mov	r1, r6
 8007e12:	e7bb      	b.n	8007d8c <_reclaim_reent+0x1c>
 8007e14:	bd70      	pop	{r4, r5, r6, pc}
 8007e16:	bf00      	nop
 8007e18:	2000001c 	.word	0x2000001c

08007e1c <_lseek_r>:
 8007e1c:	b538      	push	{r3, r4, r5, lr}
 8007e1e:	4d07      	ldr	r5, [pc, #28]	@ (8007e3c <_lseek_r+0x20>)
 8007e20:	4604      	mov	r4, r0
 8007e22:	4608      	mov	r0, r1
 8007e24:	4611      	mov	r1, r2
 8007e26:	2200      	movs	r2, #0
 8007e28:	602a      	str	r2, [r5, #0]
 8007e2a:	461a      	mov	r2, r3
 8007e2c:	f7f9 f8c2 	bl	8000fb4 <_lseek>
 8007e30:	1c43      	adds	r3, r0, #1
 8007e32:	d102      	bne.n	8007e3a <_lseek_r+0x1e>
 8007e34:	682b      	ldr	r3, [r5, #0]
 8007e36:	b103      	cbz	r3, 8007e3a <_lseek_r+0x1e>
 8007e38:	6023      	str	r3, [r4, #0]
 8007e3a:	bd38      	pop	{r3, r4, r5, pc}
 8007e3c:	20005358 	.word	0x20005358

08007e40 <_read_r>:
 8007e40:	b538      	push	{r3, r4, r5, lr}
 8007e42:	4d07      	ldr	r5, [pc, #28]	@ (8007e60 <_read_r+0x20>)
 8007e44:	4604      	mov	r4, r0
 8007e46:	4608      	mov	r0, r1
 8007e48:	4611      	mov	r1, r2
 8007e4a:	2200      	movs	r2, #0
 8007e4c:	602a      	str	r2, [r5, #0]
 8007e4e:	461a      	mov	r2, r3
 8007e50:	f7f9 f850 	bl	8000ef4 <_read>
 8007e54:	1c43      	adds	r3, r0, #1
 8007e56:	d102      	bne.n	8007e5e <_read_r+0x1e>
 8007e58:	682b      	ldr	r3, [r5, #0]
 8007e5a:	b103      	cbz	r3, 8007e5e <_read_r+0x1e>
 8007e5c:	6023      	str	r3, [r4, #0]
 8007e5e:	bd38      	pop	{r3, r4, r5, pc}
 8007e60:	20005358 	.word	0x20005358

08007e64 <_write_r>:
 8007e64:	b538      	push	{r3, r4, r5, lr}
 8007e66:	4d07      	ldr	r5, [pc, #28]	@ (8007e84 <_write_r+0x20>)
 8007e68:	4604      	mov	r4, r0
 8007e6a:	4608      	mov	r0, r1
 8007e6c:	4611      	mov	r1, r2
 8007e6e:	2200      	movs	r2, #0
 8007e70:	602a      	str	r2, [r5, #0]
 8007e72:	461a      	mov	r2, r3
 8007e74:	f7f9 f85b 	bl	8000f2e <_write>
 8007e78:	1c43      	adds	r3, r0, #1
 8007e7a:	d102      	bne.n	8007e82 <_write_r+0x1e>
 8007e7c:	682b      	ldr	r3, [r5, #0]
 8007e7e:	b103      	cbz	r3, 8007e82 <_write_r+0x1e>
 8007e80:	6023      	str	r3, [r4, #0]
 8007e82:	bd38      	pop	{r3, r4, r5, pc}
 8007e84:	20005358 	.word	0x20005358

08007e88 <__errno>:
 8007e88:	4b01      	ldr	r3, [pc, #4]	@ (8007e90 <__errno+0x8>)
 8007e8a:	6818      	ldr	r0, [r3, #0]
 8007e8c:	4770      	bx	lr
 8007e8e:	bf00      	nop
 8007e90:	2000001c 	.word	0x2000001c

08007e94 <__libc_init_array>:
 8007e94:	b570      	push	{r4, r5, r6, lr}
 8007e96:	4d0d      	ldr	r5, [pc, #52]	@ (8007ecc <__libc_init_array+0x38>)
 8007e98:	4c0d      	ldr	r4, [pc, #52]	@ (8007ed0 <__libc_init_array+0x3c>)
 8007e9a:	1b64      	subs	r4, r4, r5
 8007e9c:	10a4      	asrs	r4, r4, #2
 8007e9e:	2600      	movs	r6, #0
 8007ea0:	42a6      	cmp	r6, r4
 8007ea2:	d109      	bne.n	8007eb8 <__libc_init_array+0x24>
 8007ea4:	4d0b      	ldr	r5, [pc, #44]	@ (8007ed4 <__libc_init_array+0x40>)
 8007ea6:	4c0c      	ldr	r4, [pc, #48]	@ (8007ed8 <__libc_init_array+0x44>)
 8007ea8:	f000 fd32 	bl	8008910 <_init>
 8007eac:	1b64      	subs	r4, r4, r5
 8007eae:	10a4      	asrs	r4, r4, #2
 8007eb0:	2600      	movs	r6, #0
 8007eb2:	42a6      	cmp	r6, r4
 8007eb4:	d105      	bne.n	8007ec2 <__libc_init_array+0x2e>
 8007eb6:	bd70      	pop	{r4, r5, r6, pc}
 8007eb8:	f855 3b04 	ldr.w	r3, [r5], #4
 8007ebc:	4798      	blx	r3
 8007ebe:	3601      	adds	r6, #1
 8007ec0:	e7ee      	b.n	8007ea0 <__libc_init_array+0xc>
 8007ec2:	f855 3b04 	ldr.w	r3, [r5], #4
 8007ec6:	4798      	blx	r3
 8007ec8:	3601      	adds	r6, #1
 8007eca:	e7f2      	b.n	8007eb2 <__libc_init_array+0x1e>
 8007ecc:	08008ae4 	.word	0x08008ae4
 8007ed0:	08008ae4 	.word	0x08008ae4
 8007ed4:	08008ae4 	.word	0x08008ae4
 8007ed8:	08008ae8 	.word	0x08008ae8

08007edc <__retarget_lock_init_recursive>:
 8007edc:	4770      	bx	lr

08007ede <__retarget_lock_acquire_recursive>:
 8007ede:	4770      	bx	lr

08007ee0 <__retarget_lock_release_recursive>:
 8007ee0:	4770      	bx	lr

08007ee2 <memcpy>:
 8007ee2:	440a      	add	r2, r1
 8007ee4:	4291      	cmp	r1, r2
 8007ee6:	f100 33ff 	add.w	r3, r0, #4294967295
 8007eea:	d100      	bne.n	8007eee <memcpy+0xc>
 8007eec:	4770      	bx	lr
 8007eee:	b510      	push	{r4, lr}
 8007ef0:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007ef4:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007ef8:	4291      	cmp	r1, r2
 8007efa:	d1f9      	bne.n	8007ef0 <memcpy+0xe>
 8007efc:	bd10      	pop	{r4, pc}
	...

08007f00 <_free_r>:
 8007f00:	b538      	push	{r3, r4, r5, lr}
 8007f02:	4605      	mov	r5, r0
 8007f04:	2900      	cmp	r1, #0
 8007f06:	d041      	beq.n	8007f8c <_free_r+0x8c>
 8007f08:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007f0c:	1f0c      	subs	r4, r1, #4
 8007f0e:	2b00      	cmp	r3, #0
 8007f10:	bfb8      	it	lt
 8007f12:	18e4      	addlt	r4, r4, r3
 8007f14:	f000 f8e0 	bl	80080d8 <__malloc_lock>
 8007f18:	4a1d      	ldr	r2, [pc, #116]	@ (8007f90 <_free_r+0x90>)
 8007f1a:	6813      	ldr	r3, [r2, #0]
 8007f1c:	b933      	cbnz	r3, 8007f2c <_free_r+0x2c>
 8007f1e:	6063      	str	r3, [r4, #4]
 8007f20:	6014      	str	r4, [r2, #0]
 8007f22:	4628      	mov	r0, r5
 8007f24:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007f28:	f000 b8dc 	b.w	80080e4 <__malloc_unlock>
 8007f2c:	42a3      	cmp	r3, r4
 8007f2e:	d908      	bls.n	8007f42 <_free_r+0x42>
 8007f30:	6820      	ldr	r0, [r4, #0]
 8007f32:	1821      	adds	r1, r4, r0
 8007f34:	428b      	cmp	r3, r1
 8007f36:	bf01      	itttt	eq
 8007f38:	6819      	ldreq	r1, [r3, #0]
 8007f3a:	685b      	ldreq	r3, [r3, #4]
 8007f3c:	1809      	addeq	r1, r1, r0
 8007f3e:	6021      	streq	r1, [r4, #0]
 8007f40:	e7ed      	b.n	8007f1e <_free_r+0x1e>
 8007f42:	461a      	mov	r2, r3
 8007f44:	685b      	ldr	r3, [r3, #4]
 8007f46:	b10b      	cbz	r3, 8007f4c <_free_r+0x4c>
 8007f48:	42a3      	cmp	r3, r4
 8007f4a:	d9fa      	bls.n	8007f42 <_free_r+0x42>
 8007f4c:	6811      	ldr	r1, [r2, #0]
 8007f4e:	1850      	adds	r0, r2, r1
 8007f50:	42a0      	cmp	r0, r4
 8007f52:	d10b      	bne.n	8007f6c <_free_r+0x6c>
 8007f54:	6820      	ldr	r0, [r4, #0]
 8007f56:	4401      	add	r1, r0
 8007f58:	1850      	adds	r0, r2, r1
 8007f5a:	4283      	cmp	r3, r0
 8007f5c:	6011      	str	r1, [r2, #0]
 8007f5e:	d1e0      	bne.n	8007f22 <_free_r+0x22>
 8007f60:	6818      	ldr	r0, [r3, #0]
 8007f62:	685b      	ldr	r3, [r3, #4]
 8007f64:	6053      	str	r3, [r2, #4]
 8007f66:	4408      	add	r0, r1
 8007f68:	6010      	str	r0, [r2, #0]
 8007f6a:	e7da      	b.n	8007f22 <_free_r+0x22>
 8007f6c:	d902      	bls.n	8007f74 <_free_r+0x74>
 8007f6e:	230c      	movs	r3, #12
 8007f70:	602b      	str	r3, [r5, #0]
 8007f72:	e7d6      	b.n	8007f22 <_free_r+0x22>
 8007f74:	6820      	ldr	r0, [r4, #0]
 8007f76:	1821      	adds	r1, r4, r0
 8007f78:	428b      	cmp	r3, r1
 8007f7a:	bf04      	itt	eq
 8007f7c:	6819      	ldreq	r1, [r3, #0]
 8007f7e:	685b      	ldreq	r3, [r3, #4]
 8007f80:	6063      	str	r3, [r4, #4]
 8007f82:	bf04      	itt	eq
 8007f84:	1809      	addeq	r1, r1, r0
 8007f86:	6021      	streq	r1, [r4, #0]
 8007f88:	6054      	str	r4, [r2, #4]
 8007f8a:	e7ca      	b.n	8007f22 <_free_r+0x22>
 8007f8c:	bd38      	pop	{r3, r4, r5, pc}
 8007f8e:	bf00      	nop
 8007f90:	20005364 	.word	0x20005364

08007f94 <sbrk_aligned>:
 8007f94:	b570      	push	{r4, r5, r6, lr}
 8007f96:	4e0f      	ldr	r6, [pc, #60]	@ (8007fd4 <sbrk_aligned+0x40>)
 8007f98:	460c      	mov	r4, r1
 8007f9a:	6831      	ldr	r1, [r6, #0]
 8007f9c:	4605      	mov	r5, r0
 8007f9e:	b911      	cbnz	r1, 8007fa6 <sbrk_aligned+0x12>
 8007fa0:	f000 fca6 	bl	80088f0 <_sbrk_r>
 8007fa4:	6030      	str	r0, [r6, #0]
 8007fa6:	4621      	mov	r1, r4
 8007fa8:	4628      	mov	r0, r5
 8007faa:	f000 fca1 	bl	80088f0 <_sbrk_r>
 8007fae:	1c43      	adds	r3, r0, #1
 8007fb0:	d103      	bne.n	8007fba <sbrk_aligned+0x26>
 8007fb2:	f04f 34ff 	mov.w	r4, #4294967295
 8007fb6:	4620      	mov	r0, r4
 8007fb8:	bd70      	pop	{r4, r5, r6, pc}
 8007fba:	1cc4      	adds	r4, r0, #3
 8007fbc:	f024 0403 	bic.w	r4, r4, #3
 8007fc0:	42a0      	cmp	r0, r4
 8007fc2:	d0f8      	beq.n	8007fb6 <sbrk_aligned+0x22>
 8007fc4:	1a21      	subs	r1, r4, r0
 8007fc6:	4628      	mov	r0, r5
 8007fc8:	f000 fc92 	bl	80088f0 <_sbrk_r>
 8007fcc:	3001      	adds	r0, #1
 8007fce:	d1f2      	bne.n	8007fb6 <sbrk_aligned+0x22>
 8007fd0:	e7ef      	b.n	8007fb2 <sbrk_aligned+0x1e>
 8007fd2:	bf00      	nop
 8007fd4:	20005360 	.word	0x20005360

08007fd8 <_malloc_r>:
 8007fd8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007fdc:	1ccd      	adds	r5, r1, #3
 8007fde:	f025 0503 	bic.w	r5, r5, #3
 8007fe2:	3508      	adds	r5, #8
 8007fe4:	2d0c      	cmp	r5, #12
 8007fe6:	bf38      	it	cc
 8007fe8:	250c      	movcc	r5, #12
 8007fea:	2d00      	cmp	r5, #0
 8007fec:	4606      	mov	r6, r0
 8007fee:	db01      	blt.n	8007ff4 <_malloc_r+0x1c>
 8007ff0:	42a9      	cmp	r1, r5
 8007ff2:	d904      	bls.n	8007ffe <_malloc_r+0x26>
 8007ff4:	230c      	movs	r3, #12
 8007ff6:	6033      	str	r3, [r6, #0]
 8007ff8:	2000      	movs	r0, #0
 8007ffa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007ffe:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80080d4 <_malloc_r+0xfc>
 8008002:	f000 f869 	bl	80080d8 <__malloc_lock>
 8008006:	f8d8 3000 	ldr.w	r3, [r8]
 800800a:	461c      	mov	r4, r3
 800800c:	bb44      	cbnz	r4, 8008060 <_malloc_r+0x88>
 800800e:	4629      	mov	r1, r5
 8008010:	4630      	mov	r0, r6
 8008012:	f7ff ffbf 	bl	8007f94 <sbrk_aligned>
 8008016:	1c43      	adds	r3, r0, #1
 8008018:	4604      	mov	r4, r0
 800801a:	d158      	bne.n	80080ce <_malloc_r+0xf6>
 800801c:	f8d8 4000 	ldr.w	r4, [r8]
 8008020:	4627      	mov	r7, r4
 8008022:	2f00      	cmp	r7, #0
 8008024:	d143      	bne.n	80080ae <_malloc_r+0xd6>
 8008026:	2c00      	cmp	r4, #0
 8008028:	d04b      	beq.n	80080c2 <_malloc_r+0xea>
 800802a:	6823      	ldr	r3, [r4, #0]
 800802c:	4639      	mov	r1, r7
 800802e:	4630      	mov	r0, r6
 8008030:	eb04 0903 	add.w	r9, r4, r3
 8008034:	f000 fc5c 	bl	80088f0 <_sbrk_r>
 8008038:	4581      	cmp	r9, r0
 800803a:	d142      	bne.n	80080c2 <_malloc_r+0xea>
 800803c:	6821      	ldr	r1, [r4, #0]
 800803e:	1a6d      	subs	r5, r5, r1
 8008040:	4629      	mov	r1, r5
 8008042:	4630      	mov	r0, r6
 8008044:	f7ff ffa6 	bl	8007f94 <sbrk_aligned>
 8008048:	3001      	adds	r0, #1
 800804a:	d03a      	beq.n	80080c2 <_malloc_r+0xea>
 800804c:	6823      	ldr	r3, [r4, #0]
 800804e:	442b      	add	r3, r5
 8008050:	6023      	str	r3, [r4, #0]
 8008052:	f8d8 3000 	ldr.w	r3, [r8]
 8008056:	685a      	ldr	r2, [r3, #4]
 8008058:	bb62      	cbnz	r2, 80080b4 <_malloc_r+0xdc>
 800805a:	f8c8 7000 	str.w	r7, [r8]
 800805e:	e00f      	b.n	8008080 <_malloc_r+0xa8>
 8008060:	6822      	ldr	r2, [r4, #0]
 8008062:	1b52      	subs	r2, r2, r5
 8008064:	d420      	bmi.n	80080a8 <_malloc_r+0xd0>
 8008066:	2a0b      	cmp	r2, #11
 8008068:	d917      	bls.n	800809a <_malloc_r+0xc2>
 800806a:	1961      	adds	r1, r4, r5
 800806c:	42a3      	cmp	r3, r4
 800806e:	6025      	str	r5, [r4, #0]
 8008070:	bf18      	it	ne
 8008072:	6059      	strne	r1, [r3, #4]
 8008074:	6863      	ldr	r3, [r4, #4]
 8008076:	bf08      	it	eq
 8008078:	f8c8 1000 	streq.w	r1, [r8]
 800807c:	5162      	str	r2, [r4, r5]
 800807e:	604b      	str	r3, [r1, #4]
 8008080:	4630      	mov	r0, r6
 8008082:	f000 f82f 	bl	80080e4 <__malloc_unlock>
 8008086:	f104 000b 	add.w	r0, r4, #11
 800808a:	1d23      	adds	r3, r4, #4
 800808c:	f020 0007 	bic.w	r0, r0, #7
 8008090:	1ac2      	subs	r2, r0, r3
 8008092:	bf1c      	itt	ne
 8008094:	1a1b      	subne	r3, r3, r0
 8008096:	50a3      	strne	r3, [r4, r2]
 8008098:	e7af      	b.n	8007ffa <_malloc_r+0x22>
 800809a:	6862      	ldr	r2, [r4, #4]
 800809c:	42a3      	cmp	r3, r4
 800809e:	bf0c      	ite	eq
 80080a0:	f8c8 2000 	streq.w	r2, [r8]
 80080a4:	605a      	strne	r2, [r3, #4]
 80080a6:	e7eb      	b.n	8008080 <_malloc_r+0xa8>
 80080a8:	4623      	mov	r3, r4
 80080aa:	6864      	ldr	r4, [r4, #4]
 80080ac:	e7ae      	b.n	800800c <_malloc_r+0x34>
 80080ae:	463c      	mov	r4, r7
 80080b0:	687f      	ldr	r7, [r7, #4]
 80080b2:	e7b6      	b.n	8008022 <_malloc_r+0x4a>
 80080b4:	461a      	mov	r2, r3
 80080b6:	685b      	ldr	r3, [r3, #4]
 80080b8:	42a3      	cmp	r3, r4
 80080ba:	d1fb      	bne.n	80080b4 <_malloc_r+0xdc>
 80080bc:	2300      	movs	r3, #0
 80080be:	6053      	str	r3, [r2, #4]
 80080c0:	e7de      	b.n	8008080 <_malloc_r+0xa8>
 80080c2:	230c      	movs	r3, #12
 80080c4:	6033      	str	r3, [r6, #0]
 80080c6:	4630      	mov	r0, r6
 80080c8:	f000 f80c 	bl	80080e4 <__malloc_unlock>
 80080cc:	e794      	b.n	8007ff8 <_malloc_r+0x20>
 80080ce:	6005      	str	r5, [r0, #0]
 80080d0:	e7d6      	b.n	8008080 <_malloc_r+0xa8>
 80080d2:	bf00      	nop
 80080d4:	20005364 	.word	0x20005364

080080d8 <__malloc_lock>:
 80080d8:	4801      	ldr	r0, [pc, #4]	@ (80080e0 <__malloc_lock+0x8>)
 80080da:	f7ff bf00 	b.w	8007ede <__retarget_lock_acquire_recursive>
 80080de:	bf00      	nop
 80080e0:	2000535c 	.word	0x2000535c

080080e4 <__malloc_unlock>:
 80080e4:	4801      	ldr	r0, [pc, #4]	@ (80080ec <__malloc_unlock+0x8>)
 80080e6:	f7ff befb 	b.w	8007ee0 <__retarget_lock_release_recursive>
 80080ea:	bf00      	nop
 80080ec:	2000535c 	.word	0x2000535c

080080f0 <__sfputc_r>:
 80080f0:	6893      	ldr	r3, [r2, #8]
 80080f2:	3b01      	subs	r3, #1
 80080f4:	2b00      	cmp	r3, #0
 80080f6:	b410      	push	{r4}
 80080f8:	6093      	str	r3, [r2, #8]
 80080fa:	da08      	bge.n	800810e <__sfputc_r+0x1e>
 80080fc:	6994      	ldr	r4, [r2, #24]
 80080fe:	42a3      	cmp	r3, r4
 8008100:	db01      	blt.n	8008106 <__sfputc_r+0x16>
 8008102:	290a      	cmp	r1, #10
 8008104:	d103      	bne.n	800810e <__sfputc_r+0x1e>
 8008106:	f85d 4b04 	ldr.w	r4, [sp], #4
 800810a:	f7ff bd84 	b.w	8007c16 <__swbuf_r>
 800810e:	6813      	ldr	r3, [r2, #0]
 8008110:	1c58      	adds	r0, r3, #1
 8008112:	6010      	str	r0, [r2, #0]
 8008114:	7019      	strb	r1, [r3, #0]
 8008116:	4608      	mov	r0, r1
 8008118:	f85d 4b04 	ldr.w	r4, [sp], #4
 800811c:	4770      	bx	lr

0800811e <__sfputs_r>:
 800811e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008120:	4606      	mov	r6, r0
 8008122:	460f      	mov	r7, r1
 8008124:	4614      	mov	r4, r2
 8008126:	18d5      	adds	r5, r2, r3
 8008128:	42ac      	cmp	r4, r5
 800812a:	d101      	bne.n	8008130 <__sfputs_r+0x12>
 800812c:	2000      	movs	r0, #0
 800812e:	e007      	b.n	8008140 <__sfputs_r+0x22>
 8008130:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008134:	463a      	mov	r2, r7
 8008136:	4630      	mov	r0, r6
 8008138:	f7ff ffda 	bl	80080f0 <__sfputc_r>
 800813c:	1c43      	adds	r3, r0, #1
 800813e:	d1f3      	bne.n	8008128 <__sfputs_r+0xa>
 8008140:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008144 <_vfiprintf_r>:
 8008144:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008148:	460d      	mov	r5, r1
 800814a:	b09d      	sub	sp, #116	@ 0x74
 800814c:	4614      	mov	r4, r2
 800814e:	4698      	mov	r8, r3
 8008150:	4606      	mov	r6, r0
 8008152:	b118      	cbz	r0, 800815c <_vfiprintf_r+0x18>
 8008154:	6a03      	ldr	r3, [r0, #32]
 8008156:	b90b      	cbnz	r3, 800815c <_vfiprintf_r+0x18>
 8008158:	f7ff fc74 	bl	8007a44 <__sinit>
 800815c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800815e:	07d9      	lsls	r1, r3, #31
 8008160:	d405      	bmi.n	800816e <_vfiprintf_r+0x2a>
 8008162:	89ab      	ldrh	r3, [r5, #12]
 8008164:	059a      	lsls	r2, r3, #22
 8008166:	d402      	bmi.n	800816e <_vfiprintf_r+0x2a>
 8008168:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800816a:	f7ff feb8 	bl	8007ede <__retarget_lock_acquire_recursive>
 800816e:	89ab      	ldrh	r3, [r5, #12]
 8008170:	071b      	lsls	r3, r3, #28
 8008172:	d501      	bpl.n	8008178 <_vfiprintf_r+0x34>
 8008174:	692b      	ldr	r3, [r5, #16]
 8008176:	b99b      	cbnz	r3, 80081a0 <_vfiprintf_r+0x5c>
 8008178:	4629      	mov	r1, r5
 800817a:	4630      	mov	r0, r6
 800817c:	f7ff fd8a 	bl	8007c94 <__swsetup_r>
 8008180:	b170      	cbz	r0, 80081a0 <_vfiprintf_r+0x5c>
 8008182:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008184:	07dc      	lsls	r4, r3, #31
 8008186:	d504      	bpl.n	8008192 <_vfiprintf_r+0x4e>
 8008188:	f04f 30ff 	mov.w	r0, #4294967295
 800818c:	b01d      	add	sp, #116	@ 0x74
 800818e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008192:	89ab      	ldrh	r3, [r5, #12]
 8008194:	0598      	lsls	r0, r3, #22
 8008196:	d4f7      	bmi.n	8008188 <_vfiprintf_r+0x44>
 8008198:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800819a:	f7ff fea1 	bl	8007ee0 <__retarget_lock_release_recursive>
 800819e:	e7f3      	b.n	8008188 <_vfiprintf_r+0x44>
 80081a0:	2300      	movs	r3, #0
 80081a2:	9309      	str	r3, [sp, #36]	@ 0x24
 80081a4:	2320      	movs	r3, #32
 80081a6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80081aa:	f8cd 800c 	str.w	r8, [sp, #12]
 80081ae:	2330      	movs	r3, #48	@ 0x30
 80081b0:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8008360 <_vfiprintf_r+0x21c>
 80081b4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80081b8:	f04f 0901 	mov.w	r9, #1
 80081bc:	4623      	mov	r3, r4
 80081be:	469a      	mov	sl, r3
 80081c0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80081c4:	b10a      	cbz	r2, 80081ca <_vfiprintf_r+0x86>
 80081c6:	2a25      	cmp	r2, #37	@ 0x25
 80081c8:	d1f9      	bne.n	80081be <_vfiprintf_r+0x7a>
 80081ca:	ebba 0b04 	subs.w	fp, sl, r4
 80081ce:	d00b      	beq.n	80081e8 <_vfiprintf_r+0xa4>
 80081d0:	465b      	mov	r3, fp
 80081d2:	4622      	mov	r2, r4
 80081d4:	4629      	mov	r1, r5
 80081d6:	4630      	mov	r0, r6
 80081d8:	f7ff ffa1 	bl	800811e <__sfputs_r>
 80081dc:	3001      	adds	r0, #1
 80081de:	f000 80a7 	beq.w	8008330 <_vfiprintf_r+0x1ec>
 80081e2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80081e4:	445a      	add	r2, fp
 80081e6:	9209      	str	r2, [sp, #36]	@ 0x24
 80081e8:	f89a 3000 	ldrb.w	r3, [sl]
 80081ec:	2b00      	cmp	r3, #0
 80081ee:	f000 809f 	beq.w	8008330 <_vfiprintf_r+0x1ec>
 80081f2:	2300      	movs	r3, #0
 80081f4:	f04f 32ff 	mov.w	r2, #4294967295
 80081f8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80081fc:	f10a 0a01 	add.w	sl, sl, #1
 8008200:	9304      	str	r3, [sp, #16]
 8008202:	9307      	str	r3, [sp, #28]
 8008204:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008208:	931a      	str	r3, [sp, #104]	@ 0x68
 800820a:	4654      	mov	r4, sl
 800820c:	2205      	movs	r2, #5
 800820e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008212:	4853      	ldr	r0, [pc, #332]	@ (8008360 <_vfiprintf_r+0x21c>)
 8008214:	f7f8 f814 	bl	8000240 <memchr>
 8008218:	9a04      	ldr	r2, [sp, #16]
 800821a:	b9d8      	cbnz	r0, 8008254 <_vfiprintf_r+0x110>
 800821c:	06d1      	lsls	r1, r2, #27
 800821e:	bf44      	itt	mi
 8008220:	2320      	movmi	r3, #32
 8008222:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008226:	0713      	lsls	r3, r2, #28
 8008228:	bf44      	itt	mi
 800822a:	232b      	movmi	r3, #43	@ 0x2b
 800822c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008230:	f89a 3000 	ldrb.w	r3, [sl]
 8008234:	2b2a      	cmp	r3, #42	@ 0x2a
 8008236:	d015      	beq.n	8008264 <_vfiprintf_r+0x120>
 8008238:	9a07      	ldr	r2, [sp, #28]
 800823a:	4654      	mov	r4, sl
 800823c:	2000      	movs	r0, #0
 800823e:	f04f 0c0a 	mov.w	ip, #10
 8008242:	4621      	mov	r1, r4
 8008244:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008248:	3b30      	subs	r3, #48	@ 0x30
 800824a:	2b09      	cmp	r3, #9
 800824c:	d94b      	bls.n	80082e6 <_vfiprintf_r+0x1a2>
 800824e:	b1b0      	cbz	r0, 800827e <_vfiprintf_r+0x13a>
 8008250:	9207      	str	r2, [sp, #28]
 8008252:	e014      	b.n	800827e <_vfiprintf_r+0x13a>
 8008254:	eba0 0308 	sub.w	r3, r0, r8
 8008258:	fa09 f303 	lsl.w	r3, r9, r3
 800825c:	4313      	orrs	r3, r2
 800825e:	9304      	str	r3, [sp, #16]
 8008260:	46a2      	mov	sl, r4
 8008262:	e7d2      	b.n	800820a <_vfiprintf_r+0xc6>
 8008264:	9b03      	ldr	r3, [sp, #12]
 8008266:	1d19      	adds	r1, r3, #4
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	9103      	str	r1, [sp, #12]
 800826c:	2b00      	cmp	r3, #0
 800826e:	bfbb      	ittet	lt
 8008270:	425b      	neglt	r3, r3
 8008272:	f042 0202 	orrlt.w	r2, r2, #2
 8008276:	9307      	strge	r3, [sp, #28]
 8008278:	9307      	strlt	r3, [sp, #28]
 800827a:	bfb8      	it	lt
 800827c:	9204      	strlt	r2, [sp, #16]
 800827e:	7823      	ldrb	r3, [r4, #0]
 8008280:	2b2e      	cmp	r3, #46	@ 0x2e
 8008282:	d10a      	bne.n	800829a <_vfiprintf_r+0x156>
 8008284:	7863      	ldrb	r3, [r4, #1]
 8008286:	2b2a      	cmp	r3, #42	@ 0x2a
 8008288:	d132      	bne.n	80082f0 <_vfiprintf_r+0x1ac>
 800828a:	9b03      	ldr	r3, [sp, #12]
 800828c:	1d1a      	adds	r2, r3, #4
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	9203      	str	r2, [sp, #12]
 8008292:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008296:	3402      	adds	r4, #2
 8008298:	9305      	str	r3, [sp, #20]
 800829a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8008370 <_vfiprintf_r+0x22c>
 800829e:	7821      	ldrb	r1, [r4, #0]
 80082a0:	2203      	movs	r2, #3
 80082a2:	4650      	mov	r0, sl
 80082a4:	f7f7 ffcc 	bl	8000240 <memchr>
 80082a8:	b138      	cbz	r0, 80082ba <_vfiprintf_r+0x176>
 80082aa:	9b04      	ldr	r3, [sp, #16]
 80082ac:	eba0 000a 	sub.w	r0, r0, sl
 80082b0:	2240      	movs	r2, #64	@ 0x40
 80082b2:	4082      	lsls	r2, r0
 80082b4:	4313      	orrs	r3, r2
 80082b6:	3401      	adds	r4, #1
 80082b8:	9304      	str	r3, [sp, #16]
 80082ba:	f814 1b01 	ldrb.w	r1, [r4], #1
 80082be:	4829      	ldr	r0, [pc, #164]	@ (8008364 <_vfiprintf_r+0x220>)
 80082c0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80082c4:	2206      	movs	r2, #6
 80082c6:	f7f7 ffbb 	bl	8000240 <memchr>
 80082ca:	2800      	cmp	r0, #0
 80082cc:	d03f      	beq.n	800834e <_vfiprintf_r+0x20a>
 80082ce:	4b26      	ldr	r3, [pc, #152]	@ (8008368 <_vfiprintf_r+0x224>)
 80082d0:	bb1b      	cbnz	r3, 800831a <_vfiprintf_r+0x1d6>
 80082d2:	9b03      	ldr	r3, [sp, #12]
 80082d4:	3307      	adds	r3, #7
 80082d6:	f023 0307 	bic.w	r3, r3, #7
 80082da:	3308      	adds	r3, #8
 80082dc:	9303      	str	r3, [sp, #12]
 80082de:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80082e0:	443b      	add	r3, r7
 80082e2:	9309      	str	r3, [sp, #36]	@ 0x24
 80082e4:	e76a      	b.n	80081bc <_vfiprintf_r+0x78>
 80082e6:	fb0c 3202 	mla	r2, ip, r2, r3
 80082ea:	460c      	mov	r4, r1
 80082ec:	2001      	movs	r0, #1
 80082ee:	e7a8      	b.n	8008242 <_vfiprintf_r+0xfe>
 80082f0:	2300      	movs	r3, #0
 80082f2:	3401      	adds	r4, #1
 80082f4:	9305      	str	r3, [sp, #20]
 80082f6:	4619      	mov	r1, r3
 80082f8:	f04f 0c0a 	mov.w	ip, #10
 80082fc:	4620      	mov	r0, r4
 80082fe:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008302:	3a30      	subs	r2, #48	@ 0x30
 8008304:	2a09      	cmp	r2, #9
 8008306:	d903      	bls.n	8008310 <_vfiprintf_r+0x1cc>
 8008308:	2b00      	cmp	r3, #0
 800830a:	d0c6      	beq.n	800829a <_vfiprintf_r+0x156>
 800830c:	9105      	str	r1, [sp, #20]
 800830e:	e7c4      	b.n	800829a <_vfiprintf_r+0x156>
 8008310:	fb0c 2101 	mla	r1, ip, r1, r2
 8008314:	4604      	mov	r4, r0
 8008316:	2301      	movs	r3, #1
 8008318:	e7f0      	b.n	80082fc <_vfiprintf_r+0x1b8>
 800831a:	ab03      	add	r3, sp, #12
 800831c:	9300      	str	r3, [sp, #0]
 800831e:	462a      	mov	r2, r5
 8008320:	4b12      	ldr	r3, [pc, #72]	@ (800836c <_vfiprintf_r+0x228>)
 8008322:	a904      	add	r1, sp, #16
 8008324:	4630      	mov	r0, r6
 8008326:	f3af 8000 	nop.w
 800832a:	4607      	mov	r7, r0
 800832c:	1c78      	adds	r0, r7, #1
 800832e:	d1d6      	bne.n	80082de <_vfiprintf_r+0x19a>
 8008330:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008332:	07d9      	lsls	r1, r3, #31
 8008334:	d405      	bmi.n	8008342 <_vfiprintf_r+0x1fe>
 8008336:	89ab      	ldrh	r3, [r5, #12]
 8008338:	059a      	lsls	r2, r3, #22
 800833a:	d402      	bmi.n	8008342 <_vfiprintf_r+0x1fe>
 800833c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800833e:	f7ff fdcf 	bl	8007ee0 <__retarget_lock_release_recursive>
 8008342:	89ab      	ldrh	r3, [r5, #12]
 8008344:	065b      	lsls	r3, r3, #25
 8008346:	f53f af1f 	bmi.w	8008188 <_vfiprintf_r+0x44>
 800834a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800834c:	e71e      	b.n	800818c <_vfiprintf_r+0x48>
 800834e:	ab03      	add	r3, sp, #12
 8008350:	9300      	str	r3, [sp, #0]
 8008352:	462a      	mov	r2, r5
 8008354:	4b05      	ldr	r3, [pc, #20]	@ (800836c <_vfiprintf_r+0x228>)
 8008356:	a904      	add	r1, sp, #16
 8008358:	4630      	mov	r0, r6
 800835a:	f000 f879 	bl	8008450 <_printf_i>
 800835e:	e7e4      	b.n	800832a <_vfiprintf_r+0x1e6>
 8008360:	08008aa8 	.word	0x08008aa8
 8008364:	08008ab2 	.word	0x08008ab2
 8008368:	00000000 	.word	0x00000000
 800836c:	0800811f 	.word	0x0800811f
 8008370:	08008aae 	.word	0x08008aae

08008374 <_printf_common>:
 8008374:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008378:	4616      	mov	r6, r2
 800837a:	4698      	mov	r8, r3
 800837c:	688a      	ldr	r2, [r1, #8]
 800837e:	690b      	ldr	r3, [r1, #16]
 8008380:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008384:	4293      	cmp	r3, r2
 8008386:	bfb8      	it	lt
 8008388:	4613      	movlt	r3, r2
 800838a:	6033      	str	r3, [r6, #0]
 800838c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8008390:	4607      	mov	r7, r0
 8008392:	460c      	mov	r4, r1
 8008394:	b10a      	cbz	r2, 800839a <_printf_common+0x26>
 8008396:	3301      	adds	r3, #1
 8008398:	6033      	str	r3, [r6, #0]
 800839a:	6823      	ldr	r3, [r4, #0]
 800839c:	0699      	lsls	r1, r3, #26
 800839e:	bf42      	ittt	mi
 80083a0:	6833      	ldrmi	r3, [r6, #0]
 80083a2:	3302      	addmi	r3, #2
 80083a4:	6033      	strmi	r3, [r6, #0]
 80083a6:	6825      	ldr	r5, [r4, #0]
 80083a8:	f015 0506 	ands.w	r5, r5, #6
 80083ac:	d106      	bne.n	80083bc <_printf_common+0x48>
 80083ae:	f104 0a19 	add.w	sl, r4, #25
 80083b2:	68e3      	ldr	r3, [r4, #12]
 80083b4:	6832      	ldr	r2, [r6, #0]
 80083b6:	1a9b      	subs	r3, r3, r2
 80083b8:	42ab      	cmp	r3, r5
 80083ba:	dc26      	bgt.n	800840a <_printf_common+0x96>
 80083bc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80083c0:	6822      	ldr	r2, [r4, #0]
 80083c2:	3b00      	subs	r3, #0
 80083c4:	bf18      	it	ne
 80083c6:	2301      	movne	r3, #1
 80083c8:	0692      	lsls	r2, r2, #26
 80083ca:	d42b      	bmi.n	8008424 <_printf_common+0xb0>
 80083cc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80083d0:	4641      	mov	r1, r8
 80083d2:	4638      	mov	r0, r7
 80083d4:	47c8      	blx	r9
 80083d6:	3001      	adds	r0, #1
 80083d8:	d01e      	beq.n	8008418 <_printf_common+0xa4>
 80083da:	6823      	ldr	r3, [r4, #0]
 80083dc:	6922      	ldr	r2, [r4, #16]
 80083de:	f003 0306 	and.w	r3, r3, #6
 80083e2:	2b04      	cmp	r3, #4
 80083e4:	bf02      	ittt	eq
 80083e6:	68e5      	ldreq	r5, [r4, #12]
 80083e8:	6833      	ldreq	r3, [r6, #0]
 80083ea:	1aed      	subeq	r5, r5, r3
 80083ec:	68a3      	ldr	r3, [r4, #8]
 80083ee:	bf0c      	ite	eq
 80083f0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80083f4:	2500      	movne	r5, #0
 80083f6:	4293      	cmp	r3, r2
 80083f8:	bfc4      	itt	gt
 80083fa:	1a9b      	subgt	r3, r3, r2
 80083fc:	18ed      	addgt	r5, r5, r3
 80083fe:	2600      	movs	r6, #0
 8008400:	341a      	adds	r4, #26
 8008402:	42b5      	cmp	r5, r6
 8008404:	d11a      	bne.n	800843c <_printf_common+0xc8>
 8008406:	2000      	movs	r0, #0
 8008408:	e008      	b.n	800841c <_printf_common+0xa8>
 800840a:	2301      	movs	r3, #1
 800840c:	4652      	mov	r2, sl
 800840e:	4641      	mov	r1, r8
 8008410:	4638      	mov	r0, r7
 8008412:	47c8      	blx	r9
 8008414:	3001      	adds	r0, #1
 8008416:	d103      	bne.n	8008420 <_printf_common+0xac>
 8008418:	f04f 30ff 	mov.w	r0, #4294967295
 800841c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008420:	3501      	adds	r5, #1
 8008422:	e7c6      	b.n	80083b2 <_printf_common+0x3e>
 8008424:	18e1      	adds	r1, r4, r3
 8008426:	1c5a      	adds	r2, r3, #1
 8008428:	2030      	movs	r0, #48	@ 0x30
 800842a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800842e:	4422      	add	r2, r4
 8008430:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8008434:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8008438:	3302      	adds	r3, #2
 800843a:	e7c7      	b.n	80083cc <_printf_common+0x58>
 800843c:	2301      	movs	r3, #1
 800843e:	4622      	mov	r2, r4
 8008440:	4641      	mov	r1, r8
 8008442:	4638      	mov	r0, r7
 8008444:	47c8      	blx	r9
 8008446:	3001      	adds	r0, #1
 8008448:	d0e6      	beq.n	8008418 <_printf_common+0xa4>
 800844a:	3601      	adds	r6, #1
 800844c:	e7d9      	b.n	8008402 <_printf_common+0x8e>
	...

08008450 <_printf_i>:
 8008450:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008454:	7e0f      	ldrb	r7, [r1, #24]
 8008456:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8008458:	2f78      	cmp	r7, #120	@ 0x78
 800845a:	4691      	mov	r9, r2
 800845c:	4680      	mov	r8, r0
 800845e:	460c      	mov	r4, r1
 8008460:	469a      	mov	sl, r3
 8008462:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8008466:	d807      	bhi.n	8008478 <_printf_i+0x28>
 8008468:	2f62      	cmp	r7, #98	@ 0x62
 800846a:	d80a      	bhi.n	8008482 <_printf_i+0x32>
 800846c:	2f00      	cmp	r7, #0
 800846e:	f000 80d2 	beq.w	8008616 <_printf_i+0x1c6>
 8008472:	2f58      	cmp	r7, #88	@ 0x58
 8008474:	f000 80b9 	beq.w	80085ea <_printf_i+0x19a>
 8008478:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800847c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8008480:	e03a      	b.n	80084f8 <_printf_i+0xa8>
 8008482:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8008486:	2b15      	cmp	r3, #21
 8008488:	d8f6      	bhi.n	8008478 <_printf_i+0x28>
 800848a:	a101      	add	r1, pc, #4	@ (adr r1, 8008490 <_printf_i+0x40>)
 800848c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008490:	080084e9 	.word	0x080084e9
 8008494:	080084fd 	.word	0x080084fd
 8008498:	08008479 	.word	0x08008479
 800849c:	08008479 	.word	0x08008479
 80084a0:	08008479 	.word	0x08008479
 80084a4:	08008479 	.word	0x08008479
 80084a8:	080084fd 	.word	0x080084fd
 80084ac:	08008479 	.word	0x08008479
 80084b0:	08008479 	.word	0x08008479
 80084b4:	08008479 	.word	0x08008479
 80084b8:	08008479 	.word	0x08008479
 80084bc:	080085fd 	.word	0x080085fd
 80084c0:	08008527 	.word	0x08008527
 80084c4:	080085b7 	.word	0x080085b7
 80084c8:	08008479 	.word	0x08008479
 80084cc:	08008479 	.word	0x08008479
 80084d0:	0800861f 	.word	0x0800861f
 80084d4:	08008479 	.word	0x08008479
 80084d8:	08008527 	.word	0x08008527
 80084dc:	08008479 	.word	0x08008479
 80084e0:	08008479 	.word	0x08008479
 80084e4:	080085bf 	.word	0x080085bf
 80084e8:	6833      	ldr	r3, [r6, #0]
 80084ea:	1d1a      	adds	r2, r3, #4
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	6032      	str	r2, [r6, #0]
 80084f0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80084f4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80084f8:	2301      	movs	r3, #1
 80084fa:	e09d      	b.n	8008638 <_printf_i+0x1e8>
 80084fc:	6833      	ldr	r3, [r6, #0]
 80084fe:	6820      	ldr	r0, [r4, #0]
 8008500:	1d19      	adds	r1, r3, #4
 8008502:	6031      	str	r1, [r6, #0]
 8008504:	0606      	lsls	r6, r0, #24
 8008506:	d501      	bpl.n	800850c <_printf_i+0xbc>
 8008508:	681d      	ldr	r5, [r3, #0]
 800850a:	e003      	b.n	8008514 <_printf_i+0xc4>
 800850c:	0645      	lsls	r5, r0, #25
 800850e:	d5fb      	bpl.n	8008508 <_printf_i+0xb8>
 8008510:	f9b3 5000 	ldrsh.w	r5, [r3]
 8008514:	2d00      	cmp	r5, #0
 8008516:	da03      	bge.n	8008520 <_printf_i+0xd0>
 8008518:	232d      	movs	r3, #45	@ 0x2d
 800851a:	426d      	negs	r5, r5
 800851c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008520:	4859      	ldr	r0, [pc, #356]	@ (8008688 <_printf_i+0x238>)
 8008522:	230a      	movs	r3, #10
 8008524:	e011      	b.n	800854a <_printf_i+0xfa>
 8008526:	6821      	ldr	r1, [r4, #0]
 8008528:	6833      	ldr	r3, [r6, #0]
 800852a:	0608      	lsls	r0, r1, #24
 800852c:	f853 5b04 	ldr.w	r5, [r3], #4
 8008530:	d402      	bmi.n	8008538 <_printf_i+0xe8>
 8008532:	0649      	lsls	r1, r1, #25
 8008534:	bf48      	it	mi
 8008536:	b2ad      	uxthmi	r5, r5
 8008538:	2f6f      	cmp	r7, #111	@ 0x6f
 800853a:	4853      	ldr	r0, [pc, #332]	@ (8008688 <_printf_i+0x238>)
 800853c:	6033      	str	r3, [r6, #0]
 800853e:	bf14      	ite	ne
 8008540:	230a      	movne	r3, #10
 8008542:	2308      	moveq	r3, #8
 8008544:	2100      	movs	r1, #0
 8008546:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800854a:	6866      	ldr	r6, [r4, #4]
 800854c:	60a6      	str	r6, [r4, #8]
 800854e:	2e00      	cmp	r6, #0
 8008550:	bfa2      	ittt	ge
 8008552:	6821      	ldrge	r1, [r4, #0]
 8008554:	f021 0104 	bicge.w	r1, r1, #4
 8008558:	6021      	strge	r1, [r4, #0]
 800855a:	b90d      	cbnz	r5, 8008560 <_printf_i+0x110>
 800855c:	2e00      	cmp	r6, #0
 800855e:	d04b      	beq.n	80085f8 <_printf_i+0x1a8>
 8008560:	4616      	mov	r6, r2
 8008562:	fbb5 f1f3 	udiv	r1, r5, r3
 8008566:	fb03 5711 	mls	r7, r3, r1, r5
 800856a:	5dc7      	ldrb	r7, [r0, r7]
 800856c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008570:	462f      	mov	r7, r5
 8008572:	42bb      	cmp	r3, r7
 8008574:	460d      	mov	r5, r1
 8008576:	d9f4      	bls.n	8008562 <_printf_i+0x112>
 8008578:	2b08      	cmp	r3, #8
 800857a:	d10b      	bne.n	8008594 <_printf_i+0x144>
 800857c:	6823      	ldr	r3, [r4, #0]
 800857e:	07df      	lsls	r7, r3, #31
 8008580:	d508      	bpl.n	8008594 <_printf_i+0x144>
 8008582:	6923      	ldr	r3, [r4, #16]
 8008584:	6861      	ldr	r1, [r4, #4]
 8008586:	4299      	cmp	r1, r3
 8008588:	bfde      	ittt	le
 800858a:	2330      	movle	r3, #48	@ 0x30
 800858c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008590:	f106 36ff 	addle.w	r6, r6, #4294967295
 8008594:	1b92      	subs	r2, r2, r6
 8008596:	6122      	str	r2, [r4, #16]
 8008598:	f8cd a000 	str.w	sl, [sp]
 800859c:	464b      	mov	r3, r9
 800859e:	aa03      	add	r2, sp, #12
 80085a0:	4621      	mov	r1, r4
 80085a2:	4640      	mov	r0, r8
 80085a4:	f7ff fee6 	bl	8008374 <_printf_common>
 80085a8:	3001      	adds	r0, #1
 80085aa:	d14a      	bne.n	8008642 <_printf_i+0x1f2>
 80085ac:	f04f 30ff 	mov.w	r0, #4294967295
 80085b0:	b004      	add	sp, #16
 80085b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80085b6:	6823      	ldr	r3, [r4, #0]
 80085b8:	f043 0320 	orr.w	r3, r3, #32
 80085bc:	6023      	str	r3, [r4, #0]
 80085be:	4833      	ldr	r0, [pc, #204]	@ (800868c <_printf_i+0x23c>)
 80085c0:	2778      	movs	r7, #120	@ 0x78
 80085c2:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80085c6:	6823      	ldr	r3, [r4, #0]
 80085c8:	6831      	ldr	r1, [r6, #0]
 80085ca:	061f      	lsls	r7, r3, #24
 80085cc:	f851 5b04 	ldr.w	r5, [r1], #4
 80085d0:	d402      	bmi.n	80085d8 <_printf_i+0x188>
 80085d2:	065f      	lsls	r7, r3, #25
 80085d4:	bf48      	it	mi
 80085d6:	b2ad      	uxthmi	r5, r5
 80085d8:	6031      	str	r1, [r6, #0]
 80085da:	07d9      	lsls	r1, r3, #31
 80085dc:	bf44      	itt	mi
 80085de:	f043 0320 	orrmi.w	r3, r3, #32
 80085e2:	6023      	strmi	r3, [r4, #0]
 80085e4:	b11d      	cbz	r5, 80085ee <_printf_i+0x19e>
 80085e6:	2310      	movs	r3, #16
 80085e8:	e7ac      	b.n	8008544 <_printf_i+0xf4>
 80085ea:	4827      	ldr	r0, [pc, #156]	@ (8008688 <_printf_i+0x238>)
 80085ec:	e7e9      	b.n	80085c2 <_printf_i+0x172>
 80085ee:	6823      	ldr	r3, [r4, #0]
 80085f0:	f023 0320 	bic.w	r3, r3, #32
 80085f4:	6023      	str	r3, [r4, #0]
 80085f6:	e7f6      	b.n	80085e6 <_printf_i+0x196>
 80085f8:	4616      	mov	r6, r2
 80085fa:	e7bd      	b.n	8008578 <_printf_i+0x128>
 80085fc:	6833      	ldr	r3, [r6, #0]
 80085fe:	6825      	ldr	r5, [r4, #0]
 8008600:	6961      	ldr	r1, [r4, #20]
 8008602:	1d18      	adds	r0, r3, #4
 8008604:	6030      	str	r0, [r6, #0]
 8008606:	062e      	lsls	r6, r5, #24
 8008608:	681b      	ldr	r3, [r3, #0]
 800860a:	d501      	bpl.n	8008610 <_printf_i+0x1c0>
 800860c:	6019      	str	r1, [r3, #0]
 800860e:	e002      	b.n	8008616 <_printf_i+0x1c6>
 8008610:	0668      	lsls	r0, r5, #25
 8008612:	d5fb      	bpl.n	800860c <_printf_i+0x1bc>
 8008614:	8019      	strh	r1, [r3, #0]
 8008616:	2300      	movs	r3, #0
 8008618:	6123      	str	r3, [r4, #16]
 800861a:	4616      	mov	r6, r2
 800861c:	e7bc      	b.n	8008598 <_printf_i+0x148>
 800861e:	6833      	ldr	r3, [r6, #0]
 8008620:	1d1a      	adds	r2, r3, #4
 8008622:	6032      	str	r2, [r6, #0]
 8008624:	681e      	ldr	r6, [r3, #0]
 8008626:	6862      	ldr	r2, [r4, #4]
 8008628:	2100      	movs	r1, #0
 800862a:	4630      	mov	r0, r6
 800862c:	f7f7 fe08 	bl	8000240 <memchr>
 8008630:	b108      	cbz	r0, 8008636 <_printf_i+0x1e6>
 8008632:	1b80      	subs	r0, r0, r6
 8008634:	6060      	str	r0, [r4, #4]
 8008636:	6863      	ldr	r3, [r4, #4]
 8008638:	6123      	str	r3, [r4, #16]
 800863a:	2300      	movs	r3, #0
 800863c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008640:	e7aa      	b.n	8008598 <_printf_i+0x148>
 8008642:	6923      	ldr	r3, [r4, #16]
 8008644:	4632      	mov	r2, r6
 8008646:	4649      	mov	r1, r9
 8008648:	4640      	mov	r0, r8
 800864a:	47d0      	blx	sl
 800864c:	3001      	adds	r0, #1
 800864e:	d0ad      	beq.n	80085ac <_printf_i+0x15c>
 8008650:	6823      	ldr	r3, [r4, #0]
 8008652:	079b      	lsls	r3, r3, #30
 8008654:	d413      	bmi.n	800867e <_printf_i+0x22e>
 8008656:	68e0      	ldr	r0, [r4, #12]
 8008658:	9b03      	ldr	r3, [sp, #12]
 800865a:	4298      	cmp	r0, r3
 800865c:	bfb8      	it	lt
 800865e:	4618      	movlt	r0, r3
 8008660:	e7a6      	b.n	80085b0 <_printf_i+0x160>
 8008662:	2301      	movs	r3, #1
 8008664:	4632      	mov	r2, r6
 8008666:	4649      	mov	r1, r9
 8008668:	4640      	mov	r0, r8
 800866a:	47d0      	blx	sl
 800866c:	3001      	adds	r0, #1
 800866e:	d09d      	beq.n	80085ac <_printf_i+0x15c>
 8008670:	3501      	adds	r5, #1
 8008672:	68e3      	ldr	r3, [r4, #12]
 8008674:	9903      	ldr	r1, [sp, #12]
 8008676:	1a5b      	subs	r3, r3, r1
 8008678:	42ab      	cmp	r3, r5
 800867a:	dcf2      	bgt.n	8008662 <_printf_i+0x212>
 800867c:	e7eb      	b.n	8008656 <_printf_i+0x206>
 800867e:	2500      	movs	r5, #0
 8008680:	f104 0619 	add.w	r6, r4, #25
 8008684:	e7f5      	b.n	8008672 <_printf_i+0x222>
 8008686:	bf00      	nop
 8008688:	08008ab9 	.word	0x08008ab9
 800868c:	08008aca 	.word	0x08008aca

08008690 <__sflush_r>:
 8008690:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008694:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008698:	0716      	lsls	r6, r2, #28
 800869a:	4605      	mov	r5, r0
 800869c:	460c      	mov	r4, r1
 800869e:	d454      	bmi.n	800874a <__sflush_r+0xba>
 80086a0:	684b      	ldr	r3, [r1, #4]
 80086a2:	2b00      	cmp	r3, #0
 80086a4:	dc02      	bgt.n	80086ac <__sflush_r+0x1c>
 80086a6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80086a8:	2b00      	cmp	r3, #0
 80086aa:	dd48      	ble.n	800873e <__sflush_r+0xae>
 80086ac:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80086ae:	2e00      	cmp	r6, #0
 80086b0:	d045      	beq.n	800873e <__sflush_r+0xae>
 80086b2:	2300      	movs	r3, #0
 80086b4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80086b8:	682f      	ldr	r7, [r5, #0]
 80086ba:	6a21      	ldr	r1, [r4, #32]
 80086bc:	602b      	str	r3, [r5, #0]
 80086be:	d030      	beq.n	8008722 <__sflush_r+0x92>
 80086c0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80086c2:	89a3      	ldrh	r3, [r4, #12]
 80086c4:	0759      	lsls	r1, r3, #29
 80086c6:	d505      	bpl.n	80086d4 <__sflush_r+0x44>
 80086c8:	6863      	ldr	r3, [r4, #4]
 80086ca:	1ad2      	subs	r2, r2, r3
 80086cc:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80086ce:	b10b      	cbz	r3, 80086d4 <__sflush_r+0x44>
 80086d0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80086d2:	1ad2      	subs	r2, r2, r3
 80086d4:	2300      	movs	r3, #0
 80086d6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80086d8:	6a21      	ldr	r1, [r4, #32]
 80086da:	4628      	mov	r0, r5
 80086dc:	47b0      	blx	r6
 80086de:	1c43      	adds	r3, r0, #1
 80086e0:	89a3      	ldrh	r3, [r4, #12]
 80086e2:	d106      	bne.n	80086f2 <__sflush_r+0x62>
 80086e4:	6829      	ldr	r1, [r5, #0]
 80086e6:	291d      	cmp	r1, #29
 80086e8:	d82b      	bhi.n	8008742 <__sflush_r+0xb2>
 80086ea:	4a2a      	ldr	r2, [pc, #168]	@ (8008794 <__sflush_r+0x104>)
 80086ec:	410a      	asrs	r2, r1
 80086ee:	07d6      	lsls	r6, r2, #31
 80086f0:	d427      	bmi.n	8008742 <__sflush_r+0xb2>
 80086f2:	2200      	movs	r2, #0
 80086f4:	6062      	str	r2, [r4, #4]
 80086f6:	04d9      	lsls	r1, r3, #19
 80086f8:	6922      	ldr	r2, [r4, #16]
 80086fa:	6022      	str	r2, [r4, #0]
 80086fc:	d504      	bpl.n	8008708 <__sflush_r+0x78>
 80086fe:	1c42      	adds	r2, r0, #1
 8008700:	d101      	bne.n	8008706 <__sflush_r+0x76>
 8008702:	682b      	ldr	r3, [r5, #0]
 8008704:	b903      	cbnz	r3, 8008708 <__sflush_r+0x78>
 8008706:	6560      	str	r0, [r4, #84]	@ 0x54
 8008708:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800870a:	602f      	str	r7, [r5, #0]
 800870c:	b1b9      	cbz	r1, 800873e <__sflush_r+0xae>
 800870e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008712:	4299      	cmp	r1, r3
 8008714:	d002      	beq.n	800871c <__sflush_r+0x8c>
 8008716:	4628      	mov	r0, r5
 8008718:	f7ff fbf2 	bl	8007f00 <_free_r>
 800871c:	2300      	movs	r3, #0
 800871e:	6363      	str	r3, [r4, #52]	@ 0x34
 8008720:	e00d      	b.n	800873e <__sflush_r+0xae>
 8008722:	2301      	movs	r3, #1
 8008724:	4628      	mov	r0, r5
 8008726:	47b0      	blx	r6
 8008728:	4602      	mov	r2, r0
 800872a:	1c50      	adds	r0, r2, #1
 800872c:	d1c9      	bne.n	80086c2 <__sflush_r+0x32>
 800872e:	682b      	ldr	r3, [r5, #0]
 8008730:	2b00      	cmp	r3, #0
 8008732:	d0c6      	beq.n	80086c2 <__sflush_r+0x32>
 8008734:	2b1d      	cmp	r3, #29
 8008736:	d001      	beq.n	800873c <__sflush_r+0xac>
 8008738:	2b16      	cmp	r3, #22
 800873a:	d11e      	bne.n	800877a <__sflush_r+0xea>
 800873c:	602f      	str	r7, [r5, #0]
 800873e:	2000      	movs	r0, #0
 8008740:	e022      	b.n	8008788 <__sflush_r+0xf8>
 8008742:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008746:	b21b      	sxth	r3, r3
 8008748:	e01b      	b.n	8008782 <__sflush_r+0xf2>
 800874a:	690f      	ldr	r7, [r1, #16]
 800874c:	2f00      	cmp	r7, #0
 800874e:	d0f6      	beq.n	800873e <__sflush_r+0xae>
 8008750:	0793      	lsls	r3, r2, #30
 8008752:	680e      	ldr	r6, [r1, #0]
 8008754:	bf08      	it	eq
 8008756:	694b      	ldreq	r3, [r1, #20]
 8008758:	600f      	str	r7, [r1, #0]
 800875a:	bf18      	it	ne
 800875c:	2300      	movne	r3, #0
 800875e:	eba6 0807 	sub.w	r8, r6, r7
 8008762:	608b      	str	r3, [r1, #8]
 8008764:	f1b8 0f00 	cmp.w	r8, #0
 8008768:	dde9      	ble.n	800873e <__sflush_r+0xae>
 800876a:	6a21      	ldr	r1, [r4, #32]
 800876c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800876e:	4643      	mov	r3, r8
 8008770:	463a      	mov	r2, r7
 8008772:	4628      	mov	r0, r5
 8008774:	47b0      	blx	r6
 8008776:	2800      	cmp	r0, #0
 8008778:	dc08      	bgt.n	800878c <__sflush_r+0xfc>
 800877a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800877e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008782:	81a3      	strh	r3, [r4, #12]
 8008784:	f04f 30ff 	mov.w	r0, #4294967295
 8008788:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800878c:	4407      	add	r7, r0
 800878e:	eba8 0800 	sub.w	r8, r8, r0
 8008792:	e7e7      	b.n	8008764 <__sflush_r+0xd4>
 8008794:	dfbffffe 	.word	0xdfbffffe

08008798 <_fflush_r>:
 8008798:	b538      	push	{r3, r4, r5, lr}
 800879a:	690b      	ldr	r3, [r1, #16]
 800879c:	4605      	mov	r5, r0
 800879e:	460c      	mov	r4, r1
 80087a0:	b913      	cbnz	r3, 80087a8 <_fflush_r+0x10>
 80087a2:	2500      	movs	r5, #0
 80087a4:	4628      	mov	r0, r5
 80087a6:	bd38      	pop	{r3, r4, r5, pc}
 80087a8:	b118      	cbz	r0, 80087b2 <_fflush_r+0x1a>
 80087aa:	6a03      	ldr	r3, [r0, #32]
 80087ac:	b90b      	cbnz	r3, 80087b2 <_fflush_r+0x1a>
 80087ae:	f7ff f949 	bl	8007a44 <__sinit>
 80087b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80087b6:	2b00      	cmp	r3, #0
 80087b8:	d0f3      	beq.n	80087a2 <_fflush_r+0xa>
 80087ba:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80087bc:	07d0      	lsls	r0, r2, #31
 80087be:	d404      	bmi.n	80087ca <_fflush_r+0x32>
 80087c0:	0599      	lsls	r1, r3, #22
 80087c2:	d402      	bmi.n	80087ca <_fflush_r+0x32>
 80087c4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80087c6:	f7ff fb8a 	bl	8007ede <__retarget_lock_acquire_recursive>
 80087ca:	4628      	mov	r0, r5
 80087cc:	4621      	mov	r1, r4
 80087ce:	f7ff ff5f 	bl	8008690 <__sflush_r>
 80087d2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80087d4:	07da      	lsls	r2, r3, #31
 80087d6:	4605      	mov	r5, r0
 80087d8:	d4e4      	bmi.n	80087a4 <_fflush_r+0xc>
 80087da:	89a3      	ldrh	r3, [r4, #12]
 80087dc:	059b      	lsls	r3, r3, #22
 80087de:	d4e1      	bmi.n	80087a4 <_fflush_r+0xc>
 80087e0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80087e2:	f7ff fb7d 	bl	8007ee0 <__retarget_lock_release_recursive>
 80087e6:	e7dd      	b.n	80087a4 <_fflush_r+0xc>

080087e8 <__swhatbuf_r>:
 80087e8:	b570      	push	{r4, r5, r6, lr}
 80087ea:	460c      	mov	r4, r1
 80087ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80087f0:	2900      	cmp	r1, #0
 80087f2:	b096      	sub	sp, #88	@ 0x58
 80087f4:	4615      	mov	r5, r2
 80087f6:	461e      	mov	r6, r3
 80087f8:	da0d      	bge.n	8008816 <__swhatbuf_r+0x2e>
 80087fa:	89a3      	ldrh	r3, [r4, #12]
 80087fc:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8008800:	f04f 0100 	mov.w	r1, #0
 8008804:	bf14      	ite	ne
 8008806:	2340      	movne	r3, #64	@ 0x40
 8008808:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800880c:	2000      	movs	r0, #0
 800880e:	6031      	str	r1, [r6, #0]
 8008810:	602b      	str	r3, [r5, #0]
 8008812:	b016      	add	sp, #88	@ 0x58
 8008814:	bd70      	pop	{r4, r5, r6, pc}
 8008816:	466a      	mov	r2, sp
 8008818:	f000 f848 	bl	80088ac <_fstat_r>
 800881c:	2800      	cmp	r0, #0
 800881e:	dbec      	blt.n	80087fa <__swhatbuf_r+0x12>
 8008820:	9901      	ldr	r1, [sp, #4]
 8008822:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8008826:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800882a:	4259      	negs	r1, r3
 800882c:	4159      	adcs	r1, r3
 800882e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008832:	e7eb      	b.n	800880c <__swhatbuf_r+0x24>

08008834 <__smakebuf_r>:
 8008834:	898b      	ldrh	r3, [r1, #12]
 8008836:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008838:	079d      	lsls	r5, r3, #30
 800883a:	4606      	mov	r6, r0
 800883c:	460c      	mov	r4, r1
 800883e:	d507      	bpl.n	8008850 <__smakebuf_r+0x1c>
 8008840:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8008844:	6023      	str	r3, [r4, #0]
 8008846:	6123      	str	r3, [r4, #16]
 8008848:	2301      	movs	r3, #1
 800884a:	6163      	str	r3, [r4, #20]
 800884c:	b003      	add	sp, #12
 800884e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008850:	ab01      	add	r3, sp, #4
 8008852:	466a      	mov	r2, sp
 8008854:	f7ff ffc8 	bl	80087e8 <__swhatbuf_r>
 8008858:	9f00      	ldr	r7, [sp, #0]
 800885a:	4605      	mov	r5, r0
 800885c:	4639      	mov	r1, r7
 800885e:	4630      	mov	r0, r6
 8008860:	f7ff fbba 	bl	8007fd8 <_malloc_r>
 8008864:	b948      	cbnz	r0, 800887a <__smakebuf_r+0x46>
 8008866:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800886a:	059a      	lsls	r2, r3, #22
 800886c:	d4ee      	bmi.n	800884c <__smakebuf_r+0x18>
 800886e:	f023 0303 	bic.w	r3, r3, #3
 8008872:	f043 0302 	orr.w	r3, r3, #2
 8008876:	81a3      	strh	r3, [r4, #12]
 8008878:	e7e2      	b.n	8008840 <__smakebuf_r+0xc>
 800887a:	89a3      	ldrh	r3, [r4, #12]
 800887c:	6020      	str	r0, [r4, #0]
 800887e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008882:	81a3      	strh	r3, [r4, #12]
 8008884:	9b01      	ldr	r3, [sp, #4]
 8008886:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800888a:	b15b      	cbz	r3, 80088a4 <__smakebuf_r+0x70>
 800888c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008890:	4630      	mov	r0, r6
 8008892:	f000 f81d 	bl	80088d0 <_isatty_r>
 8008896:	b128      	cbz	r0, 80088a4 <__smakebuf_r+0x70>
 8008898:	89a3      	ldrh	r3, [r4, #12]
 800889a:	f023 0303 	bic.w	r3, r3, #3
 800889e:	f043 0301 	orr.w	r3, r3, #1
 80088a2:	81a3      	strh	r3, [r4, #12]
 80088a4:	89a3      	ldrh	r3, [r4, #12]
 80088a6:	431d      	orrs	r5, r3
 80088a8:	81a5      	strh	r5, [r4, #12]
 80088aa:	e7cf      	b.n	800884c <__smakebuf_r+0x18>

080088ac <_fstat_r>:
 80088ac:	b538      	push	{r3, r4, r5, lr}
 80088ae:	4d07      	ldr	r5, [pc, #28]	@ (80088cc <_fstat_r+0x20>)
 80088b0:	2300      	movs	r3, #0
 80088b2:	4604      	mov	r4, r0
 80088b4:	4608      	mov	r0, r1
 80088b6:	4611      	mov	r1, r2
 80088b8:	602b      	str	r3, [r5, #0]
 80088ba:	f7f8 fb60 	bl	8000f7e <_fstat>
 80088be:	1c43      	adds	r3, r0, #1
 80088c0:	d102      	bne.n	80088c8 <_fstat_r+0x1c>
 80088c2:	682b      	ldr	r3, [r5, #0]
 80088c4:	b103      	cbz	r3, 80088c8 <_fstat_r+0x1c>
 80088c6:	6023      	str	r3, [r4, #0]
 80088c8:	bd38      	pop	{r3, r4, r5, pc}
 80088ca:	bf00      	nop
 80088cc:	20005358 	.word	0x20005358

080088d0 <_isatty_r>:
 80088d0:	b538      	push	{r3, r4, r5, lr}
 80088d2:	4d06      	ldr	r5, [pc, #24]	@ (80088ec <_isatty_r+0x1c>)
 80088d4:	2300      	movs	r3, #0
 80088d6:	4604      	mov	r4, r0
 80088d8:	4608      	mov	r0, r1
 80088da:	602b      	str	r3, [r5, #0]
 80088dc:	f7f8 fb5f 	bl	8000f9e <_isatty>
 80088e0:	1c43      	adds	r3, r0, #1
 80088e2:	d102      	bne.n	80088ea <_isatty_r+0x1a>
 80088e4:	682b      	ldr	r3, [r5, #0]
 80088e6:	b103      	cbz	r3, 80088ea <_isatty_r+0x1a>
 80088e8:	6023      	str	r3, [r4, #0]
 80088ea:	bd38      	pop	{r3, r4, r5, pc}
 80088ec:	20005358 	.word	0x20005358

080088f0 <_sbrk_r>:
 80088f0:	b538      	push	{r3, r4, r5, lr}
 80088f2:	4d06      	ldr	r5, [pc, #24]	@ (800890c <_sbrk_r+0x1c>)
 80088f4:	2300      	movs	r3, #0
 80088f6:	4604      	mov	r4, r0
 80088f8:	4608      	mov	r0, r1
 80088fa:	602b      	str	r3, [r5, #0]
 80088fc:	f7f8 fb68 	bl	8000fd0 <_sbrk>
 8008900:	1c43      	adds	r3, r0, #1
 8008902:	d102      	bne.n	800890a <_sbrk_r+0x1a>
 8008904:	682b      	ldr	r3, [r5, #0]
 8008906:	b103      	cbz	r3, 800890a <_sbrk_r+0x1a>
 8008908:	6023      	str	r3, [r4, #0]
 800890a:	bd38      	pop	{r3, r4, r5, pc}
 800890c:	20005358 	.word	0x20005358

08008910 <_init>:
 8008910:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008912:	bf00      	nop
 8008914:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008916:	bc08      	pop	{r3}
 8008918:	469e      	mov	lr, r3
 800891a:	4770      	bx	lr

0800891c <_fini>:
 800891c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800891e:	bf00      	nop
 8008920:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008922:	bc08      	pop	{r3}
 8008924:	469e      	mov	lr, r3
 8008926:	4770      	bx	lr
